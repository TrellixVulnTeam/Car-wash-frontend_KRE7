import { Injectable, Optional } from '@angular/core';
import Locals from './Locals';
import * as i0 from "@angular/core";
export class NgxEditorServiceConfig {
    constructor() {
        this.locals = {};
    }
}
NgxEditorServiceConfig.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: NgxEditorServiceConfig, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
NgxEditorServiceConfig.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: NgxEditorServiceConfig, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: NgxEditorServiceConfig, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }] });
export class NgxEditorService {
    constructor(config) {
        this.config = config;
    }
    get locals() {
        return new Locals(this.config.locals);
    }
}
NgxEditorService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: NgxEditorService, deps: [{ token: NgxEditorServiceConfig, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
NgxEditorService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: NgxEditorService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: NgxEditorService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: NgxEditorServiceConfig, decorators: [{
                    type: Optional
                }] }]; } });
export const provideMyServiceOptions = (config) => {
    return {
        locals: config.locals ?? {}
    };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWRpdG9yLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtZWRpdG9yL3NyYy9saWIvZWRpdG9yLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHckQsT0FBTyxNQUFNLE1BQU0sVUFBVSxDQUFDOztBQUs5QixNQUFNLE9BQU8sc0JBQXNCO0lBSG5DO1FBSVMsV0FBTSxHQUFHLEVBQUUsQ0FBQztLQUNwQjs7bUhBRlksc0JBQXNCO3VIQUF0QixzQkFBc0IsY0FGckIsTUFBTTsyRkFFUCxzQkFBc0I7a0JBSGxDLFVBQVU7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25COztBQVFELE1BQU0sT0FBTyxnQkFBZ0I7SUFHM0IsWUFBd0IsTUFBK0I7UUFDckQsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7SUFDdkIsQ0FBQztJQUVELElBQUksTUFBTTtRQUNSLE9BQU8sSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN4QyxDQUFDOzs2R0FUVSxnQkFBZ0Isa0JBR00sc0JBQXNCO2lIQUg1QyxnQkFBZ0IsY0FGZixNQUFNOzJGQUVQLGdCQUFnQjtrQkFINUIsVUFBVTttQkFBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkI7MERBSWtDLHNCQUFzQjswQkFBMUMsUUFBUTs7QUFTdkIsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUcsQ0FBQyxNQUF3QixFQUEwQixFQUFFO0lBQzFGLE9BQU87UUFDTCxNQUFNLEVBQUUsTUFBTSxDQUFDLE1BQU0sSUFBSSxFQUFFO0tBQzVCLENBQUM7QUFDSixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBPcHRpb25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBOZ3hFZGl0b3JDb25maWd9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IExvY2FscyBmcm9tICcuL0xvY2Fscyc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIE5neEVkaXRvclNlcnZpY2VDb25maWcge1xuICBwdWJsaWMgbG9jYWxzID0ge307XG59XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIE5neEVkaXRvclNlcnZpY2Uge1xuICBjb25maWc6IE5neEVkaXRvclNlcnZpY2VDb25maWc7XG5cbiAgY29uc3RydWN0b3IoQE9wdGlvbmFsKCkgY29uZmlnPzogTmd4RWRpdG9yU2VydmljZUNvbmZpZykge1xuICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuICB9XG5cbiAgZ2V0IGxvY2FscygpOiBMb2NhbHMge1xuICAgIHJldHVybiBuZXcgTG9jYWxzKHRoaXMuY29uZmlnLmxvY2Fscyk7XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IHByb3ZpZGVNeVNlcnZpY2VPcHRpb25zID0gKGNvbmZpZz86IE5neEVkaXRvckNvbmZpZyk6IE5neEVkaXRvclNlcnZpY2VDb25maWcgPT4ge1xuICByZXR1cm4ge1xuICAgIGxvY2FsczogY29uZmlnLmxvY2FscyA/PyB7fVxuICB9O1xufTtcbiJdfQ==