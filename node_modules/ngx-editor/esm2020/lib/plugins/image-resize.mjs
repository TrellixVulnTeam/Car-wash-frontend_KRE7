import { ApplicationRef, ComponentFactoryResolver } from '@angular/core';
import { NodeSelection, Plugin, PluginKey } from 'prosemirror-state';
import { ImageViewComponent } from '../components/image-view/image-view.component';
class ImageRezieView {
    constructor(node, view, getPos, injector) {
        this.updating = false;
        this.handleResize = () => {
            if (this.updating) {
                return;
            }
            const { state, dispatch } = this.view;
            const { tr } = state;
            const transaction = tr.setNodeMarkup(this.getPos(), undefined, {
                src: this.imageComponentRef.instance.src,
                width: this.imageComponentRef.instance.outerWidth
            });
            const resolvedPos = transaction.doc.resolve(this.getPos());
            const newSelection = new NodeSelection(resolvedPos);
            transaction.setSelection(newSelection);
            dispatch(transaction);
        };
        const dom = document.createElement('image-view');
        const componentFactoryResolver = injector.get(ComponentFactoryResolver);
        this.applicationRef = injector.get(ApplicationRef);
        // Create the component and wire it up with the element
        const factory = componentFactoryResolver.resolveComponentFactory(ImageViewComponent);
        this.imageComponentRef = factory.create(injector, [], dom);
        // Attach to the view so that the change detector knows to run
        this.applicationRef.attachView(this.imageComponentRef.hostView);
        this.setNodeAttributes(node.attrs);
        this.imageComponentRef.instance.view = view;
        this.dom = dom;
        this.view = view;
        this.node = node;
        this.getPos = getPos;
        this.resizeSubscription = this.imageComponentRef.instance.imageResize.subscribe(() => {
            this.handleResize();
        });
    }
    computeChanges(prevAttrs, newAttrs) {
        return JSON.stringify(prevAttrs) === JSON.stringify(newAttrs);
    }
    setNodeAttributes(attrs) {
        this.imageComponentRef.instance.src = attrs['src'];
        this.imageComponentRef.instance.alt = attrs['alt'];
        this.imageComponentRef.instance.title = attrs['title'];
        this.imageComponentRef.instance.outerWidth = attrs['width'];
    }
    update(node) {
        if (node.type !== this.node.type) {
            return false;
        }
        this.node = node;
        const changed = this.computeChanges(this.node.attrs, node.attrs);
        if (changed) {
            this.updating = true;
            this.setNodeAttributes(node.attrs);
            this.updating = false;
        }
        return true;
    }
    ignoreMutation() {
        return true;
    }
    selectNode() {
        this.imageComponentRef.instance.selected = true;
    }
    deselectNode() {
        this.imageComponentRef.instance.selected = false;
    }
    destroy() {
        this.resizeSubscription.unsubscribe();
        this.applicationRef.detachView(this.imageComponentRef.hostView);
    }
}
const imageResizePlugin = (injector) => {
    return new Plugin({
        key: new PluginKey('image-resize'),
        props: {
            nodeViews: {
                image: (node, view, getPos) => {
                    return new ImageRezieView(node, view, getPos, injector);
                },
            }
        }
    });
};
export default imageResizePlugin;
//# sourceMappingURL=data:application/json;base64,