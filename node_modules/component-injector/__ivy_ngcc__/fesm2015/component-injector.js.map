{"version":3,"file":"component-injector.js","sources":["component-injector/lib/component-injector.ts","component-injector/lib/component-injector.module.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Component,\n  ComponentFactory,\n  ComponentFactoryResolver, ComponentRef,\n  Injectable,\n  Type,\n  ViewContainerRef\n} from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ComponentInjector {\n  public static entryComponentsFactories: ComponentFactory<any>[] = [];\n\n\n  constructor(private resolver: ComponentFactoryResolver) {\n\n  }\n\n  public setComponentFactories(componentsList: Type<Component>[]): void {\n    if (componentsList) {\n      componentsList.forEach((component: Type<Component>) => {\n        let factory = this.resolver.resolveComponentFactory(component);\n        if (factory) {\n          ComponentInjector.entryComponentsFactories.push(factory);\n        }\n      });\n    }\n  }\n\n  inject(container: ViewContainerRef, componentSelector: string): ComponentRef<any> | null {\n    let componentFactory: ComponentFactory<any> = this.getComponentFactory(componentSelector);\n    if (componentFactory) {\n      return this.injectComponentFactory(container, componentFactory);\n    }\n    else {\n      console.warn('Component [' + componentSelector + '] cannot be found! ' +\n        'Make sure it is included in the `entryComponents` list.');\n    }\n\n    return null;\n  }\n\n  setProperties(componentRef: ComponentRef<any>, properties: any): void {\n    if (componentRef) {\n      for (let property in properties) {\n        if (properties.hasOwnProperty(property)) {\n          componentRef.instance[property] = properties[property];\n        }\n      }\n    }\n  }\n\n  remove(componentRef: ComponentRef<any> | null): void {\n    if (componentRef) {\n      componentRef.destroy();\n    }\n    componentRef = null;\n  }\n\n  protected getComponentFactory(componentSelector: string): ComponentFactory<any> {\n    let factories = ComponentInjector.entryComponentsFactories;\n    let componentFactory: any = factories.find((component: any) => {\n      return component.selector === componentSelector;\n    });\n\n    return componentFactory ? componentFactory : null;\n  }\n\n  protected injectComponentFactory(container: ViewContainerRef, componentFactory: ComponentFactory<any>): ComponentRef<any> {\n    return container.createComponent(componentFactory);\n  }\n}\n","import { NgModule } from '@angular/core';\n\n@NgModule({\n  declarations: [],\n  imports: [],\n  exports: []\n})\nexport class ComponentInjectorModule { }\n"]}