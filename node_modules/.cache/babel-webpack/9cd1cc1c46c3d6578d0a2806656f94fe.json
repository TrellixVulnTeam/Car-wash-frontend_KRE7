{"ast":null,"code":"import { Browser, ChildProperty, Collection, Component, Draggable, Event, EventHandler, NotifyPropertyChanges, Property, SanitizeHtmlHelper, addClass, append, closest, compile, detach, extend, formatUnit, getValue, isNullOrUndefined, isUndefined, removeClass, select, selectAll, setStyleAttribute, setValue } from '@syncfusion/ej2-base';\n\nvar __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nconst ROOT = 'e-splitter';\nconst HORIZONTAL_PANE = 'e-splitter-horizontal';\nconst VERTICAL_PANE = 'e-splitter-vertical';\nconst PANE = 'e-pane';\nconst SPLIT_H_PANE = 'e-pane-horizontal';\nconst SPLIT_V_PANE = 'e-pane-vertical';\nconst SPLIT_BAR = 'e-split-bar';\nconst SPLIT_H_BAR = 'e-split-bar-horizontal';\nconst SPLIT_V_BAR = 'e-split-bar-vertical';\nconst STATIC_PANE = 'e-static-pane';\nconst SCROLL_PANE = 'e-scrollable';\nconst RESIZE_BAR = 'e-resize-handler';\nconst RESIZABLE_BAR = 'e-resizable-split-bar';\nconst SPLIT_BAR_HOVER = 'e-split-bar-hover';\nconst SPLIT_BAR_ACTIVE = 'e-split-bar-active';\nconst HIDE_HANDLER = 'e-hide-handler';\nconst SPLIT_TOUCH = 'e-splitter-touch';\nconst DISABLED = 'e-disabled';\nconst RTL = 'e-rtl';\nconst E_ICONS = 'e-icons';\nconst COLLAPSIBLE = 'e-collapsible';\nconst NAVIGATE_ARROW = 'e-navigate-arrow';\nconst ARROW_RIGHT = 'e-arrow-right';\nconst ARROW_LEFT = 'e-arrow-left';\nconst ARROW_UP = 'e-arrow-up';\nconst ARROW_DOWN = 'e-arrow-down';\nconst HIDE_ICON = 'e-icon-hidden';\nconst EXPAND_PANE = 'e-expanded';\nconst COLLAPSE_PANE = 'e-collapsed';\nconst PANE_HIDDEN = 'e-pane-hidden';\nconst RESIZABLE_PANE = 'e-resizable';\nconst LAST_BAR = 'e-last-bar';\nconst BAR_SIZE_DEFAULT = 1;\n/**\n * Interface to configure pane properties such as its content, size, min, max, resizable, collapsed and collapsible.\n */\n\nlet PaneProperties = /*#__PURE__*/(() => {\n  class PaneProperties extends ChildProperty {}\n\n  __decorate([Property()], PaneProperties.prototype, \"size\", void 0);\n\n  __decorate([Property(false)], PaneProperties.prototype, \"collapsible\", void 0);\n\n  __decorate([Property(false)], PaneProperties.prototype, \"collapsed\", void 0);\n\n  __decorate([Property(true)], PaneProperties.prototype, \"resizable\", void 0);\n\n  __decorate([Property(null)], PaneProperties.prototype, \"min\", void 0);\n\n  __decorate([Property(null)], PaneProperties.prototype, \"max\", void 0);\n\n  __decorate([Property()], PaneProperties.prototype, \"content\", void 0);\n\n  __decorate([Property('')], PaneProperties.prototype, \"cssClass\", void 0);\n  /**\n   * Splitter is a layout user interface (UI) control that has resizable and collapsible split panes.\n   * The container can be split into multiple panes, which are oriented horizontally or vertically.\n   * The separator (divider) splits the panes and resizes and expands/collapses the panes.\n   * The splitter is placed inside the split pane to make a nested layout user interface.\n   *\n   * ```html\n   * <div id=\"splitter\">\n   *  <div> Left Pane </div>\n   *  <div> Center Pane </div>\n   *  <div> Right Pane </div>\n   * </div>\n   * ```\n   * ```typescript\n   * <script>\n   *   var splitterObj = new Splitter({ width: '300px', height: '200px'});\n   *   splitterObj.appendTo('#splitter');\n   * </script>\n   * ```\n   */\n\n\n  return PaneProperties;\n})();\nlet Splitter = /*#__PURE__*/(() => {\n  let Splitter = class Splitter extends Component {\n    /**\n     * Initializes a new instance of the Splitter class.\n     *\n     * @param options  - Specifies Splitter model properties as options.\n     * @param element  - Specifies the element that is rendered as an Splitter.\n     */\n    constructor(options, element) {\n      super(options, element);\n      this.allPanes = [];\n      this.paneOrder = [];\n      this.separatorOrder = [];\n      this.allBars = [];\n      this.previousCoordinates = {};\n      this.currentCoordinates = {};\n      this.updatePrePaneInPercentage = false;\n      this.updateNextPaneInPercentage = false;\n      this.panesDimensions = [];\n      this.border = 0;\n      this.validDataAttributes = ['data-size', 'data-min', 'data-max', 'data-collapsible', 'data-resizable', 'data-content', 'data-collapsed'];\n      this.validElementAttributes = ['data-orientation', 'data-width', 'data-height'];\n      this.iconsDelay = 300;\n      this.templateElement = [];\n      this.collapseFlag = false;\n      this.expandFlag = true;\n    }\n    /**\n     * Gets called when the model property changes.The data that describes the old and new values of the property that changed.\n     *\n     * @param  {SplitterModel} newProp - specifies the new property\n     * @param  {SplitterModel} oldProp - specifies the old property\n     * @returns {void}\n     * @private\n     */\n\n\n    onPropertyChanged(newProp, oldProp) {\n      if (!this.element.classList.contains(ROOT)) {\n        return;\n      }\n\n      for (const prop of Object.keys(newProp)) {\n        switch (prop) {\n          case 'height':\n            this.setSplitterSize(this.element, newProp.height, 'height');\n            break;\n\n          case 'width':\n            this.setSplitterSize(this.element, newProp.width, 'width');\n            break;\n\n          case 'cssClass':\n            this.setCssClass(this.element, newProp.cssClass);\n            break;\n\n          case 'enabled':\n            this.isEnabled(this.enabled);\n            break;\n\n          case 'enableReversePanes':\n            this.setReversePane();\n            break;\n\n          case 'separatorSize':\n            this.setSeparatorSize(newProp.separatorSize);\n            break;\n\n          case 'orientation':\n            this.changeOrientation(newProp.orientation);\n            break;\n\n          case 'paneSettings':\n            {\n              if (!(newProp.paneSettings instanceof Array && oldProp.paneSettings instanceof Array)) {\n                const paneCounts = Object.keys(newProp.paneSettings);\n\n                for (let i = 0; i < paneCounts.length; i++) {\n                  const index = parseInt(Object.keys(newProp.paneSettings)[i], 10);\n                  const changedPropsCount = Object.keys(newProp.paneSettings[index]).length;\n\n                  for (let j = 0; j < changedPropsCount; j++) {\n                    const property = Object.keys(newProp.paneSettings[index])[j];\n\n                    switch (property) {\n                      case 'content':\n                        {\n                          const newValue = Object(newProp.paneSettings[index])[property];\n\n                          if (!isNullOrUndefined(newValue)) {\n                            this.allPanes[index].innerHTML = '';\n                            this.setTemplate(newValue, this.allPanes[index]);\n                          }\n\n                          break;\n                        }\n\n                      case 'resizable':\n                        {\n                          const newVal = Object(newProp.paneSettings[index])[property];\n                          this.resizableModel(index, newVal);\n                          break;\n                        }\n\n                      case 'collapsible':\n                        this.collapsibleModelUpdate(index);\n                        break;\n\n                      case 'collapsed':\n                        // eslint-disable-next-line\n                        newProp.paneSettings[index].collapsed ? this.isCollapsed(index) : this.collapsedOnchange(index);\n                        break;\n\n                      case 'cssClass':\n                        this.setCssClass(this.allPanes[index], newProp.paneSettings[index].cssClass);\n                        break;\n\n                      case 'size':\n                        {\n                          const newValSize = Object(newProp.paneSettings[index])[property];\n\n                          if (newValSize !== '' && !isNullOrUndefined(newValSize)) {\n                            this.updatePaneSize(newValSize, index);\n                          }\n\n                          break;\n                        }\n                    }\n                  }\n                }\n              } else {\n                this.destroyPaneSettings();\n                this.allBars = [];\n                this.allPanes = [];\n                this.createSplitPane(this.element);\n                this.addSeparator(this.element);\n                this.getPanesDimensions();\n                this.setRTL(this.enableRtl);\n                this.isCollapsed();\n              }\n\n              break;\n            }\n\n          case 'enableRtl':\n            this.setRTL(newProp.enableRtl);\n            break;\n        }\n      }\n    }\n\n    updatePaneSize(newValSize, index) {\n      this.allPanes[index].style.flexBasis = newValSize;\n      const flexPaneIndexes = [];\n      let staticPaneWidth;\n      let flexCount = 0;\n\n      for (let i = 0; i < this.allPanes.length; i++) {\n        if (!this.paneSettings[i].size && !(this.allPanes[i].innerText === '')) {\n          flexPaneIndexes[flexCount] = i;\n          flexCount++;\n        } else if (this.paneSettings[i].size) {\n          staticPaneWidth = this.orientation === 'Horizontal' ? this.allPanes[index].offsetWidth : this.allPanes[index].offsetHeight;\n        }\n      }\n\n      staticPaneWidth = this.orientation === 'Horizontal' ? this.allBars[0].offsetWidth * this.allBars.length + staticPaneWidth : this.allBars[0].offsetHeight * this.allBars.length + staticPaneWidth;\n      const flexPaneWidth = (this.orientation === 'Horizontal' ? this.element.offsetWidth : this.element.offsetHeight) - staticPaneWidth - this.border * 2;\n      const avgDiffWidth = flexPaneWidth / flexPaneIndexes.length;\n\n      for (let j = 0; j < flexPaneIndexes.length; j++) {\n        this.allPanes[flexPaneIndexes[j]].style.flexBasis = avgDiffWidth + 'px';\n      }\n\n      this.allPanes[index].classList.add(STATIC_PANE);\n    }\n\n    preRender() {\n      this.onReportWindowSize = this.reportWindowSize.bind(this);\n      this.onMouseMoveHandler = this.onMouseMove.bind(this);\n      this.onMouseUpHandler = this.onMouseUp.bind(this);\n      this.onTouchMoveHandler = this.onMouseMove.bind(this);\n      this.onTouchEndHandler = this.onMouseUp.bind(this);\n      this.wrapper = this.element.cloneNode(true);\n      this.wrapperParent = this.element.parentElement;\n      removeClass([this.wrapper], ['e-control', 'e-lib', ROOT]);\n      const orientation = this.orientation === 'Horizontal' ? HORIZONTAL_PANE : VERTICAL_PANE;\n      addClass([this.element], orientation);\n      const name = Browser.info.name;\n      const css = name === 'msie' ? 'e-ie' : '';\n      this.setCssClass(this.element, css);\n\n      if (Browser.isDevice) {\n        addClass([this.element], SPLIT_TOUCH);\n      }\n    }\n\n    getPersistData() {\n      return this.addOnPersist(['paneSettings']);\n    }\n    /**\n     * Returns the current module name.\n     *\n     * @returns {string} - returns the string value\n     * @private\n     */\n\n\n    getModuleName() {\n      return 'splitter';\n    }\n    /**\n     * To Initialize the control rendering\n     *\n     * @returns {void}\n     * @private\n     */\n\n\n    render() {\n      this.checkDataAttributes();\n      this.setCssClass(this.element, this.cssClass);\n      this.isEnabled(this.enabled);\n      this.setDimension(this.getHeight(this.element), this.getWidth(this.element));\n      this.createSplitPane(this.element);\n      this.addSeparator(this.element);\n      this.getPanesDimensions();\n      this.setPaneSettings();\n      this.setRTL(this.enableRtl);\n\n      if (this.enableReversePanes) {\n        this.setReversePane();\n      }\n\n      this.collapseFlag = true;\n      this.isCollapsed();\n      this.collapseFlag = false;\n      EventHandler.add(document, 'touchstart click', this.onDocumentClick, this);\n      this.renderComplete();\n      this.element.ownerDocument.defaultView.addEventListener('resize', this.onReportWindowSize, true);\n      EventHandler.add(this.element, 'keydown', this.onMove, this);\n    }\n\n    onDocumentClick(e) {\n      if (!e.target.classList.contains(SPLIT_BAR) && !isNullOrUndefined(this.currentSeparator)) {\n        this.currentSeparator.classList.remove(SPLIT_BAR_HOVER);\n        this.currentSeparator.classList.remove(SPLIT_BAR_ACTIVE);\n      }\n    }\n\n    checkPaneSize(e) {\n      const prePaneSize = this.orientation === 'Horizontal' ? this.previousPane.offsetWidth : this.previousPane.offsetHeight;\n      const nextPaneSize = this.orientation === 'Horizontal' ? this.nextPane.offsetWidth : this.nextPane.offsetHeight;\n      const splitBarSize = isNullOrUndefined(this.separatorSize) ? BAR_SIZE_DEFAULT : this.separatorSize;\n\n      if (this.previousPane.style.flexBasis.indexOf('%') > 0 || this.nextPane.style.flexBasis.indexOf('%') > 0) {\n        const previousFlexBasis = this.updatePaneFlexBasis(this.previousPane);\n        const nextFlexBasis = this.updatePaneFlexBasis(this.nextPane);\n        this.totalPercent = previousFlexBasis + nextFlexBasis;\n        this.totalWidth = this.convertPercentageToPixel(this.totalPercent + '%');\n\n        if (e.type === 'keydown' && !isNullOrUndefined(e.keyCode)) {\n          if ((e.keyCode === 39 || e.keyCode === 40) && nextPaneSize > 0 && this.getMinInPixel(this.paneSettings[this.nextPaneIndex].min) < this.convertPercentageToPixel(nextFlexBasis - 1 + '%')) {\n            this.previousPane.style.flexBasis = previousFlexBasis + 1 + '%';\n            this.nextPane.style.flexBasis = nextFlexBasis - 1 + '%';\n          } else if ((e.keyCode === 37 || e.keyCode === 38) && prePaneSize > 0 && this.getMinInPixel(this.paneSettings[this.prevPaneIndex].min) < this.convertPercentageToPixel(previousFlexBasis - 1 + '%')) {\n            this.previousPane.style.flexBasis = previousFlexBasis - 1 + '%';\n            this.nextPane.style.flexBasis = nextFlexBasis + 1 + '%';\n          }\n        }\n      } else {\n        this.totalWidth = this.orientation === 'Horizontal' ? this.previousPane.offsetWidth + this.nextPane.offsetWidth : this.previousPane.offsetHeight + this.nextPane.offsetHeight;\n\n        if (e.type === 'keydown' && !isNullOrUndefined(e.keyCode)) {\n          if ((e.keyCode === 39 || e.keyCode === 40) && nextPaneSize > 0 && this.getMinInPixel(this.paneSettings[this.nextPaneIndex].min) < nextPaneSize + splitBarSize) {\n            this.addStaticPaneClass();\n            this.previousPane.style.flexBasis = prePaneSize + splitBarSize + 'px';\n            this.nextPane.style.flexBasis = nextPaneSize < splitBarSize ? '0px' : nextPaneSize - splitBarSize + 'px';\n          } else if ((e.keyCode === 37 || e.keyCode === 38) && prePaneSize > 0 && this.getMinInPixel(this.paneSettings[this.prevPaneIndex].min) < prePaneSize - splitBarSize) {\n            this.addStaticPaneClass();\n            this.previousPane.style.flexBasis = prePaneSize < splitBarSize ? '0px' : prePaneSize - splitBarSize + 'px';\n            this.nextPane.style.flexBasis = nextPaneSize + splitBarSize + 'px';\n          }\n        }\n      }\n    }\n\n    onMove(event) {\n      if (this.allPanes.length > 1) {\n        const index = this.getSeparatorIndex(this.currentSeparator);\n        const isPrevpaneCollapsed = this.previousPane.classList.contains(COLLAPSE_PANE);\n        const isPrevpaneExpanded = this.previousPane.classList.contains(EXPAND_PANE);\n        const isNextpaneCollapsed = this.nextPane.classList.contains(COLLAPSE_PANE);\n\n        if ((this.orientation !== 'Horizontal' && event.keyCode === 38 || this.orientation === 'Horizontal' && event.keyCode === 39 || this.orientation === 'Horizontal' && event.keyCode === 37 || this.orientation !== 'Horizontal' && event.keyCode === 40) && (!isPrevpaneExpanded && !isNextpaneCollapsed && !isPrevpaneCollapsed || isPrevpaneExpanded && !isNextpaneCollapsed) && document.activeElement.classList.contains(SPLIT_BAR) && this.paneSettings[index].resizable && this.paneSettings[index + 1].resizable) {\n          event.preventDefault();\n          this.checkPaneSize(event);\n          this.triggerResizing(event);\n        } else if (event.keyCode === 13 && this.paneSettings[index].collapsible && document.activeElement.classList.contains(SPLIT_BAR) && this.currentSeparator.classList.contains(SPLIT_BAR_ACTIVE)) {\n          if (!this.previousPane.classList.contains(COLLAPSE_PANE)) {\n            this.collapse(index);\n            addClass([this.currentSeparator], SPLIT_BAR_ACTIVE);\n          } else {\n            this.expand(index);\n            addClass([this.currentSeparator], SPLIT_BAR_ACTIVE);\n          }\n        }\n      }\n    }\n\n    getMinInPixel(minValue) {\n      let min;\n\n      if (isNullOrUndefined(minValue)) {\n        return 0;\n      }\n\n      let paneMinRange = this.convertPixelToNumber(minValue.toString());\n\n      if (minValue.indexOf('%') > 0) {\n        paneMinRange = this.convertPercentageToPixel(minValue);\n      }\n\n      min = this.convertPixelToNumber(paneMinRange.toString());\n      return min;\n    }\n    /**\n     * @param {string} value - specifies the string value\n     * @returns {string} returns the string\n     * @hidden\n     */\n\n\n    sanitizeHelper(value) {\n      if (this.enableHtmlSanitizer) {\n        const item = SanitizeHtmlHelper.beforeSanitize();\n        const beforeEvent = {\n          cancel: false,\n          helper: null\n        };\n        extend(item, item, beforeEvent);\n        this.trigger('beforeSanitizeHtml', item);\n\n        if (item.cancel && !isNullOrUndefined(item.helper)) {\n          value = item.helper(value);\n        } else if (!item.cancel) {\n          value = SanitizeHtmlHelper.serializeValue(item, value);\n        }\n      }\n\n      return value;\n    }\n\n    checkDataAttributes() {\n      let api;\n      let value; // Element values\n\n      for (let dataIndex = 0; dataIndex < this.validElementAttributes.length; dataIndex++) {\n        value = this.element.getAttribute(this.validElementAttributes[dataIndex]);\n\n        if (!isNullOrUndefined(value)) {\n          api = this.removeDataPrefix(this.validElementAttributes[dataIndex]); // eslint-disable-next-line\n\n          this[api] = value;\n        }\n      } // Pane values\n\n\n      for (let paneIndex = 0; paneIndex < this.element.children.length; paneIndex++) {\n        for (let dataAttr = 0; dataAttr < this.validDataAttributes.length; dataAttr++) {\n          value = this.element.children[paneIndex].getAttribute(this.validDataAttributes[dataAttr]);\n\n          if (!isNullOrUndefined(value)) {\n            api = this.removeDataPrefix(this.validDataAttributes[dataAttr]);\n            value = api === 'collapsible' || api === 'resizable' ? value === 'true' : value;\n\n            if (isNullOrUndefined(this.paneSettings[paneIndex])) {\n              this.paneSettings[paneIndex] = {\n                size: '',\n                min: null,\n                max: null,\n                content: '',\n                resizable: true,\n                collapsible: false,\n                collapsed: false\n              };\n            } // eslint-disable-next-line\n\n\n            let paneAPI = this.paneSettings[paneIndex][api];\n\n            if (api === 'resizable' || api === 'collapsible' || api === 'collapsed') {\n              // eslint-disable-next-line\n              this.paneSettings[paneIndex][api] = value;\n            }\n\n            if (isNullOrUndefined(paneAPI) || paneAPI === '') {\n              // eslint-disable-next-line\n              this.paneSettings[paneIndex][api] = value;\n            }\n          }\n        }\n      }\n    }\n\n    destroyPaneSettings() {\n      [].slice.call(this.element.children).forEach(el => {\n        detach(el);\n      });\n      this.restoreElem();\n    }\n\n    setPaneSettings() {\n      const childCount = this.allPanes.length;\n      const paneCollection = [];\n      const paneValue = {\n        size: '',\n        min: null,\n        max: null,\n        content: '',\n        resizable: true,\n        collapsed: false,\n        collapsible: false,\n        cssClass: ''\n      };\n\n      for (let i = 0; i < childCount; i++) {\n        if (isNullOrUndefined(this.paneSettings[i])) {\n          paneCollection[i] = paneValue;\n        } else {\n          paneCollection[i] = this.paneSettings[i];\n        }\n      }\n\n      this.setProperties({\n        'paneSettings': paneCollection\n      }, true);\n    }\n\n    checkArrow(paneIndex, targetArrow) {\n      return this.allBars[paneIndex].querySelector('.' + NAVIGATE_ARROW + '.' + targetArrow);\n    }\n\n    removeDataPrefix(attribute) {\n      return attribute.slice(attribute.lastIndexOf('-') + 1);\n    }\n\n    setRTL(rtl) {\n      // eslint-disable-next-line\n      rtl ? addClass([this.element], RTL) : removeClass([this.element], RTL);\n    }\n\n    setReversePane() {\n      this.allPanes = this.allPanes.reverse();\n      this.allBars = this.allBars.reverse();\n      addClass([this.allBars[this.allBars.length - 1]], LAST_BAR);\n      removeClass([this.allBars[0]], LAST_BAR);\n      this.setProperties({\n        'paneSettings': this.paneSettings.reverse()\n      }, true);\n\n      if (this.enableReversePanes) {\n        this.element.setAttribute('dir', 'rtl');\n      } else {\n        this.element.removeAttribute('dir');\n      }\n    }\n\n    setSplitterSize(element, size, property) {\n      const style = property === 'width' ? {\n        'width': formatUnit(size)\n      } : {\n        'height': formatUnit(size)\n      };\n      setStyleAttribute(element, style);\n    }\n\n    getPanesDimensions() {\n      for (let index = 0; index < this.allPanes.length; index++) {\n        // eslint-disable-next-line\n        this.orientation === 'Horizontal' ? this.panesDimensions.push(this.allPanes[index].getBoundingClientRect().width) : this.panesDimensions.push(this.allPanes[index].getBoundingClientRect().height);\n      }\n    }\n\n    setCssClass(element, className) {\n      if (className) {\n        addClass([element], className.split(className.indexOf(',') > -1 ? ',' : ' '));\n      }\n    }\n\n    hideResizer(target) {\n      addClass([select('.' + RESIZE_BAR, target)], HIDE_HANDLER);\n    }\n\n    showResizer(target) {\n      if (!isNullOrUndefined(this.previousPane) && this.previousPane.classList.contains(RESIZABLE_PANE) && !isNullOrUndefined(this.nextPane) && this.nextPane.classList.contains(RESIZABLE_PANE)) {\n        removeClass([select('.' + RESIZE_BAR, target)], HIDE_HANDLER);\n      }\n    }\n\n    resizableModel(index, newVal) {\n      const paneIndex = index === this.allBars.length ? index - 1 : index;\n      const i = index;\n      EventHandler.remove(this.allBars[paneIndex], 'mousedown', this.onMouseDown);\n\n      if (newVal) {\n        EventHandler.add(this.allBars[paneIndex], 'mousedown', this.onMouseDown, this);\n\n        if (this.isResizable()) {\n          this.showResizer(this.allBars[paneIndex]);\n          removeClass([select('.' + RESIZE_BAR, this.allBars[paneIndex])], HIDE_HANDLER);\n          this.allBars[paneIndex].classList.add(RESIZABLE_BAR); // eslint-disable-next-line\n\n          index === this.allBars.length ? this.allPanes[index].classList.add(RESIZABLE_PANE) : this.allPanes[paneIndex].classList.add(RESIZABLE_PANE);\n          this.updateResizablePanes(i);\n        }\n      } else {\n        this.updateResizablePanes(i);\n        this.hideResizer(this.allBars[paneIndex]);\n        this.allBars[paneIndex].classList.remove(RESIZABLE_BAR); // eslint-disable-next-line\n\n        index === this.allBars.length ? this.allPanes[index].classList.remove(RESIZABLE_PANE) : this.allPanes[paneIndex].classList.remove(RESIZABLE_PANE);\n      }\n    }\n\n    collapsibleModelUpdate(index) {\n      const paneIndex = index === this.allBars.length ? index - 1 : index;\n      const arrow2 = this.orientation === 'Horizontal' ? this.checkArrow(paneIndex, ARROW_LEFT) : this.checkArrow(paneIndex, ARROW_UP);\n      const arrow1 = this.orientation === 'Horizontal' ? this.checkArrow(paneIndex, ARROW_RIGHT) : this.checkArrow(paneIndex, ARROW_DOWN);\n      this.paneCollapsible(this.allPanes[index], index);\n      this.updateCollapseIcons(paneIndex, arrow1, arrow2);\n    }\n\n    collapseArrow(barIndex, arrow) {\n      return selectAll('.' + arrow, this.allBars[barIndex])[0];\n    }\n\n    updateIsCollapsed(index, collapseArrow, lastBarArrow) {\n      if (!isNullOrUndefined(index)) {\n        let targetEle;\n        const lastBarIndex = index === this.allBars.length;\n        const barIndex = lastBarIndex ? index - 1 : index;\n\n        if (!lastBarIndex && this.allPanes[index + 1].classList.contains(COLLAPSE_PANE) && index !== 0) {\n          targetEle = this.collapseArrow(barIndex - 1, lastBarArrow);\n        } else {\n          targetEle = lastBarIndex ? this.collapseArrow(barIndex, lastBarArrow) : this.collapseArrow(barIndex, collapseArrow);\n        }\n\n        targetEle.click();\n      }\n    }\n\n    isCollapsed(index) {\n      if (!isNullOrUndefined(index) && this.paneSettings[index].collapsed && isNullOrUndefined(this.allPanes[index].classList.contains(COLLAPSE_PANE))) {\n        return;\n      }\n\n      this.expandFlag = false;\n\n      if (!isNullOrUndefined(index)) {\n        this.collapseFlag = true;\n        let targetEle;\n        const lastBarIndex = index === this.allBars.length;\n        const barIndex = lastBarIndex ? index - 1 : index;\n\n        if (!lastBarIndex && this.allPanes[index + 1].classList.contains(COLLAPSE_PANE) && index !== 0) {\n          targetEle = this.collapseArrow(barIndex - 1, this.targetArrows().lastBarArrow);\n        } else {\n          targetEle = lastBarIndex ? this.collapseArrow(barIndex, this.targetArrows().lastBarArrow) : this.collapseArrow(barIndex, this.targetArrows().collapseArrow);\n        }\n\n        const event = {\n          target: targetEle\n        };\n        const eventArgs = this.beforeAction(event);\n        this.trigger('beforeCollapse', eventArgs, beforeCollapseArgs => {\n          if (!beforeCollapseArgs.cancel) {\n            let collapsedindex = [];\n            collapsedindex[0] = index;\n            let j = 1;\n\n            for (let i = 0; i < this.allPanes.length; i++) {\n              if (this.allPanes[i].classList.contains(COLLAPSE_PANE)) {\n                collapsedindex[j] = i;\n                j++;\n              }\n            }\n\n            collapsedindex = collapsedindex.sort();\n            this.updateIsCollapsed(index, this.targetArrows().collapseArrow, this.targetArrows().lastBarArrow);\n\n            for (let i = 0; i < collapsedindex.length; i++) {\n              if (!this.allPanes[collapsedindex[i]].classList.contains(COLLAPSE_PANE)) {\n                this.updateIsCollapsed(collapsedindex[i], this.targetArrows().collapseArrow, this.targetArrows().lastBarArrow);\n              }\n            }\n\n            for (let i = collapsedindex.length; i > 0; i--) {\n              if (!this.allPanes[collapsedindex[i - 1]].classList.contains(COLLAPSE_PANE)) {\n                const targetArrow = this.targetArrows();\n                this.updateIsCollapsed(collapsedindex[i - 1], targetArrow.collapseArrow, targetArrow.lastBarArrow);\n              }\n            }\n\n            const collapseEventArgs = this.afterAction(event);\n            this.trigger('collapsed', collapseEventArgs);\n            this.collapseFlag = false;\n          }\n        });\n      } else {\n        for (let m = 0; m < this.allPanes.length; m++) {\n          if (!isNullOrUndefined(this.paneSettings[m]) && this.paneSettings[m].collapsed) {\n            this.updateIsCollapsed(m, this.targetArrows().collapseArrow, this.targetArrows().lastBarArrow);\n          }\n        }\n\n        for (let m = this.allPanes.length - 1; m >= 0; m--) {\n          if (!isNullOrUndefined(this.paneSettings[m]) && this.paneSettings[m].collapsed && !this.allPanes[m].classList.contains(COLLAPSE_PANE)) {\n            const collapseArrow = this.orientation === 'Horizontal' ? ARROW_RIGHT : ARROW_DOWN;\n\n            if (m !== 0) {\n              const targetEle = this.collapseArrow(m - 1, collapseArrow);\n              targetEle.click();\n            }\n\n            if (!this.nextPane.classList.contains(COLLAPSE_PANE)) {\n              const targetEle = this.collapseArrow(m - 1, collapseArrow);\n              targetEle.click();\n            }\n          }\n        }\n      }\n\n      this.expandFlag = true;\n    }\n\n    targetArrows() {\n      this.splitterProperty();\n      return {\n        collapseArrow: this.orientation === 'Horizontal' ? ARROW_LEFT : ARROW_UP,\n        lastBarArrow: this.orientation === 'Vertical' ? ARROW_DOWN : ARROW_RIGHT\n      };\n    }\n\n    collapsedOnchange(index) {\n      if (!isNullOrUndefined(this.paneSettings[index]) && !isNullOrUndefined(this.paneSettings[index].collapsed) && this.allPanes[index].classList.contains(COLLAPSE_PANE)) {\n        this.updateIsCollapsed(index, this.targetArrows().lastBarArrow, this.targetArrows().collapseArrow);\n      }\n    }\n\n    isEnabled(enabled) {\n      // eslint-disable-next-line\n      enabled ? removeClass([this.element], DISABLED) : addClass([this.element], DISABLED);\n    }\n\n    setSeparatorSize(size) {\n      const sizeValue = isNullOrUndefined(size) ? 'auto' : size + 'px';\n      const separator = this.orientation === 'Horizontal' ? SPLIT_H_BAR : SPLIT_V_BAR;\n\n      for (let index = 0; index < this.allBars.length; index++) {\n        const splitBar = selectAll('.' + separator, this.element)[index];\n        const resizeBar = selectAll('.' + RESIZE_BAR, splitBar)[0];\n\n        if (this.orientation === 'Horizontal') {\n          splitBar.style.width = sizeValue;\n\n          if (!isNullOrUndefined(resizeBar)) {\n            resizeBar.style.width = sizeValue;\n          }\n        } else {\n          splitBar.style.height = sizeValue;\n\n          if (!isNullOrUndefined(resizeBar)) {\n            resizeBar.style.height = sizeValue;\n          }\n        }\n      }\n    }\n\n    changeOrientation(orientation) {\n      const isVertical = orientation === 'Vertical';\n      this.element.classList.remove(isVertical ? HORIZONTAL_PANE : VERTICAL_PANE);\n      this.element.classList.add(isVertical ? VERTICAL_PANE : HORIZONTAL_PANE);\n\n      for (let index = 0; index < this.allPanes.length; index++) {\n        this.allPanes[index].classList.remove(isVertical ? SPLIT_H_PANE : SPLIT_V_PANE);\n        this.allPanes[index].classList.add(isVertical ? SPLIT_V_PANE : SPLIT_H_PANE);\n      }\n\n      for (let index = 0; index < this.allBars.length; index++) {\n        detach(this.allBars[index]);\n      }\n\n      this.allBars = [];\n      this.addSeparator(this.element);\n    }\n\n    checkSplitPane(currentBar, elementIndex) {\n      const paneEle = this.collectPanes(currentBar.parentElement.children)[elementIndex];\n      return paneEle;\n    }\n\n    collectPanes(childNodes) {\n      const elements = [];\n\n      for (let i = 0; i < childNodes.length; i++) {\n        if (childNodes[i].classList.contains(PANE)) {\n          elements.push(childNodes[i]);\n        }\n      }\n\n      return elements;\n    }\n\n    getPrevPane(order) {\n      return this.enableReversePanes ? this.getOrderPane(order + 1) : this.getOrderPane(order - 1);\n    }\n\n    getNextPane(order) {\n      return this.enableReversePanes ? this.getOrderPane(order - 1) : this.getOrderPane(order + 1);\n    }\n\n    getOrderPane(order) {\n      let pane;\n\n      for (let i = 0; i < this.element.children.length; i++) {\n        if (parseInt(this.element.children[i].style.order, 10) === order) {\n          pane = this.element.children[i];\n        }\n      }\n\n      return pane;\n    }\n\n    getOrderIndex(order, type) {\n      let index;\n      let panes;\n\n      if (type === 'pane') {\n        panes = this.allPanes;\n      } else {\n        panes = this.allBars;\n      }\n\n      for (let i = 0; i < panes.length; i++) {\n        if (parseInt(panes[i].style.order, 10) === order) {\n          index = i;\n        }\n      }\n\n      return index;\n    }\n\n    updateSeparatorSize(resizeHanlder) {\n      const sizeValue = isNullOrUndefined(this.separatorSize) ? '1px' : this.separatorSize + 'px'; // eslint-disable-next-line\n\n      this.orientation === 'Horizontal' ? resizeHanlder.style.width = sizeValue : resizeHanlder.style.height = sizeValue;\n    }\n\n    addResizeHandler(currentBar) {\n      const resizeHanlder = this.createElement('div');\n      addClass([resizeHanlder], [RESIZE_BAR, E_ICONS]);\n      this.updateSeparatorSize(resizeHanlder);\n      currentBar.appendChild(resizeHanlder);\n    }\n\n    getHeight(target) {\n      let height = this.height;\n      height = target.style.height !== '' && this.height === '100%' ? target.style.height : this.height;\n      return height;\n    }\n\n    getWidth(target) {\n      let width = this.width;\n      width = target.style.width !== '' && this.width === '100%' ? target.style.width : this.width;\n      return width;\n    }\n\n    setDimension(height, width) {\n      setStyleAttribute(this.element, {\n        'height': height,\n        'width': width\n      });\n    }\n\n    updateCollapseIcons(index, arrow1, arrow2) {\n      if (!isNullOrUndefined(this.paneSettings[index])) {\n        if (!isNullOrUndefined(this.paneSettings[index].collapsible)) {\n          // eslint-disable-next-line\n          this.paneSettings[index].collapsible ? removeClass([arrow2], [HIDE_ICON]) : addClass([arrow2], [HIDE_ICON]);\n\n          if (!isNullOrUndefined(this.paneSettings[index + 1])) {\n            // eslint-disable-next-line\n            this.paneSettings[index + 1].collapsible ? removeClass([arrow1], [HIDE_ICON]) : addClass([arrow1], [HIDE_ICON]);\n          }\n\n          if (!isNullOrUndefined(this.paneSettings[index + 1])) {\n            if (this.paneSettings[index + 1].collapsible) {\n              // eslint-disable-next-line\n              this.paneSettings[index + 1].collapsible ? removeClass([arrow1], [HIDE_ICON]) : addClass([arrow1], [HIDE_ICON]);\n            }\n          }\n        }\n      }\n    }\n\n    updateIconClass() {\n      if (this.orientation === 'Horizontal') {\n        this.leftArrow = ARROW_LEFT;\n        this.rightArrow = ARROW_RIGHT;\n      } else {\n        this.leftArrow = ARROW_UP;\n        this.rightArrow = ARROW_DOWN;\n      }\n    }\n\n    createSeparator(i) {\n      const separator = this.createElement('div');\n      this.allBars.push(separator);\n      const arrow1 = this.createElement('button');\n      const arrow2 = this.createElement('button');\n      arrow1.setAttribute('tabindex', '-1');\n      arrow2.setAttribute('tabindex', '-1');\n      arrow1.setAttribute('aria-label', 'Toggle navigation');\n      arrow2.setAttribute('aria-label', 'Toggle navigation');\n      arrow1.setAttribute('type', 'button');\n      arrow2.setAttribute('type', 'button');\n      const size = isNullOrUndefined(this.separatorSize) ? '1px' : this.separatorSize + 'px'; // eslint-disable-next-line\n\n      const proxy = this;\n\n      if (this.orientation === 'Horizontal') {\n        this.updateIconClass();\n        addClass([arrow2], [NAVIGATE_ARROW, ARROW_LEFT, HIDE_ICON]);\n        addClass([arrow1], [NAVIGATE_ARROW, ARROW_RIGHT, HIDE_ICON]);\n        addClass([separator], [SPLIT_BAR, SPLIT_H_BAR]);\n        separator.style.width = size;\n      } else {\n        addClass([arrow1], [NAVIGATE_ARROW, ARROW_DOWN, HIDE_ICON]);\n        addClass([arrow2], [NAVIGATE_ARROW, ARROW_UP, HIDE_ICON]);\n        addClass([separator], [SPLIT_BAR, SPLIT_V_BAR]);\n        this.updateIconClass();\n        separator.style.height = size;\n      }\n\n      this.addMouseActions(separator);\n      separator.appendChild(arrow2);\n      this.addResizeHandler(separator);\n      separator.appendChild(arrow1);\n      this.updateCollapseIcons(i, arrow1, arrow2);\n      separator.setAttribute('tabindex', '0');\n\n      if (this.enableReversePanes) {\n        separator.setAttribute('dir', 'ltr');\n      } else {\n        separator.removeAttribute('dir');\n      }\n\n      separator.addEventListener('focus', () => {\n        separator.classList.add(SPLIT_BAR_ACTIVE);\n        proxy.currentSeparator = separator;\n        proxy.getPaneDetails();\n      });\n      separator.addEventListener('blur', () => {\n        separator.classList.remove(SPLIT_BAR_ACTIVE);\n      });\n      return separator;\n    }\n\n    updateResizablePanes(index) {\n      this.getPaneDetails(); // eslint-disable-next-line\n\n      this.isResizable() ? this.allPanes[index].classList.add(RESIZABLE_PANE) : this.allPanes[index].classList.remove(RESIZABLE_PANE);\n    }\n\n    addSeparator(target) {\n      const childCount = this.allPanes.length;\n      const clonedEle = target.children;\n      let separator;\n\n      for (let i = 0; i < childCount; i++) {\n        if (i < childCount - 1) {\n          separator = this.createSeparator(i);\n          setStyleAttribute(separator, {\n            'order': i * 2 + 1\n          });\n          this.separatorOrder.push(i * 2 + 1);\n          clonedEle[i].parentNode.appendChild(separator);\n          this.currentSeparator = separator;\n          separator.setAttribute('role', 'separator');\n          separator.setAttribute('aria-orientation', this.orientation.toLowerCase());\n          this.wireClickEvents();\n\n          if (!isNullOrUndefined(separator)) {\n            if (this.isResizable()) {\n              EventHandler.add(separator, 'mousedown', this.onMouseDown, this);\n              const eventName = Browser.info.name === 'msie' ? 'pointerdown' : 'touchstart';\n              EventHandler.add(separator, eventName, this.onMouseDown, this);\n              separator.classList.add(RESIZABLE_BAR);\n              this.updateResizablePanes(i);\n            } else {\n              addClass([select('.' + RESIZE_BAR, separator)], HIDE_HANDLER);\n            }\n          }\n        } else {\n          if (separator) {\n            addClass([separator], LAST_BAR);\n          }\n\n          if (childCount > 1) {\n            this.updateResizablePanes(i);\n          }\n        }\n      }\n\n      if (Browser.info.name === 'msie') {\n        const allBar = this.element.querySelectorAll('.e-splitter .e-resize-handler');\n\n        for (let i = 0; i < allBar.length; i++) {\n          const sepSize = isNullOrUndefined(this.separatorSize) ? 1 : this.separatorSize;\n          allBar[i].style.paddingLeft = sepSize / 2 + 'px';\n          allBar[i].style.paddingRight = sepSize / 2 + 'px';\n        }\n      }\n    }\n\n    isResizable() {\n      let resizable = false;\n\n      if (!isNullOrUndefined(this.paneSettings[this.getPreviousPaneIndex()]) && this.paneSettings[this.getPreviousPaneIndex()].resizable && !isNullOrUndefined(this.paneSettings[this.getNextPaneIndex()]) && this.paneSettings[this.getNextPaneIndex()].resizable || isNullOrUndefined(this.paneSettings[this.getNextPaneIndex()])) {\n        resizable = true;\n      }\n\n      return resizable;\n    }\n\n    addMouseActions(separator) {\n      let sTout;\n      let hoverTimeOut;\n      separator.addEventListener('mouseenter', () => {\n        /* istanbul ignore next */\n        sTout = setTimeout(() => {\n          addClass([separator], [SPLIT_BAR_HOVER]);\n        }, this.iconsDelay);\n      });\n      separator.addEventListener('mouseleave', () => {\n        clearTimeout(sTout);\n        removeClass([separator], [SPLIT_BAR_HOVER]);\n      });\n      separator.addEventListener('mouseout', () => {\n        clearTimeout(hoverTimeOut);\n      });\n      separator.addEventListener('mouseover', () => {\n        /* istanbul ignore next */\n        hoverTimeOut = setTimeout(() => {\n          addClass([separator], [SPLIT_BAR_HOVER]);\n        }, this.iconsDelay);\n      });\n    }\n\n    getEventType(e) {\n      return e.indexOf('mouse') > -1 ? 'mouse' : 'touch';\n    }\n\n    updateCurrentSeparator(target) {\n      this.currentSeparator = this.isSeparator(target) ? target.parentElement : target;\n    }\n\n    isSeparator(target) {\n      return target.classList.contains(SPLIT_BAR) ? false : true;\n    }\n\n    isMouseEvent(e) {\n      let isMouse = false;\n\n      if (this.getEventType(e.type) === 'mouse' || !isNullOrUndefined(e.pointerType) && this.getEventType(e.pointerType) === 'mouse') {\n        isMouse = true;\n      }\n\n      return isMouse;\n    }\n\n    updateCursorPosition(e, type) {\n      if (this.isMouseEvent(e)) {\n        this.changeCoordinates({\n          x: e.pageX,\n          y: e.pageY\n        }, type);\n      } else {\n        const eventType = Browser.info.name !== 'msie' ? e.touches[0] : e;\n        this.changeCoordinates({\n          x: eventType.pageX,\n          y: eventType.pageY\n        }, type);\n      }\n    }\n\n    changeCoordinates(coordinates, type) {\n      if (type === 'previous') {\n        this.previousCoordinates = coordinates;\n      } else {\n        this.currentCoordinates = coordinates;\n      }\n    }\n\n    reportWindowSize() {\n      const paneCount = this.allPanes.length;\n\n      if (!document.body.contains(this.element)) {\n        document.defaultView.removeEventListener('resize', this.onReportWindowSize);\n        return;\n      }\n\n      for (let i = 0; i < paneCount; i++) {\n        if (isNullOrUndefined(this.paneSettings[i].size)) {\n          this.allPanes[i].classList.remove(STATIC_PANE);\n        }\n\n        if (paneCount - 1 === i) {\n          const staticPaneCount = this.element.querySelectorAll('.' + STATIC_PANE).length;\n\n          if (staticPaneCount === paneCount) {\n            removeClass([this.allPanes[i]], STATIC_PANE);\n          }\n        }\n      }\n\n      if (paneCount > 0) {\n        setTimeout(() => {\n          this.updateSplitterSize(true);\n        }, 200);\n      }\n    }\n\n    updateSplitterSize(iswindowResize) {\n      let totalWidth = 0;\n      const flexPaneIndexes = [];\n      let flexCount = 0;\n      const children = this.element.children;\n\n      for (let i = 0; i < children.length; i++) {\n        totalWidth += this.orientation === 'Horizontal' ? children[i].offsetWidth : children[i].offsetHeight;\n      }\n\n      for (let j = 0; j < this.allBars.length; j++) {\n        totalWidth += this.orientation === 'Horizontal' ? parseInt(getComputedStyle(this.allBars[j]).marginLeft, 10) + parseInt(getComputedStyle(this.allBars[j]).marginLeft, 10) : parseInt(getComputedStyle(this.allBars[j]).marginTop, 10) + parseInt(getComputedStyle(this.allBars[j]).marginBottom, 10);\n      }\n\n      const diff = this.orientation === 'Horizontal' ? this.element.offsetWidth - (this.border * 2 + totalWidth) : this.element.offsetHeight - (this.border * 2 + totalWidth);\n\n      for (let i = 0; i < this.allPanes.length; i++) {\n        if (!this.paneSettings[i].size && !(this.allPanes[i].innerText === '')) {\n          flexPaneIndexes[flexCount] = i;\n          flexCount++;\n        }\n      }\n\n      const avgDiffWidth = diff / flexPaneIndexes.length;\n\n      for (let j = 0; j < flexPaneIndexes.length; j++) {\n        this.allPanes[flexPaneIndexes[j]].style.flexBasis = this.orientation === 'Horizontal' ? this.allPanes[flexPaneIndexes[j]].offsetWidth + avgDiffWidth + 'px' : this.allPanes[flexPaneIndexes[j]].offsetHeight + avgDiffWidth + 'px';\n      }\n\n      if (this.allPanes.length === 2 && iswindowResize) {\n        const paneCount = this.allPanes.length;\n        let minValue;\n        let paneMinRange;\n        const paneIndex = 0;\n        let updatePane;\n        let flexPane;\n\n        for (let i = 0; i < paneCount; i++) {\n          if (!isNullOrUndefined(this.paneSettings[i].min)) {\n            paneMinRange = this.convertPixelToNumber(this.paneSettings[i].min.toString());\n\n            if (this.paneSettings[i].min.indexOf('%') > 0) {\n              paneMinRange = this.convertPercentageToPixel(this.paneSettings[i].min);\n            }\n\n            minValue = this.convertPixelToNumber(paneMinRange.toString());\n\n            if (this.allPanes[i].offsetWidth < minValue) {\n              if (i === paneIndex) {\n                updatePane = this.allPanes[i];\n                flexPane = this.allPanes[i + 1];\n              } else {\n                updatePane = this.allPanes[i];\n                flexPane = this.allPanes[i - 1];\n              }\n\n              const sizeDiff = minValue - this.allPanes[i].offsetWidth;\n              const isPercent = updatePane.style.flexBasis.indexOf('%') > -1;\n              updatePane.style.flexBasis = isPercent ? this.convertPixelToPercentage(updatePane.offsetWidth + sizeDiff) + '%' : updatePane.offsetWidth + sizeDiff + 'px';\n              flexPane.style.flexBasis = flexPane.style.flexBasis.indexOf('%') > -1 ? this.convertPixelToPercentage(flexPane.offsetWidth - sizeDiff) + '%' : flexPane.offsetWidth - sizeDiff + 'px';\n            }\n          }\n        }\n      }\n    }\n\n    wireResizeEvents() {\n      document.addEventListener('mousemove', this.onMouseMoveHandler, true);\n      document.addEventListener('mouseup', this.onMouseUpHandler, true);\n      const touchMoveEvent = Browser.info.name === 'msie' ? 'pointermove' : 'touchmove';\n      const touchEndEvent = Browser.info.name === 'msie' ? 'pointerup' : 'touchend';\n      document.addEventListener(touchMoveEvent, this.onTouchMoveHandler, true);\n      document.addEventListener(touchEndEvent, this.onTouchEndHandler, true);\n    }\n\n    unwireResizeEvents() {\n      this.element.ownerDocument.defaultView.removeEventListener('resize', this.onReportWindowSize);\n      const touchMoveEvent = Browser.info.name === 'msie' ? 'pointermove' : 'touchmove';\n      const touchEndEvent = Browser.info.name === 'msie' ? 'pointerup' : 'touchend';\n      document.removeEventListener('mousemove', this.onMouseMoveHandler, true);\n      document.removeEventListener('mouseup', this.onMouseUpHandler, true);\n      document.removeEventListener(touchMoveEvent, this.onTouchMoveHandler, true);\n      document.removeEventListener(touchEndEvent, this.onTouchEndHandler, true);\n    }\n\n    wireClickEvents() {\n      EventHandler.add(this.currentSeparator, 'touchstart click', this.clickHandler, this);\n    }\n\n    clickHandler(e) {\n      if (!e.target.classList.contains(NAVIGATE_ARROW)) {\n        const hoverBars = selectAll('.' + ROOT + ' > .' + SPLIT_BAR + '.' + SPLIT_BAR_HOVER);\n\n        if (hoverBars.length > 0) {\n          removeClass(hoverBars, SPLIT_BAR_HOVER);\n        }\n\n        e.target.classList.add(SPLIT_BAR_HOVER);\n      }\n\n      const icon = e.target;\n\n      if (icon.classList.contains(ARROW_LEFT) || icon.classList.contains(ARROW_UP)) {\n        this.collapseAction(e);\n      }\n\n      if (icon.classList.contains(ARROW_RIGHT) || icon.classList.contains(ARROW_DOWN)) {\n        this.expandAction(e);\n      }\n\n      let totalWidth = 0;\n      const children = this.element.children;\n\n      for (let i = 0; i < children.length; i++) {\n        totalWidth += this.orientation === 'Horizontal' ? children[i].offsetWidth : children[i].offsetHeight;\n      }\n\n      if (totalWidth > this.element.offsetWidth) {\n        this.updateSplitterSize();\n      }\n    }\n\n    expandAction(e) {\n      this.splitterDetails(e);\n      const eventArgs = this.beforeAction(e);\n\n      if (this.expandFlag) {\n        this.trigger('beforeExpand', eventArgs, beforeExpandArgs => {\n          if (!beforeExpandArgs.cancel) {\n            this.expandPane(e);\n          }\n\n          const expandEventArgs = this.afterAction(e);\n          this.trigger('expanded', expandEventArgs);\n        });\n      } else {\n        this.expandPane(e);\n      }\n    }\n\n    expandPane(e) {\n      this.removeStaticPanes();\n      const collapseCount = this.element.querySelectorAll('.' + COLLAPSE_PANE).length;\n      const flexStatus = !this.previousPane.classList.contains(COLLAPSE_PANE) && this.previousPane.classList.contains(STATIC_PANE) && !this.nextPane.classList.contains(COLLAPSE_PANE) && !this.nextPane.classList.contains(EXPAND_PANE) && this.nextPane.nextElementSibling.classList.contains(PANE) && !this.nextPane.nextElementSibling.classList.contains(STATIC_PANE) && !(collapseCount === this.allPanes.length - 2);\n      const collapseClass = [COLLAPSE_PANE, PANE_HIDDEN];\n\n      if (!this.previousPane.classList.contains(COLLAPSE_PANE)) {\n        removeClass([this.nextPane], EXPAND_PANE);\n        removeClass([this.previousPane], collapseClass);\n        addClass([this.previousPane], EXPAND_PANE);\n        addClass([this.nextPane], collapseClass);\n\n        if (this.expandFlag) {\n          this.updatePaneSettings(this.nextPaneIndex, true);\n        }\n      } else {\n        removeClass([this.previousPane], collapseClass);\n        removeClass([this.nextPane], EXPAND_PANE);\n\n        if (this.expandFlag) {\n          this.updatePaneSettings(this.prevPaneIndex, false);\n        }\n      }\n\n      this.updateIconsOnExpand(e);\n      this.previousPane.setAttribute('aria-expanded', 'true');\n      this.nextPane.setAttribute('aria-expanded', 'false');\n      this.updateFlexGrow(this.checkStaticPanes());\n\n      if (flexStatus) {\n        this.previousPane.classList.remove(EXPAND_PANE);\n        this.previousPane.style.flexGrow = '';\n      }\n    }\n\n    checkStaticPanes() {\n      let staticPane = true;\n\n      for (let i = 0; i < this.allPanes.length; i++) {\n        if (!this.allPanes[i].classList.contains(COLLAPSE_PANE) && staticPane) {\n          if (this.allPanes[i].classList.contains(STATIC_PANE)) {\n            staticPane = true;\n          } else {\n            staticPane = false;\n          }\n        }\n      }\n\n      return staticPane;\n    }\n\n    updateFlexGrow(status) {\n      let collapseCount = 0;\n\n      for (let j = 0; j < this.element.children.length; j++) {\n        if (this.element.children[j].classList.contains(COLLAPSE_PANE)) {\n          collapseCount = collapseCount + 1;\n        }\n      }\n\n      const visiblePane = collapseCount === this.allPanes.length - 2;\n      const panes = this.allPanes;\n\n      for (let i = 0; i < panes.length; i++) {\n        if (panes[i].classList.contains(EXPAND_PANE)) {\n          panes[i].style.flexGrow = '1';\n        } else if (panes[i].classList.contains(COLLAPSE_PANE)) {\n          panes[i].style.flexGrow = '0';\n        } else {\n          panes[i].style.flexGrow = '';\n        }\n\n        if (status && !this.nextPane.classList.contains(COLLAPSE_PANE)) {\n          this.nextPane.style.flexGrow = '1';\n        }\n\n        if (visiblePane && !this.allPanes[i].classList.contains(COLLAPSE_PANE) && this.paneSettings[i].size && i !== this.allPanes.length - 1) {\n          panes[i].style.flexGrow = '';\n        }\n      }\n    }\n\n    hideTargetBarIcon(targetBar, targetArrow) {\n      addClass([select('.' + targetArrow, targetBar)], HIDE_ICON);\n    }\n\n    showTargetBarIcon(targetBar, targetArrow) {\n      removeClass([select('.' + targetArrow, targetBar)], HIDE_ICON);\n    }\n\n    updateIconsOnCollapse(e) {\n      this.splitterProperty();\n\n      if (this.previousPane.classList.contains(COLLAPSE_PANE) && !this.nextPane.classList.contains(COLLAPSE_PANE)) {\n        addClass([e.target], HIDE_ICON);\n\n        if (this.paneSettings[this.prevPaneIndex].collapsible) {\n          this.showCurrentBarIcon();\n        }\n\n        this.resizableModel(this.currentBarIndex, false);\n\n        if (this.previousPane.classList.contains(COLLAPSE_PANE) && !this.nextPane.classList.contains(COLLAPSE_PANE) && !this.paneSettings[this.prevPaneIndex].collapsible) {\n          this.hideTargetBarIcon(this.prevBar, this.rightArrow);\n        }\n\n        if (this.previousPane.previousElementSibling && !this.previousPane.previousElementSibling.classList.contains(COLLAPSE_PANE)) {\n          if (this.previousPane.classList.contains(COLLAPSE_PANE) && this.paneSettings[this.prevPaneIndex].collapsible) {\n            this.showTargetBarIcon(this.prevBar, this.leftArrow);\n          } else if (!this.paneSettings[this.prevPaneIndex].collapsible) {\n            this.hideTargetBarIcon(this.prevBar, this.leftArrow);\n          }\n        }\n\n        if (!isNullOrUndefined(this.prevBar)) {\n          this.resizableModel(this.currentBarIndex - 1, false);\n          this.hideTargetBarIcon(this.prevBar, this.arrow);\n        }\n\n        if (!this.paneSettings[this.prevPaneIndex].collapsible) {\n          this.hideTargetBarIcon(this.currentSeparator, this.rightArrow);\n        }\n      } else if (!this.splitInstance.prevPaneCollapsed && !this.splitInstance.nextPaneExpanded) {\n        if (this.paneSettings[this.currentBarIndex].resizable) {\n          this.resizableModel(this.currentBarIndex, true);\n        }\n\n        if (!this.splitInstance.nextPaneNextEle.classList.contains(COLLAPSE_PANE) && this.paneSettings[this.currentBarIndex + 1].resizable) {\n          this.resizableModel(this.currentBarIndex + 1, true);\n        }\n\n        if (!this.paneSettings[this.currentBarIndex].collapsible) {\n          addClass([e.target], HIDE_ICON);\n        }\n\n        if (this.previousPane && this.prevPaneIndex === 0 && this.paneSettings[this.prevPaneIndex].collapsible) {\n          this.showTargetBarIcon(this.currentSeparator, this.leftArrow);\n        }\n\n        if (this.nextPane && this.nextPaneIndex === this.allPanes.length - 1 && this.paneSettings[this.nextPaneIndex].collapsible) {\n          this.showTargetBarIcon(this.getPrevBar(this.nextPaneIndex), this.rightArrow);\n        }\n\n        if (!this.previousPane.classList.contains(COLLAPSE_PANE) && this.paneSettings[this.nextPaneIndex].collapsible) {\n          this.showTargetBarIcon(this.currentSeparator, this.rightArrow);\n        }\n\n        if (!isNullOrUndefined(this.nextBar)) {\n          if (this.nextPane.nextElementSibling && this.nextPane.nextElementSibling.classList.contains(COLLAPSE_PANE) && this.paneSettings[this.nextPaneIndex + 1].collapsible || !this.nextPane.nextElementSibling.classList.contains(COLLAPSE_PANE) && this.paneSettings[this.nextPaneIndex].collapsible) {\n            this.showTargetBarIcon(this.nextBar, this.leftArrow);\n          } else if (!this.paneSettings[this.splitInstance.nextPaneIndex + 1].collapsible && this.paneSettings[this.currentBarIndex]) {\n            this.hideTargetBarIcon(this.nextBar, this.arrow);\n          }\n        }\n\n        if (!(this.nextPaneIndex === this.allPanes.length - 1) && this.nextPane.nextElementSibling && !this.nextPane.classList.contains(COLLAPSE_PANE) && !this.nextPane.nextElementSibling.classList.contains(COLLAPSE_PANE) && !this.paneSettings[this.nextPaneIndex + 1].collapsible) {\n          this.hideTargetBarIcon(this.nextBar, this.rightArrow);\n        }\n      }\n    }\n\n    collapseAction(e) {\n      this.splitterDetails(e);\n      const eventArgs = this.beforeAction(e);\n\n      if (this.collapseFlag) {\n        this.collapsePane(e);\n      } else {\n        this.trigger('beforeCollapse', eventArgs, beforeCollapseArgs => {\n          if (!beforeCollapseArgs.cancel) {\n            this.collapsePane(e);\n            const collapseEventArgs = this.afterAction(e);\n            this.trigger('collapsed', collapseEventArgs);\n          }\n        });\n      }\n    }\n\n    collapsePane(e) {\n      this.removeStaticPanes();\n      const collapseCount = this.element.querySelectorAll('.' + COLLAPSE_PANE).length;\n      const flexStatus = this.previousPane.classList.contains(STATIC_PANE) && !this.previousPane.classList.contains(COLLAPSE_PANE) && !this.nextPane.classList.contains(COLLAPSE_PANE) && this.nextPane.nextElementSibling.classList.contains(PANE) && !this.nextPane.nextElementSibling.classList.contains(STATIC_PANE) && !this.nextPane.nextElementSibling.classList.contains(COLLAPSE_PANE) && !(collapseCount === this.allPanes.length - 2) || this.nextPane.classList.contains(COLLAPSE_PANE) && !this.previousPane.classList.contains(STATIC_PANE) && this.nextPane.classList.contains(STATIC_PANE);\n      const collapseClass = [COLLAPSE_PANE, PANE_HIDDEN];\n\n      if (this.nextPane.classList.contains(COLLAPSE_PANE)) {\n        removeClass([this.previousPane], EXPAND_PANE);\n        removeClass([this.nextPane], collapseClass);\n\n        if (!this.collapseFlag) {\n          this.updatePaneSettings(this.nextPaneIndex, false);\n        }\n      } else {\n        removeClass([this.previousPane], EXPAND_PANE);\n        removeClass([this.nextPane], collapseClass);\n        addClass([this.nextPane], EXPAND_PANE);\n        addClass([this.previousPane], collapseClass);\n\n        if (!this.collapseFlag) {\n          this.updatePaneSettings(this.prevPaneIndex, true);\n        }\n      }\n\n      this.updateIconsOnCollapse(e);\n      this.previousPane.setAttribute('aria-expanded', 'false');\n      this.nextPane.setAttribute('aria-expanded', 'true');\n      this.updateFlexGrow(this.checkStaticPanes());\n\n      if (flexStatus) {\n        this.nextPane.classList.remove(EXPAND_PANE);\n        this.nextPane.style.flexGrow = '';\n      }\n    }\n\n    removeStaticPanes() {\n      for (let i = 0; i < this.allPanes.length; i++) {\n        if (isNullOrUndefined(this.paneSettings[i].size)) {\n          this.allPanes[i].classList.remove(STATIC_PANE);\n        }\n      }\n    }\n\n    beforeAction(e) {\n      const eventArgs = {\n        element: this.element,\n        event: e,\n        pane: [this.previousPane, this.nextPane],\n        index: [this.prevPaneIndex, this.nextPaneIndex],\n        separator: this.currentSeparator,\n        cancel: false\n      };\n      return eventArgs;\n    }\n\n    updatePaneSettings(index, collapsed) {\n      const paneValues = this.paneSettings;\n      paneValues[index].collapsed = collapsed;\n      this.setProperties({\n        'paneSettings': paneValues\n      }, true);\n    }\n\n    splitterProperty() {\n      this.splitInstance = {\n        currentBarIndex: this.currentBarIndex,\n        nextPaneCollapsible: this.nextPane.classList.contains(COLLAPSIBLE),\n        prevPaneCollapsible: this.previousPane.classList.contains(COLLAPSIBLE),\n        prevPaneExpanded: this.previousPane.classList.contains(EXPAND_PANE),\n        nextPaneExpanded: this.nextPane.classList.contains(EXPAND_PANE),\n        nextPaneCollapsed: this.nextPane.classList.contains(COLLAPSE_PANE),\n        prevPaneCollapsed: this.previousPane.classList.contains(COLLAPSE_PANE),\n        nextPaneIndex: this.getNextPaneIndex(),\n        prevPaneIndex: this.getPreviousPaneIndex(),\n        nextPaneNextEle: this.nextPane.nextElementSibling,\n        prevPanePreEle: this.previousPane.previousElementSibling\n      };\n    }\n\n    showCurrentBarIcon() {\n      removeClass([select('.' + this.arrow, this.currentSeparator)], HIDE_ICON);\n    }\n\n    updateIconsOnExpand(e) {\n      this.splitterProperty();\n      addClass([e.target], HIDE_ICON);\n\n      if (!this.splitInstance.prevPaneExpanded && !this.splitInstance.nextPaneCollapsed) {\n        if (this.paneSettings[this.prevPaneIndex].collapsible) {\n          this.showCurrentBarIcon();\n        }\n\n        if (this.paneSettings[this.nextPaneIndex].collapsible) {\n          removeClass([e.target], HIDE_ICON);\n        }\n\n        if (this.paneSettings[this.currentBarIndex].resizable) {\n          this.resizableModel(this.currentBarIndex, true);\n        }\n\n        if (!isNullOrUndefined(this.prevBar) && !this.splitInstance.prevPanePreEle.classList.contains(COLLAPSE_PANE)) {\n          if (this.paneSettings[this.currentBarIndex - 1].resizable) {\n            this.resizableModel(this.currentBarIndex - 1, true);\n          }\n\n          if (this.paneSettings[this.prevPaneIndex].collapsible) {\n            this.showTargetBarIcon(this.prevBar, this.rightArrow);\n          }\n\n          if (!this.paneSettings[this.currentBarIndex - 1].collapsible) {\n            this.hideTargetBarIcon(this.prevBar, this.arrow);\n\n            if (this.paneSettings[this.currentBarIndex].collapsible && !this.paneSettings[this.currentBarIndex + 1].collapsible) {\n              this.hideTargetBarIcon(this.currentSeparator, this.rightArrow);\n            }\n          } else if (this.paneSettings[this.currentBarIndex].collapsible && !this.paneSettings[this.currentBarIndex + 1].collapsible) {\n            this.hideTargetBarIcon(this.currentSeparator, this.rightArrow);\n          }\n        } else {\n          if (this.previousPane.previousElementSibling && this.paneSettings[this.prevPaneIndex].collapsible && this.previousPane.previousElementSibling.classList.contains(COLLAPSE_PANE) && this.paneSettings[this.prevPaneIndex - 1].collapsible) {\n            this.showTargetBarIcon(this.prevBar, this.rightArrow);\n          }\n\n          if (!this.paneSettings[this.currentBarIndex + 1].collapsible) {\n            this.hideTargetBarIcon(this.currentSeparator, this.rightArrow);\n          }\n        }\n      } else if (this.splitInstance.prevPaneExpanded && this.splitInstance.nextPaneCollapsed) {\n        this.resizableModel(this.currentBarIndex, false);\n        this.resizableModel(this.currentBarIndex + 1, false);\n\n        if (this.paneSettings[this.nextPaneIndex].collapsible) {\n          this.showCurrentBarIcon();\n        }\n\n        if (!isNullOrUndefined(this.nextBar)) {\n          this.hideTargetBarIcon(this.nextBar, this.arrow);\n        }\n\n        if (this.nextPane && this.nextPaneIndex === this.allPanes.length - 1 && !this.paneSettings[this.nextPaneIndex].collapsible && this.splitInstance.nextPaneCollapsed) {\n          this.hideTargetBarIcon(this.currentSeparator, this.arrow);\n        }\n\n        if (!(this.nextPaneIndex === this.allPanes.length - 1) && this.nextPane.nextElementSibling && this.nextPane.classList.contains(COLLAPSE_PANE) && !this.nextPane.nextElementSibling.classList.contains(COLLAPSE_PANE) && this.paneSettings[this.nextPaneIndex].collapsible) {\n          this.showTargetBarIcon(this.nextBar, this.rightArrow);\n        }\n      }\n    }\n\n    afterAction(e) {\n      const eventArgs = {\n        element: this.element,\n        event: e,\n        pane: [this.previousPane, this.nextPane],\n        index: [this.prevPaneIndex, this.nextPaneIndex],\n        separator: this.currentSeparator\n      };\n      return eventArgs;\n    }\n\n    currentIndex(e) {\n      this.currentBarIndex = this.getOrderIndex(parseInt(e.target.parentElement.style.order, 10), 'splitbar');\n    }\n\n    getSeparatorIndex(target) {\n      let array = [].slice.call(this.allBars);\n      array = this.enableReversePanes ? array.reverse() : array;\n      return array.indexOf(target);\n    }\n\n    getPrevBar(currentBar) {\n      const prevbar = this.allBars[currentBar - 1];\n      return prevbar;\n    }\n\n    getNextBar(currentBar) {\n      const prevbar = this.allBars[currentBar + 1];\n      return prevbar;\n    }\n\n    updateBars(index) {\n      this.prevBar = this.getPrevBar(index);\n      this.nextBar = this.getNextBar(index);\n    }\n\n    splitterDetails(e) {\n      if (this.orientation === 'Horizontal') {\n        this.arrow = e.target.classList.contains(ARROW_LEFT) ? ARROW_RIGHT : ARROW_LEFT;\n      } else {\n        this.arrow = e.target.classList.contains(ARROW_UP) ? ARROW_DOWN : ARROW_UP;\n      }\n\n      this.updateCurrentSeparator(e.target);\n      this.currentIndex(e);\n      this.updateBars(this.currentBarIndex);\n      this.getPaneDetails();\n    }\n\n    triggerResizing(e) {\n      const eventArgs = {\n        element: this.element,\n        event: e,\n        pane: [this.previousPane, this.nextPane],\n        index: [this.prevPaneIndex, this.nextPaneIndex],\n        paneSize: [this.prePaneDimenson, this.nextPaneDimension],\n        separator: this.currentSeparator\n      };\n      this.trigger('resizing', eventArgs);\n    }\n\n    onMouseDown(e) {\n      e.preventDefault();\n      const target = e.target;\n\n      if (target.classList.contains(NAVIGATE_ARROW)) {\n        return;\n      }\n\n      this.updateCurrentSeparator(target);\n      addClass([this.currentSeparator], SPLIT_BAR_ACTIVE);\n      this.updateCursorPosition(e, 'previous');\n      this.getPaneDetails();\n      const eventArgs = {\n        element: this.element,\n        event: e,\n        pane: [this.previousPane, this.nextPane],\n        index: [this.getPreviousPaneIndex(), this.getNextPaneIndex()],\n        separator: this.currentSeparator,\n        cancel: false\n      };\n\n      for (let i = 0; i < this.element.querySelectorAll('iframe').length; i++) {\n        this.element.querySelectorAll('iframe')[i].style.pointerEvents = 'none';\n      }\n\n      this.trigger('resizeStart', eventArgs, resizeStartArgs => {\n        if (!resizeStartArgs.cancel) {\n          this.wireResizeEvents();\n          this.checkPaneSize(e);\n        }\n      });\n    }\n\n    updatePaneFlexBasis(pane) {\n      let previous;\n\n      if (pane.style.flexBasis.indexOf('%') > 0) {\n        previous = this.removePercentageUnit(pane.style.flexBasis);\n      } else {\n        if (pane.style.flexBasis !== '') {\n          previous = this.convertPixelToPercentage(this.convertPixelToNumber(pane.style.flexBasis));\n        } else {\n          const offset = this.orientation === 'Horizontal' ? pane.offsetWidth : pane.offsetHeight;\n          previous = this.convertPixelToPercentage(offset);\n        }\n      }\n\n      return previous;\n    }\n\n    removePercentageUnit(value) {\n      return parseFloat(value.slice(0, value.indexOf('%')));\n    }\n\n    convertPercentageToPixel(value, targetElement) {\n      const percentage = value.toString();\n      let convertedValue;\n\n      if (percentage.indexOf('%') > -1) {\n        convertedValue = parseFloat(percentage.slice(0, percentage.indexOf('%')));\n        let offsetValue;\n\n        if (!isNullOrUndefined(targetElement)) {\n          offsetValue = this.panesDimensions[this.allPanes.indexOf(targetElement)];\n        } else {\n          offsetValue = this.orientation === 'Horizontal' ? this.element.offsetWidth : this.element.offsetHeight;\n        }\n\n        convertedValue = Math.ceil(offsetValue * (convertedValue / 100));\n      } else {\n        convertedValue = parseInt(percentage, 10);\n      }\n\n      return convertedValue;\n    }\n\n    convertPixelToPercentage(value) {\n      const offsetValue = this.orientation === 'Horizontal' ? this.element.offsetWidth : this.element.offsetHeight;\n      return value / offsetValue * 100;\n    }\n\n    convertPixelToNumber(value) {\n      if (value.indexOf('p') > -1) {\n        return parseFloat(value.slice(0, value.indexOf('p')));\n      } else {\n        return parseFloat(value);\n      }\n    }\n\n    calcDragPosition(rectValue, offsetValue) {\n      const separatorPosition = this.orientation === 'Horizontal' ? this.currentCoordinates.x - rectValue : this.currentCoordinates.y - rectValue;\n      let separator;\n      separator = separatorPosition / offsetValue;\n      separator = separator > 1 ? 1 : separator < 0 ? 0 : separator;\n      return separator * offsetValue;\n    }\n\n    getSeparatorPosition(e) {\n      this.updateCursorPosition(e, 'current');\n      const rectBound = this.orientation === 'Horizontal' ? this.element.getBoundingClientRect().left : this.element.getBoundingClientRect().top + window.scrollY;\n      const offSet = this.orientation === 'Horizontal' ? this.element.offsetWidth : this.element.offsetHeight;\n      return this.calcDragPosition(rectBound, offSet);\n    }\n\n    getMinMax(paneIndex, target, selection) {\n      const defaultVal = selection === 'min' ? 0 : null; // eslint-disable-next-line\n\n      let paneValue = null;\n\n      if (selection === 'min') {\n        if (!isNullOrUndefined(this.paneSettings[paneIndex]) && !isNullOrUndefined(this.paneSettings[paneIndex].min)) {\n          paneValue = this.paneSettings[paneIndex].min;\n        }\n      } else {\n        if (!isNullOrUndefined(this.paneSettings[paneIndex]) && !isNullOrUndefined(this.paneSettings[paneIndex].max)) {\n          paneValue = this.paneSettings[paneIndex].max;\n        }\n      }\n\n      if (this.paneSettings.length > 0 && !isNullOrUndefined(this.paneSettings[paneIndex]) && !isNullOrUndefined(paneValue)) {\n        if (paneValue.indexOf('%') > 0) {\n          paneValue = this.convertPercentageToPixel(paneValue).toString();\n        }\n\n        return this.convertPixelToNumber(paneValue);\n      } else {\n        return defaultVal;\n      }\n    }\n\n    getPreviousPaneIndex() {\n      const separatorIndex = this.enableReversePanes ? parseInt(this.currentSeparator.style.order, 10) + 1 : parseInt(this.currentSeparator.style.order, 10) - 1;\n      return this.getOrderIndex(separatorIndex, 'pane');\n    }\n\n    getNextPaneIndex() {\n      const separatorIndex = this.enableReversePanes ? parseInt(this.currentSeparator.style.order, 10) - 1 : parseInt(this.currentSeparator.style.order, 10) + 1;\n      return this.getOrderIndex(separatorIndex, 'pane');\n    }\n\n    getPaneDetails() {\n      let prevPane = null;\n      let nextPane = null;\n      this.order = parseInt(this.currentSeparator.style.order, 10);\n\n      if (this.allPanes.length > 1) {\n        prevPane = this.getPrevPane(this.order);\n        nextPane = this.getNextPane(this.order);\n      }\n\n      if (prevPane && nextPane) {\n        this.previousPane = prevPane;\n        this.nextPane = nextPane;\n        this.prevPaneIndex = this.getPreviousPaneIndex();\n        this.nextPaneIndex = this.getNextPaneIndex();\n      } else {\n        return;\n      }\n    }\n\n    getPaneHeight(pane) {\n      return this.orientation === 'Horizontal' ? pane.offsetWidth.toString() : pane.offsetHeight.toString();\n    }\n\n    isValidSize(paneIndex) {\n      let isValid = false;\n\n      if (!isNullOrUndefined(this.paneSettings[paneIndex]) && !isNullOrUndefined(this.paneSettings[paneIndex].size) && this.paneSettings[paneIndex].size.indexOf('%') > -1) {\n        isValid = true;\n      }\n\n      return isValid;\n    }\n\n    getPaneDimensions() {\n      this.previousPaneHeightWidth = this.previousPane.style.flexBasis === '' ? this.getPaneHeight(this.previousPane) : this.previousPane.style.flexBasis;\n      this.nextPaneHeightWidth = this.nextPane.style.flexBasis === '' ? this.getPaneHeight(this.nextPane) : this.nextPane.style.flexBasis;\n\n      if (this.isValidSize(this.prevPaneIndex)) {\n        this.previousPaneHeightWidth = this.convertPercentageToPixel(this.previousPaneHeightWidth).toString();\n        this.updatePrePaneInPercentage = true;\n      }\n\n      if (this.isValidSize(this.nextPaneIndex)) {\n        this.nextPaneHeightWidth = this.convertPercentageToPixel(this.nextPaneHeightWidth).toString();\n        this.updateNextPaneInPercentage = true;\n      }\n\n      this.prePaneDimenson = this.convertPixelToNumber(this.previousPaneHeightWidth.toString());\n      this.nextPaneDimension = this.convertPixelToNumber(this.nextPaneHeightWidth.toString());\n    }\n\n    checkCoordinates(pageX, pageY) {\n      let coordinatesChanged = true;\n\n      if (pageX === this.previousCoordinates.x || pageY === this.previousCoordinates.y) {\n        coordinatesChanged = false;\n      }\n\n      return coordinatesChanged;\n    }\n\n    isCursorMoved(e) {\n      let cursorMoved = true;\n\n      if (this.getEventType(e.type) === 'mouse' || !isNullOrUndefined(e.pointerType) && this.getEventType(e.pointerType) === 'mouse') {\n        cursorMoved = this.checkCoordinates(e.pageX, e.pageY);\n      } else {\n        cursorMoved = Browser.info.name !== 'msie' ? this.checkCoordinates(e.touches[0].pageX, e.touches[0].pageY) : this.checkCoordinates(e.pageX, e.pageY);\n      }\n\n      return cursorMoved;\n    }\n\n    getBorder() {\n      this.border = 0;\n      const border = this.orientation === 'Horizontal' ? (this.element.offsetWidth - this.element.clientWidth) / 2 : (this.element.offsetHeight - this.element.clientHeight) / 2;\n      this.border = Browser.info.name !== 'chrome' ? this.border : border;\n    }\n\n    onMouseMove(e) {\n      if (!this.isCursorMoved(e)) {\n        return;\n      }\n\n      this.getPaneDetails();\n      this.getPaneDimensions();\n      this.triggerResizing(e);\n      const left = this.validateDraggedPosition(this.getSeparatorPosition(e), this.prePaneDimenson, this.nextPaneDimension);\n      let separatorNewPosition;\n      this.getBorder();\n\n      if (this.orientation === 'Horizontal') {\n        separatorNewPosition = this.element.getBoundingClientRect().left + left - this.currentSeparator.getBoundingClientRect().left + this.border;\n      } else {\n        separatorNewPosition = this.element.getBoundingClientRect().top + left - this.currentSeparator.getBoundingClientRect().top + this.border;\n      }\n\n      this.nextPaneHeightWidth = typeof this.nextPaneHeightWidth === 'string' && this.nextPaneHeightWidth.indexOf('p') > -1 ? this.convertPixelToNumber(this.nextPaneHeightWidth) : parseInt(this.nextPaneHeightWidth, 10);\n      this.prevPaneCurrentWidth = separatorNewPosition + this.convertPixelToNumber(this.previousPaneHeightWidth);\n      this.nextPaneCurrentWidth = this.nextPaneHeightWidth - separatorNewPosition;\n      this.validateMinMaxValues();\n\n      if (this.nextPaneCurrentWidth < 0) {\n        this.nextPaneCurrentWidth = 0;\n      }\n      /* istanbul ignore next */\n\n\n      if (this.prevPaneCurrentWidth < 0) {\n        this.prevPaneCurrentWidth = 0;\n      }\n\n      if (this.nextPaneCurrentWidth + this.prevPaneCurrentWidth > this.totalWidth) {\n        if (this.nextPaneCurrentWidth < this.prevPaneCurrentWidth) {\n          this.prevPaneCurrentWidth = this.prevPaneCurrentWidth - (this.nextPaneCurrentWidth + this.prevPaneCurrentWidth - this.totalWidth);\n        } else {\n          this.nextPaneCurrentWidth = this.nextPaneCurrentWidth - (this.nextPaneCurrentWidth + this.prevPaneCurrentWidth - this.totalWidth);\n        }\n      }\n      /* istanbul ignore next */\n\n\n      if (this.nextPaneCurrentWidth + this.prevPaneCurrentWidth < this.totalWidth) {\n        const difference = this.totalWidth - (this.nextPaneCurrentWidth + this.prevPaneCurrentWidth);\n        this.nextPaneCurrentWidth = this.nextPaneCurrentWidth + difference;\n      }\n\n      this.calculateCurrentDimensions();\n      this.addStaticPaneClass();\n      this.previousPane.style.flexBasis = this.prevPaneCurrentWidth;\n      this.nextPane.style.flexBasis = this.nextPaneCurrentWidth;\n\n      if (!(this.allPanes.length > 2)) {\n        this.updateSplitterSize();\n      }\n    } // eslint-disable-next-line\n\n\n    validateMinRange(paneIndex, paneCurrentWidth, pane) {\n      let paneMinRange = null;\n      let paneMinDimensions;\n      let difference = 0;\n      let validatedVal;\n\n      if (!isNullOrUndefined(this.paneSettings[paneIndex]) && !isNullOrUndefined(this.paneSettings[paneIndex].min)) {\n        paneMinRange = this.paneSettings[paneIndex].min.toString();\n      }\n\n      if (!isNullOrUndefined(paneMinRange)) {\n        if (paneMinRange.indexOf('%') > 0) {\n          paneMinRange = this.convertPercentageToPixel(paneMinRange).toString();\n        }\n\n        paneMinDimensions = this.convertPixelToNumber(paneMinRange);\n\n        if (paneCurrentWidth < paneMinDimensions) {\n          difference = paneCurrentWidth - paneMinDimensions <= 0 ? 0 : paneCurrentWidth - paneMinDimensions;\n          this.totalWidth = this.totalWidth - difference;\n          this.totalPercent = this.convertPixelToPercentage(this.totalWidth);\n          validatedVal = paneMinDimensions;\n        }\n      }\n\n      return isNullOrUndefined(validatedVal) ? paneCurrentWidth : validatedVal;\n    } // eslint-disable-next-line\n\n\n    validateMaxRange(paneIndex, paneCurrentWidth, pane) {\n      let paneMaxRange = null;\n      let paneMaxDimensions;\n      let validatedVal;\n\n      if (!isNullOrUndefined(this.paneSettings[paneIndex]) && !isNullOrUndefined(this.paneSettings[paneIndex].max)) {\n        paneMaxRange = this.paneSettings[paneIndex].max.toString();\n      }\n\n      if (!isNullOrUndefined(paneMaxRange)) {\n        if (paneMaxRange.indexOf('%') > 0) {\n          paneMaxRange = this.convertPercentageToPixel(paneMaxRange).toString();\n        }\n\n        paneMaxDimensions = this.convertPixelToNumber(paneMaxRange);\n\n        if (paneCurrentWidth > paneMaxDimensions) {\n          this.totalWidth = this.totalWidth - (paneCurrentWidth - paneMaxDimensions);\n          this.totalPercent = this.convertPixelToPercentage(this.totalWidth);\n          validatedVal = paneMaxDimensions;\n        }\n      }\n\n      return isNullOrUndefined(validatedVal) ? paneCurrentWidth : validatedVal;\n    }\n\n    validateMinMaxValues() {\n      //validate previous pane minimum range\n      this.prevPaneCurrentWidth = this.validateMinRange(this.prevPaneIndex, this.prevPaneCurrentWidth, this.previousPane); // Validate next pane minimum range\n\n      this.nextPaneCurrentWidth = this.validateMinRange(this.nextPaneIndex, this.nextPaneCurrentWidth, this.nextPane); // validate previous pane maximum range\n\n      this.prevPaneCurrentWidth = this.validateMaxRange(this.prevPaneIndex, this.prevPaneCurrentWidth, this.previousPane); // validate next pane maximum range\n\n      this.nextPaneCurrentWidth = this.validateMaxRange(this.nextPaneIndex, this.nextPaneCurrentWidth, this.nextPane);\n    }\n\n    equatePaneWidths() {\n      let difference;\n\n      if (this.prevPaneCurrentWidth + this.nextPaneCurrentWidth > this.totalPercent) {\n        difference = this.prevPaneCurrentWidth + this.nextPaneCurrentWidth - this.totalPercent;\n        this.prevPaneCurrentWidth = this.prevPaneCurrentWidth - difference / 2 + '%';\n        this.nextPaneCurrentWidth = this.nextPaneCurrentWidth - difference / 2 + '%';\n      }\n\n      if (this.prevPaneCurrentWidth + this.nextPaneCurrentWidth < this.totalPercent) {\n        difference = this.totalPercent - (this.prevPaneCurrentWidth + this.nextPaneCurrentWidth);\n        this.prevPaneCurrentWidth = this.prevPaneCurrentWidth + difference / 2 + '%';\n        this.nextPaneCurrentWidth = this.nextPaneCurrentWidth + difference / 2 + '%';\n      }\n    }\n\n    calculateCurrentDimensions() {\n      if (this.updatePrePaneInPercentage || this.updateNextPaneInPercentage) {\n        this.prevPaneCurrentWidth = Math.round(Number(Math.round(this.convertPixelToPercentage(this.prevPaneCurrentWidth) * 10) / 10));\n        this.nextPaneCurrentWidth = Math.round(Number(Math.round(this.convertPixelToPercentage(this.nextPaneCurrentWidth) * 10) / 10));\n\n        if (this.prevPaneCurrentWidth === 0) {\n          this.nextPaneCurrentWidth = this.totalPercent;\n        }\n\n        if (this.nextPaneCurrentWidth === 0) {\n          this.prevPaneCurrentWidth = this.totalPercent;\n        }\n\n        if (this.prevPaneCurrentWidth + this.nextPaneCurrentWidth !== this.totalPercent) {\n          this.equatePaneWidths();\n        } else {\n          this.prevPaneCurrentWidth = this.prevPaneCurrentWidth + '%';\n          this.nextPaneCurrentWidth = this.nextPaneCurrentWidth + '%';\n        }\n\n        this.prevPaneCurrentWidth = this.updatePrePaneInPercentage ? this.prevPaneCurrentWidth : this.convertPercentageToPixel(this.prevPaneCurrentWidth) + 'px';\n        this.nextPaneCurrentWidth = this.updateNextPaneInPercentage ? this.nextPaneCurrentWidth : this.convertPercentageToPixel(this.nextPaneCurrentWidth) + 'px';\n        this.updatePrePaneInPercentage = false;\n        this.updateNextPaneInPercentage = false;\n      } else {\n        this.prevPaneCurrentWidth = this.prevPaneCurrentWidth + 'px';\n        this.nextPaneCurrentWidth = this.nextPaneCurrentWidth + 'px';\n      }\n    }\n\n    addStaticPaneClass() {\n      if (!this.previousPane.classList.contains(STATIC_PANE)) {\n        this.previousPane.classList.add(STATIC_PANE);\n      }\n\n      if (!this.nextPane.classList.contains(STATIC_PANE)) {\n        this.nextPane.classList.add(STATIC_PANE);\n      }\n    }\n\n    validateDraggedPosition(draggedPos, prevPaneHeightWidth, nextPaneHeightWidth) {\n      const separatorTopLeft = this.orientation === 'Horizontal' ? this.currentSeparator.offsetLeft : this.currentSeparator.offsetTop;\n      const prePaneRange = separatorTopLeft - prevPaneHeightWidth;\n      const nextPaneRange = nextPaneHeightWidth + separatorTopLeft;\n      const pane1MinSize = this.getMinMax(this.prevPaneIndex, this.previousPane, 'min');\n      const pane2MinSize = this.getMinMax(this.nextPaneIndex, this.nextPane, 'min');\n      const pane1MaxSize = this.getMinMax(this.prevPaneIndex, this.previousPane, 'max');\n      const pane2MaxSize = this.getMinMax(this.nextPaneIndex, this.nextPane, 'max');\n      let validatedSize = draggedPos;\n\n      if (draggedPos > nextPaneRange - pane2MinSize) {\n        validatedSize = nextPaneRange - pane2MinSize;\n      } else if (draggedPos < prePaneRange + pane1MinSize) {\n        validatedSize = prePaneRange + pane1MinSize;\n      }\n\n      if (!isNullOrUndefined(pane1MaxSize)) {\n        if (draggedPos > prePaneRange + pane1MaxSize) {\n          validatedSize = prePaneRange + pane1MaxSize;\n        }\n      } else if (!isNullOrUndefined(pane2MaxSize)) {\n        if (draggedPos < nextPaneRange - pane2MaxSize) {\n          validatedSize = nextPaneRange - pane2MaxSize;\n        }\n      }\n\n      return validatedSize;\n    }\n\n    onMouseUp(e) {\n      removeClass([this.currentSeparator], SPLIT_BAR_ACTIVE);\n      this.unwireResizeEvents();\n      const eventArgs = {\n        event: e,\n        element: this.element,\n        pane: [this.previousPane, this.nextPane],\n        index: [this.prevPaneIndex, this.nextPaneIndex],\n        separator: this.currentSeparator,\n        paneSize: [this.prePaneDimenson, this.nextPaneDimension]\n      };\n\n      for (let i = 0; i < this.element.querySelectorAll('iframe').length; i++) {\n        this.element.querySelectorAll('iframe')[i].style.pointerEvents = 'auto';\n      }\n\n      this.trigger('resizeStop', eventArgs);\n\n      if (this.enablePersistence) {\n        const paneValues = this.paneSettings;\n        paneValues[this.getPreviousPaneIndex()].size = this.allPanes[this.getPreviousPaneIndex()].style.flexBasis;\n        paneValues[this.getNextPaneIndex()].size = this.allPanes[this.getNextPaneIndex()].style.flexBasis;\n        this.setProperties({\n          'paneSettings': paneValues\n        }, true);\n      }\n    }\n\n    panesDimension(index, child) {\n      const childCount = child.length;\n      let size;\n      parseInt(this.getHeight(this.element), 10);\n\n      if (!isNullOrUndefined(this.paneSettings[index])) {\n        if (!isNullOrUndefined(this.paneSettings[index].size)) {\n          size = this.paneSettings[index].size;\n\n          if (index < childCount) {\n            setStyleAttribute(child[index], {\n              'flex-basis': size,\n              'order': index * 2\n            });\n\n            if (index < childCount - 1 && this.paneSettings[index].size !== '') {\n              addClass([child[index]], STATIC_PANE);\n            } else if (!this.sizeFlag) {\n              child[index].style.flexBasis = null;\n            }\n\n            if (index === childCount - 1 && this.sizeFlag && this.paneSettings[index].size !== '') {\n              addClass([child[index]], STATIC_PANE);\n            }\n          }\n        } else {\n          this.sizeFlag = true;\n          setStyleAttribute(child[index], {\n            'order': index * 2\n          });\n        }\n      } else {\n        setStyleAttribute(child[index], {\n          'order': index * 2\n        });\n      }\n\n      this.paneOrder.push(index * 2);\n    }\n\n    setTemplate(template, toElement) {\n      toElement.innerHTML = '';\n      template = typeof template === 'string' ? this.sanitizeHelper(template) : template;\n      this.templateCompile(toElement, template); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n      if (this.isReact) {\n        this.renderReactTemplates();\n      }\n    } // eslint-disable-next-line\n\n\n    templateCompile(ele, cnt) {\n      // eslint-disable-next-line\n      const tempEle = this.createElement('div');\n      this.compileElement(tempEle, cnt, 'content');\n\n      if (tempEle.childNodes.length !== 0) {\n        [].slice.call(tempEle.childNodes).forEach(childEle => {\n          ele.appendChild(childEle);\n        });\n      }\n    }\n\n    compileElement(ele, val, prop) {\n      // eslint-disable-next-line\n      if (typeof val === 'string') {\n        if (val[0] === '.' || val[0] === '#') {\n          const eleVal = document.querySelector(val);\n\n          if (!isNullOrUndefined(eleVal)) {\n            this.templateElement.push(eleVal);\n\n            if (eleVal.style.display === 'none') {\n              eleVal.style.removeProperty('display');\n            }\n\n            if (eleVal.getAttribute('style') === '') {\n              eleVal.removeAttribute('style');\n            }\n\n            ele.appendChild(eleVal);\n            return;\n          } else {\n            val = val.trim();\n          }\n        } else {\n          val = val.trim();\n        }\n      }\n\n      let templateFn;\n\n      if (!isNullOrUndefined(val.outerHTML)) {\n        templateFn = compile(val.outerHTML);\n      } else {\n        templateFn = compile(val);\n      }\n\n      let templateFUN;\n\n      if (!isNullOrUndefined(templateFn)) {\n        templateFUN = templateFn({}, this, prop, this.element.id + 'content' + this.allPanes.length.toString(), true);\n      }\n\n      if (!isNullOrUndefined(templateFn) && templateFUN && templateFUN.length > 0) {\n        [].slice.call(templateFUN).forEach(el => {\n          ele.appendChild(el);\n        });\n      }\n    }\n\n    paneCollapsible(pane, index) {\n      // eslint-disable-next-line\n      this.paneSettings[index].collapsible ? addClass([pane], COLLAPSIBLE) : removeClass([pane], COLLAPSIBLE);\n    }\n\n    createSplitPane(target) {\n      let childCount = target.children.length;\n\n      for (let i = 0; i < this.paneSettings.length; i++) {\n        if (childCount < this.paneSettings.length) {\n          const childElement = this.createElement('div');\n          this.element.appendChild(childElement);\n          childCount = childCount + 1;\n        }\n      }\n\n      childCount = target.children.length;\n      const child = [].slice.call(target.children);\n      this.sizeFlag = false;\n\n      if (childCount > 0) {\n        for (let i = 0; i < childCount; i++) {\n          // To accept only div and span element as pane\n          if (child[i].nodeName === 'DIV' || child[i].nodeName === 'SPAN') {\n            this.allPanes.push(child[i]);\n\n            if (this.orientation === 'Horizontal') {\n              addClass([child[i]], [PANE, SPLIT_H_PANE, SCROLL_PANE]);\n              this.panesDimension(i, child);\n            } else {\n              addClass([child[i]], [PANE, SPLIT_V_PANE, SCROLL_PANE]);\n              this.panesDimension(i, child);\n            }\n\n            if (!isNullOrUndefined(this.paneSettings[i]) && !isNullOrUndefined(this.paneSettings[i].content)) {\n              this.setTemplate(this.paneSettings[i].content, child[i]);\n            }\n\n            if (!isNullOrUndefined(this.paneSettings[i]) && this.paneSettings[i].cssClass) {\n              this.setCssClass(child[i], this.paneSettings[i].cssClass);\n            }\n\n            if (!isNullOrUndefined(this.paneSettings[i])) {\n              this.paneCollapsible(child[i], i);\n            }\n          }\n        }\n      }\n    }\n    /**\n     * expands corresponding pane based on the index is passed.\n     *\n     * @param { number } index - Specifies the index value of the corresponding pane to be expanded at initial rendering of splitter.\n     * @returns {void}\n     */\n\n\n    expand(index) {\n      this.collapsedOnchange(index);\n      this.updatePaneSettings(index, false);\n    }\n    /**\n     * collapses corresponding pane based on the index is passed.\n     *\n     * @param { number } index - Specifies the index value of the corresponding pane to be collapsed at initial rendering of splitter.\n     * @returns {void}\n     */\n\n\n    collapse(index) {\n      this.isCollapsed(index);\n      this.updatePaneSettings(index, true);\n    }\n    /**\n     * Removes the control from the DOM and also removes all its related events.\n     *\n     * @returns {void}\n     */\n\n\n    destroy() {\n      if (!this.isDestroyed) {\n        super.destroy();\n        EventHandler.remove(document, 'touchstart click', this.onDocumentClick);\n        this.element.ownerDocument.defaultView.removeEventListener('resize', this.onReportWindowSize, true);\n\n        while (this.element.attributes.length > 0) {\n          this.element.removeAttribute(this.element.attributes[0].name);\n        }\n\n        this.element.innerHTML = this.wrapper.innerHTML;\n\n        for (let i = 0; i < this.wrapper.attributes.length; i++) {\n          this.element.setAttribute(this.wrapper.attributes[i].name, this.wrapper.attributes[i].value);\n        }\n\n        if (this.refreshing) {\n          addClass([this.element], ['e-control', 'e-lib', ROOT]);\n          this.allBars = [];\n          this.allPanes = [];\n        }\n\n        this.restoreElem(); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n        if (this.isReact) {\n          this.clearTemplate();\n        }\n      }\n    }\n\n    restoreElem() {\n      if (this.templateElement.length > 0) {\n        for (let i = 0; i < this.templateElement.length; i++) {\n          this.templateElement[i].style.display = 'none';\n          document.body.appendChild(this.templateElement[i]);\n        }\n      }\n    }\n\n    addPaneClass(pane) {\n      // eslint-disable-next-line\n      this.orientation === 'Horizontal' ? addClass([pane], [PANE, SPLIT_H_PANE, SCROLL_PANE]) : addClass([pane], [PANE, SPLIT_V_PANE, SCROLL_PANE]);\n      return pane;\n    }\n\n    removePaneOrders(paneClass) {\n      const childNodes = this.element.childNodes;\n      const panes = [];\n\n      for (let i = 0; childNodes.length < 0; i++) {\n        if (childNodes[i].classList.contains(paneClass)) {\n          panes.push(childNodes[i]);\n        }\n      }\n\n      for (let i = 0; i < panes.length; i++) {\n        panes[i].style.removeProperty('order');\n      }\n    }\n\n    setPaneOrder() {\n      for (let i = 0; i < this.allPanes.length; i++) {\n        this.panesDimension(i, this.allPanes);\n      }\n    }\n\n    removeSeparator() {\n      for (let i = 0; i < this.allBars.length; i++) {\n        detach(this.allBars[i]);\n      }\n\n      this.allBars = [];\n    }\n\n    updatePanes() {\n      this.setPaneOrder();\n      this.removeSeparator();\n      this.addSeparator(this.element);\n    }\n    /**\n     * Allows you to add a pane dynamically to the specified index position by passing the pane properties.\n     *\n     * @param { PanePropertiesModel } paneProperties - Specifies the pane’s properties that apply to new pane.\n     * @param { number } index - Specifies the index where the pane will be inserted.\n     * @returns {void}\n     */\n\n\n    addPane(paneProperties, index) {\n      let newPane = this.createElement('div');\n      newPane = this.addPaneClass(newPane);\n      index = index > this.allPanes.length + 1 ? this.allPanes.length : index;\n      const paneDetails = {\n        size: isNullOrUndefined(paneProperties.size) ? '' : paneProperties.size,\n        min: isNullOrUndefined(paneProperties.min) ? null : paneProperties.min,\n        max: isNullOrUndefined(paneProperties.max) ? null : paneProperties.max,\n        content: isNullOrUndefined(paneProperties.content) ? '' : paneProperties.content,\n        resizable: isNullOrUndefined(paneProperties.resizable) ? true : paneProperties.resizable,\n        collapsible: isNullOrUndefined(paneProperties.collapsible) ? false : paneProperties.collapsible,\n        collapsed: isNullOrUndefined(paneProperties.collapsed) ? false : paneProperties.collapsed,\n        cssClass: isNullOrUndefined(paneProperties.cssClass) ? '' : paneProperties.cssClass\n      };\n      this.paneSettings.splice(index, 0, paneDetails);\n      this.setProperties({\n        'paneSettings': this.paneSettings\n      }, true);\n\n      if (this.orientation === 'Horizontal') {\n        this.element.insertBefore(newPane, this.element.querySelectorAll('.' + SPLIT_H_PANE)[index]);\n        this.removePaneOrders(SPLIT_H_PANE);\n      } else {\n        this.element.insertBefore(newPane, this.element.querySelectorAll('.' + SPLIT_V_PANE)[index]);\n        this.removePaneOrders(SPLIT_V_PANE);\n      }\n\n      this.allPanes.splice(index, 0, newPane);\n      this.updatePanes();\n      this.setTemplate(this.paneSettings[index].content, newPane);\n      this.setCssClass(this.allPanes[index], paneProperties.cssClass);\n      this.allPanes[this.allPanes.length - 1].classList.remove(STATIC_PANE);\n    }\n    /**\n     * Allows you to remove the specified pane dynamically by passing its index value.\n     *\n     * @param { number } index - Specifies the index value to remove the corresponding pane.\n     * @returns {void}\n     */\n\n\n    removePane(index) {\n      index = index > this.allPanes.length + 1 ? this.allPanes.length : index;\n      const elementClass = this.orientation === 'Horizontal' ? SPLIT_H_PANE : SPLIT_V_PANE;\n\n      if (isNullOrUndefined(this.element.querySelectorAll('.' + elementClass)[index])) {\n        return;\n      }\n\n      detach(this.element.querySelectorAll('.' + elementClass)[index]);\n      this.allPanes.splice(index, 1);\n      this.removePaneOrders(elementClass);\n      this.updatePanes();\n      this.paneSettings.splice(index, 1);\n      this.setProperties({\n        'paneSettings': this.paneSettings\n      }, true);\n\n      if (this.allPanes.length > 0) {\n        this.allPanes[this.allPanes.length - 1].classList.remove(STATIC_PANE);\n      }\n    }\n\n  };\n\n  __decorate([Property('100%')], Splitter.prototype, \"height\", void 0);\n\n  __decorate([Property(false)], Splitter.prototype, \"enableReversePanes\", void 0);\n\n  __decorate([Property('100%')], Splitter.prototype, \"width\", void 0);\n\n  __decorate([Property(false)], Splitter.prototype, \"enablePersistence\", void 0);\n\n  __decorate([Collection([], PaneProperties)], Splitter.prototype, \"paneSettings\", void 0);\n\n  __decorate([Property('Horizontal')], Splitter.prototype, \"orientation\", void 0);\n\n  __decorate([Property('')], Splitter.prototype, \"cssClass\", void 0);\n\n  __decorate([Property(true)], Splitter.prototype, \"enabled\", void 0);\n\n  __decorate([Property(true)], Splitter.prototype, \"enableHtmlSanitizer\", void 0);\n\n  __decorate([Property(null)], Splitter.prototype, \"separatorSize\", void 0);\n\n  __decorate([Event()], Splitter.prototype, \"beforeSanitizeHtml\", void 0);\n\n  __decorate([Event()], Splitter.prototype, \"created\", void 0);\n\n  __decorate([Event()], Splitter.prototype, \"resizeStart\", void 0);\n\n  __decorate([Event()], Splitter.prototype, \"resizing\", void 0);\n\n  __decorate([Event()], Splitter.prototype, \"resizeStop\", void 0);\n\n  __decorate([Event()], Splitter.prototype, \"beforeCollapse\", void 0);\n\n  __decorate([Event()], Splitter.prototype, \"beforeExpand\", void 0);\n\n  __decorate([Event()], Splitter.prototype, \"collapsed\", void 0);\n\n  __decorate([Event()], Splitter.prototype, \"expanded\", void 0);\n\n  Splitter = __decorate([NotifyPropertyChanges], Splitter);\n  /**\n   * splitter modules\n   */\n\n  return Splitter;\n})();\n\nvar __decorate$1 = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}; // constant class definitions\n\n\nconst preventSelect = 'e-prevent';\nconst dragging = 'e-dragging';\nconst dragRestrict = 'e-drag-restrict';\nconst drag = 'e-drag';\nconst resize = 'e-resize';\nconst resizeicon = 'e-dl-icon';\nconst responsive = 'e-responsive';\nconst east = 'e-east';\nconst west = 'e-west';\nconst north = 'e-north';\nconst south = 'e-south';\nconst single = 'e-single';\nconst double = 'e-double';\nconst northEast = 'e-north-east';\nconst southEast = 'e-south-east';\nconst northWest = 'e-north-west';\nconst southWest = 'e-south-west';\nconst panel = 'e-panel';\nconst panelContent = 'e-panel-content';\nconst panelContainer = 'e-panel-container';\nconst disable = 'e-disabled';\nconst header = 'e-panel-header';\nconst panelTransition = 'e-panel-transition';\n/**\n * Defines the panel of the DashboardLayout component.\n */\n\nclass Panel extends ChildProperty {}\n\n__decorate$1([Property('')], Panel.prototype, \"id\", void 0);\n\n__decorate$1([Property('')], Panel.prototype, \"cssClass\", void 0);\n\n__decorate$1([Property('')], Panel.prototype, \"header\", void 0);\n\n__decorate$1([Property('')], Panel.prototype, \"content\", void 0);\n\n__decorate$1([Property(true)], Panel.prototype, \"enabled\", void 0);\n\n__decorate$1([Property(0)], Panel.prototype, \"row\", void 0);\n\n__decorate$1([Property(0)], Panel.prototype, \"col\", void 0);\n\n__decorate$1([Property(1)], Panel.prototype, \"sizeX\", void 0);\n\n__decorate$1([Property(1)], Panel.prototype, \"sizeY\", void 0);\n\n__decorate$1([Property(1)], Panel.prototype, \"minSizeY\", void 0);\n\n__decorate$1([Property(1)], Panel.prototype, \"minSizeX\", void 0);\n\n__decorate$1([Property(null)], Panel.prototype, \"maxSizeY\", void 0);\n\n__decorate$1([Property(null)], Panel.prototype, \"maxSizeX\", void 0);\n\n__decorate$1([Property(1000)], Panel.prototype, \"zIndex\", void 0);\n/**\n * The DashboardLayout is a grid structured layout control, that helps to create a dashboard with panels.\n * Panels hold the UI components or data to be visualized with flexible options like resize, reorder, drag-n-drop, remove and add,\n * that allows users to easily place the panels at a desired position within the grid layout.\n * ```html\n * <div id=\"default-layout\">\n * ```\n * ```typescript\n * <script>\n *   let dashBoardObject : DashboardLayout = new DashboardLayout();\n *   dashBoardObject.appendTo('#default-layout');\n * </script>\n * ```\n */\n\n\nlet DashboardLayout = class DashboardLayout extends Component {\n  constructor(options, element) {\n    super(options, element);\n    this.rows = 1;\n    this.panelID = 0;\n    this.movePanelCalled = false;\n    this.resizeCalled = false;\n    this.mOffX = 0;\n    this.mOffY = 0;\n    this.maxTop = 9999;\n    this.maxRows = 100;\n    this.mouseX = 0;\n    this.mouseY = 0;\n    this.minTop = 0;\n    this.minLeft = 0;\n    this.isInlineRendering = false;\n    this.removeAllCalled = false; // to check whether removePanel is executed in mobile device\n\n    this.isPanelRemoved = false; // to maintain sizeY in mobile device\n\n    this.panelsSizeY = 0;\n    this.resizeHeight = false;\n    setValue('mergePersistData', this.mergePersistPanelData, this);\n  }\n  /**\n   * Initialize the event handler\n   *\n   * @private\n   */\n\n\n  preRender() {\n    this.panelCollection = [];\n    this.sortedArray = [];\n    this.gridPanelCollection = [];\n    this.overlapElement = [];\n    this.overlapElementClone = [];\n    this.overlapSubElementClone = [];\n    this.collisionChecker = {};\n    this.dragCollection = [];\n    this.elementRef = {\n      top: '',\n      left: '',\n      height: '',\n      width: ''\n    };\n    this.dimensions = [];\n    this.allItems = [];\n    this.oldRowCol = {};\n    this.availableClasses = [];\n    this.setOldRowCol();\n    this.calculateCellSize();\n    this.contentTemplateChild = [].slice.call(this.element.children);\n  }\n\n  setOldRowCol() {\n    for (let i = 0; i < this.panels.length; i++) {\n      if (!this.panels[i].id) {\n        this.panelPropertyChange(this.panels[i], {\n          id: 'layout_' + this.panelID.toString()\n        });\n        this.panelID = this.panelID + 1;\n      }\n\n      this.oldRowCol[this.panels[i].id] = {\n        row: this.panels[i].row,\n        col: this.panels[i].col\n      };\n    }\n  }\n\n  createPanelElement(cssClass, idValue) {\n    const ele = this.createElement('div');\n\n    if (cssClass && cssClass.length > 0) {\n      addClass([ele], cssClass);\n    }\n\n    if (idValue) {\n      ele.setAttribute('id', idValue);\n    }\n\n    return ele;\n  }\n  /**\n   * To Initialize the control rendering.\n   *\n   * @returns void\n   * @private\n   */\n\n\n  render() {\n    this.initialize();\n    this.isRenderComplete = true;\n\n    if (this.showGridLines && !this.checkMediaQuery()) {\n      this.initGridLines();\n    }\n\n    this.updateDragArea();\n    this.renderComplete();\n    this.renderReactTemplates();\n  }\n\n  initGridLines() {\n    this.table = document.createElement('table');\n    const tbody = document.createElement('tbody');\n    this.table.classList.add('e-dashboard-gridline-table');\n\n    for (let i = 0; i < this.maxRow(); i++) {\n      const tr = document.createElement('tr');\n\n      for (let j = 0; j < this.columns; j++) {\n        const td = document.createElement('td');\n        td.classList.add('e-dashboard-gridline');\n        this.setAttributes({\n          value: {\n            row: i.toString(),\n            col: j.toString(),\n            sizeX: '1',\n            sizeY: '1'\n          }\n        }, td);\n        td.setAttribute('id', '' + j);\n        this.setPanelPosition(td, i, j);\n        this.setHeightAndWidth(td, {\n          row: i,\n          col: j,\n          sizeX: 1,\n          sizeY: 1\n        });\n        tr.appendChild(td);\n      }\n\n      tbody.appendChild(tr);\n    }\n\n    this.table.appendChild(tbody);\n    this.element.appendChild(this.table);\n    this.renderReactTemplates();\n  }\n\n  initialize() {\n    this.updateRowHeight();\n\n    if (this.element.childElementCount > 0 && this.element.querySelectorAll('.e-panel').length > 0) {\n      const panelElements = [];\n      this.setProperties({\n        panels: []\n      }, true);\n      this.isInlineRendering = true;\n\n      for (let i = 0; i < this.element.querySelectorAll('.e-panel').length; i++) {\n        panelElements.push(this.element.querySelectorAll('.e-panel')[i]);\n      }\n\n      for (let i = 0; i < panelElements.length; i++) {\n        const panelElement = panelElements[i];\n\n        if (this.enableRtl) {\n          addClass([panelElement], 'e-rtl');\n        }\n\n        this.getInlinePanels(panelElement);\n        this.maxCol();\n        this.maxRow();\n      }\n\n      for (let i = 0; i < this.panels.length; i++) {\n        const panelElement = this.element.querySelector('#' + this.panels[i].id);\n        this.setMinMaxValues(this.panels[i]);\n\n        if (this.maxColumnValue < this.panels[i].col || this.maxColumnValue < this.panels[i].col + this.panels[i].sizeX) {\n          const colValue = this.maxColumnValue - this.panels[i].sizeX;\n          this.panelPropertyChange(this.panels[i], {\n            col: colValue < 0 ? 0 : colValue\n          });\n        }\n\n        this.setXYAttributes(panelElement, this.panels[i]);\n        const panel = this.renderPanels(panelElement, this.panels[i], this.panels[i].id, false);\n        this.panelCollection.push(panel);\n        this.setHeightAndWidth(panelElement, this.panels[i]);\n        this.tempObject = this;\n\n        if (this.mediaQuery && !window.matchMedia('(' + this.mediaQuery + ')').matches) {\n          this.setPanelPosition(panelElement, this.panels[i].row, this.panels[i].col);\n          this.mainElement = panelElement;\n          this.updatePanelLayout(panelElement, this.panels[i]);\n          this.mainElement = null;\n        }\n\n        this.setClasses([panelElement]);\n      }\n\n      this.updateOldRowColumn();\n\n      if (this.checkMediaQuery()) {\n        this.checkMediaQuerySizing();\n      }\n    } else {\n      this.renderDashBoardCells(this.panels);\n    }\n\n    if (this.allowDragging && (this.mediaQuery ? !window.matchMedia('(' + this.mediaQuery + ')').matches : true)) {\n      this.enableDraggingContent(this.panelCollection);\n    }\n\n    this.sortedPanel();\n    this.bindEvents();\n    this.updatePanels();\n    this.updateCloneArrayObject();\n    this.checkColumnValue = this.maxColumnValue;\n\n    if (!this.checkMediaQuery()) {\n      this.panelResponsiveUpdate();\n    }\n\n    this.setEnableRtl();\n  }\n\n  checkMediaQuery() {\n    return this.mediaQuery && window.matchMedia('(' + this.mediaQuery + ')').matches;\n  }\n\n  calculateCellSize() {\n    this.cellSize = [];\n\n    if (this.checkMediaQuery()) {\n      this.cellSize[1] = this.element.parentElement && this.element.parentElement.offsetWidth / this.cellAspectRatio;\n    } else {\n      this.cellSize[0] = this.element.parentElement && this.element.parentElement.offsetWidth;\n      this.cellSize[0] = this.element.parentElement && (this.element.parentElement.offsetWidth - (this.maxCol() - 1) * this.cellSpacing[0]) / this.maxCol();\n      this.cellSize[1] = this.cellSize[0] / this.cellAspectRatio;\n    }\n  }\n\n  maxRow(recheck) {\n    let maxRow = 1;\n\n    if (this.rows > 1 && isNullOrUndefined(recheck)) {\n      maxRow = this.rows;\n      return maxRow;\n    }\n\n    for (let i = 0; i < this.panels.length; i++) {\n      if (this.panels[i].sizeY + this.panels[i].row > maxRow) {\n        maxRow = this.panels[i].sizeY + this.panels[i].row;\n      }\n    }\n\n    if (this.panels.length === 0) {\n      maxRow = this.columns;\n    }\n\n    return maxRow;\n  }\n\n  maxCol() {\n    let maxCol = 1;\n    maxCol = this.columns;\n    this.maxColumnValue = maxCol;\n    return maxCol;\n  }\n\n  updateOldRowColumn() {\n    for (let i = 0; i < this.panels.length; i++) {\n      const id = this.panels[i].id;\n\n      if (document.getElementById(id)) {\n        const row = parseInt(document.getElementById(id).getAttribute('data-row'), 10);\n        const col = parseInt(document.getElementById(id).getAttribute('data-col'), 10);\n        this.oldRowCol[this.panels[i].id] = {\n          row: row,\n          col: col\n        };\n      } else {\n        continue;\n      }\n    }\n  }\n\n  createSubElement(cssClass, idValue, className) {\n    const element = this.createElement('div');\n\n    if (className) {\n      addClass([element], [className]);\n    }\n\n    if (cssClass && cssClass.length > 0) {\n      addClass([element], cssClass);\n    }\n\n    if (idValue) {\n      element.setAttribute('id', idValue);\n    }\n\n    return element;\n  } // eslint-disable-next-line\n\n\n  templateParser(template) {\n    if (template) {\n      try {\n        if (document.querySelectorAll(template).length) {\n          return compile(document.querySelector(template).innerHTML.trim());\n        }\n      } catch (error) {\n        const sanitizedValue = SanitizeHtmlHelper.sanitize(template);\n        return compile(this.enableHtmlSanitizer && typeof template === 'string' ? sanitizedValue : template);\n      }\n    }\n\n    return undefined;\n  }\n\n  renderTemplate(content, appendElement, type, isStringTemplate, prop) {\n    // eslint-disable-next-line\n    const templateFn = this.templateParser(content);\n    const templateElements = [];\n\n    if ((content[0] === '.' || content[0] === '#') && document.querySelector(content).tagName !== 'SCRIPT') {\n      const eleVal = document.querySelector(content);\n\n      if (!isNullOrUndefined(eleVal)) {\n        if (eleVal.style.display === 'none') {\n          eleVal.style.removeProperty('display');\n        }\n\n        if (eleVal.getAttribute('style') === '') {\n          eleVal.removeAttribute('style');\n        }\n\n        appendElement.appendChild(eleVal);\n        return;\n      } else {\n        content = content.trim();\n      }\n    } else {\n      // eslint-disable-next-line\n      const compilerFn = templateFn({}, this, prop, type, isStringTemplate, null, appendElement);\n\n      if (compilerFn) {\n        for (const item of compilerFn) {\n          templateElements.push(item);\n        }\n\n        append([].slice.call(templateElements), appendElement);\n      }\n    }\n  }\n\n  renderPanels(cellElement, panelModel, panelId, isStringTemplate) {\n    addClass([cellElement], [panel, panelTransition]);\n    const cssClass = panelModel.cssClass ? panelModel.cssClass.split(' ') : null;\n    this.panelContent = cellElement.querySelector('.e-panel-container') ? cellElement.querySelector('.e-panel-container') : this.createSubElement(cssClass, cellElement.id + '_content', panelContainer);\n    cellElement.appendChild(this.panelContent);\n\n    if (!panelModel.enabled) {\n      this.disablePanel(cellElement);\n    }\n\n    if (panelModel.header) {\n      const headerTemplateElement = cellElement.querySelector('.e-panel-header') ? cellElement.querySelector('.e-panel-header') : this.createSubElement([], cellElement.id + 'template', '');\n      addClass([headerTemplateElement], [header]);\n\n      if (!cellElement.querySelector('.e-panel-header')) {\n        const id = this.element.id + 'HeaderTemplate' + panelId;\n        this.renderTemplate(panelModel.header, headerTemplateElement, id, isStringTemplate, 'header');\n        this.panelContent.appendChild(headerTemplateElement);\n        this.renderReactTemplates();\n      }\n    }\n\n    if (panelModel.content) {\n      const cssClass = panelModel.cssClass ? panelModel.cssClass.split(' ') : null;\n      this.panelBody = cellElement.querySelector('.e-panel-content') ? cellElement.querySelector('.e-panel-content') : this.createSubElement(cssClass, cellElement.id + '_body', panelContent);\n      const headerHeight = this.panelContent.querySelector('.e-panel-header') ? window.getComputedStyle(this.panelContent.querySelector('.e-panel-header')).height : '0px';\n      const contentHeightValue = 'calc( 100% - ' + headerHeight + ')';\n      setStyleAttribute(this.panelBody, {\n        height: contentHeightValue\n      });\n\n      if (!cellElement.querySelector('.e-panel-content')) {\n        const id = this.element.id + 'ContentTemplate' + panelId;\n        this.renderTemplate(panelModel.content, this.panelBody, id, isStringTemplate, 'content');\n        this.panelContent.appendChild(this.panelBody);\n        this.renderReactTemplates();\n      }\n    }\n\n    return cellElement;\n  }\n\n  disablePanel(panelElement) {\n    addClass([panelElement], [disable]);\n  }\n\n  getInlinePanels(panelElement) {\n    const model = {\n      sizeX: panelElement.hasAttribute('data-sizex') ? parseInt(panelElement.getAttribute('data-sizex'), 10) : 1,\n      sizeY: panelElement.hasAttribute('data-sizey') ? parseInt(panelElement.getAttribute('data-sizey'), 10) : 1,\n      minSizeX: panelElement.hasAttribute('data-minsizex') ? parseInt(panelElement.getAttribute('data-minsizex'), 10) : 1,\n      minSizeY: panelElement.hasAttribute('data-minsizey') ? parseInt(panelElement.getAttribute('data-minsizey'), 10) : 1,\n      maxSizeX: panelElement.hasAttribute('data-maxsizex') ? parseInt(panelElement.getAttribute('data-maxsizex'), 10) : null,\n      maxSizeY: panelElement.hasAttribute('data-maxsizey') ? parseInt(panelElement.getAttribute('data-maxsizey'), 10) : null,\n      row: panelElement.hasAttribute('data-row') ? parseInt(panelElement.getAttribute('data-row'), 10) : 0,\n      col: panelElement.hasAttribute('data-col') ? parseInt(panelElement.getAttribute('data-col'), 10) : 0,\n      id: panelElement.getAttribute('id'),\n      zIndex: panelElement.hasAttribute('data-zindex') ? parseInt(panelElement.getAttribute('data-zIndex'), 10) : 1000,\n      header: panelElement.querySelector('.e-panel-header') && '.e-panel-header',\n      content: panelElement.querySelector('.e-panel-content') && '.e-panel-content'\n    };\n\n    if (!model.id) {\n      model.id = 'layout_' + this.panelID.toString();\n      panelElement.setAttribute('id', model.id);\n      this.panelID = this.panelID + 1;\n    }\n\n    if (isUndefined(model.enabled)) {\n      model.enabled = true;\n    }\n\n    panelElement.style.zIndex = '' + model.zIndex; // eslint-disable-next-line\n\n    const panelProp = new Panel(this, 'panels', model, true);\n    this.panels.push(panelProp);\n  }\n\n  resizeEvents() {\n    if (this.allowResizing) {\n      const panelElements = this.element.querySelectorAll('.e-panel .e-panel-container .e-resize');\n\n      for (let i = 0; i < panelElements.length; i++) {\n        const eventName = Browser.info.name === 'msie' ? 'mousedown pointerdown' : 'mousedown';\n        EventHandler.add(panelElements[i], eventName, this.downResizeHandler, this);\n\n        if (Browser.info.name !== 'msie') {\n          EventHandler.add(panelElements[i], 'touchstart', this.touchDownResizeHandler, this);\n        }\n      }\n    }\n  }\n\n  bindEvents() {\n    this.refreshListener = this.refresh.bind(this); // eslint-disable-next-line\n\n    EventHandler.add(window, 'resize', this.refreshListener);\n    this.resizeEvents();\n  }\n\n  downResizeHandler(e) {\n    this.downHandler(e);\n    this.lastMouseX = e.pageX;\n    this.lastMouseY = e.pageY;\n    const moveEventName = Browser.info.name === 'msie' ? 'mousemove pointermove' : 'mousemove';\n    const upEventName = Browser.info.name === 'msie' ? 'mouseup pointerup' : 'mouseup';\n\n    if (!this.isMouseMoveBound) {\n      EventHandler.add(document, moveEventName, this.moveResizeHandler, this);\n      this.isMouseMoveBound = true;\n    }\n\n    if (!this.isMouseUpBound) {\n      EventHandler.add(document, upEventName, this.upResizeHandler, this);\n      this.isMouseUpBound = true;\n    }\n  }\n\n  downHandler(e) {\n    this.resizeCalled = false;\n    this.panelsInitialModel = this.cloneModels(this.panels);\n    const el = closest(e.currentTarget, '.e-panel');\n    const args = {\n      event: e,\n      element: el,\n      isInteracted: true\n    };\n    this.trigger('resizeStart', args);\n    this.downTarget = e.currentTarget;\n    this.shadowEle = document.createElement('div');\n    this.shadowEle.classList.add('e-holder');\n    addClass([this.element], [preventSelect]);\n    this.element.appendChild(this.shadowEle);\n    this.renderReactTemplates();\n    this.elementX = parseFloat(el.style.left);\n    this.elementY = parseFloat(el.style.top);\n    this.elementWidth = el.offsetWidth;\n    this.elementHeight = el.offsetHeight;\n    this.originalWidth = this.getCellInstance(el.id).sizeX;\n    this.originalHeight = this.getCellInstance(el.id).sizeY;\n    this.previousRow = this.getCellInstance(el.id).row;\n  }\n\n  touchDownResizeHandler(e) {\n    this.downHandler(e);\n    this.lastMouseX = e.changedTouches[0].pageX;\n    this.lastMouseY = e.changedTouches[0].pageY;\n\n    if (!this.isMouseMoveBound) {\n      EventHandler.add(document, 'touchmove', this.touchMoveResizeHandler, this);\n      this.isMouseMoveBound = true;\n    }\n\n    if (!this.isMouseUpBound) {\n      EventHandler.add(document, 'touchend', this.upResizeHandler, this);\n      this.isMouseUpBound = true;\n    }\n  }\n\n  getCellSize() {\n    return [this.cellSize[0], this.cellSize[1]];\n  }\n\n  updateMaxTopLeft(e) {\n    this.moveTarget = this.downTarget;\n    const el = closest(this.moveTarget, '.e-panel');\n    const args = {\n      event: e,\n      element: el,\n      isInteracted: true\n    };\n    this.trigger('resize', args);\n  }\n\n  updateResizeElement(el) {\n    this.maxLeft = this.element.offsetWidth - 1;\n    this.maxTop = this.cellSize[1] * this.maxRows - 1;\n    removeClass([el], 'e-panel-transition');\n    addClass([el], [dragging]);\n    const handleArray = [east, west, north, south, southEast, northEast, northWest, southWest];\n\n    for (let i = 0; i < this.moveTarget.classList.length; i++) {\n      if (handleArray.indexOf(this.moveTarget.classList[i]) !== -1) {\n        this.handleClass = this.moveTarget.classList[i];\n      }\n    }\n  }\n\n  moveResizeHandler(e) {\n    this.updateMaxTopLeft(e);\n    const el = closest(this.moveTarget, '.e-panel');\n\n    if (this.lastMouseX === e.pageX || this.lastMouseY === e.pageY) {\n      return;\n    }\n\n    this.updateResizeElement(el);\n    const panelModel = this.getCellInstance(el.getAttribute('id'));\n    this.mouseX = e.pageX;\n    this.mouseY = e.pageY;\n    const diffY = this.mouseY - this.lastMouseY + this.mOffY;\n    const diffX = this.mouseX - this.lastMouseX + this.mOffX;\n    this.mOffX = this.mOffY = 0;\n    this.lastMouseY = this.mouseY;\n    this.lastMouseX = this.mouseX;\n    this.resizingPanel(el, panelModel, diffX, diffY);\n  }\n\n  touchMoveResizeHandler(e) {\n    this.updateMaxTopLeft(e);\n    const el = closest(this.moveTarget, '.e-panel');\n\n    if (this.lastMouseX === e.changedTouches[0].pageX || this.lastMouseY === e.changedTouches[0].pageY) {\n      return;\n    }\n\n    this.updateResizeElement(el);\n    const panelModel = this.getCellInstance(el.getAttribute('id'));\n    this.mouseX = e.changedTouches[0].pageX;\n    this.mouseY = e.changedTouches[0].pageY;\n    const diffX = this.mouseX - this.lastMouseX + this.mOffX;\n    const diffY = this.mouseY - this.lastMouseY + this.mOffY;\n    this.mOffX = this.mOffY = 0;\n    this.lastMouseX = this.mouseX;\n    this.lastMouseY = this.mouseY;\n    this.resizingPanel(el, panelModel, diffX, diffY);\n  }\n  /* istanbul ignore next */\n\n\n  resizingPanel(el, panelModel, currentX, currentY) {\n    let oldSizeX = this.getCellInstance(el.id).sizeX;\n    let oldSizeY = this.getCellInstance(el.id).sizeY;\n    const dY = currentY;\n    const dX = currentX;\n\n    if (this.handleClass.indexOf('north') >= 0) {\n      if (this.elementHeight - dY < this.getMinHeight(panelModel)) {\n        currentY = this.elementHeight - this.getMinHeight(panelModel);\n        this.mOffY = dY - currentY;\n      } else if (panelModel.maxSizeY && this.elementHeight - dY > this.getMaxHeight(panelModel)) {\n        currentY = this.elementHeight - this.getMaxHeight(panelModel);\n        this.mOffY = dY - currentY;\n      } else if (this.elementY + dY < this.minTop) {\n        currentY = this.minTop - this.elementY;\n        this.mOffY = dY - currentY;\n      }\n\n      this.elementY += currentY;\n      this.elementHeight -= currentY;\n    }\n\n    if (this.handleClass.indexOf('south') >= 0) {\n      if (this.elementHeight + dY < this.getMinHeight(panelModel)) {\n        currentY = this.getMinHeight(panelModel) - this.elementHeight;\n        this.mOffY = dY - currentY;\n      } else if (panelModel.maxSizeY && this.elementHeight + dY > this.getMaxHeight(panelModel)) {\n        currentY = this.getMaxHeight(panelModel) - this.elementHeight;\n        this.mOffY = dY - currentY;\n      }\n\n      this.elementHeight += currentY;\n    }\n\n    if (this.handleClass.indexOf('west') >= 0) {\n      if (this.elementWidth - dX < this.getMinWidth(panelModel)) {\n        currentX = this.elementWidth - this.getMinWidth(panelModel);\n        this.mOffX = dX - currentX;\n      } else if (panelModel.maxSizeX && this.elementWidth - dX > this.getMaxWidth(panelModel)) {\n        currentX = this.elementWidth - this.getMaxWidth(panelModel);\n        this.mOffX = dX - currentX;\n      } else if (this.elementX + dX < this.minLeft) {\n        currentX = this.minLeft - this.elementX;\n        this.mOffX = dX - currentX;\n      }\n\n      this.elementX += currentX;\n      this.elementWidth -= currentX;\n    }\n\n    if (this.handleClass.indexOf('east') >= 0) {\n      if (this.elementWidth + dX < this.getMinWidth(panelModel)) {\n        currentX = this.getMinWidth(panelModel) - this.elementWidth;\n        this.mOffX = dX - currentX;\n      } else if (panelModel.maxSizeX && this.elementWidth + dX > this.getMaxWidth(panelModel)) {\n        currentX = this.getMaxWidth(panelModel) - this.elementWidth;\n        this.mOffX = dX - currentX;\n      }\n\n      this.elementWidth += currentX;\n    }\n\n    el.style.top = this.elementY + 'px';\n    el.style.left = this.elementX + 'px';\n    el.style.width = this.elementWidth + 'px';\n    el.style.height = this.elementHeight + 'px';\n    const item = this.getResizeRowColumn(panelModel);\n\n    if (item.col + item.sizeX > this.columns) {\n      this.panelPropertyChange(item, {\n        sizeX: item.sizeX - 1\n      });\n    }\n\n    this.shadowEle.style.top = item.row * this.getCellSize()[1] + item.row * this.cellSpacing[1] + 'px';\n    this.shadowEle.style.left = item.col * this.getCellSize()[0] + item.col * this.cellSpacing[0] + 'px';\n    this.shadowEle.style.height = item.sizeY * (this.getCellSize()[1] + this.cellSpacing[1]) + 'px';\n    this.shadowEle.style.width = item.sizeX * (this.getCellSize()[0] + this.cellSpacing[0]) + 'px';\n\n    if (oldSizeX !== item.sizeX || oldSizeY !== item.sizeY) {\n      oldSizeX = item.sizeX;\n      oldSizeY = item.sizeY;\n      const model = this.getCellInstance(el.id);\n      const value = {\n        attributes: {\n          row: model.row.toString(),\n          col: model.col.toString(),\n          sizeX: model.sizeX.toString(),\n          sizeY: model.sizeY.toString()\n        }\n      };\n      this.setAttributes(value, el);\n      this.mainElement = el;\n      this.updatePanelLayout(el, this.getCellInstance(el.id));\n      this.updateOldRowColumn();\n      this.sortedPanel();\n    }\n  }\n\n  upResizeHandler(e) {\n    if (isNullOrUndefined(this.downTarget)) {\n      return;\n    }\n\n    this.upTarget = this.downTarget;\n    const el = closest(this.upTarget, '.e-panel');\n    const args = {\n      event: e,\n      element: el,\n      isInteracted: true\n    };\n\n    if (el) {\n      addClass([el], 'e-panel-transition');\n      const moveEventName = Browser.info.name === 'msie' ? 'mousemove pointermove' : 'mousemove';\n      const upEventName = Browser.info.name === 'msie' ? 'mouseup pointerup' : 'mouseup';\n      EventHandler.remove(document, moveEventName, this.moveResizeHandler);\n      EventHandler.remove(document, upEventName, this.upResizeHandler);\n\n      if (Browser.info.name !== 'msie') {\n        EventHandler.remove(document, 'touchmove', this.touchMoveResizeHandler);\n        EventHandler.remove(document, 'touchend', this.upResizeHandler);\n      }\n\n      this.isMouseUpBound = false;\n      this.isMouseMoveBound = false;\n\n      if (this.shadowEle) {\n        detach(this.shadowEle);\n      }\n\n      this.shadowEle = null;\n      const panelModel = this.getCellInstance(el.getAttribute('id'));\n      this.setPanelPosition(el, panelModel.row, panelModel.col);\n      this.setHeightAndWidth(el, panelModel);\n    }\n\n    removeClass([el], [dragging]);\n    this.trigger('resizeStop', args);\n    this.resizeCalled = false;\n    this.lastMouseX = this.lastMouseY = undefined;\n    this.mOffX = this.mOffY = 0;\n    this.mainElement = null;\n\n    if (this.allowFloating) {\n      this.moveItemsUpwards();\n    }\n\n    this.updatePanels();\n    this.updateCloneArrayObject();\n    this.checkForChanges(true);\n  }\n\n  getResizeRowColumn(item) {\n    let isChanged = false;\n    let col = item.col;\n\n    if (['e-west', 'e-south-west'].indexOf(this.handleClass) !== -1) {\n      col = this.pixelsToColumns(this.elementX, false);\n    }\n\n    let row = item.row;\n\n    if (['e-north'].indexOf(this.handleClass) !== -1) {\n      row = this.pixelsToRows(this.elementY, false);\n\n      if (this.previousRow !== row) {\n        this.previousRow = row;\n        isChanged = true;\n      }\n    }\n\n    let sizeX = item.sizeX;\n\n    if (['e-north', 'e-south'].indexOf(this.handleClass) === -1) {\n      sizeX = this.pixelsToColumns(this.elementWidth - sizeX * this.cellSpacing[1], true);\n    }\n\n    let sizeY = item.sizeY;\n\n    if (['e-east', 'e-west'].indexOf(this.handleClass) === -1) {\n      if (this.handleClass === 'e-north' ? isChanged : true) {\n        sizeY = this.pixelsToRows(this.elementHeight - sizeY * this.cellSpacing[0], true);\n      }\n    }\n\n    if (item.col + item.sizeX > this.columns) {\n      item.sizeX = item.sizeX - 1;\n    }\n\n    const canOccupy = row > -1 && col > -1 && sizeX + col <= this.maxCol() && sizeY + row <= this.maxRow();\n\n    if (canOccupy && this.collisions(row, col, sizeX, sizeY, this.getPanelBase(item.id)).length === 0 || this.allowPushing !== false) {\n      this.panelPropertyChange(item, {\n        row: row,\n        col: col,\n        sizeX: sizeX,\n        sizeY: sizeY\n      });\n    }\n\n    return item;\n  }\n\n  pixelsToColumns(pixels, isCeil) {\n    const curColWidth = this.cellSize[0];\n\n    if (isCeil) {\n      return Math.ceil(pixels / curColWidth);\n    } else {\n      return Math.floor(pixels / curColWidth);\n    }\n  }\n\n  pixelsToRows(pixels, isCeil) {\n    if (isCeil) {\n      return Math.round(pixels / this.cellSize[1]);\n    } else {\n      return Math.round(pixels / (this.cellSize[1] + this.cellSpacing[0]));\n    }\n  }\n\n  getMinWidth(item) {\n    return item.minSizeX * this.getCellSize()[0];\n  }\n\n  getMaxWidth(item) {\n    return item.maxSizeX * this.getCellSize()[0];\n  }\n\n  getMinHeight(item) {\n    return item.minSizeY * this.getCellSize()[1];\n  }\n\n  getMaxHeight(item) {\n    return item.maxSizeY * this.getCellSize()[1];\n  }\n\n  sortedPanel() {\n    this.sortedArray = [];\n\n    for (let i = 0, l = this.panelCollection.length; i < l; ++i) {\n      this.sortItem(this.panelCollection[i]);\n    }\n  }\n\n  moveItemsUpwards() {\n    if (this.allowFloating === false) {\n      return;\n    }\n\n    for (let rowIndex = 0, l = this.sortedArray.length; rowIndex < l; ++rowIndex) {\n      const columns = this.sortedArray[rowIndex];\n\n      if (!columns) {\n        continue;\n      }\n\n      for (let colIndex = 0, len = columns.length; colIndex < len; ++colIndex) {\n        const item = columns[colIndex];\n\n        if (item) {\n          this.moveItemUpwards(item);\n        }\n      }\n    }\n\n    this.updateGridLines();\n  }\n\n  moveItemUpwards(item) {\n    if (this.allowFloating === false || item === this.mainElement) {\n      return;\n    }\n\n    const colIndex = this.getCellInstance(item.id).col;\n    const sizeY = parseInt(item.getAttribute('data-sizeY'), 10);\n    const sizeX = parseInt(item.getAttribute('data-sizeX'), 10);\n    let availableRow = null;\n    let availableColumn = null;\n    let rowIndex = parseInt(item.getAttribute('data-row'), 10) - 1;\n\n    while (rowIndex > -1) {\n      const items = this.collisions(rowIndex, colIndex, sizeX, sizeY, item);\n\n      if (items.length !== 0) {\n        break;\n      }\n\n      availableRow = rowIndex;\n      availableColumn = colIndex;\n      --rowIndex;\n    }\n\n    if (availableRow !== null) {\n      this.sortItem(item, availableRow, availableColumn);\n    }\n  }\n\n  sortItem(item, rowValue, columnValue) {\n    this.overlapElement = [];\n    const column = parseInt(item.getAttribute('data-col'), 10);\n    const row = parseInt(item.getAttribute('data-row'), 10);\n\n    if (!this.sortedArray[row]) {\n      this.sortedArray[row] = [];\n    }\n\n    this.sortedArray[row][column] = item;\n\n    if (item !== undefined && rowValue !== undefined && columnValue !== undefined) {\n      if (this.oldRowCol[item.id] !== undefined && this.oldRowCol[item.id].row !== null && typeof this.oldRowCol[item.id].col !== 'undefined') {\n        {\n          const oldRow = this.sortedArray[this.oldRowCol[item.id].row];\n\n          if (this.oldRowCol[item.id] && oldRow[this.oldRowCol[item.id].col] === item) {\n            delete oldRow[this.oldRowCol[item.id].col];\n            this.updateOldRowColumn();\n            this.sortedPanel();\n          }\n        }\n      }\n\n      this.oldRowCol[item.id].row = rowValue;\n      this.oldRowCol[item.id].row = columnValue;\n\n      if (!this.sortedArray[row]) {\n        this.sortedArray[row] = [];\n      }\n\n      this.sortedArray[row][column] = item;\n\n      if (this.allItems.indexOf(item) === -1) {\n        this.allItems.push(item);\n      }\n\n      this.panelPropertyChange(this.getCellInstance(item.id), {\n        row: rowValue,\n        col: columnValue\n      });\n      const panelModel = this.getCellInstance(item.id);\n      this.setAttributes({\n        value: {\n          col: panelModel.col.toString(),\n          row: panelModel.row.toString()\n        }\n      }, item);\n      this.updateLayout(item, this.getCellInstance(item.id));\n    }\n  }\n\n  updateLayout(element, panelModel) {\n    this.setPanelPosition(element, panelModel.row, panelModel.col);\n    this.setHeightAndWidth(element, panelModel);\n    this.updateRowHeight();\n    this.sortedPanel();\n  }\n\n  refresh() {\n    this.panelsSizeY = 0;\n    this.updateDragArea();\n\n    if (this.checkMediaQuery()) {\n      this.checkMediaQuerySizing();\n    } else {\n      if (this.element.classList.contains(responsive)) {\n        removeClass([this.element], [responsive]);\n\n        for (let i = 0; i < this.element.querySelectorAll('.e-panel').length; i++) {\n          const ele = this.element.querySelectorAll('.e-panel')[i];\n          const cellInstance = this.getCellInstance(ele.id);\n          const row = parseInt(ele.getAttribute('data-row'), 10);\n          const col = parseInt(ele.getAttribute('data-col'), 10);\n          this.panelPropertyChange(cellInstance, {\n            row: row,\n            col: col\n          });\n          this.setHeightAndWidth(ele, this.getCellInstance(ele.id));\n          this.setPanelPosition(ele, row, col);\n          this.updateRowHeight();\n        }\n      }\n\n      this.panelResponsiveUpdate();\n      this.updateGridLines();\n    }\n\n    this.removeResizeClasses(this.panelCollection);\n    this.setClasses(this.panelCollection);\n    this.resizeEvents();\n    this.checkDragging(this.dragCollection);\n  }\n\n  updateGridLines() {\n    if (this.element.querySelector('.e-dashboard-gridline-table')) {\n      if (this.table) {\n        detach(this.table);\n      }\n\n      this.initGridLines();\n    }\n  }\n\n  checkDragging(dragCollection) {\n    if (this.checkMediaQuery() || !this.allowDragging) {\n      for (let i = 0; i < dragCollection.length; i++) {\n        dragCollection[i].destroy();\n      }\n    } else {\n      for (let i = 0; i < dragCollection.length; i++) {\n        dragCollection[i].destroy();\n      }\n\n      this.enableDraggingContent(this.panelCollection);\n    }\n  }\n\n  sortPanels() {\n    const model = [];\n\n    for (let row = 0; row <= this.rows; row++) {\n      for (let col = 0; col < this.columns; col++) {\n        this.panels.filter(panel => {\n          if (panel.row === row && panel.col === col) {\n            model.push(panel);\n          }\n        });\n      }\n    }\n\n    return model;\n  }\n\n  checkMediaQuerySizing() {\n    addClass([this.element], [responsive]);\n    let updatedPanel;\n\n    if (this.isPanelRemoved && this.panels) {\n      updatedPanel = this.panels;\n    } else {\n      updatedPanel = this.sortPanels();\n    }\n\n    this.updatedRows = updatedPanel.length;\n\n    for (let i = 0; i < updatedPanel.length; i++) {\n      const panelElement = document.getElementById(updatedPanel[i].id); // eslint-disable-next-line\n\n      let updatedHeight;\n\n      if (panelElement) {\n        setStyleAttribute(panelElement, {\n          'width': '100%'\n        });\n        panelElement.style.height = ' ' + (this.element.parentElement && this.element.parentElement.offsetWidth / this.cellAspectRatio) * updatedPanel[i].sizeY + 'px';\n\n        if (updatedPanel[i].sizeY > 1) {\n          updatedHeight = (this.element.parentElement && this.element.parentElement.offsetWidth / this.cellAspectRatio) * updatedPanel[i].sizeY + // eslint-disable-next-line radix\n          parseInt((Math.round(updatedPanel[i].sizeY / 2) * this.cellSpacing[1]).toString(), 0);\n          panelElement.style.height = '' + updatedHeight + 'px';\n        }\n\n        this.resizeHeight = true;\n        this.panelPropertyChange(updatedPanel[i], {\n          row: i,\n          col: 0\n        });\n        this.setPanelPosition(panelElement, updatedPanel[i].row, updatedPanel[i].col);\n        this.panelsSizeY = this.panelsSizeY + updatedPanel[i].sizeY;\n        this.setClasses(this.panelCollection);\n        this.checkDragging(this.dragCollection);\n        this.removeResizeClasses(this.panelCollection);\n      }\n    }\n\n    this.updateRowHeight();\n  }\n\n  panelResponsiveUpdate() {\n    this.element.classList.add('e-responsive');\n    this.calculateCellSize();\n\n    for (let i = 0; i < this.element.querySelectorAll('.e-panel').length; i++) {\n      const ele = this.element.querySelectorAll('.e-panel')[i];\n      const panelModel = this.getCellInstance(ele.id);\n      this.setHeightAndWidth(ele, panelModel);\n    }\n\n    for (let i = 0; i < this.panels.length; i++) {\n      this.setPanelPosition(document.getElementById(this.panels[i].id), this.panels[i].row, this.panels[i].col);\n    }\n\n    this.updateRowHeight();\n  }\n\n  updateRowHeight() {\n    this.getRowColumn();\n    this.setHeightWidth();\n  }\n\n  setHeightWidth() {\n    let heightValue;\n    let widthValue;\n\n    if (this.checkMediaQuery()) {\n      heightValue = this.maxRow() * (this.element.parentElement && this.element.parentElement.offsetWidth / this.cellAspectRatio) + (this.maxRow() - 1) * this.cellSpacing[1] + 'px';\n    } else {\n      heightValue = this.maxRow() * (this.cellSize[0] / this.cellAspectRatio) + (this.maxRow() - 1) * this.cellSpacing[1] + 'px';\n    }\n\n    setStyleAttribute(this.element, {\n      'height': heightValue\n    }); // eslint-disable-next-line prefer-const\n\n    widthValue = window.getComputedStyle(this.element).width;\n    setStyleAttribute(this.element, {\n      'width': widthValue\n    });\n  }\n\n  setHeightAndWidth(panelElement, panelModel) {\n    setStyleAttribute(panelElement, {\n      'height': formatUnit(this.setXYDimensions(panelModel)[0])\n    });\n    setStyleAttribute(panelElement, {\n      'width': formatUnit(this.setXYDimensions(panelModel)[1])\n    });\n  }\n\n  renderCell(panel, isStringTemplate, index) {\n    let cellElement;\n    this.dimensions = this.setXYDimensions(panel);\n\n    if (isUndefined(panel.enabled)) {\n      panel.enabled = true;\n    }\n\n    if (this.contentTemplateChild.length > 0 && !isNullOrUndefined(index)) {\n      cellElement = this.contentTemplateChild[index];\n\n      if (panel.cssClass) {\n        addClass([cellElement], [panel.cssClass]);\n      }\n\n      if (panel.id) {\n        cellElement.setAttribute('id', panel.id);\n      }\n    } else {\n      cellElement = this.createPanelElement(panel.cssClass ? panel.cssClass.split(' ') : null, panel.id);\n    }\n\n    cellElement.style.zIndex = '' + panel.zIndex;\n    this.element.appendChild(cellElement);\n    this.renderReactTemplates();\n    const dashBoardCell = this.renderPanels(cellElement, panel, panel.id, isStringTemplate);\n    this.panelCollection.push(dashBoardCell);\n    this.setXYAttributes(cellElement, panel);\n    this.setHeightAndWidth(cellElement, panel);\n    return cellElement;\n  }\n\n  setPanelPosition(cellElement, row, col) {\n    if (!cellElement) {\n      return;\n    }\n\n    if (this.checkMediaQuery()) {\n      this.calculateCellSize();\n    }\n\n    const heightValue = this.getCellSize()[1];\n    const widthValue = this.getCellSize()[0];\n    const left = col === 0 ? 0 : col * (widthValue + this.cellSpacing[0]);\n    let top = row === 0 ? 0 : row * (heightValue + this.cellSpacing[1]);\n\n    if (this.checkMediaQuery()) {\n      top = row === 0 ? 0 : this.panelsSizeY * (heightValue + this.cellSpacing[1]);\n    }\n\n    setStyleAttribute(cellElement, {\n      'left': left + 'px',\n      'top': top + 'px'\n    });\n  }\n\n  getRowColumn() {\n    this.rows = null;\n\n    if (this.element.querySelectorAll('.e-panel').length > 0 && !this.updatedRows) {\n      const panelElements = this.element.querySelectorAll('.e-panel');\n\n      for (let i = 0; i < panelElements.length; i++) {\n        const panelElement = panelElements[i];\n        const rowValue = parseInt(panelElement.getAttribute('data-row'), 10);\n        const xValue = parseInt(panelElement.getAttribute('data-sizeY'), 10);\n        this.rows = Math.max(this.rows, rowValue + xValue);\n      }\n    } else {\n      if (this.updatedRows) {\n        this.rows = this.updatedRows;\n        this.updatedRows = null;\n      }\n\n      for (let i = 0; i < this.panels.length; i++) {\n        this.rows = Math.max(this.rows, this.panels[i].row);\n      }\n    }\n  }\n\n  setMinMaxValues(panel) {\n    if (!panel.sizeX || panel.sizeX < panel.minSizeX) {\n      this.panelPropertyChange(panel, {\n        sizeX: panel.minSizeX\n      });\n    } else if (panel.maxSizeX && panel.sizeX > panel.maxSizeX) {\n      this.panelPropertyChange(panel, {\n        sizeX: panel.maxSizeX\n      });\n    } else if (panel.sizeX > this.columns) {\n      this.panelPropertyChange(panel, {\n        sizeX: this.columns\n      });\n    } else {\n      this.panelPropertyChange(panel, {\n        sizeX: panel.sizeX\n      });\n    }\n\n    if (!panel.sizeY || panel.sizeY < panel.minSizeY) {\n      this.panelPropertyChange(panel, {\n        sizeY: panel.minSizeY\n      });\n    } else if (panel.maxSizeY && panel.sizeY > panel.maxSizeY) {\n      this.panelPropertyChange(panel, {\n        sizeY: panel.maxSizeY\n      });\n    } else {\n      this.panelPropertyChange(panel, {\n        sizeY: panel.sizeY\n      });\n    }\n  }\n\n  checkMinMaxValues(panel) {\n    if (panel.col + panel.sizeX > this.columns) {\n      this.panelPropertyChange(panel, {\n        sizeX: panel.sizeX + (this.columns - (panel.col + panel.sizeX))\n      });\n    }\n  }\n\n  panelPropertyChange(panel, value) {\n    // eslint-disable-next-line\n    panel.setProperties(value, true);\n  }\n\n  renderDashBoardCells(cells) {\n    if (this.element.querySelectorAll('.e-panel').length > 0 || this.panels.length > 0) {\n      for (let j = 0; j < cells.length; j++) {\n        this.gridPanelCollection.push(cells[j]);\n        this.setMinMaxValues(cells[j]);\n\n        if (this.maxColumnValue < cells[j].col || this.maxColumnValue < cells[j].col + cells[j].sizeX) {\n          this.panelPropertyChange(cells[j], {\n            col: this.maxColumnValue - cells[j].sizeX\n          });\n        }\n\n        const cell = this.renderCell(cells[j], false, j);\n\n        if (this.enableRtl) {\n          addClass([cell], 'e-rtl');\n        }\n\n        this.element.appendChild(cell);\n        this.renderReactTemplates();\n\n        if (this.checkMediaQuery() && j === cells.length - 1) {\n          this.checkMediaQuerySizing();\n        } else {\n          this.setPanelPosition(cell, cells[j].row, cells[j].col);\n          this.mainElement = cell;\n          this.updatePanelLayout(cell, cells[j]);\n          this.mainElement = null;\n        }\n      }\n    }\n\n    this.setClasses(this.panelCollection);\n  }\n\n  collisions(row, col, sizeX, sizeY, ignore) {\n    const items = [];\n\n    if (!sizeX || !sizeY) {\n      sizeX = sizeY = 1;\n    }\n\n    if (ignore && !(ignore instanceof Array)) {\n      ignore = [ignore];\n    }\n\n    let item;\n\n    for (let h = 0; h < sizeY; ++h) {\n      for (let w = 0; w < sizeX; ++w) {\n        item = this.getPanel(row + h, col + w, ignore);\n\n        if (item && (!ignore || ignore.indexOf(document.getElementById(item.id)) === -1) && items.indexOf(document.getElementById(item.id)) === -1) {\n          items.push(document.getElementById(item.id));\n        }\n      }\n    }\n\n    return items;\n  }\n\n  rightWardsSpaceChecking(rowElements, col, ele) {\n    const columns = [];\n    let spacedColumns = [];\n    rowElements.forEach(element => {\n      const columnValue = parseInt(element.getAttribute('data-col'), 10);\n      const sizeXValue = parseInt(element.getAttribute('data-sizeX'), 10);\n\n      if (col < this.columns && columnValue >= col) {\n        if (sizeXValue > 1) {\n          for (let i = columnValue; i < columnValue + sizeXValue; i++) {\n            columns.push(i);\n          }\n        } else {\n          columns.push(columnValue);\n        }\n      }\n    });\n\n    if (columns.length > 0) {\n      for (let i = col + 1; i <= this.columns - 1; i++) {\n        if (columns.indexOf(i) === -1 && i !== col) {\n          if (spacedColumns.indexOf(i) === -1) {\n            spacedColumns.push(i);\n          }\n        }\n      }\n    }\n\n    const occupiedValues = this.getOccupiedColumns(ele);\n    occupiedValues.forEach(colValue => {\n      if (colValue > col && spacedColumns.indexOf(colValue) !== -1) {\n        spacedColumns.splice(spacedColumns.indexOf(colValue), 1);\n      }\n    });\n    const eleOccupiedValues = this.getOccupiedColumns(this.checkingElement);\n    eleOccupiedValues.forEach(col => {\n      if (col > parseInt(ele.getAttribute('data-col'), 10) && occupiedValues.indexOf(col) === -1 && spacedColumns.indexOf(col) === -1) {\n        spacedColumns.push(col);\n      }\n    });\n    spacedColumns = spacedColumns.sort((next, previous) => {\n      return next - previous;\n    });\n    return spacedColumns;\n  }\n\n  getOccupiedColumns(element) {\n    const occupiedItems = [];\n    const sizeX = parseInt(element.getAttribute('data-sizeX'), 10);\n    const col = parseInt(element.getAttribute('data-col'), 10);\n\n    for (let i = col; i < col + sizeX && i <= this.columns; i++) {\n      occupiedItems.push(i);\n    }\n\n    return occupiedItems;\n  }\n\n  leftWardsSpaceChecking(rowElements, col, ele) {\n    let spacedColumns = [];\n    const columns = [];\n    rowElements.forEach(element => {\n      const colValue = parseInt(element.getAttribute('data-col'), 10);\n      const xValue = parseInt(element.getAttribute('data-sizeX'), 10);\n\n      if (col <= this.columns && colValue <= col) {\n        if (xValue > 1) {\n          for (let i = colValue; i < colValue + xValue; i++) {\n            columns.push(i);\n          }\n        } else {\n          columns.push(colValue);\n        }\n      }\n    });\n\n    if (columns.length > 0) {\n      for (let j = 0; j <= col; j++) {\n        if (columns.indexOf(j) === -1 && j !== col) {\n          if (spacedColumns.indexOf(j) === -1) {\n            spacedColumns.push(j);\n          }\n        }\n      }\n    }\n\n    const occupiedValues = this.getOccupiedColumns(ele);\n    occupiedValues.forEach(colValue => {\n      if (colValue < col && spacedColumns.indexOf(colValue) !== -1) {\n        spacedColumns.splice(spacedColumns.indexOf(colValue), 1);\n      }\n    });\n    const eleOccupiedValues = this.getOccupiedColumns(this.checkingElement);\n    eleOccupiedValues.forEach(col => {\n      if (col < parseInt(ele.getAttribute('data-col'), 10) && occupiedValues.indexOf(col) === -1 && spacedColumns.indexOf(col) === -1) {\n        spacedColumns.push(col);\n      }\n    });\n    spacedColumns = spacedColumns.sort((next, prev) => {\n      return next - prev;\n    });\n    spacedColumns = spacedColumns.reverse();\n    return spacedColumns;\n  }\n\n  adjustmentAvailable(row, col, sizeY, sizeX, ele) {\n    this.leftAdjustable = undefined;\n    this.rightAdjustable = undefined;\n    let isAdjustable = false;\n    let rightSpacing;\n    let rowElement = [];\n    this.topAdjustable = undefined;\n    const eleSizeX = parseInt(ele.getAttribute('data-sizeX'), 10);\n    const eleCol = parseInt(ele.getAttribute('data-col'), 10);\n    rowElement = this.getRowElements(this.collisions(row, 0, this.columns, sizeY, []));\n\n    if (rowElement.indexOf(ele) === -1) {\n      rowElement.push(ele);\n    }\n\n    const leftSpacing = this.leftWardsSpaceChecking(rowElement, col, ele);\n\n    if (leftSpacing.length > 0) {\n      this.leftAdjustable = this.isLeftAdjustable(leftSpacing, ele, row, col, sizeX, sizeY);\n\n      if (this.spacedColumnValue !== eleCol - this.getCellInstance(this.checkingElement.id).sizeX) {\n        this.leftAdjustable = false;\n      }\n\n      if (this.leftAdjustable) {\n        this.rightAdjustable = false;\n      } else {\n        this.leftAdjustable = false;\n        rightSpacing = this.rightWardsSpaceChecking(rowElement, col, ele);\n        this.rightAdjustable = rightSpacing.length > 0 ? this.isRightAdjustable(rightSpacing, ele, row, col, sizeX, sizeY) : false;\n\n        if (this.spacedColumnValue !== eleSizeX + eleCol) {\n          this.rightAdjustable = false;\n        }\n\n        if (!this.rightAdjustable) {\n          this.rightAdjustable = false;\n        }\n      }\n    } else {\n      rightSpacing = this.rightWardsSpaceChecking(rowElement, col, ele);\n      this.rightAdjustable = rightSpacing.length > 0 ? this.isRightAdjustable(rightSpacing, ele, row, col, sizeX, sizeY) : false;\n\n      if (this.spacedColumnValue !== eleSizeX + eleCol) {\n        this.rightAdjustable = false;\n      }\n\n      if (this.rightAdjustable) {\n        this.leftAdjustable = false;\n      }\n    }\n\n    if (!this.rightAdjustable && !this.leftAdjustable && row > 0) {\n      const endRow = this.getCellInstance(ele.id).row;\n      let topCheck = false;\n\n      if (this.startRow !== endRow) {\n        topCheck = true;\n      }\n\n      for (let rowValue = row; rowValue >= 0; rowValue--) {\n        const element = this.getCellInstance(ele.id).sizeY > 1 && topCheck ? this.checkingElement : ele;\n\n        if (rowValue !== endRow && rowValue === endRow - sizeY && this.collisions(rowValue, col, sizeX, sizeY, element).length === 0) {\n          topCheck = false;\n          this.topAdjustable = true;\n          this.spacedRowValue = isNullOrUndefined(this.spacedRowValue) ? rowValue : this.spacedRowValue;\n          this.spacedColumnValue = col;\n        }\n      }\n    }\n\n    if (this.rightAdjustable || this.leftAdjustable || this.topAdjustable) {\n      isAdjustable = true;\n\n      if (isNullOrUndefined(this.spacedRowValue)) {\n        this.spacedRowValue = row;\n      }\n    }\n\n    return isAdjustable;\n  }\n\n  isXSpacingAvailable(spacing, sizeX) {\n    let isSpaceAvailable = false;\n    let subSpacingColumns = [];\n\n    for (let i = 0; i < spacing.length; i++) {\n      if (spacing[i + 1] - spacing[i] === 1 || spacing[i + 1] - spacing[i] === -1) {\n        subSpacingColumns.push(spacing[i]);\n\n        if (sizeX === 2) {\n          subSpacingColumns.push(spacing[i + 1]);\n        }\n\n        if (i === spacing.length - 2) {\n          subSpacingColumns.push(spacing[i + 1]);\n\n          if (subSpacingColumns.length > sizeX) {\n            subSpacingColumns.splice(-1);\n          }\n        }\n\n        if (subSpacingColumns.length === sizeX) {\n          isSpaceAvailable = true;\n          this.spacedColumnValue = subSpacingColumns.sort((next, previous) => {\n            return next - previous;\n          })[0];\n\n          if (this.spacedColumnValue < 0) {\n            this.spacedColumnValue = 1;\n          }\n\n          return isSpaceAvailable;\n        }\n      } else {\n        subSpacingColumns = [];\n        continue;\n      }\n    }\n\n    return isSpaceAvailable;\n  }\n\n  getRowElements(base) {\n    const rowElements = [];\n\n    for (let i = 0; i < base.length; i++) {\n      rowElements.push(base[i]);\n    }\n\n    return rowElements;\n  }\n\n  isLeftAdjustable(spaces, ele, row, col, sizeX, sizeY) {\n    let isLeftAdjudtable;\n\n    if (sizeX === 1 && sizeY === 1 && spaces.length > 0) {\n      this.spacedColumnValue = spaces[0];\n      isLeftAdjudtable = true;\n    } else if (sizeX > 1 && sizeY === 1) {\n      isLeftAdjudtable = this.isXSpacingAvailable(spaces, sizeX);\n    } else if (sizeY > 1) {\n      if (sizeX === 1) {\n        let xAdjust;\n\n        if (spaces.length >= 1) {\n          xAdjust = true;\n        }\n\n        if (xAdjust) {\n          for (let i = 0; i < spaces.length; i++) {\n            const collisionValue = this.collisions(row, spaces[i], sizeX, sizeY, this.checkingElement);\n\n            if (collisionValue.length === 0) {\n              this.spacedColumnValue = spaces[i];\n              isLeftAdjudtable = true;\n              return isLeftAdjudtable;\n            } else {\n              isLeftAdjudtable = false;\n            }\n          }\n        }\n      } else {\n        isLeftAdjudtable = this.replacable(spaces, sizeX, row, sizeY, ele);\n      }\n    }\n\n    return isLeftAdjudtable;\n  }\n\n  isRightAdjustable(spacing, ele, row, col, sizeX, sizeY) {\n    let isRightAdjudtable;\n\n    if (sizeX === 1 && sizeY === 1 && spacing.length > 0) {\n      this.spacedColumnValue = spacing[0];\n      isRightAdjudtable = true;\n    } else if (sizeX > 1 && sizeY === 1) {\n      isRightAdjudtable = this.isXSpacingAvailable(spacing, sizeX);\n    } else if (sizeY > 1) {\n      if (sizeX === 1) {\n        let xAdjust;\n\n        if (spacing.length >= 1) {\n          xAdjust = true;\n        }\n\n        if (xAdjust) {\n          for (let i = 0; i < spacing.length; i++) {\n            const collisionValue = this.collisions(row, spacing[i], sizeX, sizeY, this.checkingElement);\n\n            for (let collision = 0; collision < collisionValue.length; collision++) {\n              if (parseInt(ele.getAttribute('data-col'), 10) !== spacing[i]) {\n                collisionValue.splice(collisionValue.indexOf(collisionValue[collision]), 1);\n              }\n            }\n\n            if (collisionValue.length === 0) {\n              isRightAdjudtable = true;\n              this.spacedColumnValue = spacing[i];\n              return isRightAdjudtable;\n            } else {\n              isRightAdjudtable = false;\n            }\n          }\n        }\n      } else {\n        isRightAdjudtable = this.replacable(spacing, sizeX, row, sizeY, ele);\n      }\n    }\n\n    return isRightAdjudtable;\n  }\n\n  replacable(spacing, sizeX, row, sizeY, ele) {\n    let isRightAdjudtable;\n    const updatedCollision = [];\n\n    for (let j = 0; j < spacing.length; j++) {\n      const xAdjust = this.isXSpacingAvailable(spacing, sizeX);\n\n      if (xAdjust) {\n        const exclusions = [];\n        exclusions.push(this.checkingElement);\n        exclusions.push(ele);\n\n        if (updatedCollision.length === 0) {\n          isRightAdjudtable = true; // eslint-disable-next-line no-self-assign\n\n          this.spacedColumnValue = this.spacedColumnValue;\n          return isRightAdjudtable;\n        } else {\n          isRightAdjudtable = false;\n        }\n      }\n    }\n\n    return isRightAdjudtable;\n  }\n\n  sortCollisionItems(collisionItems) {\n    const updatedCollision = [];\n    let rowElements;\n\n    for (let row = this.rows - 1; row >= 0; row--) {\n      rowElements = [];\n      collisionItems.forEach(element => {\n        if (element && element.getAttribute('data-row') === row.toString()) {\n          rowElements.push(element);\n        }\n      });\n\n      for (let column = this.columns - 1; column >= 0; column--) {\n        rowElements.forEach(item => {\n          if (item && item.getAttribute('data-col') === column.toString()) {\n            updatedCollision.push(item);\n          }\n        });\n      }\n    }\n\n    return updatedCollision;\n  }\n\n  updatedModels(collisionItems, panelModel, ele) {\n    const removeableElement = [];\n\n    if (!this.mainElement) {\n      this.sortedPanel();\n    }\n\n    collisionItems.forEach(element => {\n      this.checkingElement = element;\n      const model = this.getCellInstance(element.id);\n      const adjust = !this.adjustmentAvailable(model.row, model.col, model.sizeY, model.sizeX, ele);\n\n      if (model.sizeX > 1 && adjust) {\n        for (let rowValue = model.row; rowValue < panelModel.row + panelModel.sizeY; rowValue++) {\n          const collisions = this.collisions(rowValue, model.col, model.sizeX, model.sizeY, element);\n          collisions.forEach(item => {\n            if (collisionItems.indexOf(item) >= 0 && removeableElement.indexOf(item) === -1) {\n              removeableElement.push(item);\n            }\n          });\n        }\n      }\n    });\n    removeableElement.forEach(item => {\n      if (removeableElement.indexOf(item) >= 0) {\n        collisionItems.splice(collisionItems.indexOf(item), 1);\n      }\n    });\n    return collisionItems;\n  }\n\n  resetLayout(model) {\n    let collisions = this.collisions(model.row, model.col, model.sizeX, model.sizeY, this.mainElement);\n\n    if (!this.mainElement || this.addPanelCalled || this.resizeCalled || this.movePanelCalled) {\n      return collisions;\n    }\n\n    if (this.mainElement && this.oldRowCol !== this.cloneObject) {\n      for (let i = 0; i < this.panels.length; i++) {\n        const element = document.getElementById(this.panels[i].id);\n\n        if (element === this.mainElement) {\n          continue;\n        }\n\n        const rowValue = this.cloneObject[element.id].row;\n        const colValue = this.cloneObject[element.id].col;\n        this.setPanelPosition(element, rowValue, colValue);\n        this.panelPropertyChange(this.getCellInstance(element.id), {\n          row: rowValue,\n          col: colValue\n        });\n        this.setAttributes({\n          value: {\n            col: colValue.toString(),\n            row: rowValue.toString()\n          }\n        }, element);\n        this.updateOldRowColumn();\n      }\n    }\n\n    this.sortedArray = this.cloneArray;\n    collisions = this.collisions(model.row, model.col, model.sizeX, model.sizeY, this.mainElement);\n    this.sortedPanel();\n    this.updateOldRowColumn();\n\n    if (this.checkCollision && this.checkCollision.length > 0 && collisions.indexOf(this.checkCollision[0]) === -1 && this.cloneObject[this.checkCollision[0].id].row === model.row) {\n      collisions.push(this.checkCollision[0]);\n    }\n\n    return collisions;\n  }\n\n  swapAvailability(collisions, element) {\n    let available = true;\n    const eleModel = this.getCellInstance(element.id);\n\n    for (let count = 0; count < collisions.length; count++) {\n      const collideModel = this.getCellInstance(collisions[count].id);\n\n      for (let i = 1; i < eleModel.sizeY; i++) {\n        const excludeEle = [];\n        excludeEle.push(element);\n        excludeEle.push(collisions[count]);\n        const collision = this.collisions(eleModel.row + i, collideModel.col, collideModel.sizeX, collideModel.sizeY, excludeEle);\n\n        if (collision.length > 0) {\n          available = false;\n          return false;\n        } else {\n          continue;\n        }\n      }\n    }\n\n    return available;\n  }\n\n  checkForSwapping(collisions, element) {\n    if (!this.mainElement || collisions.length === 0) {\n      return false;\n    }\n\n    let direction;\n    const eleSwapRow = parseInt(collisions[0].getAttribute('data-row'), 10);\n\n    if (this.startRow < eleSwapRow) {\n      direction = 1;\n    } else if (this.startRow > eleSwapRow) {\n      direction = 0;\n    }\n\n    if (!this.swapAvailability(collisions, element)) {\n      return false;\n    }\n\n    let isSwappable = false;\n\n    for (let count1 = 0; count1 < collisions.length; count1++) {\n      if (collisions.length >= 1 && this.cloneObject[this.mainElement.id].row === this.oldRowCol[this.mainElement.id].row) {\n        return false;\n      }\n    }\n\n    const updatedRow = direction === 0 ? this.getCellInstance(this.mainElement.id).row + this.getCellInstance(this.mainElement.id).sizeY : this.startRow;\n\n    for (let count = 0; count < collisions.length; count++) {\n      const collideInstance = this.getCellInstance(collisions[count].id);\n      const elementinstance = this.getCellInstance(element.id);\n      const ignore = [];\n\n      if (collideInstance.sizeY === 1 && ignore.indexOf(collisions[count]) === -1) {\n        ignore.push(collisions[count]);\n      } else if (collideInstance.sizeY > 1 && ignore.indexOf(collisions[count]) === -1) {\n        if (direction === 1 && elementinstance.row === this.cloneObject[collideInstance.id].row + collideInstance.sizeY - 1) {\n          ignore.push(collisions[count]);\n        } else if (direction === 0 && elementinstance.row === this.cloneObject[collideInstance.id].row) {\n          ignore.push(collisions[count]);\n        } else {\n          return false;\n        }\n      }\n\n      if (collideInstance.sizeY <= elementinstance.sizeY && ignore.indexOf(collisions[count]) === -1) {\n        ignore.push(collisions[count]);\n      }\n\n      ignore.push(this.mainElement);\n      const swapCollision = this.collisions(updatedRow, collideInstance.col, collideInstance.sizeX, collideInstance.sizeY, ignore);\n\n      if (swapCollision.length > 0) {\n        isSwappable = false;\n        return isSwappable;\n      } else {\n        if (count === collisions.length - 1) {\n          isSwappable = true;\n        }\n\n        continue;\n      }\n    }\n\n    return isSwappable;\n  }\n\n  swapItems(collisions, element, panelModel) {\n    let direction;\n    const swappedElements = [];\n    swappedElements.push(element);\n    const eleSwapRow = parseInt(collisions[0].getAttribute('data-row'), 10);\n\n    if (this.startRow < eleSwapRow) {\n      direction = 1;\n    } else if (this.startRow > eleSwapRow) {\n      direction = 0;\n    }\n\n    const collisionItemsRow = direction === 0 ? eleSwapRow + panelModel.sizeY : this.startRow;\n\n    if (!this.movePanelCalled) {\n      const collisionInstance = this.getCellInstance(collisions[0].id);\n      this.panelPropertyChange(panelModel, {\n        row: direction === 0 ? eleSwapRow : collisionItemsRow + collisionInstance.sizeY\n      });\n    }\n\n    for (let count = 0; count < collisions.length; count++) {\n      swappedElements.push(collisions[count]);\n      this.setPanelPosition(collisions[count], collisionItemsRow, this.getCellInstance(collisions[count].id).col);\n      this.panelPropertyChange(this.getCellInstance(collisions[count].id), {\n        row: collisionItemsRow\n      });\n      collisions[count].setAttribute('data-row', collisionItemsRow.toString());\n    }\n\n    element.setAttribute('data-row', panelModel.row.toString());\n    this.setPanelPosition(this.shadowEle, panelModel.row, panelModel.col);\n\n    for (let i = 0; i < this.panels.length; i++) {\n      this.oldRowCol[this.panels[i].id] = {\n        row: this.panels[i].row,\n        col: this.panels[i].col\n      };\n    }\n\n    this.startRow = panelModel.row;\n    this.updateOldRowColumn();\n    swappedElements.forEach(item => {\n      this.cloneObject[item.id] = this.oldRowCol[item.id];\n      const itemModel = this.getCellInstance(item.id);\n\n      for (let i = 0; i < this.sortedArray.length; i++) {\n        if (!this.sortedArray[i]) {\n          continue;\n        }\n\n        for (let j = 0; j < this.sortedArray[i].length; j++) {\n          if (this.sortedArray[i][j] === item) {\n            this.sortedArray[i][j] = undefined;\n          }\n        }\n      }\n\n      if (!this.sortedArray[itemModel.row]) {\n        this.sortedArray[itemModel.row] = [];\n      }\n\n      this.sortedArray[itemModel.row][itemModel.col] = item;\n      this.cloneArray = this.sortedArray;\n    });\n  }\n\n  updatePanelLayout(element, panelModel) {\n    this.collisionChecker = {};\n    let initialModel = [];\n    let checkForAdjustment;\n    const collisionModels = [];\n    let swappingAvailable;\n\n    if (this.mainElement && this.isRenderComplete) {\n      initialModel = this.resetLayout(panelModel);\n    } else {\n      initialModel = this.collisions(panelModel.row, panelModel.col, panelModel.sizeX, panelModel.sizeY, element);\n    }\n\n    if (initialModel.length > 0) {\n      initialModel = this.sortCollisionItems(initialModel);\n      initialModel = this.updatedModels(initialModel, panelModel, element);\n      swappingAvailable = !isNullOrUndefined(this.startRow) ? this.checkForSwapping(initialModel, element) : false;\n\n      if (swappingAvailable) {\n        this.swapItems(initialModel, element, panelModel);\n      } else {\n        for (let i = 0; i < initialModel.length; i++) {\n          const model = this.getCellInstance(initialModel[i].id);\n          this.checkingElement = initialModel[i];\n          this.spacedRowValue = null;\n          this.spacedColumnValue = null;\n          checkForAdjustment = this.adjustmentAvailable(model.row, model.col, model.sizeY, model.sizeX, element);\n\n          if (checkForAdjustment && !isNullOrUndefined(this.spacedColumnValue)) {\n            this.setPanelPosition(initialModel[i], this.spacedRowValue, this.spacedColumnValue);\n            this.oldRowCol[initialModel[i].id] = {\n              row: this.spacedRowValue,\n              col: this.spacedColumnValue\n            };\n            const value = {\n              attributes: {\n                row: this.spacedRowValue.toString(),\n                col: this.spacedColumnValue.toString()\n              }\n            };\n            this.setAttributes(value, initialModel[i]);\n            this.panelPropertyChange(model, {\n              col: this.spacedColumnValue,\n              row: this.spacedRowValue\n            }); // updated the panel model array as inTopAdjustable case with floating enabled instead of dragging and extra row\n\n            if (this.topAdjustable && this.allowFloating) {\n              this.updatePanels();\n              this.updateCloneArrayObject();\n            }\n\n            this.spacedRowValue = null;\n\n            if (i < initialModel.length) {\n              continue;\n            }\n          } else {\n            collisionModels.push(initialModel[i]);\n          }\n        }\n      }\n    }\n\n    if (collisionModels.length > 0) {\n      // eslint-disable-next-line\n      const proxy = this;\n      collisionModels.forEach(item1 => {\n        if (proxy.overlapElement.indexOf(item1) === -1) {\n          proxy.overlapElement.push(item1);\n        }\n      });\n\n      if (this.overlapElement && this.overlapElement.indexOf(element) !== -1) {\n        this.overlapElement.splice(this.overlapElement.indexOf(element), 1);\n      }\n\n      if (collisionModels.length > 0) {\n        this.updateRowColumn(panelModel.row, this.overlapElement, element);\n        this.checkForCompletePushing();\n      }\n    }\n\n    if (!this.isSubValue) {\n      this.sortedPanel();\n    }\n\n    this.updateRowHeight();\n    this.updateGridLines();\n  }\n\n  checkForCompletePushing() {\n    for (let i = 0; i < this.panels.length; i++) {\n      if (this.collisionChecker[this.panels[i].id] && this.collisionChecker[this.panels[i].id] !== null) {\n        this.overlapElement = [this.collisionChecker[this.panels[i].id].ele];\n        const key = this.panels[i].id;\n        this.updateRowColumn(this.collisionChecker[key].row, this.overlapElement, this.collisionChecker[key].srcEle);\n      }\n    }\n  }\n\n  updateCollisionChecked(item) {\n    for (let count = 0; count < Object.keys(this.collisionChecker).length; count++) {\n      this.collisionChecker[item.id] = null;\n    }\n  }\n\n  updateRowColumn(row, ele, srcEle) {\n    if (!srcEle) {\n      return;\n    }\n\n    const eleSizeY = parseInt(srcEle.getAttribute('data-sizeY'), 10);\n    const eleRow = parseInt(srcEle.getAttribute('data-row'), 10);\n    this.overlapElementClone = this.overlapElement && !this.shouldRestrict ? this.overlapElement : this.overlapElement;\n\n    for (let i = 0; i < this.overlapElementClone.length; i++) {\n      if (this.overlapElementClone.length === 0) {\n        return;\n      }\n\n      for (let i = 0; i < this.overlapElementClone.length; i++) {\n        this.collisionChecker[this.overlapElementClone[i].id] = {\n          ele: this.overlapElementClone[i],\n          row: row,\n          srcEle: srcEle\n        };\n      }\n\n      const updatedRow = eleRow + eleSizeY;\n      const collisionY = parseInt(this.overlapElementClone[i].getAttribute('data-sizeY'), 10);\n      const collisionCol = parseInt(this.overlapElementClone[i].getAttribute('data-col'), 10);\n      const collisionX = parseInt(this.overlapElementClone[i].getAttribute('data-sizeX'), 10);\n      let colValue;\n      let collisionModels;\n\n      if (this.overlapSubElementClone.indexOf(srcEle) === -1) {\n        this.overlapSubElementClone.push(srcEle);\n      }\n\n      if (this.overlapSubElementClone.indexOf(this.overlapElementClone[i]) === -1) {\n        this.overlapSubElementClone.push(this.overlapElementClone[i]);\n      }\n\n      if (collisionY > 1 || collisionX > 1) {\n        const overlapElementModel = this.getCellInstance(this.overlapElementClone[i].id);\n        colValue = overlapElementModel.col;\n        const ele = document.getElementById(overlapElementModel.id);\n\n        for (let k = overlapElementModel.row; k < eleRow + eleSizeY; k++) {\n          this.isSubValue = true;\n          this.panelPropertyChange(overlapElementModel, {\n            row: overlapElementModel.row + 1\n          });\n          ele.setAttribute('data-row', overlapElementModel.row.toString());\n          this.setPanelPosition(ele, overlapElementModel.row, colValue);\n          this.updateCollisionChecked(ele);\n          this.oldRowCol[ele.id] = {\n            row: overlapElementModel.row,\n            col: colValue\n          };\n          const panelModel = this.getCellInstance(ele.id);\n          this.panelPropertyChange(panelModel, {\n            col: colValue,\n            row: overlapElementModel.row\n          });\n          const eleRow = parseInt(ele.getAttribute('data-row'), 10);\n          const eleCol = parseInt(ele.getAttribute('data-col'), 10);\n          const sizeX = parseInt(ele.getAttribute('data-sizeX'), 10);\n          const sizeY = parseInt(ele.getAttribute('data-sizeY'), 10);\n          const excludeElements = [];\n          excludeElements.push(ele);\n          excludeElements.push(srcEle);\n          collisionModels = this.collisions(eleRow, eleCol, sizeX, sizeY, excludeElements);\n\n          if (this.mainElement && collisionModels.indexOf(this.mainElement) !== -1) {\n            collisionModels.splice(collisionModels.indexOf(this.mainElement), 1);\n          }\n\n          this.collisionPanel(collisionModels, eleCol, eleRow, ele);\n        }\n\n        this.isSubValue = false;\n      } else {\n        if (this.addPanelCalled) {\n          this.addPanelCalled = false;\n        }\n\n        this.overlapElementClone[i].setAttribute('data-row', updatedRow.toString());\n        const excludeEle = [];\n        excludeEle.push(this.overlapElementClone[i]);\n        excludeEle.push(srcEle);\n        collisionModels = this.collisions(updatedRow, collisionCol, collisionX, collisionY, excludeEle);\n\n        if (this.mainElement && collisionModels.indexOf(this.mainElement) !== -1) {\n          collisionModels.splice(collisionModels.indexOf(this.mainElement), 1);\n        }\n\n        colValue = parseInt(this.overlapElementClone[i].getAttribute('data-col'), 10);\n        this.setPanelPosition(this.overlapElementClone[i], updatedRow, colValue);\n        this.updateCollisionChecked(this.overlapElementClone[i]);\n        this.oldRowCol[this.overlapElementClone[i].id] = {\n          row: updatedRow,\n          col: colValue\n        };\n        const panelModel = this.getCellInstance(this.overlapElementClone[i].id);\n        this.panelPropertyChange(panelModel, {\n          col: colValue,\n          row: updatedRow\n        });\n        this.collisionPanel(collisionModels, colValue, updatedRow, this.overlapElementClone[i]);\n      }\n    }\n  }\n\n  collisionPanel(collisionModels, colValue, updatedRow, clone) {\n    const panelModel = this.getCellInstance(clone.id);\n    this.panelPropertyChange(panelModel, {\n      row: updatedRow,\n      col: colValue\n    });\n\n    if (collisionModels.length > 0) {\n      // eslint-disable-next-line\n      const proxy = this;\n      this.overlapElement = [];\n      this.shouldRestrict = true;\n      collisionModels.forEach(item1 => {\n        proxy.overlapElement.push(item1);\n      });\n      const overlapElementRow1 = parseInt(clone.getAttribute('data-row'), 10);\n\n      for (let m = 0; m < this.overlapElement.length; m++) {\n        this.updateRowColumn(overlapElementRow1, this.overlapElement, clone);\n      }\n\n      this.shouldRestrict = false;\n    } else {\n      if (!this.addPanelCalled) {\n        this.sortedPanel();\n      }\n\n      if (this.overlapSubElementClone.length > 0) {\n        for (let p = 0; p < this.overlapSubElementClone.length; p++) {\n          const rowVal = parseInt(this.overlapSubElementClone[p].getAttribute('data-row'), 10);\n          const colValue = parseInt(this.overlapSubElementClone[p].getAttribute('data-col'), 10);\n          const sizeX = parseInt(this.overlapSubElementClone[p].getAttribute('data-sizeX'), 10);\n          const sizeY = parseInt(this.overlapSubElementClone[p].getAttribute('data-sizeY'), 10);\n          const collisionModels1 = this.collisions(rowVal, colValue, sizeX, sizeY, this.overlapSubElementClone);\n\n          if (this.mainElement && collisionModels1.indexOf(this.mainElement) !== -1) {\n            collisionModels1.splice(collisionModels1.indexOf(this.mainElement), 1);\n          } // eslint-disable-next-line\n\n\n          const proxy = this;\n          collisionModels1.forEach(item1 => {\n            proxy.overlapElement.push(item1);\n          });\n\n          if (collisionModels1.length > 0) {\n            this.updateRowColumn(rowVal, this.overlapElement, this.overlapSubElementClone[p]);\n          }\n        }\n      }\n\n      this.overlapSubElementClone = [];\n    }\n  }\n\n  removeResizeClasses(panelElements) {\n    for (let i = 0; i < panelElements.length; i++) {\n      const element = panelElements[i];\n      const resizerElements = element.querySelectorAll('.e-resize');\n\n      for (let i = 0; i < resizerElements.length; i++) {\n        detach(resizerElements[i]);\n      }\n    }\n  }\n\n  ensureDrag() {\n    this.checkDragging(this.dragCollection);\n    const dragPanels = this.element.querySelectorAll('.' + drag);\n    removeClass(dragPanels, [drag]);\n    this.setClasses(this.panelCollection);\n  }\n\n  setClasses(panelCollection) {\n    for (let i = 0; i < panelCollection.length; i++) {\n      const element = panelCollection[i];\n      const containerEle = panelCollection[i].querySelector('.e-panel-container');\n\n      if (this.allowDragging) {\n        if (this.draggableHandle && element.querySelectorAll(this.draggableHandle)[0]) {\n          addClass([element.querySelectorAll(this.draggableHandle)[0]], [drag]);\n        } else {\n          addClass([element], [drag]);\n        }\n      }\n\n      if (this.allowResizing && this.mediaQuery ? !this.checkMediaQuery() : false) {\n        this.setResizingClass(element, containerEle);\n      }\n    }\n  }\n\n  setResizingClass(ele, container) {\n    this.availableClasses = this.resizableHandles;\n\n    if (!ele.querySelector(\".e-resize\")) {\n      for (let j = 0; j < this.availableClasses.length; j++) {\n        const spanEle = this.createElement('span');\n        let addClassValue;\n        container.appendChild(spanEle);\n\n        if (this.availableClasses[j] === 'e-east' || this.availableClasses[j] === 'e-west' || this.availableClasses[j] === 'e-north' || this.availableClasses[j] === 'e-south') {\n          addClassValue = single;\n        } else {\n          addClassValue = double;\n        }\n\n        addClass([spanEle], [addClassValue, this.availableClasses[j], resize, resizeicon]);\n      }\n    }\n  }\n\n  setXYAttributes(element, panelModel) {\n    const value = {\n      value: {\n        sizeX: panelModel.sizeX.toString(),\n        sizeY: panelModel.sizeY.toString(),\n        minSizeX: panelModel.minSizeX.toString(),\n        minSizeY: panelModel.minSizeY.toString(),\n        maxSizeX: !isNullOrUndefined(panelModel.maxSizeX) ? panelModel.maxSizeX.toString() : undefined,\n        maxSizeY: !isNullOrUndefined(panelModel.maxSizeY) ? panelModel.maxSizeY.toString() : undefined,\n        row: panelModel.row.toString(),\n        col: panelModel.col.toString()\n      }\n    };\n    this.setAttributes(value, element);\n  }\n\n  setXYDimensions(panelModel) {\n    const cellHeight = this.getCellSize()[1];\n    const cellWidth = this.getCellSize()[0];\n    let widthValue;\n    let heigthValue;\n\n    if (panelModel && typeof cellWidth === 'number' && typeof panelModel.sizeX === 'number' && panelModel.sizeX > 1) {\n      widthValue = panelModel.sizeX * cellWidth + (panelModel.sizeX - 1) * this.cellSpacing[0];\n    } else {\n      widthValue = cellWidth;\n    }\n\n    if (panelModel && typeof cellHeight === 'number' && panelModel.sizeY > 1 && typeof panelModel.sizeY === 'number') {\n      heigthValue = panelModel.sizeY * cellHeight + (panelModel.sizeY - 1) * this.cellSpacing[1];\n    } else {\n      heigthValue = formatUnit(cellHeight);\n    }\n\n    return [heigthValue, widthValue];\n  }\n\n  getRowColumnDragValues(args) {\n    let value = [];\n    const elementTop = parseFloat(args.element.style.top);\n    const elementLeft = parseFloat(args.element.style.left);\n    const row = Math.round(elementTop / (this.getCellSize()[1] + this.cellSpacing[1]));\n    const col = Math.round(elementLeft / (this.getCellSize()[0] + +this.cellSpacing[0]));\n    value = [row, col];\n    return value;\n  }\n\n  checkForChanges(isInteracted, added, removed) {\n    let changedPanels = [];\n\n    if (this.removeAllCalled) {\n      changedPanels = [];\n    } else {\n      for (let i = 0; i < this.panels.length; i++) {\n        if ((!isNullOrUndefined(added) ? this.panels[i].id !== added[0].id : true) && (!isNullOrUndefined(removed) ? this.panels[i].id !== removed[0].id : true) && (this.panels[i].row !== this.panelsInitialModel[i].row || this.panels[i].col !== this.panelsInitialModel[i].col)) {\n          changedPanels.push(this.panels[i]);\n        }\n      }\n    }\n\n    if (changedPanels.length > 0 || this.removeAllCalled) {\n      const changedArgs = {\n        changedPanels: changedPanels,\n        isInteracted: isInteracted,\n        addedPanels: !isNullOrUndefined(added) ? added : [],\n        removedPanels: !isNullOrUndefined(removed) ? removed : []\n      };\n      this.trigger('change', changedArgs);\n    }\n  }\n\n  enableDraggingContent(collections) {\n    for (let i = 0; i < collections.length; i++) {\n      const abortArray = ['.e-resize', '.' + dragRestrict];\n      const cellElement = collections[i];\n      {\n        this.dragobj = new Draggable(cellElement, {\n          preventDefault: false,\n          clone: false,\n          dragArea: this.element,\n          isDragScroll: true,\n          handle: this.draggableHandle ? this.draggableHandle : '.e-panel',\n          abort: abortArray,\n          dragStart: this.onDraggingStart.bind(this),\n          dragStop: args => {\n            const model = this.getCellInstance(this.mainElement.id);\n\n            if (this.allowPushing && this.collisions(model.row, model.col, model.sizeX, model.sizeY, this.mainElement).length > 0) {\n              this.setHolderPosition(args);\n              this.setPanelPosition(this.mainElement, model.row, model.col);\n              this.updatePanelLayout(this.mainElement, model);\n            } else {\n              this.setPanelPosition(this.mainElement, model.row, model.col);\n            }\n\n            this.mainElement = null;\n            const item = this.getPanelBase(args);\n\n            if (this.shadowEle) {\n              detach(this.shadowEle);\n            }\n\n            removeClass([this.element], [preventSelect]);\n            removeClass([args.element], [dragging]);\n            this.shadowEle = null;\n            args.element.classList.remove('e-dragging');\n            const row = this.getRowColumnDragValues(args)[0];\n            const col = this.getRowColumnDragValues(args)[1];\n            const panelModel = this.getCellInstance(args.element.id);\n\n            if (this.allowPushing && this.collisions(row, col, panelModel.sizeX, panelModel.sizeY, document.getElementById(item.id)).length === 0) {\n              this.panelPropertyChange(this.getCellInstance(args.element.id), {\n                row: row,\n                col: col\n              });\n              this.oldRowCol[args.element.id].row = row;\n              this.oldRowCol[args.element.id].col = col;\n              this.setAttributes({\n                value: {\n                  col: col.toString(),\n                  row: row.toString()\n                }\n              }, args.element);\n              this.sortedPanel();\n            } else {\n              this.panelPropertyChange(this.getCellInstance(args.element.id), {\n                row: this.oldRowCol[args.element.id].row,\n                col: this.oldRowCol[args.element.id].col\n              });\n              args.element.setAttribute('data-col', this.getCellInstance(args.element.id).col.toString());\n              args.element.setAttribute('data-row', this.getCellInstance(args.element.id).row.toString());\n              this.sortedPanel();\n            }\n\n            const panelInstance = this.getCellInstance(args.element.id);\n            this.setPanelPosition(args.element, panelInstance.row, panelInstance.col);\n            this.updatePanels();\n            this.updateCloneArrayObject();\n            this.checkForChanges(true);\n            this.dragStopEventArgs = {\n              event: args.event,\n              element: args.element\n            };\n            this.trigger('dragStop', args);\n            this.resizeEvents();\n            this.rows = this.maxRow(true);\n            this.setHeightWidth();\n            this.updateDragArea();\n          },\n          drag: args => {\n            this.draggedEventArgs = {\n              event: args.event,\n              element: args.element,\n              target: closest(args.target, '.e-panel')\n            };\n            this.trigger('drag', this.draggedEventArgs);\n            this.onDragStart(args);\n          }\n        });\n\n        if (this.dragCollection.indexOf(this.dragobj) === -1) {\n          this.dragCollection.push(this.dragobj);\n        }\n      }\n    }\n  }\n\n  updatePanels() {\n    this.moveItemsUpwards();\n    this.updateOldRowColumn();\n    this.sortedPanel();\n  }\n\n  updateDragArea() {\n    this.dragCollection.forEach(dragobj => {\n      // eslint-disable-next-line\n      dragobj.setDragArea();\n    });\n  }\n\n  updateRowsHeight(row, sizeY, addRows) {\n    if (row + sizeY >= this.rows) {\n      this.rows = this.rows + addRows;\n      this.setHeightWidth();\n    }\n  }\n\n  onDraggingStart(args) {\n    const dragArgs = args;\n    this.trigger('dragStart', dragArgs, dragArgs => {});\n    this.panelsInitialModel = this.cloneModels(this.panels);\n    this.mainElement = args.element;\n    this.cloneObject = JSON.parse(JSON.stringify(this.cloneObject));\n    const eleRowValue = this.startRow = parseInt(args.element.getAttribute('data-row'), 10);\n    this.startCol = parseInt(args.element.getAttribute('data-col'), 10);\n    const eleSizeY = parseInt(args.element.getAttribute('data-sizeY'), 10);\n    this.updateRowsHeight(eleRowValue, eleSizeY, eleSizeY);\n    this.updateDragArea();\n    this.shadowEle = document.createElement('div');\n    this.shadowEle.classList.add('e-holder');\n    this.shadowEle.classList.add('e-holder-transition');\n    setStyleAttribute(this.shadowEle, {\n      'position': 'absolute'\n    });\n    addClass([this.element], [preventSelect]);\n    addClass([args.element], [dragging]);\n    this.element.appendChild(this.shadowEle);\n    this.renderReactTemplates();\n    this.shadowEle = document.querySelector('.e-holder');\n    this.shadowEle.style.height = this.getCellInstance(args.element.id).sizeY * this.cellSize[1] + 'px';\n    this.shadowEle.style.width = this.getCellInstance(args.element.id).sizeX * this.cellSize[0] + 'px';\n    const panelInstance = this.getCellInstance(args.element.id);\n    this.setPanelPosition(this.shadowEle, panelInstance.row, panelInstance.col);\n  } // eslint-disable-next-line\n\n\n  cloneModels(source, target) {\n    if (target === undefined) {\n      target = [];\n    }\n\n    for (let i = 0; i < source.length; i++) {\n      // tslint:disable-next-line\n      if (!target[i]) {\n        target[i] = {};\n      } // eslint-disable-next-line guard-for-in\n\n\n      for (const k in source[i]) {\n        target[i][k] = source[i][k];\n      }\n    }\n\n    return target;\n  }\n\n  onDragStart(args) {\n    let endCol;\n    let endRow;\n    let dragCol;\n    const col = dragCol = this.getRowColumnDragValues(args)[1];\n    const row = this.getRowColumnDragValues(args)[0];\n\n    if (col < 0 || row < 0) {\n      return;\n    }\n\n    this.panelPropertyChange(this.getCellInstance(args.element.id), {\n      row: row,\n      col: col\n    });\n    const panelModel = this.getCellInstance(args.element.id);\n    this.updateRowsHeight(panelModel.row, panelModel.sizeY, 1);\n    this.updateDragArea();\n\n    if (this.allowPushing) {\n      this.setAttributes({\n        value: {\n          col: col.toString(),\n          row: row.toString()\n        }\n      }, args.element);\n      this.panelPropertyChange(this.getCellInstance(args.element.id), {\n        row: row,\n        col: col\n      });\n      endCol = this.oldRowCol[args.element.id].col;\n      endRow = this.oldRowCol[args.element.id].row;\n      this.oldRowCol[args.element.id] = {\n        row: row,\n        col: col\n      };\n      this.updateOldRowColumn();\n\n      if (this.startCol !== endCol || this.startRow !== endRow) {\n        this.setHolderPosition(args);\n\n        if (this.startCol !== endCol) {\n          this.startRow = endRow;\n        }\n\n        if (this.startRow !== endRow) {\n          this.startCol = endCol;\n        }\n\n        if (this.allowPushing) {\n          this.mainElement = args.element;\n          const model = panelModel;\n          this.checkCollision = this.collisions(model.row, model.col, model.sizeX, model.sizeY, args.element);\n\n          if (panelModel.col >= this.checkColumnValue) {\n            this.checkCollision = [];\n          }\n\n          this.updatePanelLayout(args.element, panelModel);\n          this.moveItemsUpwards();\n        }\n      }\n    }\n\n    if (this.allowPushing !== false) {\n      this.panelPropertyChange(this.getCellInstance(args.element.id), {\n        row: row,\n        col: col\n      });\n    }\n\n    if (this.oldRowCol[args.element.id].row !== row || this.oldRowCol[args.element.id].col !== col) {\n      this.panelPropertyChange(this.getCellInstance(args.element.id), {\n        row: row,\n        col: col\n      });\n      this.setAttributes({\n        value: {\n          col: col.toString(),\n          row: row.toString()\n        }\n      }, args.element);\n    }\n\n    if (this.startCol !== dragCol) {\n      this.startCol = endCol;\n      this.moveItemsUpwards();\n    }\n\n    if (!this.allowPushing) {\n      this.setHolderPosition(args);\n    }\n\n    this.removeResizeClasses(this.panelCollection);\n    this.setClasses(this.panelCollection);\n\n    if (this.allowPushing === false) {\n      return;\n    }\n  }\n\n  getPanelBase(args) {\n    let item;\n\n    for (let i = 0; i < this.panelCollection.length; i++) {\n      if (this.panelCollection[i].id === (args.element && args.element.id || args)) {\n        item = this.panelCollection[i];\n      }\n    }\n\n    return item;\n  }\n\n  getPanel(row, column, excludeItems) {\n    if (excludeItems && !(excludeItems instanceof Array)) {\n      excludeItems = [excludeItems];\n    }\n\n    let sizeY = 1;\n\n    while (row > -1) {\n      let sizeX = 1;\n      let col = column;\n\n      while (col > -1) {\n        const items = this.sortedArray[row];\n\n        if (items) {\n          const item = items[col];\n\n          if (item && (!excludeItems || excludeItems.indexOf(item) === -1) && parseInt(item.getAttribute('data-sizeX'), 10) >= sizeX && parseInt(item.getAttribute('data-sizeY'), 10) >= sizeY) {\n            return item;\n          }\n        }\n\n        ++sizeX;\n        --col;\n      }\n\n      --row;\n      ++sizeY;\n    }\n\n    return null;\n  }\n\n  setHolderPosition(args) {\n    const sizeY = parseInt(args.element.getAttribute('data-sizeY'), 10);\n    const col = parseInt(args.element.getAttribute('data-col'), 10);\n    const row = parseInt(args.element.getAttribute('data-row'), 10);\n    const sizeX = parseInt(args.element.getAttribute('data-sizeX'), 10);\n    const widthValue = this.getCellSize()[0];\n    const heightValue = this.getCellSize()[1];\n    const top = row === 0 ? 0 : row * (heightValue + this.cellSpacing[1]);\n    const left = col === 0 ? 0 : col * (widthValue + this.cellSpacing[0]);\n    const cellSizeOne = this.getCellSize()[1];\n    const cellSizeZero = this.getCellSize()[0];\n    this.elementRef.top = this.shadowEle.style.top = top + 'px';\n    this.elementRef.left = this.shadowEle.style.left = left + 'px';\n    this.elementRef.height = this.shadowEle.style.height = sizeY * cellSizeOne + (sizeY - 1) * this.cellSpacing[1] + 'px';\n    this.elementRef.width = this.shadowEle.style.width = sizeX * cellSizeZero + (sizeX - 1) * this.cellSpacing[0] + 'px';\n  }\n\n  getCellInstance(idValue) {\n    let currentCellInstance;\n\n    for (let i = 0; i < this.panels.length; i++) {\n      if (this.panels[i].id === idValue) {\n        currentCellInstance = this.panels[i];\n      }\n    }\n\n    return currentCellInstance;\n  }\n  /**\n   * Allows to add a panel to the Dashboardlayout.\n   *\n   * @param {panel} panel -  Defines the panel element.\n   *\n   * @returns void\n   * @deprecated\n   */\n\n\n  addPanel(panel) {\n    this.panelsSizeY = 0;\n    this.maxCol();\n\n    if (!panel.minSizeX) {\n      panel.minSizeX = 1;\n    }\n\n    if (!panel.minSizeY) {\n      panel.minSizeY = 1;\n    }\n\n    if (!panel.id) {\n      panel.id = 'layout_' + this.panelID.toString();\n      this.panelID = this.panelID + 1;\n    } // eslint-disable-next-line\n\n\n    const panelProp = new Panel(this, 'panels', panel, true);\n    this.panels.push(panelProp);\n    this.panelsInitialModel = this.cloneModels(this.panels);\n    this.setMinMaxValues(panelProp);\n\n    if (this.maxColumnValue < panelProp.col || this.maxColumnValue < panelProp.col + panelProp.sizeX) {\n      this.panelPropertyChange(panelProp, {\n        col: this.maxColumnValue - panelProp.sizeX\n      });\n    }\n\n    const cell = this.renderCell(panelProp, true, null);\n    this.oldRowCol[panelProp.id] = {\n      row: panelProp.row,\n      col: panelProp.col\n    };\n    this.cloneObject[panelProp.id] = {\n      row: panelProp.row,\n      col: panelProp.col\n    };\n    this.updateOldRowColumn();\n    this.element.insertAdjacentElement('afterbegin', cell);\n    this.addPanelCalled = true;\n\n    if (this.checkMediaQuery()) {\n      this.checkMediaQuerySizing();\n      this.removeResizeClasses(this.panelCollection);\n    } else {\n      this.mainElement = cell;\n\n      if (!this.checkCollision) {\n        this.checkCollision = [];\n      }\n\n      this.setPanelPosition(cell, panelProp.row, panelProp.col);\n      this.updatePanelLayout(cell, panelProp);\n    }\n\n    this.addPanelCalled = false;\n\n    if (this.allowDragging && this.mediaQuery ? !this.checkMediaQuery() : false) {\n      this.enableDraggingContent([document.getElementById(panelProp.id)]);\n    }\n\n    this.setClasses([cell]);\n\n    if (this.allowFloating) {\n      this.mainElement = null;\n      this.moveItemsUpwards();\n    }\n\n    this.updateOldRowColumn();\n    this.sortedPanel();\n    this.updateCloneArrayObject();\n\n    if (this.allowResizing) {\n      for (let i = 0; i < cell.querySelectorAll('.e-resize').length; i++) {\n        const eventName = Browser.info.name === 'msie' ? 'mousedown pointerdown' : 'mousedown';\n        EventHandler.add(cell.querySelectorAll('.e-resize')[i], eventName, this.downResizeHandler, this);\n\n        if (Browser.info.name !== 'msie') {\n          EventHandler.add(cell.querySelectorAll('.e-resize')[i], 'touchstart', this.touchDownResizeHandler, this);\n        }\n      }\n    }\n\n    this.checkForChanges(false, [panelProp]);\n  }\n  /**\n   * Allows to update a panel in the DashboardLayout.\n   *\n   * @param {panel} panel - Defines the panel element.\n   *\n   * @returns void\n   * @deprecated\n   */\n\n\n  updatePanel(panel) {\n    this.panelsSizeY = 0;\n\n    if (!panel.id) {\n      return;\n    }\n\n    const panelInstance = this.getCellInstance(panel.id);\n\n    if (!panelInstance) {\n      return;\n    }\n\n    this.maxCol();\n    panel.col = panel.col < 1 ? 0 : panel.col > this.columns ? this.columns - 1 : panel.col;\n\n    if (isNullOrUndefined(panel.col)) {\n      panel.col = panelInstance.col;\n    }\n\n    this.panelPropertyChange(panelInstance, panel);\n    this.setMinMaxValues(panelInstance);\n    const cell = document.getElementById(panel.id);\n    this.mainElement = cell;\n    const cssClass = panelInstance.cssClass ? panelInstance.cssClass.split(' ') : null;\n    this.panelContent = cell.querySelector('.e-panel-container') ? cell.querySelector('.e-panel-container') : this.createSubElement(cssClass, cell.id + '_content', panelContainer);\n    cell.appendChild(this.panelContent);\n\n    if (panelInstance.header) {\n      const headerTemplateElement = cell.querySelector('.e-panel-header') ? cell.querySelector('.e-panel-header') : this.createSubElement([], cell.id + 'template', '');\n      addClass([headerTemplateElement], [header]);\n      headerTemplateElement.innerHTML = '';\n      const id = this.element.id + 'HeaderTemplate' + panelInstance.id;\n      this.renderTemplate(panelInstance.header, headerTemplateElement, id, true, 'header');\n      this.panelContent.appendChild(headerTemplateElement);\n      this.renderReactTemplates();\n    } else {\n      if (cell.querySelector('.e-panel-header')) {\n        detach(cell.querySelector('.e-panel-header'));\n      }\n    }\n\n    if (panelInstance.content) {\n      const cssClass = panelInstance.cssClass ? panelInstance.cssClass.split(' ') : null;\n      this.panelBody = cell.querySelector('.e-panel-content') ? cell.querySelector('.e-panel-content') : this.createSubElement(cssClass, cell.id + '_body', panelContent);\n      this.panelBody.innerHTML = '';\n      const headerHeight = this.panelContent.querySelector('.e-panel-header') ? window.getComputedStyle(this.panelContent.querySelector('.e-panel-header')).height : '0px';\n      const contentHeightValue = 'calc( 100% - ' + headerHeight + ')';\n      setStyleAttribute(this.panelBody, {\n        height: contentHeightValue\n      });\n      const id = this.element.id + 'ContentTemplate' + panelInstance.id;\n      this.renderTemplate(panelInstance.content, this.panelBody, id, true, 'content');\n      this.panelContent.appendChild(this.panelBody);\n      this.renderReactTemplates();\n    } else {\n      if (cell.querySelector('.e-panel-content')) {\n        detach(cell.querySelector('.e-panel-content'));\n      }\n    }\n\n    this.setXYAttributes(cell, panelInstance);\n    this.setHeightAndWidth(cell, panelInstance);\n    this.setPanelPosition(cell, panelInstance.row, panelInstance.col);\n    this.updatePanelLayout(cell, panelInstance);\n\n    if (this.checkMediaQuery()) {\n      this.checkMediaQuerySizing();\n    }\n\n    this.mainElement = null;\n    this.updatePanels();\n    this.updateCloneArrayObject();\n  }\n\n  updateCloneArrayObject() {\n    this.cloneArray = this.sortedArray;\n    this.cloneObject = JSON.parse(JSON.stringify(this.oldRowCol));\n  }\n  /**\n   * Returns the panels object of the DashboardLayout.\n   *\n   * @returns [`PanelModel[]`](./panelModel)\n   */\n\n\n  serialize() {\n    const cloneModel = this.cloneModels(this.panels);\n    const customObject = [];\n\n    for (let i = 0; i < cloneModel.length; i++) {\n      customObject.push({\n        id: cloneModel[i].id,\n        row: cloneModel[i].row,\n        col: cloneModel[i].col,\n        sizeX: cloneModel[i].sizeX,\n        sizeY: cloneModel[i].sizeY,\n        minSizeX: cloneModel[i].minSizeX,\n        minSizeY: cloneModel[i].minSizeY,\n        maxSizeX: cloneModel[i].maxSizeX,\n        maxSizeY: cloneModel[i].maxSizeY\n      });\n    }\n\n    return customObject;\n  }\n  /**\n   * Removes all the panels from the DashboardLayout.\n   */\n\n\n  removeAll() {\n    this.removeAllCalled = true;\n\n    for (let i = 0; i < this.panelCollection.length; i++) {\n      detach(this.panelCollection[i]);\n      this.clearTemplate();\n    }\n\n    this.removeAllPanel();\n    this.rows = 0;\n    this.gridPanelCollection = [];\n    this.setHeightWidth();\n    this.sortedPanel();\n    this.sortedArray = [];\n    this.overlapElementClone = [];\n    this.overlapElement = [];\n    this.overlapSubElementClone = [];\n    this.panelCollection = [];\n    this.oldRowCol = {};\n    this.cloneObject = {};\n    const clonedPanels = this.cloneModels(this.panels);\n    this.setProperties({\n      panels: []\n    }, true);\n    this.updatePanels();\n    this.updateCloneArrayObject();\n    this.checkForChanges(false, null, clonedPanels);\n    this.removeAllCalled = false;\n  }\n  /**\n   * Removes the panel from the DashboardLayout.\n   *\n   * @param {string} id -  Defines the panel ID.\n   *\n   * @returns void\n   */\n\n\n  removePanel(id) {\n    this.panelsSizeY = 0;\n    this.panelsInitialModel = this.cloneModels(this.panels);\n    let removedPanel;\n\n    for (let i = 0; i < this.panelCollection.length; i++) {\n      if (this.panelCollection[i].id === id) {\n        detach(this.panelCollection[i]);\n        this.panelCollection.splice(i, 1);\n      }\n\n      if (this.panels[i].id === id) {\n        removedPanel = this.panels[i];\n        this.panels.splice(i, 1);\n        this.panelsInitialModel.splice(i, 1);\n        this.updateOldRowColumn();\n        this.sortedPanel();\n      }\n    }\n\n    this.updatePanels();\n\n    if (this.checkMediaQuery()) {\n      this.isPanelRemoved = true;\n      this.checkMediaQuerySizing();\n      this.isPanelRemoved = false;\n    }\n\n    this.gridPanelCollection.forEach(item => {\n      if (item.id === id) {\n        this.gridPanelCollection.splice(this.gridPanelCollection.indexOf(item), 1);\n      }\n    });\n    this.updateCloneArrayObject();\n    this.checkForChanges(false, null, [removedPanel]);\n  }\n  /**\n   *Moves the panel in the DashboardLayout.\n   *\n   * @param {string} id - Defines the panel ID.\n   *\n   * @param  {number} row - Defines the row of dashboard layout.\n   *\n   * @param {number} col - Defines the column of dashboard layout.\n   *\n   * @returns void\n   */\n\n\n  movePanel(id, row, col) {\n    this.movePanelCalled = true;\n    this.panelsInitialModel = this.cloneModels(this.panels);\n    const panelInstance = this.getCellInstance(id);\n\n    if (isNaN(row) || row === null || isNaN(col) || col === null || !panelInstance) {\n      return;\n    }\n\n    if (col < 0) {\n      col = 0;\n    } else if (col > this.columns) {\n      col = this.columns - panelInstance.sizeX;\n    }\n\n    this.panelPropertyChange(panelInstance, {\n      row: row,\n      col: col\n    });\n    const ele = document.getElementById(id);\n    this.mainElement = ele;\n    this.startRow = parseInt(ele.getAttribute('data-row'), 10);\n    this.startCol = parseInt(ele.getAttribute('data-col'), 10);\n    this.setAttributes({\n      value: {\n        col: col.toString(),\n        row: row.toString()\n      }\n    }, ele);\n    this.updateOldRowColumn();\n    this.setPanelPosition(ele, row, col);\n    this.updatePanelLayout(ele, panelInstance);\n    this.updateRowHeight();\n    this.updatePanels();\n    this.updateCloneArrayObject();\n    this.mainElement = null;\n\n    if (this.allowFloating) {\n      this.moveItemsUpwards();\n    }\n\n    this.movePanelCalled = false;\n    this.checkForChanges(false);\n  }\n\n  setAttributes(value, ele) {\n    for (let i = 0; i < Object.keys(value).length; i++) {\n      if (Object.keys(value)) {\n        if (value[Object.keys(value)[i]].col) {\n          ele.setAttribute('data-col', value[Object.keys(value)[i]].col.toString());\n        }\n\n        if (value[Object.keys(value)[i]].row) {\n          ele.setAttribute('data-row', value[Object.keys(value)[i]].row.toString());\n        }\n\n        if (value[Object.keys(value)[i]].sizeX) {\n          ele.setAttribute('data-sizeX', value[Object.keys(value)[i]].sizeX.toString());\n        }\n\n        if (value[Object.keys(value)[i]].sizeY) {\n          ele.setAttribute('data-sizeY', value[Object.keys(value)[i]].sizeY.toString());\n        }\n\n        if (value[Object.keys(value)[i]].minSizeX) {\n          ele.setAttribute('data-minSizeX', value[Object.keys(value)[i]].minSizeX.toString());\n        }\n\n        if (value[Object.keys(value)[i]].minSizeY) {\n          ele.setAttribute('data-minSizeY', value[Object.keys(value)[i]].minSizeY.toString());\n        }\n\n        if (value[Object.keys(value)[i]].maxSizeX) {\n          ele.setAttribute('data-maxSizeY', value[Object.keys(value)[i]].maxSizeX.toString());\n        }\n\n        if (value[Object.keys(value)[i]].maxSizeY) {\n          ele.setAttribute('data-maxSizeY', value[Object.keys(value)[i]].maxSizeY.toString());\n        }\n      }\n    }\n  }\n  /**\n   * Resize the panel in the DashboardLayout.\n   *\n   * @param {string} id - Defines the panel ID.\n   *\n   * @param {number} sizeX - Defines the sizeX of dashboard layout.\n   *\n   * @param {number} sizeY - Defines the sizeY of dashboard layout.\n   */\n\n\n  resizePanel(id, sizeX, sizeY) {\n    this.panelsInitialModel = this.cloneModels(this.panels);\n    const panelInstance = this.getCellInstance(id);\n    this.resizeCalled = true;\n    const ele = document.getElementById(id);\n    const args = {\n      event: null,\n      element: ele,\n      isInteracted: false\n    };\n    this.trigger('resizeStart', args);\n    this.panelPropertyChange(panelInstance, {\n      sizeX: sizeX,\n      sizeY: sizeY\n    });\n    this.setMinMaxValues(panelInstance);\n    this.checkMinMaxValues(panelInstance);\n    this.mainElement = ele;\n    this.setAttributes({\n      value: {\n        sizeX: panelInstance.sizeX.toString(),\n        sizeY: panelInstance.sizeY.toString()\n      }\n    }, ele);\n    this.setHeightAndWidth(ele, panelInstance);\n    this.updatePanelLayout(ele, panelInstance);\n    this.updatePanels();\n    this.updateRowHeight();\n    this.resizeCalled = false;\n    this.trigger('resizeStop', args);\n    this.checkForChanges(false);\n  }\n  /**\n   * Destroys the DashboardLayout component\n   *\n   * @returns void\n   */\n\n\n  destroy() {\n    // eslint-disable-next-line\n    EventHandler.remove(window, 'resize', this.refreshListener);\n    removeClass([this.element], ['e-dashboardlayout', 'e-lib', 'e-responsive', 'e-control']);\n    this.element.removeAttribute('style');\n\n    for (let i = 0; i < this.dragCollection.length; i++) {\n      this.dragCollection[i].destroy();\n    }\n\n    this.removeAllPanel();\n    super.destroy();\n    this.clearTemplate();\n    this.renderReactTemplates();\n  }\n\n  removeAllPanel() {\n    while (this.element.firstElementChild) {\n      detach(this.element.firstElementChild);\n      this.clearTemplate();\n    }\n  }\n\n  setEnableRtl() {\n    if (this.enableRtl === true) {\n      addClass([this.element], 'e-rtl');\n    } else {\n      removeClass([this.element], 'e-rtl');\n    }\n  }\n  /**\n   * Called internally if any of the property value changed.\n   * returns void\n   *\n   * @private\n   */\n\n\n  updateCellSizeAndSpacing() {\n    this.panelResponsiveUpdate();\n    this.setHeightWidth();\n    this.getRowColumn();\n\n    for (let i = 0; i < this.element.querySelectorAll('.e-panel').length; i++) {\n      const ele = this.element.querySelectorAll('.e-panel')[i];\n      const panelModel = this.getCellInstance(ele.id);\n      this.setHeightAndWidth(ele, panelModel);\n      this.setPanelPosition(ele, panelModel.row, panelModel.col);\n    }\n  }\n\n  updatePanelsDynamically(panels) {\n    this.removeAll();\n    this.setProperties({\n      panels: panels\n    }, true);\n    this.setOldRowCol();\n\n    if (this.table) {\n      this.table.remove();\n    }\n\n    this.initialize();\n\n    if (this.checkMediaQuery()) {\n      this.refresh();\n    }\n\n    if (this.showGridLines) {\n      this.initGridLines();\n    }\n  }\n\n  checkForIDValues(panels) {\n    if (!isNullOrUndefined(panels) && panels.length > 0) {\n      this.panelID = 0;\n      panels.forEach(panel => {\n        if (!panel.id) {\n          this.panelPropertyChange(panel, {\n            id: 'layout_' + this.panelID.toString()\n          });\n          this.panelID = this.panelID + 1;\n        }\n      });\n    } else {\n      this.restrictDynamicUpdate = true;\n    }\n  }\n  /**\n   * Called internally if any of the property value changed.\n   *\n   * returns void\n   *\n   * @private\n   */\n  // eslint-disable-next-line\n\n\n  onPropertyChanged(newProp, oldProp) {\n    if (newProp.panels && newProp.panels.length > 0 && newProp.panels[0] instanceof Panel) {\n      this.checkForIDValues(newProp.panels);\n    }\n\n    for (const prop of Object.keys(newProp)) {\n      switch (prop) {\n        case 'enableRtl':\n          this.setProperties({\n            enableRtl: newProp.enableRtl\n          }, true);\n          this.setEnableRtl();\n          break;\n\n        case 'mediaQuery':\n          this.setProperties({\n            mediaQuery: newProp.mediaQuery\n          }, true);\n\n          if (this.checkMediaQuery()) {\n            this.checkMediaQuerySizing();\n          }\n\n          break;\n\n        case 'allowDragging':\n          this.setProperties({\n            allowDragging: newProp.allowDragging\n          }, true);\n          this.ensureDrag();\n          break;\n\n        case 'allowResizing':\n          this.setProperties({\n            allowResizing: newProp.allowResizing\n          }, true);\n\n          if (this.allowResizing) {\n            this.setClasses(this.panelCollection);\n            this.resizeEvents();\n          } else {\n            const panelElements = this.element.querySelectorAll('.e-panel .e-panel-container .e-resize');\n\n            for (let i = 0; i < panelElements.length; i++) {\n              const eventName = Browser.info.name === 'msie' ? 'mousedown pointerdown' : 'mousedown';\n              const element = panelElements[i];\n              EventHandler.remove(element, eventName, this.downResizeHandler);\n\n              if (Browser.info.name !== 'msie') {\n                EventHandler.remove(element, 'touchstart', this.touchDownResizeHandler);\n              }\n            }\n\n            this.removeResizeClasses(this.panelCollection);\n          }\n\n          break;\n\n        case 'cellSpacing':\n          this.setProperties({\n            cellSpacing: newProp.cellSpacing\n          }, true);\n          this.updateCellSizeAndSpacing();\n          this.updateGridLines();\n          break;\n\n        case 'draggableHandle':\n          this.setProperties({\n            draggableHandle: newProp.draggableHandle\n          }, true);\n          this.ensureDrag();\n          break;\n\n        case 'allowFloating':\n          this.setProperties({\n            allowFloating: newProp.allowFloating\n          }, true);\n          this.moveItemsUpwards();\n          break;\n\n        case 'showGridLines':\n          if (this.showGridLines) {\n            this.setProperties({\n              showGridLines: newProp.showGridLines\n            }, true);\n            this.initGridLines();\n          } else {\n            if (this.table) {\n              detach(this.table);\n            }\n          }\n\n          break;\n\n        case 'allowPushing':\n          this.setProperties({\n            allowPushing: newProp.allowPushing\n          }, true);\n          break;\n\n        case 'panels':\n          if (!newProp.columns && !this.restrictDynamicUpdate && newProp.panels[0] && newProp.panels.length > 0) {\n            this.isRenderComplete = false;\n            this.updatePanelsDynamically(newProp.panels);\n            this.isRenderComplete = true;\n          } else if (!(newProp.panels[0] && newProp.panels.length)) {\n            this.isRenderComplete = false;\n            this.updatePanelsDynamically(this.panels);\n            this.isRenderComplete = true;\n          } else {\n            this.restrictDynamicUpdate = false;\n          }\n\n          break;\n\n        case 'columns':\n          this.isRenderComplete = false;\n\n          if (newProp.panels) {\n            this.updatePanelsDynamically(newProp.panels);\n          }\n\n          this.setProperties({\n            columns: newProp.columns\n          }, true);\n          this.panelCollection = [];\n          this.maxColumnValue = this.columns;\n          this.calculateCellSize();\n          this.panels.forEach(panel => {\n            this.setMinMaxValues(panel);\n\n            if (this.maxColumnValue < panel.col || this.maxColumnValue < panel.col + panel.sizeX) {\n              const colValue = this.maxColumnValue - panel.sizeX;\n              this.panelPropertyChange(panel, {\n                col: colValue < 0 ? 0 : colValue\n              });\n              this.setXYAttributes(document.getElementById(panel.id), panel);\n            }\n\n            this.setHeightAndWidth(document.getElementById(panel.id), panel);\n            this.panelCollection.push(document.getElementById(panel.id));\n            this.setPanelPosition(document.getElementById(panel.id), panel.row, panel.col);\n            this.mainElement = document.getElementById(panel.id);\n            this.updatePanelLayout(document.getElementById(panel.id), panel);\n            this.mainElement = null;\n          });\n          this.updatePanels();\n          this.updateCloneArrayObject();\n          this.isRenderComplete = true;\n          this.updateGridLines();\n          break;\n      }\n    }\n  }\n  /**\n   * Gets the properties to be maintained upon browser refresh.\n   *\n   * @returns string\n   * @private\n   */\n\n\n  getPersistData() {\n    const keyEntity = ['panels'];\n    return this.addOnPersist(keyEntity);\n  }\n  /* istanbul ignore next */\n\n\n  mergePersistPanelData(persistedData) {\n    const data = window.localStorage.getItem(this.getModuleName() + this.element.id);\n\n    if (!(isNullOrUndefined(data) || data === '') || !isNullOrUndefined(persistedData)) {\n      const dataObj = !isNullOrUndefined(persistedData) ? persistedData : JSON.parse(data);\n      const keys = Object.keys(dataObj);\n      this.isProtectedOnChange = true;\n\n      for (const key of keys) {\n        if (typeof getValue(key, this) === 'object' && !isNullOrUndefined(getValue(key, this))) {\n          if (Array.isArray(getValue(key, this)) && key === 'panels') {\n            this.mergePanels(dataObj[key], this[key]);\n          }\n        }\n      }\n\n      this.isProtectedOnChange = false;\n    }\n  }\n  /* istanbul ignore next */\n\n\n  mergePanels(sortedPanels, panels) {\n    const storedColumns = sortedPanels;\n\n    for (let i = 0; i < storedColumns.length; i++) {\n      this.checkForIDValues(panels);\n      const localPanel = panels.filter(pan => pan.id === storedColumns[i].id)[0];\n\n      if (!isNullOrUndefined(localPanel)) {\n        storedColumns[i] = extend(localPanel, storedColumns[i], {}, true);\n      }\n    }\n  }\n  /**\n   * Returns the current module name.\n   *\n   * @returns string\n   *\n   * @private\n   */\n\n\n  getModuleName() {\n    return 'DashboardLayout';\n  }\n\n};\n\n__decorate$1([Property(true)], DashboardLayout.prototype, \"allowDragging\", void 0);\n\n__decorate$1([Property(false)], DashboardLayout.prototype, \"allowResizing\", void 0);\n\n__decorate$1([Property(true)], DashboardLayout.prototype, \"allowPushing\", void 0);\n\n__decorate$1([Property(true)], DashboardLayout.prototype, \"enableHtmlSanitizer\", void 0);\n\n__decorate$1([Property(true)], DashboardLayout.prototype, \"allowFloating\", void 0);\n\n__decorate$1([Property(1)], DashboardLayout.prototype, \"cellAspectRatio\", void 0);\n\n__decorate$1([Property([5, 5])], DashboardLayout.prototype, \"cellSpacing\", void 0);\n\n__decorate$1([Property(1)], DashboardLayout.prototype, \"columns\", void 0);\n\n__decorate$1([Property(false)], DashboardLayout.prototype, \"showGridLines\", void 0);\n\n__decorate$1([Property(null)], DashboardLayout.prototype, \"draggableHandle\", void 0);\n\n__decorate$1([Property('en-US')], DashboardLayout.prototype, \"locale\", void 0);\n\n__decorate$1([Property('max-width: 600px')], DashboardLayout.prototype, \"mediaQuery\", void 0);\n\n__decorate$1([Collection([], Panel)], DashboardLayout.prototype, \"panels\", void 0);\n\n__decorate$1([Property(['e-south-east'])], DashboardLayout.prototype, \"resizableHandles\", void 0);\n\n__decorate$1([Event()], DashboardLayout.prototype, \"change\", void 0);\n\n__decorate$1([Event()], DashboardLayout.prototype, \"dragStart\", void 0);\n\n__decorate$1([Event()], DashboardLayout.prototype, \"drag\", void 0);\n\n__decorate$1([Event()], DashboardLayout.prototype, \"dragStop\", void 0);\n\n__decorate$1([Event()], DashboardLayout.prototype, \"resizeStart\", void 0);\n\n__decorate$1([Event()], DashboardLayout.prototype, \"resize\", void 0);\n\n__decorate$1([Event()], DashboardLayout.prototype, \"resizeStop\", void 0);\n\n__decorate$1([Event()], DashboardLayout.prototype, \"created\", void 0);\n\n__decorate$1([Event()], DashboardLayout.prototype, \"destroyed\", void 0);\n\nDashboardLayout = __decorate$1([NotifyPropertyChanges], DashboardLayout);\n/**\n * dashboardlayout modules\n */\n\n/**\n *     Layout all modules\n */\n\nexport { PaneProperties, Splitter, Panel, DashboardLayout }; //# sourceMappingURL=ej2-layouts.es2015.js.map","map":null,"metadata":{},"sourceType":"module"}