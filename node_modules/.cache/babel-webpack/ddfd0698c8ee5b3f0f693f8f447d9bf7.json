{"ast":null,"code":"import { Ajax, Base, Browser, ChildProperty, Complex, Component, Event, EventHandler, KeyboardEvents, L10n, NotifyPropertyChanges, Observer, Property, SanitizeHtmlHelper, Touch, addClass, append, attributes, closest, compile, createElement, debounce, detach, extend, formatUnit, getEnumValue, getInstance, getUniqueID, isNullOrUndefined, prepend, print, removeClass, select, selectAll, setStyleAttribute } from '@syncfusion/ej2-base';\nimport { Toolbar } from '@syncfusion/ej2-navigations';\nimport { DropDownButton } from '@syncfusion/ej2-splitbuttons';\nimport { Dialog, Popup, getScrollableParent, isCollide } from '@syncfusion/ej2-popups';\nimport { ColorPicker, NumericTextBox, TextBox, Uploader } from '@syncfusion/ej2-inputs';\nimport { Button, CheckBox, RadioButton } from '@syncfusion/ej2-buttons';\nimport { AjaxSettings, ContextMenu, ContextMenuSettings, DetailsView, DetailsViewSettings, FileManager, NavigationPane, NavigationPaneSettings, SearchSettings, Toolbar as Toolbar$1, ToolbarSettings, UploadSettings } from '@syncfusion/ej2-filemanager';\n/**\n * @hidden\n * @deprecated\n */\n\nconst created = 'create';\n/**\n * @hidden\n * @deprecated\n */\n\nconst destroyed = 'destroy';\n/**\n * @hidden\n * @deprecated\n */\n\nconst load = 'load';\n/**\n * Specifies Rich Text Editor internal events\n */\n\n/**\n * @hidden\n * @deprecated\n */\n\nconst initialLoad = 'initial-load';\n/**\n * @hidden\n * @deprecated\n */\n\nconst contentChanged = 'content-changed';\n/**\n * @hidden\n * @deprecated\n */\n\nconst initialEnd = 'initial-end';\n/**\n * @hidden\n * @deprecated\n */\n\nconst iframeMouseDown = 'iframe-click';\n/**\n * @hidden\n * @deprecated\n */\n\nconst destroy = 'destroy';\n/**\n * @hidden\n * @deprecated\n */\n\nconst toolbarClick = 'toolbarClick';\n/**\n * @hidden\n * @deprecated\n */\n\nconst toolbarRefresh = 'toolbar-refresh';\n/**\n * @hidden\n * @deprecated\n */\n\nconst refreshBegin = 'refresh-begin';\n/**\n * @hidden\n * @deprecated\n */\n\nconst toolbarUpdated = 'toolbar-updated';\n/**\n * @hidden\n * @deprecated\n */\n\nconst bindOnEnd = 'bind-on-end';\n/**\n * @hidden\n * @deprecated\n */\n\nconst renderColorPicker = 'render-color-picker';\n/**\n * @hidden\n * @deprecated\n */\n\nconst htmlToolbarClick = 'html-toolbar-click';\n/**\n * @hidden\n * @deprecated\n */\n\nconst markdownToolbarClick = 'markdown-toolbar-click';\n/**\n * @hidden\n * @deprecated\n */\n\nconst destroyColorPicker = 'destroy-color-picker';\n/**\n * @hidden\n * @deprecated\n */\n\nconst modelChanged = 'model-changed';\n/**\n * @hidden\n * @deprecated\n */\n\nconst keyUp = 'keyUp';\n/**\n * @hidden\n * @deprecated\n */\n\nconst keyDown = 'keyDown';\n/**\n * @hidden\n * @deprecated\n */\n\nconst mouseUp = 'mouseUp';\n/**\n * @hidden\n * @deprecated\n */\n\nconst toolbarCreated = 'toolbarCreated';\n/**\n * @hidden\n * @deprecated\n */\n\nconst toolbarRenderComplete = 'toolbarRenderComplete';\n/**\n * @hidden\n * @deprecated\n */\n\nconst enableFullScreen = 'enableFullScreen';\n/**\n * @hidden\n * @deprecated\n */\n\nconst disableFullScreen = 'disableFullScreen';\n/**\n * @hidden\n * @deprecated\n */\n\nconst dropDownSelect = 'dropDownSelect';\n/**\n * @hidden\n * @deprecated\n */\n\nconst beforeDropDownItemRender = 'beforeDropDownItemRender';\n/**\n * @hidden\n * @deprecated\n */\n\nconst execCommandCallBack = 'execCommandCallBack';\n/**\n * @hidden\n * @deprecated\n */\n\nconst imageToolbarAction = 'image-toolbar-action';\n/**\n * @hidden\n * @deprecated\n */\n\nconst linkToolbarAction = 'link-toolbar-action';\n/**\n * @hidden\n * @deprecated\n */\n\nconst windowResize = 'resize';\n/**\n * @hidden\n * @deprecated\n */\n\nconst resizeStart = 'resizeStart';\n/**\n * @hidden\n * @deprecated\n */\n\nconst onResize = 'resizing';\n/**\n * @hidden\n * @deprecated\n */\n\nconst resizeStop = 'resizeStop';\n/**\n * @hidden\n * @deprecated\n */\n\nconst undo = 'undo';\n/**\n * @hidden\n * @deprecated\n */\n\nconst redo = 'redo';\n/**\n * @hidden\n * @deprecated\n */\n\nconst insertLink = 'insertLink';\n/**\n * @hidden\n * @deprecated\n */\n\nconst unLink = 'unLink';\n/**\n * @hidden\n * @deprecated\n */\n\nconst editLink = 'editLink';\n/**\n * @hidden\n * @deprecated\n */\n\nconst openLink = 'openLink';\n/**\n * @hidden\n * @deprecated\n */\n\nconst actionBegin = 'actionBegin';\n/**\n * @hidden\n * @deprecated\n */\n\nconst actionComplete = 'actionComplete';\n/**\n * @hidden\n * @deprecated\n */\n\nconst updatedToolbarStatus = 'updatedToolbarStatus';\n/**\n * @hidden\n * @deprecated\n */\n\nconst actionSuccess = 'actionSuccess';\n/**\n * @hidden\n * @deprecated\n */\n\nconst updateToolbarItem = 'updateToolbarItem';\n/**\n * @hidden\n * @deprecated\n */\n\nconst insertImage = 'insertImage';\n/**\n * @hidden\n * @deprecated\n */\n\nconst insertCompleted = 'insertCompleted';\n/**\n * @hidden\n * @deprecated\n */\n\nconst imageLeft = 'justifyLeft';\n/**\n * @hidden\n * @deprecated\n */\n\nconst imageRight = 'justifyRight';\n/**\n * @hidden\n * @deprecated\n */\n\nconst imageCenter = 'justifyCenter';\n/**\n * @hidden\n * @deprecated\n */\n\nconst imageBreak = 'break';\n/**\n * @hidden\n * @deprecated\n */\n\nconst imageInline = 'inline';\n/**\n * @hidden\n * @deprecated\n */\n\nconst imageLink = 'insertImgLink';\n/**\n * @hidden\n * @deprecated\n */\n\nconst imageAlt = 'imgAltText';\n/**\n * @hidden\n * @deprecated\n */\n\nconst imageDelete = 'delete';\n/**\n * @hidden\n * @deprecated\n */\n\nconst imageCaption = 'caption';\n/**\n * @hidden\n * @deprecated\n */\n\nconst imageSize = 'imageSize';\n/**\n * @hidden\n * @deprecated\n */\n\nconst sourceCode = 'sourceCode';\n/**\n * @hidden\n * @deprecated\n */\n\nconst updateSource = 'updateSource';\n/**\n * @hidden\n * @deprecated\n */\n\nconst toolbarOpen = 'toolbarOpen';\n/**\n * @hidden\n * @deprecated\n */\n\nconst beforeDropDownOpen = 'beforeDropDownOpen';\n/**\n * @hidden\n * @deprecated\n */\n\nconst selectionSave = 'selection-save';\n/**\n * @hidden\n * @deprecated\n */\n\nconst selectionRestore = 'selection-restore';\n/**\n * @hidden\n * @deprecated\n */\n\nconst expandPopupClick = 'expandPopupClick';\n/**\n * @hidden\n * @deprecated\n */\n\nconst count = 'count';\n/**\n * @hidden\n * @deprecated\n */\n\nconst contentFocus = 'contentFocus';\n/**\n * @hidden\n * @deprecated\n */\n\nconst contentBlur = 'contentBlur';\n/**\n * @hidden\n * @deprecated\n */\n\nconst mouseDown = 'mouseDown';\n/**\n * @hidden\n * @deprecated\n */\n\nconst sourceCodeMouseDown = 'sourceCodeMouseDown';\n/**\n * @hidden\n * @deprecated\n */\n\nconst editAreaClick = 'editAreaClick';\n/**\n * @hidden\n * @deprecated\n */\n\nconst scroll = 'scroll';\n/**\n * @hidden\n * @deprecated\n */\n\nconst contentscroll = 'contentscroll';\n/**\n * @hidden\n * @deprecated\n */\n\nconst colorPickerChanged = 'colorPickerChanged';\n/**\n * @hidden\n * @deprecated\n */\n\nconst tableColorPickerChanged = 'tableColorPickerChanged';\n/**\n * @hidden\n * @deprecated\n */\n\nconst focusChange = 'focusChange';\n/**\n * @hidden\n * @deprecated\n */\n\nconst selectAll$1 = 'selectAll';\n/**\n * @hidden\n * @deprecated\n */\n\nconst selectRange = 'selectRange';\n/**\n * @hidden\n * @deprecated\n */\n\nconst getSelectedHtml = 'getSelectedHtml';\n/**\n * @hidden\n * @deprecated\n */\n\nconst renderInlineToolbar = 'renderInlineToolbar';\n/**\n * @hidden\n * @deprecated\n */\n\nconst paste = 'paste-content';\n/**\n * @hidden\n * @deprecated\n */\n\nconst imgModule = 'imageModule';\n/**\n * @hidden\n * @deprecated\n */\n\nconst rtlMode = 'rtl-mode';\n/**\n * @hidden\n * @deprecated\n */\n\nconst createTable = 'createTable';\n/**\n * @hidden\n * @deprecated\n */\n\nconst docClick = 'docClick';\n/**\n * @hidden\n * @deprecated\n */\n\nconst tableToolbarAction = 'table-toolbar-action';\n/**\n * @hidden\n * @deprecated\n */\n\nconst checkUndo = 'checkUndoStack';\n/**\n * @hidden\n * @deprecated\n */\n\nconst readOnlyMode = 'readOnlyMode';\n/**\n * @hidden\n * @deprecated\n */\n\nconst pasteClean = 'pasteClean';\n/**\n * @hidden\n * @deprecated\n */\n\nconst enterHandler = 'enterHandler';\n/**\n * @hidden\n * @deprecated\n */\n\nconst beforeDialogOpen = 'beforeDialogOpen';\n/**\n * @hidden\n * @deprecated\n */\n\nconst clearDialogObj = 'clearDialogObj';\n/**\n * @hidden\n * @deprecated\n */\n\nconst dialogOpen = 'dialogOpen';\n/**\n * @hidden\n * @deprecated\n */\n\nconst beforeDialogClose = 'beforeDialogClose';\n/**\n * @hidden\n * @deprecated\n */\n\nconst dialogClose = 'dialogClose';\n/**\n * @hidden\n * @deprecated\n */\n\nconst beforeQuickToolbarOpen = 'beforeQuickToolbarOpen';\n/**\n * @hidden\n * @deprecated\n */\n\nconst quickToolbarOpen = 'quickToolbarOpen';\n/**\n * @hidden\n * @deprecated\n */\n\nconst quickToolbarClose = 'quickToolbarClose';\n/**\n * @hidden\n * @deprecated\n */\n\nconst popupHide = 'popupHide';\n/**\n * @hidden\n * @deprecated\n */\n\nconst imageSelected = 'imageSelected';\n/**\n * @hidden\n * @deprecated\n */\n\nconst imageUploading = 'imageUploading';\n/**\n * @hidden\n * @deprecated\n */\n\nconst imageUploadSuccess = 'imageUploadSuccess';\n/**\n * @hidden\n * @deprecated\n */\n\nconst imageUploadFailed = 'imageUploadFailed';\n/**\n * @hidden\n * @deprecated\n */\n\nconst imageRemoving = 'imageRemoving';\n/**\n * @hidden\n * @deprecated\n */\n\nconst afterImageDelete = 'afterImageDelete';\n/**\n * @hidden\n * @deprecated\n */\n\nconst drop = 'drop';\n/**\n * @hidden\n * @deprecated\n */\n\nconst xhtmlValidation = 'xhtmlValidation';\n/**\n * @hidden\n * @deprecated\n */\n\nconst beforeImageUpload = 'beforeImageUpload';\n/**\n * @hidden\n * @deprecated\n */\n\nconst resizeInitialized = 'resizeInitialized';\n/**\n * @hidden\n * @deprecated\n */\n\nconst renderFileManager = 'renderFileManager';\n/**\n * @hidden\n * @deprecated\n */\n\nconst beforeImageDrop = 'beforeImageDrop';\n/**\n * @hidden\n * @deprecated\n */\n\nconst dynamicModule = 'dynamicModule';\n/**\n * @hidden\n * @deprecated\n */\n\nconst beforePasteCleanup = 'beforePasteCleanup';\n/**\n * @hidden\n * @deprecated\n */\n\nconst afterPasteCleanup = 'afterPasteCleanup';\n/**\n * @hidden\n * @deprecated\n */\n\nconst updateTbItemsStatus = 'updateTbItemsStatus';\n/**\n * @hidden\n * @deprecated\n */\n\nconst showLinkDialog = 'showLinkDialog';\n/**\n * @hidden\n * @deprecated\n */\n\nconst closeLinkDialog = 'closeLinkDialog';\n/**\n * @hidden\n * @deprecated\n */\n\nconst showImageDialog = 'showImageDialog';\n/**\n * @hidden\n * @deprecated\n */\n\nconst closeImageDialog = 'closeImageDialog';\n/**\n * @hidden\n * @deprecated\n */\n\nconst showTableDialog = 'showTableDialog';\n/**\n * @hidden\n * @deprecated\n */\n\nconst closeTableDialog = 'closeTableDialog';\n/**\n * Rich Text Editor classes defined here.\n */\n\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_RTE = 'e-richtexteditor';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_RTL = 'e-rtl';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_CONTENT = 'e-content';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_DISABLED = 'e-disabled';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_SCRIPT_SHEET = 'rte-iframe-script-sheet';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_STYLE_SHEET = 'rte-iframe-style-sheet';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_TOOLBAR = 'e-rte-toolbar';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_TB_FIXED = 'e-rte-tb-fixed';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_TB_FLOAT = 'e-rte-tb-float';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_TB_ABS_FLOAT = 'e-rte-tb-abs-float';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_INLINE = 'e-rte-inline';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_TB_INLINE = 'e-rte-tb-inline';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_RTE_EXPAND_TB = 'e-rte-tb-expand';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_FULL_SCREEN = 'e-rte-full-screen';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_QUICK_TB = 'e-rte-quick-toolbar';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_POP = 'e-rte-pop';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_TB_STATIC = 'e-tb-static';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_QUICK_POP = 'e-rte-quick-popup';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_QUICK_DROPDOWN = 'e-quick-dropdown';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_IMAGE_POP = 'e-rte-image-popup';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_INLINE_POP = 'e-rte-inline-popup';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_INLINE_DROPDOWN = 'e-rte-inline-dropdown';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_DROPDOWN_POPUP = 'e-rte-dropdown-popup';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_DROPDOWN_ICONS = 'e-rte-dropdown-icons';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_DROPDOWN_ITEMS = 'e-rte-dropdown-items';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_DROPDOWN_BTN = 'e-rte-dropdown-btn';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_RTE_CONTENT = 'e-rte-content';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_TB_ITEM = 'e-toolbar-item';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_TB_EXTENDED = 'e-toolbar-extended';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_TB_WRAP = 'e-toolbar-wrapper';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_POPUP = 'e-popup';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_SEPARATOR = 'e-separator';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_MINIMIZE = 'e-minimize';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_MAXIMIZE = 'e-maximize';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_BACK = 'e-back';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_SHOW = 'e-show';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_HIDE = 'e-hide';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_VISIBLE = 'e-visible';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_FOCUS = 'e-focused';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_RM_WHITE_SPACE = 'e-remove-white-space';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_IMGRIGHT = 'e-imgright';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_IMGLEFT = 'e-imgleft';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_IMGCENTER = 'e-imgcenter';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_IMGBREAK = 'e-imgbreak';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_CAPTION = 'e-img-caption';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_RTE_CAPTION = 'e-rte-img-caption';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_CAPINLINE = 'e-caption-inline';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_IMGINLINE = 'e-imginline';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_COUNT = 'e-rte-character-count';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_WARNING = 'e-warning';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_ERROR = 'e-error';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_ICONS = 'e-icons';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_ACTIVE = 'e-active';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_EXPAND_OPEN = 'e-expand-open';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_RTE_ELEMENTS = 'e-rte-elements';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_TB_BTN = 'e-tbar-btn';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_HR_SEPARATOR = 'e-rte-horizontal-separator';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_TB_IOS_FIX = 'e-tbar-ios-fixed';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_LIST_PRIMARY_CONTENT = 'e-rte-list-primary-content';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_NUMBERFORMATLIST_TB_BTN = 'e-rte-numberformatlist-dropdown';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_BULLETFORMATLIST_TB_BTN = 'e-rte-bulletformatlist-dropdown';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_FORMATS_TB_BTN = 'e-formats-tbar-btn';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_FONT_NAME_TB_BTN = 'e-font-name-tbar-btn';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_FONT_SIZE_TB_BTN = 'e-font-size-tbar-btn';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_FONT_COLOR_TARGET = 'e-rte-fontcolor-element';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_BACKGROUND_COLOR_TARGET = 'e-rte-backgroundcolor-element';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_COLOR_CONTENT = 'e-rte-color-content';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_FONT_COLOR_DROPDOWN = 'e-rte-fontcolor-dropdown';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_BACKGROUND_COLOR_DROPDOWN = 'e-rte-backgroundcolor-dropdown';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_COLOR_PALETTE = 'e-rte-square-palette';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_FONT_COLOR_PICKER = 'e-rte-fontcolor-colorpicker';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_BACKGROUND_COLOR_PICKER = 'e-rte-backgroundcolor-colorpicker';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_RTE_READONLY = 'e-rte-readonly';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_TABLE_SEL = 'e-cell-select';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_TB_DASH_BOR = 'e-dashed-border';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_TB_ALT_BOR = 'e-alternate-border';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_TB_COL_RES = 'e-column-resize';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_TB_ROW_RES = 'e-row-resize';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_TB_BOX_RES = 'e-table-box';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_RTE_HIDDEN = 'e-rte-hidden';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_RTE_PASTE_KEEP_FORMAT = 'e-rte-keepformat';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_RTE_PASTE_REMOVE_FORMAT = 'e-rte-removeformat';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_RTE_PASTE_PLAIN_FORMAT = 'e-rte-plainformat';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_RTE_PASTE_OK = 'e-rte-pasteok';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_RTE_PASTE_CANCEL = 'e-rte-pastecancel';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_RTE_DIALOG_MIN_HEIGHT = 'e-rte-dialog-minheight';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_RTE_RES_HANDLE = 'e-resize-handle';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_RTE_RES_EAST = 'e-south-east';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_RTE_IMAGE = 'e-rte-image';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_RESIZE = 'e-resize';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_IMG_FOCUS = 'e-img-focus';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_RTE_DRAG_IMAGE = 'e-rte-drag-image';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_RTE_UPLOAD_POPUP = 'e-rte-upload-popup';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_POPUP_OPEN = 'e-popup-open';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_IMG_RESIZE = 'e-img-resize';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_DROPAREA = 'e-droparea';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_IMG_INNER = 'e-img-inner';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_UPLOAD_FILES = 'e-upload-files';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_RTE_DIALOG_UPLOAD = 'e-rte-dialog-upload';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_RTE_RES_CNT = 'e-rte-resize';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_CUSTOM_TILE = 'e-custom-tile';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_NOCOLOR_ITEM = 'e-nocolor-item';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_TABLE = 'e-rte-table';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_TABLE_BORDER = 'e-rte-table-border';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_RTE_TABLE_RESIZE = 'e-rte-table-resize';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_RTE_FIXED_TB_EXPAND = 'e-rte-fixed-tb-expand';\n/**\n * @hidden\n * @deprecated\n */\n\nconst CLS_RTE_TB_ENABLED = 'e-rte-toolbar-enabled';\n/**\n * Defines types of Render\n *\n * @hidden\n * @deprecated\n */\n\nvar RenderType = /*#__PURE__*/(() => {\n  (function (RenderType) {\n    /* eslint-disable */\n\n    /** Defines RenderType as Toolbar */\n    RenderType[RenderType[\"Toolbar\"] = 0] = \"Toolbar\";\n    /** Defines RenderType as Content */\n\n    RenderType[RenderType[\"Content\"] = 1] = \"Content\";\n    /** Defines RenderType as Popup */\n\n    RenderType[RenderType[\"Popup\"] = 2] = \"Popup\";\n    /** Defines RenderType as LinkToolbar */\n\n    RenderType[RenderType[\"LinkToolbar\"] = 3] = \"LinkToolbar\";\n    /** Defines RenderType as TextToolbar */\n\n    RenderType[RenderType[\"TextToolbar\"] = 4] = \"TextToolbar\";\n    /** Defines RenderType as ImageToolbar */\n\n    RenderType[RenderType[\"ImageToolbar\"] = 5] = \"ImageToolbar\";\n    /** Defines RenderType as InlineToolbar */\n\n    RenderType[RenderType[\"InlineToolbar\"] = 6] = \"InlineToolbar\";\n    /** Defines RenderType as TableToolbar */\n\n    RenderType[RenderType[\"TableToolbar\"] = 7] = \"TableToolbar\";\n    /* eslint-enable */\n  })(RenderType || (RenderType = {}));\n\n  return RenderType;\n})();\n\n/**\n * Defines types to be used as Toolbar.\n */\nvar ToolbarType = /*#__PURE__*/(() => {\n  (function (ToolbarType) {\n    /* eslint-disable */\n\n    /** Defines ToolbarType as Standard */\n    ToolbarType[\"Expand\"] = \"Expand\";\n    /** Defines ToolbarType as MultiRow */\n\n    ToolbarType[\"MultiRow\"] = \"MultiRow\";\n    /** Defines ToolbarType as Scrollable */\n\n    ToolbarType[\"Scrollable\"] = \"Scrollable\";\n    /* eslint-enable */\n  })(ToolbarType || (ToolbarType = {}));\n\n  return ToolbarType;\n})();\n\n/**\n * Defines the type of dialog, which open or close in the Rich Text Editor.\n */\nvar DialogType = /*#__PURE__*/(() => {\n  (function (DialogType) {\n    /* eslint-disable */\n\n    /** Defines ToolbarType as Standard */\n    DialogType[\"InsertLink\"] = \"InsertLink\";\n    /** Defines ToolbarType as MultiRow */\n\n    DialogType[\"InsertImage\"] = \"InsertImage\";\n    /** Defines ToolbarType as Scrollable */\n\n    DialogType[\"InsertTable\"] = \"InsertTable\";\n    /* eslint-enable */\n  })(DialogType || (DialogType = {}));\n\n  return DialogType;\n})();\n\n/* eslint-disable */\n\n/**\n * Export items model\n */\nlet templateItems = ['alignments', 'formats', 'fontname', 'fontsize', 'fontcolor', 'backgroundcolor', 'align', 'display', 'tablerows', 'tablecolumns', 'tablecell', 'tablecellhorizontalalign', 'tablecellverticalalign', 'styles', 'numberformatlist', 'bulletformatlist'];\nlet tools = {\n  'alignments': {\n    'id': 'Alignments',\n    'icon': 'e-alignments',\n    'tooltip': 'Alignments',\n    'command': 'Alignments',\n    'subCommand': 'Alignments'\n  },\n  'justifyleft': {\n    'id': 'JustifyLeft',\n    'icon': 'e-justify-left',\n    'tooltip': 'JustifyLeft',\n    'command': 'Alignments',\n    'subCommand': 'JustifyLeft'\n  },\n  'justifycenter': {\n    'id': 'JustifyCenter',\n    'icon': 'e-justify-center',\n    'tooltip': 'JustifyCenter',\n    'command': 'Alignments',\n    'subCommand': 'JustifyCenter'\n  },\n  'justifyright': {\n    'id': 'JustifyRight',\n    'icon': 'e-justify-right',\n    'tooltip': 'JustifyRight',\n    'command': 'Alignments',\n    'subCommand': 'JustifyRight'\n  },\n  'justifyfull': {\n    'id': 'JustifyFull',\n    'icon': 'e-justify-full',\n    'tooltip': 'JustifyFull',\n    'command': 'Alignments',\n    'subCommand': 'JustifyFull'\n  },\n  'fontname': {\n    'id': 'FontName',\n    'icon': 'e-font-name',\n    'tooltip': 'Font Name',\n    'command': 'Font',\n    'subCommand': 'FontName'\n  },\n  'fontsize': {\n    'id': 'FontSize',\n    'icon': 'e-font-size',\n    'tooltip': 'Font Size',\n    'command': 'Font',\n    'subCommand': 'FontSize'\n  },\n  'fontcolor': {\n    'id': 'FontColor',\n    'icon': 'e-font-color',\n    'tooltip': 'Font Color',\n    'command': 'Font',\n    'subCommand': 'FontColor',\n    'value': '#ff0000ff'\n  },\n  'backgroundcolor': {\n    'id': 'BackgroundColor',\n    'icon': 'e-background-color',\n    'tooltip': 'Background Color',\n    'command': 'Font',\n    'subCommand': 'BackgroundColor',\n    'value': '#ffff00ff'\n  },\n  'bold': {\n    'id': 'Bold',\n    'icon': 'e-bold',\n    'tooltip': 'Bold',\n    'command': 'Style',\n    'subCommand': 'Bold'\n  },\n  'italic': {\n    'id': 'Italic',\n    'icon': 'e-italic',\n    'tooltip': 'Italic',\n    'command': 'Style',\n    'subCommand': 'Italic'\n  },\n  'underline': {\n    'id': 'Underline',\n    'icon': 'e-underline',\n    'tooltip': 'Underline',\n    'command': 'Style',\n    'subCommand': 'Underline'\n  },\n  'strikethrough': {\n    'id': 'StrikeThrough',\n    'icon': 'e-strike-through',\n    'tooltip': 'StrikeThrough',\n    'command': 'Style',\n    'subCommand': 'StrikeThrough'\n  },\n  'clearformat': {\n    'id': 'ClearFormat',\n    'icon': 'e-clear-format',\n    'tooltip': 'Clear Format',\n    'command': 'Clear',\n    'subCommand': 'ClearFormat'\n  },\n  'clearall': {\n    'id': 'ClearAll',\n    'icon': 'e-clear-all',\n    'tooltip': 'Clear All',\n    'command': 'Clear',\n    'subCommand': 'ClearAll'\n  },\n  'cut': {\n    'id': 'Cut',\n    'icon': 'e-cut',\n    'tooltip': 'Cut',\n    'command': 'ClipBoard',\n    'subCommand': 'Cut'\n  },\n  'copy': {\n    'id': 'Copy',\n    'icon': 'e-copy',\n    'tooltip': 'Copy',\n    'command': 'ClipBoard',\n    'subCommand': 'Copy'\n  },\n  'paste': {\n    'id': 'Paste',\n    'icon': 'e-paste',\n    'tooltip': 'Paste',\n    'command': 'ClipBoard',\n    'subCommand': 'Paste'\n  },\n  'unorderedlist': {\n    'id': 'UnorderedList',\n    'icon': 'e-unorder-list',\n    'tooltip': 'Bulleted List',\n    'command': 'Lists',\n    'subCommand': 'UL'\n  },\n  'orderedlist': {\n    'id': 'OrderedList',\n    'icon': 'e-order-list',\n    'tooltip': 'Numbered List',\n    'command': 'Lists',\n    'subCommand': 'OL'\n  },\n  'numberformatlist': {\n    'id': 'NumberFormatList',\n    'icon': 'e-order-list',\n    'tooltip': 'Number Format List',\n    'command': 'NumberFormatList',\n    'subCommand': 'NumberFormatList'\n  },\n  'bulletformatlist': {\n    'id': 'BulletFormatList',\n    'icon': 'e-unorder-list',\n    'tooltip': 'Bullet Format List',\n    'command': 'BulletFormatList',\n    'subCommand': 'BulletFormatList'\n  },\n  'indent': {\n    'id': 'Indent',\n    'icon': 'e-indent',\n    'tooltip': 'Increase Indent',\n    'command': 'Indents',\n    'subCommand': 'Indent'\n  },\n  'outdent': {\n    'id': 'Outdent',\n    'icon': 'e-outdent',\n    'tooltip': 'Decrease Indent',\n    'command': 'Indents',\n    'subCommand': 'Outdent'\n  },\n  'undo': {\n    'id': 'Undo',\n    'icon': 'e-undo',\n    'tooltip': 'Undo',\n    'command': 'Actions',\n    'subCommand': 'Undo'\n  },\n  'redo': {\n    'id': 'Redo',\n    'icon': 'e-redo',\n    'tooltip': 'Redo',\n    'command': 'Actions',\n    'subCommand': 'Redo'\n  },\n  'superscript': {\n    'id': 'SuperScript',\n    'icon': 'e-super-script',\n    'tooltip': 'Superscript',\n    'command': 'Effects',\n    'subCommand': 'SuperScript'\n  },\n  'subscript': {\n    'id': 'SubScript',\n    'icon': 'e-sub-script',\n    'tooltip': 'Subscript',\n    'command': 'Effects',\n    'subCommand': 'SubScript'\n  },\n  'createlink': {\n    'id': 'CreateLink',\n    'icon': 'e-create-link',\n    'tooltip': 'Insert Hyperlink',\n    'command': 'Links',\n    'subCommand': 'CreateLink'\n  },\n  'openlink': {\n    'id': 'OpenLink',\n    'icon': 'e-open-link',\n    'tooltip': 'Open Link',\n    'command': 'Links',\n    'subCommand': 'OpenLink'\n  },\n  'editlink': {\n    'id': 'EditLink',\n    'icon': 'e-edit-link',\n    'tooltip': 'Edit Link',\n    'command': 'Links',\n    'subCommand': 'EditLink'\n  },\n  'removelink': {\n    'id': 'RemoveLink',\n    'icon': 'e-remove-link',\n    'tooltip': 'Remove Link',\n    'command': 'Links',\n    'subCommand': 'RemoveLink'\n  },\n  'image': {\n    'id': 'Image',\n    'icon': 'e-image',\n    'tooltip': 'Insert Image',\n    'command': 'Images',\n    'subCommand': 'Image'\n  },\n  'filemanager': {\n    'id': 'FileManager',\n    'icon': 'e-rte-file-manager',\n    'tooltip': 'File Manager',\n    'command': 'Files',\n    'subCommand': 'File'\n  },\n  'createtable': {\n    'id': 'CreateTable',\n    'icon': 'e-create-table',\n    'tooltip': 'Create Table',\n    'command': 'Table',\n    'subCommand': 'CreateTable'\n  },\n  'removetable': {\n    'id': 'removeTable',\n    'icon': 'e-remove-table',\n    'tooltip': 'Remove Table',\n    'command': 'removeTable',\n    'subCommand': 'removeTable'\n  },\n  'replace': {\n    'id': 'Replace',\n    'icon': 'e-replace',\n    'tooltip': 'Replace',\n    'command': 'Images',\n    'subCommand': 'Replace'\n  },\n  'align': {\n    'id': 'Align',\n    'icon': 'e-align',\n    'tooltip': 'Align',\n    'command': 'Images',\n    'subCommand': 'Align'\n  },\n  'caption': {\n    'id': 'Caption',\n    'icon': 'e-caption',\n    'tooltip': 'Image Caption',\n    'command': 'Images',\n    'subCommand': 'Caption'\n  },\n  'remove': {\n    'id': 'Remove',\n    'icon': 'e-remove',\n    'tooltip': 'Remove',\n    'command': 'Images',\n    'subCommand': 'Remove'\n  },\n  'openimagelink': {\n    'id': 'OpenImageLink',\n    'icon': 'e-open-link',\n    'tooltip': 'Open Link',\n    'command': 'Images',\n    'subCommand': 'OpenImageLink'\n  },\n  'editimagelink': {\n    'id': 'EditImageLink',\n    'icon': 'e-edit-link',\n    'tooltip': 'Edit Link',\n    'command': 'Images',\n    'subCommand': 'EditImageLink'\n  },\n  'removeimagelink': {\n    'id': 'RemoveImageLink',\n    'icon': 'e-remove-link',\n    'tooltip': 'Remove Link',\n    'command': 'Images',\n    'subCommand': 'RemoveImageLink'\n  },\n  'insertlink': {\n    'id': 'InsertLink',\n    'icon': 'e-insert-link',\n    'tooltip': 'Insert Link',\n    'command': 'Images',\n    'subCommand': 'InsertLink'\n  },\n  'display': {\n    'id': 'Display',\n    'icon': 'e-display',\n    'tooltip': 'Display',\n    'command': 'Images',\n    'subCommand': 'Display'\n  },\n  'alttext': {\n    'id': 'AltText',\n    'icon': 'e-alt-text',\n    'tooltip': 'Alternative Text',\n    'command': 'Images',\n    'subCommand': 'AltText'\n  },\n  'dimension': {\n    'id': 'Dimension',\n    'icon': 'e-img-dimension',\n    'tooltip': 'Change Size',\n    'command': 'Images',\n    'subCommand': 'Dimension'\n  },\n  'fullscreen': {\n    'id': 'Maximize',\n    'icon': 'e-maximize',\n    'tooltip': 'Maximize',\n    'command': 'View',\n    'subCommand': 'Maximize'\n  },\n  'maximize': {\n    'id': 'Maximize',\n    'icon': 'e-maximize',\n    'tooltip': 'Maximize',\n    'command': 'FullScreen',\n    'subCommand': 'Maximize'\n  },\n  'minimize': {\n    'id': 'Minimize',\n    'icon': 'e-minimize',\n    'tooltip': 'Minimize',\n    'command': 'FullScreen',\n    'subCommand': 'Minimize'\n  },\n  'lowercase': {\n    'id': 'LowerCase',\n    'icon': 'e-lower-case',\n    'tooltip': 'Lower Case',\n    'command': 'Casing',\n    'subCommand': 'LowerCase'\n  },\n  'uppercase': {\n    'id': 'UpperCase',\n    'icon': 'e-upper-case',\n    'tooltip': 'Upper Case',\n    'command': 'Casing',\n    'subCommand': 'UpperCase'\n  },\n  'print': {\n    'id': 'Print',\n    'icon': 'e-print',\n    'tooltip': 'Print',\n    'command': 'Print',\n    'subCommand': 'Print'\n  },\n  'formats': {\n    'id': 'Formats',\n    'icon': 'e-formats',\n    'tooltip': 'Formats',\n    'command': 'Formats',\n    'subCommand': 'Formats'\n  },\n  'sourcecode': {\n    'id': 'SourceCode',\n    'icon': 'e-source-code',\n    'tooltip': 'Source Code',\n    'command': 'SourceCode',\n    'subCommand': 'SourceCode'\n  },\n  'preview': {\n    'id': 'Preview',\n    'icon': 'e-preview',\n    'tooltip': 'Preview',\n    'command': 'Preview',\n    'subCommand': 'Preview'\n  },\n  'viewside': {\n    'id': 'ViewSide',\n    'icon': 'e-view-side',\n    'tooltip': 'ViewSide',\n    'command': 'ViewSide',\n    'subCommand': 'ViewSide'\n  },\n  'insertcode': {\n    'id': 'InsertCode',\n    'icon': 'e-insert-code',\n    'tooltip': 'Insert Code',\n    'command': 'Formats',\n    'subCommand': 'Pre'\n  },\n  'tableheader': {\n    'id': 'TableHeader',\n    'icon': 'e-table-header',\n    'tooltip': 'Table Header',\n    'command': 'Table',\n    'subCommand': 'TableHeader'\n  },\n  'tableremove': {\n    'id': 'TableRemove',\n    'icon': 'e-table-remove',\n    'tooltip': 'Table Remove',\n    'command': 'Table',\n    'subCommand': 'TableRemove'\n  },\n  'tablerows': {\n    'id': 'TableRows',\n    'icon': 'e-table-rows',\n    'tooltip': 'Table Rows',\n    'command': 'Table',\n    'subCommand': 'TableRows'\n  },\n  'tablecolumns': {\n    'id': 'TableColumns',\n    'icon': 'e-table-columns',\n    'tooltip': 'Table Columns',\n    'command': 'Table',\n    'subCommand': 'TableColumns'\n  },\n  'tablecell': {\n    'id': 'TableCell',\n    'icon': 'e-table-cell',\n    'tooltip': 'Table Cell',\n    'command': 'Table',\n    'subCommand': 'TableCell'\n  },\n  'tablecellbackground': {\n    'id': 'TableCellBackground',\n    'icon': 'e-table-cell-background',\n    'tooltip': 'Table Cell Background',\n    'command': 'Table',\n    'subCommand': 'TableCellBackground'\n  },\n  'tablecellhorizontalalign': {\n    'id': 'TableCellHorizontalAlign',\n    'icon': 'e-table-cell-horizontalAlign',\n    'tooltip': 'Table Cell HorizontalAlign',\n    'command': 'Table',\n    'subCommand': 'TableCellHorizontalAlign'\n  },\n  'tablecellverticalalign': {\n    'id': 'TableCellVerticalAlign',\n    'icon': 'e-table-cell-verticalAlign',\n    'tooltip': 'Table Cell VerticalAlign',\n    'command': 'Table',\n    'subCommand': 'TableCellVerticalAlign'\n  },\n  'tableeditproperties': {\n    'id': 'TableEditProperties',\n    'icon': 'e-table-edit-properties',\n    'tooltip': 'Table Edit Properties',\n    'command': 'Table',\n    'subCommand': 'TableEditProperties'\n  },\n  'styles': {\n    'id': 'Styles',\n    'icon': 'e-table-styles',\n    'tooltip': 'Styles',\n    'command': 'Table',\n    'subCommand': 'Styles'\n  }\n};\nlet alignmentLocale = [{\n  locale: 'alignmentsDropDownLeft',\n  value: 'JustifyLeft'\n}, {\n  locale: 'alignmentsDropDownCenter',\n  value: 'JustifyCenter'\n}, {\n  locale: 'alignmentsDropDownRight',\n  value: 'JustifyRight'\n}, {\n  locale: 'alignmentsDropDownJustify',\n  value: 'JustifyFull'\n}];\nlet alignmentItems = [{\n  iconCss: 'e-icons e-justify-left',\n  text: 'Align Left',\n  command: 'Alignments',\n  subCommand: 'JustifyLeft'\n}, {\n  iconCss: 'e-icons e-justify-center',\n  text: 'Align Center',\n  command: 'Alignments',\n  subCommand: 'JustifyCenter'\n}, {\n  iconCss: 'e-icons e-justify-right',\n  text: 'Align Right',\n  command: 'Alignments',\n  subCommand: 'JustifyRight'\n}, {\n  iconCss: 'e-icons e-justify-full',\n  text: 'Align Justify',\n  command: 'Alignments',\n  subCommand: 'JustifyFull'\n}];\nlet imageAlignItems = [{\n  iconCss: 'e-icons e-justify-left',\n  command: 'Images',\n  subCommand: 'JustifyLeft'\n}, {\n  iconCss: 'e-icons e-justify-center',\n  command: 'Images',\n  subCommand: 'JustifyCenter'\n}, {\n  iconCss: 'e-icons e-justify-right',\n  command: 'Images',\n  subCommand: 'JustifyRight'\n}];\nlet displayLocale = [{\n  locale: 'imageDisplayDropDownInline',\n  value: 'Inline'\n}, {\n  locale: 'imageDisplayDropDownBreak',\n  value: 'Break'\n}];\nlet imageDisplayItems = [{\n  text: 'Inline',\n  cssClass: 'e-inline',\n  command: 'Images',\n  subCommand: 'Inline'\n}, {\n  text: 'Break',\n  cssClass: 'e-break',\n  command: 'Images',\n  subCommand: 'Break'\n}];\nlet tableCellItems = [{\n  iconCss: 'e-icons e-cell-merge',\n  text: 'Merge cells',\n  command: 'Table',\n  subCommand: 'Merge'\n}, {\n  iconCss: 'e-icons e-cell-horizontal-split',\n  text: 'Horizontal split',\n  command: 'Table',\n  subCommand: 'HorizontalSplit'\n}, {\n  iconCss: 'e-icons e-cell-vertical-split',\n  text: 'Vertical split',\n  command: 'Table',\n  subCommand: 'VerticalSplit'\n}];\nlet tableRowLocale = [{\n  locale: 'tableInsertRowDropDownBefore',\n  value: 'InsertRowBefore'\n}, {\n  locale: 'tableInsertRowDropDownAfter',\n  value: 'InsertRowAfter'\n}, {\n  locale: 'tableInsertRowDropDownDelete',\n  value: 'DeleteRow'\n}];\nlet tableRowsItems = [{\n  iconCss: 'e-icons e-insert-row-before',\n  text: 'Insert row before',\n  command: 'Table',\n  subCommand: 'InsertRowBefore'\n}, {\n  iconCss: 'e-icons e-insert-row-after',\n  text: 'Insert row after',\n  command: 'Table',\n  subCommand: 'InsertRowAfter'\n}, {\n  iconCss: 'e-icons e-delete-row',\n  text: 'Delete row',\n  command: 'Table',\n  subCommand: 'DeleteRow'\n}];\nlet tableColumnLocale = [{\n  locale: 'tableInsertColumnDropDownLeft',\n  value: 'InsertColumnLeft'\n}, {\n  locale: 'tableInsertColumnDropDownRight',\n  value: 'InsertColumnRight'\n}, {\n  locale: 'tableInsertColumnDropDownDelete',\n  value: 'DeleteColumn'\n}];\nlet tableColumnsItems = [{\n  iconCss: 'e-icons e-insert-column-left',\n  text: 'Insert column left',\n  command: 'Table',\n  subCommand: 'InsertColumnLeft'\n}, {\n  iconCss: 'e-icons e-insert-column-right',\n  text: 'Insert column right',\n  command: 'Table',\n  subCommand: 'InsertColumnRight'\n}, {\n  iconCss: 'e-icons e-delete-column',\n  text: 'Delete column',\n  command: 'Table',\n  subCommand: 'DeleteColumn'\n}];\nlet tableVerticalLocale = [{\n  locale: 'tableVerticalAlignDropDownTop',\n  value: 'AlignTop'\n}, {\n  locale: 'tableVerticalAlignDropDownMiddle',\n  value: 'AlignMiddle'\n}, {\n  locale: 'tableVerticalAlignDropDownBottom',\n  value: 'AlignBottom'\n}];\nlet TableCellVerticalAlignItems = [{\n  iconCss: 'e-icons e-align-top',\n  text: 'Align Top',\n  command: 'Table',\n  subCommand: 'AlignTop'\n}, {\n  iconCss: 'e-icons e-align-middle',\n  text: 'Align Middle',\n  command: 'Table',\n  subCommand: 'AlignMiddle'\n}, {\n  iconCss: 'e-icons e-align-bottom',\n  text: 'Align Bottom',\n  command: 'Table',\n  subCommand: 'AlignBottom'\n}];\nlet tableStyleLocale = [{\n  locale: 'tableStylesDropDownDashedBorder',\n  value: 'Dashed'\n}, {\n  locale: 'tableStylesDropDownAlternateRows',\n  value: 'Alternate'\n}];\nlet TableStyleItems = [{\n  text: 'Dashed Borders',\n  cssClass: 'e-dashed-borders',\n  command: 'Table',\n  subCommand: 'Dashed'\n}, {\n  text: 'Alternate Rows',\n  cssClass: 'e-alternate-rows',\n  command: 'Table',\n  subCommand: 'Alternate'\n}];\nconst predefinedItems = ['Bold', 'Italic', 'Underline', '|', 'Formats', 'Alignments', 'OrderedList', 'UnorderedList', '|', 'CreateLink', 'Image', '|', 'SourceCode', 'Undo', 'Redo'];\nconst fontFamily = [{\n  cssClass: 'e-segoe-ui',\n  text: 'Segoe UI',\n  command: 'Font',\n  subCommand: 'FontName',\n  value: 'Segoe UI'\n}, {\n  cssClass: 'e-arial',\n  text: 'Arial',\n  command: 'Font',\n  subCommand: 'FontName',\n  value: 'Arial,Helvetica,sans-serif'\n}, {\n  cssClass: 'e-georgia',\n  text: 'Georgia',\n  command: 'Font',\n  subCommand: 'FontName',\n  value: 'Georgia,serif'\n}, {\n  cssClass: 'e-impact',\n  text: 'Impact',\n  command: 'Font',\n  subCommand: 'FontName',\n  value: 'Impact,Charcoal,sans-serif'\n}, {\n  cssClass: 'e-tahoma',\n  text: 'Tahoma',\n  command: 'Font',\n  subCommand: 'FontName',\n  value: 'Tahoma,Geneva,sans-serif'\n}, {\n  cssClass: 'e-times-new-roman',\n  text: 'Times New Roman',\n  command: 'Font',\n  subCommand: 'FontName',\n  value: 'Times New Roman,Times,serif'\n}, {\n  cssClass: 'e-verdana',\n  text: 'Verdana',\n  command: 'Font',\n  subCommand: 'FontName',\n  value: 'Verdana,Geneva,sans-serif'\n}];\nconst fontSize = [{\n  text: '8 pt',\n  value: '8pt'\n}, {\n  text: '10 pt',\n  value: '10pt'\n}, {\n  text: '12 pt',\n  value: '12pt'\n}, {\n  text: '14 pt',\n  value: '14pt'\n}, {\n  text: '18 pt',\n  value: '18pt'\n}, {\n  text: '24 pt',\n  value: '24pt'\n}, {\n  text: '36 pt',\n  value: '36pt'\n}];\nconst formatItems = [{\n  cssClass: 'e-paragraph',\n  text: 'Paragraph',\n  command: 'Formats',\n  subCommand: 'P',\n  value: 'P'\n}, {\n  cssClass: 'e-code',\n  text: 'Code',\n  command: 'Formats',\n  subCommand: 'Pre',\n  value: 'Pre'\n}, {\n  cssClass: 'e-quote',\n  text: 'Quotation',\n  command: 'Formats',\n  subCommand: 'BlockQuote',\n  value: 'BlockQuote'\n}, {\n  cssClass: 'e-h1',\n  text: 'Heading 1',\n  command: 'Formats',\n  subCommand: 'H1',\n  value: 'H1'\n}, {\n  cssClass: 'e-h2',\n  text: 'Heading 2',\n  command: 'Formats',\n  subCommand: 'H2',\n  value: 'H2'\n}, {\n  cssClass: 'e-h3',\n  text: 'Heading 3',\n  command: 'Formats',\n  subCommand: 'H3',\n  value: 'H3'\n}, {\n  cssClass: 'e-h4',\n  text: 'Heading 4',\n  command: 'Formats',\n  subCommand: 'H4',\n  value: 'H4'\n}];\nconst fontColor = {\n  'Custom': ['', '#000000', '#e7e6e6', '#44546a', '#4472c4', '#ed7d31', '#a5a5a5', '#ffc000', '#70ad47', '#ff0000', '#f2f2f2', '#808080', '#cfcdcd', '#d5dce4', '#d9e2f3', '#fbe4d5', '#ededed', '#fff2cc', '#e2efd9', '#ffcccc', '#d9d9d9', '#595959', '#aeaaaa', '#acb9ca', '#b4c6e7', '#f7caac', '#dbdbdb', '#ffe599', '#c5e0b3', '#ff8080', '#bfbfbf', '#404040', '#747070', '#8496b0', '#8eaadb', '#f4b083', '#c9c9c9', '#ffd966', '#a8d08d', '#ff3333', '#a6a6a6', '#262626', '#3b3838', '#323e4f', '#2f5496', '#c45911', '#7b7b7b', '#bf8f00', '#538135', '#b30000', '#7f7f7f', '#0d0d0d', '#161616', '#212934', '#1f3763', '#823b0b', '#525252', '#7f5f00', '#375623', '#660000']\n};\nconst backgroundColor = {\n  'Custom': ['', '#000000', '#ffff00', '#00ff00', '#00ffff', '#0000ff', '#ff0000', '#000080', '#800080', '#996633', '#f2f2f2', '#808080', '#ffffcc', '#b3ffb3', '#ccffff', '#ccccff', '#ffcccc', '#ccccff', '#ff80ff', '#f2e6d9', '#d9d9d9', '#595959', '#ffff80', '#80ff80', '#b3ffff', '#8080ff', '#ff8080', '#8080ff', '#ff00ff', '#dfbf9f', '#bfbfbf', '#404040', '#ffff33', '#33ff33', '#33ffff', '#3333ff', '#ff3333', '#0000b3', '#b300b3', '#c68c53', '#a6a6a6', '#262626', '#e6e600', '#00b300', '#009999', '#000099', '#b30000', '#000066', '#660066', '#86592d', '#7f7f7f', '#0d0d0d', '#999900', '#006600', '#006666', '#000066', '#660000', '#00004d', '#4d004d', '#734d26']\n};\nconst numberFormatList = [{\n  text: 'None',\n  command: 'Lists',\n  subCommand: 'NumberFormatList',\n  value: 'none'\n}, {\n  text: 'Number',\n  command: 'Lists',\n  subCommand: 'NumberFormatList',\n  value: 'decimal'\n}, {\n  text: 'Lower Greek',\n  command: 'Lists',\n  subCommand: 'NumberFormatList',\n  value: 'lowerGreek'\n}, {\n  text: 'Lower Roman',\n  command: 'Lists',\n  subCommand: 'NumberFormatList',\n  value: 'lowerRoman'\n}, {\n  text: 'Upper Alpha',\n  command: 'Lists',\n  subCommand: 'NumberFormatList',\n  value: 'upperAlpha'\n}, {\n  text: 'Lower Alpha',\n  command: 'Lists',\n  subCommand: 'NumberFormatList',\n  value: 'lowerAlpha'\n}, {\n  text: 'Upper Roman',\n  command: 'Lists',\n  subCommand: 'NumberFormatList',\n  value: 'upperRoman'\n}];\nconst bulletFormatList = [{\n  text: 'None',\n  command: 'Lists',\n  subCommand: 'BulletFormatList',\n  value: 'none'\n}, {\n  text: 'Disc',\n  command: 'Lists',\n  subCommand: 'BulletFormatList',\n  value: 'disc'\n}, {\n  text: 'Circle',\n  command: 'Lists',\n  subCommand: 'BulletFormatList',\n  value: 'circle'\n}, {\n  text: 'Square',\n  command: 'Lists',\n  subCommand: 'BulletFormatList',\n  value: 'square'\n}];\n\nfunction getLocale(self, localeItems, item) {\n  for (let i = 0; localeItems.length > i; i++) {\n    if (localeItems[i].value === item.subCommand) {\n      return self.localeObj.getConstant(localeItems[i].locale);\n    }\n  }\n\n  return item.text;\n}\n\nfunction updateDropDownLocale(self) {\n  alignmentItems.forEach((item, i) => {\n    alignmentItems[i].text = getLocale(self, alignmentLocale, alignmentItems[i]);\n  });\n  imageDisplayItems.forEach((item, i) => {\n    imageDisplayItems[i].text = getLocale(self, displayLocale, imageDisplayItems[i]);\n  });\n  tableRowsItems.forEach((item, i) => {\n    tableRowsItems[i].text = getLocale(self, tableRowLocale, tableRowsItems[i]);\n  });\n  tableColumnsItems.forEach((item, i) => {\n    tableColumnsItems[i].text = getLocale(self, tableColumnLocale, tableColumnsItems[i]);\n  });\n  TableCellVerticalAlignItems.forEach((item, i) => {\n    TableCellVerticalAlignItems[i].text = getLocale(self, tableVerticalLocale, TableCellVerticalAlignItems[i]);\n  });\n  TableStyleItems.forEach((item, i) => {\n    TableStyleItems[i].text = getLocale(self, tableStyleLocale, TableStyleItems[i]);\n  });\n}\n/* eslint-disable */\n\n/**\n * Export default locale\n */\n\n\nlet defaultLocale = {\n  'alignments': 'Alignments',\n  'justifyLeft': 'Align Left',\n  'justifyCenter': 'Align Center',\n  'justifyRight': 'Align Right',\n  'justifyFull': 'Align Justify',\n  'fontName': 'Font Name',\n  'fontSize': 'Font Size',\n  'fontColor': 'Font Color',\n  'backgroundColor': 'Background Color',\n  'bold': 'Bold',\n  'italic': 'Italic',\n  'underline': 'Underline',\n  'strikethrough': 'Strikethrough',\n  'clearFormat': 'Clear Format',\n  'clearAll': 'Clear All',\n  'cut': 'Cut',\n  'copy': 'Copy',\n  'paste': 'Paste',\n  'unorderedList': 'Bulleted List',\n  'orderedList': 'Numbered List',\n  'indent': 'Increase Indent',\n  'outdent': 'Decrease Indent',\n  'undo': 'Undo',\n  'redo': 'Redo',\n  'superscript': 'Superscript',\n  'subscript': 'Subscript',\n  'createLink': 'Insert Link',\n  'openLink': 'Open Link',\n  'editLink': 'Edit Link',\n  'removeLink': 'Remove Link',\n  'image': 'Insert Image',\n  'replace': 'Replace',\n  'align': 'Align',\n  'caption': 'Image Caption',\n  'remove': 'Remove',\n  'insertLink': 'Insert Link',\n  'display': 'Display',\n  'altText': 'Alternative Text',\n  'dimension': 'Change Size',\n  'fullscreen': 'Maximize',\n  'maximize': 'Maximize',\n  'minimize': 'Minimize',\n  'lowerCase': 'Lower Case',\n  'upperCase': 'Upper Case',\n  'print': 'Print',\n  'formats': 'Formats',\n  'sourcecode': 'Code View',\n  'preview': 'Preview',\n  'viewside': 'ViewSide',\n  'insertCode': 'Insert Code',\n  'linkText': 'Display Text',\n  'linkTooltipLabel': 'Title',\n  'linkWebUrl': 'Web Address',\n  'linkTitle': 'Enter a title',\n  'linkurl': 'http://example.com',\n  'linkOpenInNewWindow': 'Open Link in New Window',\n  'linkHeader': 'Insert Link',\n  'dialogInsert': 'Insert',\n  'dialogCancel': 'Cancel',\n  'dialogUpdate': 'Update',\n  'imageHeader': 'Insert Image',\n  'imageLinkHeader': 'You can also provide a link from the web',\n  'mdimageLink': 'Please provide a URL for your image',\n  'imageUploadMessage': 'Drop image here or browse to upload',\n  'imageDeviceUploadMessage': 'Click here to upload',\n  'imageAlternateText': 'Alternate Text',\n  'alternateHeader': 'Alternative Text',\n  'browse': 'Browse',\n  'imageUrl': 'http://example.com/image.png',\n  'imageCaption': 'Caption',\n  'imageSizeHeader': 'Image Size',\n  'imageHeight': 'Height',\n  'imageWidth': 'Width',\n  'textPlaceholder': 'Enter Text',\n  'inserttablebtn': 'Insert Table',\n  'tabledialogHeader': 'Insert Table',\n  'tableWidth': 'Width',\n  'cellpadding': 'Cell Padding',\n  'cellspacing': 'Cell Spacing',\n  'columns': 'Number of columns',\n  'rows': 'Number of rows',\n  'tableRows': 'Table Rows',\n  'tableColumns': 'Table Columns',\n  'tableCellHorizontalAlign': 'Table Cell Horizontal Align',\n  'tableCellVerticalAlign': 'Table Cell Vertical Align',\n  'createTable': 'Create Table',\n  'removeTable': 'Remove Table',\n  'tableHeader': 'Table Header',\n  'tableRemove': 'Table Remove',\n  'tableCellBackground': 'Table Cell Background',\n  'tableEditProperties': 'Table Edit Properties',\n  'styles': 'Styles',\n  'insertColumnLeft': 'Insert Column Left',\n  'insertColumnRight': 'Insert Column Right',\n  'deleteColumn': 'Delete Column',\n  'insertRowBefore': 'Insert Row Before',\n  'insertRowAfter': 'Insert Row After',\n  'deleteRow': 'Delete Row',\n  'tableEditHeader': 'Edit Table',\n  'TableHeadingText': 'Heading',\n  'TableColText': 'Col',\n  'imageInsertLinkHeader': 'Insert Link',\n  'editImageHeader': 'Edit Image',\n  \"alignmentsDropDownLeft\": 'Align Left',\n  \"alignmentsDropDownCenter\": 'Align Center',\n  \"alignmentsDropDownRight\": 'Align Right',\n  \"alignmentsDropDownJustify\": 'Align Justify',\n  \"imageDisplayDropDownInline\": 'Inline',\n  \"imageDisplayDropDownBreak\": 'Break',\n  \"tableInsertRowDropDownBefore\": 'Insert row before',\n  \"tableInsertRowDropDownAfter\": 'Insert row after',\n  \"tableInsertRowDropDownDelete\": 'Delete row',\n  \"tableInsertColumnDropDownLeft\": 'Insert column left',\n  \"tableInsertColumnDropDownRight\": 'Insert column right',\n  \"tableInsertColumnDropDownDelete\": 'Delete column',\n  \"tableVerticalAlignDropDownTop\": 'Align Top',\n  \"tableVerticalAlignDropDownMiddle\": 'Align Middle',\n  \"tableVerticalAlignDropDownBottom\": 'Align Bottom',\n  \"tableStylesDropDownDashedBorder\": 'Dashed Borders',\n  \"tableStylesDropDownAlternateRows\": 'Alternate Rows',\n  'pasteFormat': 'Paste Format',\n  'pasteFormatContent': 'Choose the formatting action',\n  'plainText': 'Plain Text',\n  'cleanFormat': 'Clean',\n  'keepFormat': 'Keep',\n  'pasteDialogOk': 'OK',\n  'pasteDialogCancel': 'Cancel',\n  'fileManager': 'File Manager',\n  'fileDialogHeader': 'File Browser',\n  \"formatsDropDownParagraph\": 'Paragraph',\n  'formatsDropDownCode': 'Code',\n  'formatsDropDownQuotation': 'Quotation',\n  'formatsDropDownHeading1': 'Heading 1',\n  'formatsDropDownHeading2': 'Heading 2',\n  'formatsDropDownHeading3': 'Heading 3',\n  'formatsDropDownHeading4': 'Heading 4',\n  'fontNameSegoeUI': 'Segoe UI',\n  'fontNameArial': 'Arial',\n  'fontNameGeorgia': 'Georgia',\n  'fontNameImpact': 'Impact',\n  'fontNameTahoma': 'Tahoma',\n  'fontNameTimesNewRoman': 'Times New Roman',\n  'fontNameVerdana': 'Verdana',\n  'numberFormatListNumber': 'Number',\n  'numberFormatListLowerAlpha': 'LowerAlpha',\n  'numberFormatListUpperAlpha': 'UpperAlpha',\n  'numberFormatListLowerRoman': 'LowerRoman',\n  'numberFormatListUpperRoman': 'UpperRoman',\n  'numberFormatListLowerGreek': 'LowerGreek',\n  'bulletFormatListDisc': 'Disc',\n  'bulletFormatListCircle': 'Circle',\n  'bulletFormatListSquare': 'Square',\n  'numberFormatListNone': 'None',\n  'bulletFormatListNone': 'None'\n};\nlet toolsLocale = {\n  'alignments': 'alignments',\n  'justifyleft': 'justifyLeft',\n  'justifycenter': 'justifyCenter',\n  'justifyright': 'justifyRight',\n  'justifyfull': 'justifyFull',\n  'fontname': 'fontName',\n  'fontsize': 'fontSize',\n  'fontcolor': 'fontColor',\n  'backgroundcolor': 'backgroundColor',\n  'bold': 'bold',\n  'italic': 'italic',\n  'underline': 'underline',\n  'strikethrough': 'strikethrough',\n  'clearformat': 'clearFormat',\n  'clearall': 'clearAll',\n  'cut': 'cut',\n  'copy': 'copy',\n  'paste': 'paste',\n  'unorderedlist': 'unorderedList',\n  'orderedlist': 'orderedList',\n  'indent': 'indent',\n  'outdent': 'outdent',\n  'undo': 'undo',\n  'redo': 'redo',\n  'superscript': 'superscript',\n  'subscript': 'subscript',\n  'createlink': 'createLink',\n  'openlink': 'openLink',\n  'editlink': 'editLink',\n  'removelink': 'removeLink',\n  'openimagelink': 'openLink',\n  'editimagelink': 'editLink',\n  'removeimagelink': 'removeLink',\n  'image': 'image',\n  'replace': 'replace',\n  'align': 'align',\n  'caption': 'caption',\n  'remove': 'remove',\n  'insertlink': 'insertLink',\n  'display': 'display',\n  'alttext': 'altText',\n  'dimension': 'dimension',\n  'fullscreen': 'fullscreen',\n  'maximize': 'maximize',\n  'minimize': 'minimize',\n  'lowercase': 'lowerCase',\n  'uppercase': 'upperCase',\n  'print': 'print',\n  'formats': 'formats',\n  'sourcecode': 'sourcecode',\n  'preview': 'preview',\n  'viewside': 'viewside',\n  'insertcode': 'insertCode',\n  'tablerows': 'tableRows',\n  'tablecolumns': 'tableColumns',\n  'tablecellhorizontalalign': 'tableCellHorizontalAlign',\n  'tablecellverticalalign': 'tableCellVerticalAlign',\n  'createtable': 'createTable',\n  'removetable': 'removeTable',\n  'tableheader': 'tableHeader',\n  'tableremove': 'tableRemove',\n  'tablecellbackground': 'tableCellBackground',\n  'tableeditproperties': 'tableEditProperties',\n  'styles': 'styles',\n  'insertcolumnleft': 'insertColumnLeft',\n  'insertcolumnright': 'insertColumnRight',\n  'deletecolumn': 'deleteColumn',\n  'aligntop': 'AlignTop',\n  'alignmiddle': 'AlignMiddle',\n  'alignbottom': 'AlignBottom',\n  'insertrowbefore': 'insertRowBefore',\n  'insertrowafter': 'insertRowAfter',\n  'deleterow': 'deleteRow'\n};\nlet fontNameLocale = [{\n  locale: 'fontNameSegoeUI',\n  value: 'Segoe UI'\n}, {\n  locale: 'fontNameArial',\n  value: 'Arial,Helvetica,sans-serif'\n}, {\n  locale: 'fontNameGeorgia',\n  value: 'Georgia,serif'\n}, {\n  locale: 'fontNameImpact',\n  value: 'Impact,Charcoal,sans-serif'\n}, {\n  locale: 'fontNameTahoma',\n  value: 'Tahoma,Geneva,sans-serif'\n}, {\n  locale: 'fontNameTimesNewRoman',\n  value: 'Times New Roman,Times,serif'\n}, {\n  locale: 'fontNameVerdana',\n  value: 'Verdana,Geneva,sans-serif'\n}];\nlet formatsLocale = [{\n  locale: 'formatsDropDownParagraph',\n  value: 'P'\n}, {\n  locale: 'formatsDropDownCode',\n  value: 'Pre'\n}, {\n  locale: 'formatsDropDownQuotation',\n  value: 'BlockQuote'\n}, {\n  locale: 'formatsDropDownHeading1',\n  value: 'H1'\n}, {\n  locale: 'formatsDropDownHeading2',\n  value: 'H2'\n}, {\n  locale: 'formatsDropDownHeading3',\n  value: 'H3'\n}, {\n  locale: 'formatsDropDownHeading4',\n  value: 'H4'\n}];\nlet numberFormatListLocale = [{\n  locale: 'numberFormatListNone',\n  value: 'none'\n}, {\n  locale: 'numberFormatListNumber',\n  value: 'decimal'\n}, {\n  locale: 'numberFormatListLowerAlpha',\n  value: 'lower-alpha'\n}, {\n  locale: 'numberFormatListUpperAlpha',\n  value: 'upper-alpha'\n}, {\n  locale: 'numberFormatListLowerRoman',\n  value: 'lower-roman'\n}, {\n  locale: 'numberFormatListUpperRoman',\n  value: 'upper-roman'\n}, {\n  locale: 'numberFormatListLowerGreek',\n  value: 'lower-greek'\n}];\nlet bulletFormatListLocale = [{\n  locale: 'bulletFormatListNone',\n  value: 'none'\n}, {\n  locale: 'bulletFormatListDisc',\n  value: 'disc'\n}, {\n  locale: 'bulletFormatListCircle',\n  value: 'circle'\n}, {\n  locale: 'bulletFormatListSquare',\n  value: 'square'\n}];\n/**\n * Defines util methods used by Rich Text Editor.\n */\n\nconst undoRedoItems = ['Undo', 'Redo'];\nconst inlineNode = ['a', 'abbr', 'acronym', 'audio', 'b', 'bdi', 'bdo', 'big', 'br', 'button', 'canvas', 'cite', 'code', 'data', 'datalist', 'del', 'dfn', 'em', 'embed', 'font', 'i', 'iframe', 'img', 'input', 'ins', 'kbd', 'label', 'map', 'mark', 'meter', 'noscript', 'object', 'output', 'picture', 'progress', 'q', 'ruby', 's', 'samp', 'script', 'select', 'slot', 'small', 'span', 'strong', 'strike', 'sub', 'sup', 'svg', 'template', 'textarea', 'time', 'u', 'tt', 'var', 'video', 'wbr'];\n/**\n * @param {string} val - specifies the string value\n * @param {string} items - specifies the value\n * @returns {number} - returns the number value\n * @hidden\n */\n\nfunction getIndex(val, items) {\n  let index = -1;\n  items.some((item, i) => {\n    if (typeof item === 'string' && val === item.toLocaleLowerCase()) {\n      index = i;\n      return true;\n    }\n\n    return false;\n  });\n  return index;\n}\n/**\n * @param {Element} element - specifies the element\n * @param {string} className - specifies the string value\n * @returns {boolean} - returns the boolean value\n * @hidden\n */\n\n\nfunction hasClass(element, className) {\n  let hasClass = false;\n\n  if (element.classList.contains(className)) {\n    hasClass = true;\n  }\n\n  return hasClass;\n}\n/**\n * @param {IDropDownItemModel} items - specifies the item model\n * @param {string} value - specifies the string value\n * @param {string} type - specifies the string value\n * @param {string} returnType - specifies the return type\n * @returns {string} - returns the string value\n * @hidden\n */\n\n\nfunction getDropDownValue(items, value, type, returnType) {\n  let data;\n  let result;\n\n  for (let k = 0; k < items.length; k++) {\n    if (type === 'value' && items[k].value.toLocaleLowerCase() === value.toLocaleLowerCase()) {\n      data = items[k];\n      break;\n    } else if (type === 'text' && items[k].text.toLocaleLowerCase() === value.toLocaleLowerCase()) {\n      data = items[k];\n      break;\n    } else if (type === 'subCommand' && items[k].subCommand.toLocaleLowerCase() === value.toLocaleLowerCase()) {\n      data = items[k];\n      break;\n    }\n  }\n\n  if (!isNullOrUndefined(data)) {\n    switch (returnType) {\n      case 'text':\n        result = data.text;\n        break;\n\n      case 'value':\n        result = data.value;\n        break;\n\n      case 'iconCss':\n        result = data.iconCss;\n        break;\n    }\n  }\n\n  return result;\n}\n/**\n * @returns {boolean} - returns the boolean value\n * @hidden\n */\n\n\nfunction isIDevice() {\n  let result = false;\n\n  if (Browser.isDevice && Browser.isIos) {\n    result = true;\n  }\n\n  return result;\n}\n/**\n * @param {string} value - specifies the value\n * @returns {string} - returns the string value\n * @hidden\n */\n\n\nfunction getFormattedFontSize(value) {\n  if (isNullOrUndefined(value)) {\n    return '';\n  }\n\n  return value;\n}\n/**\n * @param {MouseEvent} e - specifies the mouse event\n * @param {HTMLElement} parentElement - specifies the parent element\n * @param {boolean} isIFrame - specifies the boolean value\n * @returns {number} - returns the number\n * @hidden\n */\n\n\nfunction pageYOffset(e, parentElement, isIFrame) {\n  let y = 0;\n\n  if (isIFrame) {\n    y = window.pageYOffset + parentElement.getBoundingClientRect().top + e.clientY;\n  } else {\n    y = e.pageY;\n  }\n\n  return y;\n}\n/**\n * @param {string} item - specifies the string\n * @param {ServiceLocator} serviceLocator - specifies the service locator\n * @returns {string} - returns the string\n * @hidden\n */\n\n\nfunction getTooltipText(item, serviceLocator) {\n  const i10n = serviceLocator.getService('rteLocale');\n  const itemLocale = toolsLocale[item];\n  const tooltipText = i10n.getConstant(itemLocale);\n  return tooltipText;\n}\n/**\n * @param {ISetToolbarStatusArgs} e - specifies the e element\n * @param {boolean} isPopToolbar - specifies the boolean value\n * @param {IRichTextEditor} self - specifies the parent element\n * @returns {void}\n * @hidden\n */\n\n\nfunction setToolbarStatus(e, isPopToolbar, self) {\n  updateDropDownFontFormatLocale(self);\n  const dropDown = e.dropDownModule;\n  const data = e.args;\n  const keys = Object.keys(e.args);\n\n  for (const key of keys) {\n    for (let j = 0; j < e.tbItems.length; j++) {\n      const item = e.tbItems[j].subCommand;\n      const itemStr = item && item.toLocaleLowerCase();\n\n      if (item && itemStr === key || item === 'UL' && key === 'unorderedlist' || item === 'OL' && key === 'orderedlist' || itemStr === 'pre' && key === 'insertcode') {\n        if (typeof data[key] === 'boolean') {\n          if (data[key] === true) {\n            addClass([e.tbElements[j]], [CLS_ACTIVE]);\n          } else {\n            removeClass([e.tbElements[j]], [CLS_ACTIVE]);\n          }\n        } else if ((typeof data[key] === 'string' || data[key] === null) && getIndex(key, e.parent.toolbarSettings.items) > -1) {\n          const value = data[key] ? data[key] : '';\n          let result = '';\n\n          switch (key) {\n            case 'formats':\n              {\n                if (isNullOrUndefined(dropDown.formatDropDown) || isPopToolbar || !isNullOrUndefined(dropDown.formatDropDown) && dropDown.formatDropDown.isDestroyed) {\n                  break;\n                }\n\n                const formatItems$$1 = e.parent.format.types;\n                const formatContent = isNullOrUndefined(e.parent.format.default) ? formatItems$$1[0].text : e.parent.format.default;\n                result = getDropDownValue(formatItems$$1, value, 'subCommand', 'text');\n                dropDown.formatDropDown.content = '<span style=\"display: inline-flex;' + 'width:' + e.parent.format.width + '\" >' + '<span class=\"e-rte-dropdown-btn-text\">' + (isNullOrUndefined(result) ? formatContent : result) + '</span></span>';\n                dropDown.formatDropDown.dataBind();\n                break;\n              }\n\n            case 'alignments':\n              {\n                if (isNullOrUndefined(dropDown.alignDropDown) || !isNullOrUndefined(dropDown.alignDropDown) && dropDown.alignDropDown.isDestroyed) {\n                  break;\n                }\n\n                const alignItems = alignmentItems;\n                result = getDropDownValue(alignItems, value, 'subCommand', 'iconCss');\n                dropDown.alignDropDown.iconCss = isNullOrUndefined(result) ? 'e-icons e-justify-left' : result;\n                dropDown.alignDropDown.dataBind();\n                break;\n              }\n\n            case 'fontname':\n              {\n                if (isNullOrUndefined(dropDown.fontNameDropDown) || isPopToolbar || !isNullOrUndefined(dropDown.fontNameDropDown) && dropDown.fontNameDropDown.isDestroyed) {\n                  break;\n                }\n\n                const fontNameItems = e.parent.fontFamily.items;\n                result = getDropDownValue(fontNameItems, value, 'value', 'text');\n                const fontNameContent = isNullOrUndefined(e.parent.fontFamily.default) ? fontNameItems[0].text : e.parent.fontFamily.default;\n                const name = isNullOrUndefined(result) ? fontNameContent : result;\n                e.tbElements[j].title = name;\n                dropDown.fontNameDropDown.content = '<span style=\"display: inline-flex;' + 'width:' + e.parent.fontFamily.width + '\" >' + '<span class=\"e-rte-dropdown-btn-text\">' + name + '</span></span>';\n                dropDown.fontNameDropDown.dataBind();\n                break;\n              }\n\n            case 'fontsize':\n              {\n                if (isNullOrUndefined(dropDown.fontSizeDropDown) || !isNullOrUndefined(dropDown.fontSizeDropDown) && dropDown.fontSizeDropDown.isDestroyed) {\n                  break;\n                }\n\n                const fontSizeItems = e.parent.fontSize.items;\n                const fontSizeContent = isNullOrUndefined(e.parent.fontSize.default) ? fontSizeItems[1].text : e.parent.fontSize.default;\n                result = getDropDownValue(fontSizeItems, value === '' ? fontSizeContent.replace(/\\s/g, '') : value, 'value', 'text');\n                dropDown.fontSizeDropDown.content = '<span style=\"display: inline-flex;' + 'width:' + e.parent.fontSize.width + '\" >' + '<span class=\"e-rte-dropdown-btn-text\">' + getFormattedFontSize(result) + '</span></span>';\n                dropDown.fontSizeDropDown.dataBind();\n                break;\n              }\n          }\n        }\n      }\n    }\n  }\n}\n/**\n * @param {string} items - specifies the string value\n * @returns {string[]} - returns the array value\n * @hidden\n */\n\n\nfunction getCollection(items) {\n  if (typeof items === 'object') {\n    return items;\n  } else {\n    return [items];\n  }\n}\n/**\n * @param {string[]} items - specifies the array of string value\n * @param {IToolbarItemModel} toolbarItems - specifies the tool bar model\n * @returns {number} - returns the number\n * @hidden\n */\n\n\nfunction getTBarItemsIndex(items, toolbarItems) {\n  const itemsIndex = [];\n\n  for (let i = 0; i < items.length; i++) {\n    for (let j = 0; j < toolbarItems.length; j++) {\n      if (toolbarItems[j].type === 'Separator') {\n        continue;\n      } else {\n        if (items[i] === 'OrderedList' && toolbarItems[j].subCommand === 'OL') {\n          itemsIndex.push(j);\n          break;\n        } else if (items[i] === 'UnorderedList' && toolbarItems[j].subCommand === 'UL') {\n          itemsIndex.push(j);\n          break;\n        } else if (items[i] === 'InsertCode' && toolbarItems[j].subCommand === 'Pre') {\n          itemsIndex.push(j);\n          break;\n        } else if (items[i] === 'FileManager' && toolbarItems[j].subCommand === 'File') {\n          itemsIndex.push(j);\n          break;\n        } else if (typeof items[i] === 'object' && items[i].command === 'Custom') {\n          itemsIndex.push(i);\n          break;\n        } else if (items[i] === toolbarItems[j].subCommand) {\n          itemsIndex.push(j);\n          break;\n        }\n      }\n    }\n  }\n\n  return itemsIndex;\n}\n/**\n * @param {BaseToolbar} baseToolbar - specifies the base\n * @param {boolean} undoRedoStatus - specifies the boolean value\n * @returns {void}\n * @hidden\n */\n\n\nfunction updateUndoRedoStatus(baseToolbar, undoRedoStatus) {\n  let i = 0;\n  const trgItems = getTBarItemsIndex(getCollection(undoRedoItems), baseToolbar.toolbarObj.items);\n  const tbItems = selectAll('.' + CLS_TB_ITEM, baseToolbar.toolbarObj.element);\n  const keys = Object.keys(undoRedoStatus);\n\n  for (const key of keys) {\n    const target = tbItems[trgItems[i]];\n\n    if (target) {\n      baseToolbar.toolbarObj.enableItems(target, undoRedoStatus[key]);\n    }\n\n    i++;\n  }\n}\n/**\n * To dispatch the event manually\n *\n * @param {Element} element - specifies the element.\n * @param {string} type - specifies the string type.\n * @returns {void}\n * @hidden\n * @deprecated\n */\n\n\nfunction dispatchEvent(element, type) {\n  const evt = document.createEvent('HTMLEvents');\n  evt.initEvent(type, false, true);\n  element.dispatchEvent(evt);\n}\n/**\n * To parse the HTML\n *\n * @param {string} value - specifies the string value\n * @returns {DocumentFragment} - returns the document\n * @hidden\n */\n\n\nfunction parseHtml(value) {\n  const tempNode = createElement('template');\n  tempNode.innerHTML = value;\n\n  if (tempNode.content instanceof DocumentFragment) {\n    return tempNode.content;\n  } else {\n    return document.createRange().createContextualFragment(value);\n  }\n}\n/**\n * @param {Document} docElement - specifies the document element\n * @param {Element} node - specifies the node\n * @returns {Node[]} - returns the node array\n * @hidden\n */\n\n\nfunction getTextNodesUnder(docElement, node) {\n  let nodes = [];\n\n  for (node = node.firstChild; node; node = node.nextSibling) {\n    if (node.nodeType === 3) {\n      nodes.push(node);\n    } else {\n      nodes = nodes.concat(getTextNodesUnder(docElement, node));\n    }\n  }\n\n  return nodes;\n}\n/**\n * @param {IToolsItemConfigs} obj - specifies the configuration\n * @returns {void}\n * @hidden\n */\n\n\nfunction toObjectLowerCase(obj) {\n  const convertedValue = {};\n  const keys = Object.keys(obj);\n\n  for (let i = 0; i < Object.keys(obj).length; i++) {\n    convertedValue[keys[i].toLocaleLowerCase()] = obj[keys[i]];\n  }\n\n  return convertedValue;\n}\n/**\n * @param {string} value - specifies the string value\n * @param {IRichTextEditor} rteObj - specifies the rte object\n * @returns {string} - returns the string\n * @hidden\n */\n\n\nfunction getEditValue(value, rteObj) {\n  let val;\n\n  if (value !== null && value !== '') {\n    val = rteObj.enableHtmlEncode ? updateTextNode(decode(value), rteObj) : updateTextNode(value, rteObj);\n    rteObj.setProperties({\n      value: val\n    }, true);\n  } else {\n    if (rteObj.enterKey === 'DIV') {\n      val = rteObj.enableHtmlEncode ? '&lt;div&gt;&lt;br/&gt;&lt;/div&gt;' : '<div><br/></div>';\n    } else if (rteObj.enterKey === 'BR') {\n      val = rteObj.enableHtmlEncode ? '&lt;br/&gt;' : '<br/>';\n    } else {\n      val = rteObj.enableHtmlEncode ? '&lt;p&gt;&lt;br/&gt;&lt;/p&gt;' : '<p><br/></p>';\n    }\n  }\n\n  return val;\n}\n/**\n * @param {string} value - specifies the value\n * @param {IRichTextEditor} rteObj - specifies the rich text editor instance.\n * @returns {string} - returns the string\n * @hidden\n */\n\n\nfunction updateTextNode(value, rteObj) {\n  const tempNode = document.createElement('div');\n  const resultElm = document.createElement('div');\n  const childNodes = tempNode.childNodes;\n  tempNode.innerHTML = value;\n  tempNode.setAttribute('class', 'tempDiv');\n\n  if (childNodes.length > 0) {\n    let isPreviousInlineElem;\n    let previousParent;\n    let insertElem;\n\n    while (tempNode.firstChild) {\n      if (rteObj.enterKey !== 'BR' && (tempNode.firstChild.nodeName === '#text' && (tempNode.firstChild.textContent.indexOf('\\n') < 0 || tempNode.firstChild.textContent.trim() !== '') || inlineNode.indexOf(tempNode.firstChild.nodeName.toLocaleLowerCase()) >= 0)) {\n        if (!isPreviousInlineElem) {\n          if (rteObj.enterKey === 'DIV') {\n            insertElem = createElement('div');\n          } else {\n            insertElem = createElement('p');\n          }\n\n          resultElm.appendChild(insertElem);\n          insertElem.appendChild(tempNode.firstChild);\n        } else {\n          previousParent.appendChild(tempNode.firstChild);\n        }\n\n        previousParent = insertElem;\n        isPreviousInlineElem = true;\n      } else if (tempNode.firstChild.nodeName === '#text' && (tempNode.firstChild.textContent === '\\n' || tempNode.firstChild.textContent.indexOf('\\n') >= 0 && tempNode.firstChild.textContent.trim() === '')) {\n        detach(tempNode.firstChild);\n      } else {\n        resultElm.appendChild(tempNode.firstChild);\n        isPreviousInlineElem = false;\n      }\n    }\n\n    const imageElm = resultElm.querySelectorAll('img');\n\n    for (let i = 0; i < imageElm.length; i++) {\n      if (!imageElm[i].classList.contains(CLS_RTE_IMAGE)) {\n        imageElm[i].classList.add(CLS_RTE_IMAGE);\n      }\n\n      if (!(imageElm[i].classList.contains(CLS_IMGINLINE) || imageElm[i].classList.contains(CLS_IMGBREAK))) {\n        imageElm[i].classList.add(CLS_IMGINLINE);\n      }\n    }\n  }\n\n  return resultElm.innerHTML;\n}\n/**\n * @param {IRichTextEditor} rteObj - specifies the rte object\n * @returns {string} - returns the value based on enter configuration.\n * @hidden\n */\n\n\nfunction getDefaultValue(rteObj) {\n  let currentVal;\n\n  if (rteObj.enterKey === 'DIV') {\n    currentVal = rteObj.enableHtmlEncode ? '&lt;div&gt;&lt;br/&gt;&lt;/div&gt;' : '<div><br/></div>';\n  } else if (rteObj.enterKey === 'BR') {\n    currentVal = rteObj.enableHtmlEncode ? '&lt;br/&gt;' : '<br/>';\n  } else {\n    currentVal = rteObj.enableHtmlEncode ? '&lt;p&gt;&lt;br/&gt;&lt;/p&gt;' : '<p><br/></p>';\n  }\n\n  return currentVal;\n}\n/**\n * @param {string} value - specifies the value\n * @returns {boolean} - returns the boolean value\n * @hidden\n */\n\n\nfunction isEditableValueEmpty(value) {\n  return value === '<p><br></p>' || value === '&lt;p&gt;&lt;br&gt;&lt;/p&gt;' || value === '<div><br></div>' || value === '&lt;div&gt;&lt;br&gt;&lt;/div&gt;' || value === '<br>' || value === '&lt;br&gt;' || value === '' ? true : false;\n}\n/**\n * @param {string} value - specifies the string value\n * @returns {string} - returns the string\n * @hidden\n */\n\n\nfunction decode(value) {\n  return value.replace(/&amp;/g, '&').replace(/&amp;lt;/g, '<').replace(/&lt;/g, '<').replace(/&amp;gt;/g, '>').replace(/&gt;/g, '>').replace(/&nbsp;/g, ' ').replace(/&amp;nbsp;/g, ' ').replace(/&quot;/g, '');\n}\n/**\n * @param {string} value - specifies the string value\n * @param {IRichTextEditor} parent - specifies the rte\n * @returns {string} - returns the string value\n * @hidden\n */\n\n\nfunction sanitizeHelper(value, parent) {\n  if (parent.enableHtmlSanitizer) {\n    const item = SanitizeHtmlHelper.beforeSanitize();\n    const beforeEvent = {\n      cancel: false,\n      helper: null\n    };\n    extend(item, item, beforeEvent);\n    parent.trigger('beforeSanitizeHtml', item);\n\n    if (item.cancel && !isNullOrUndefined(item.helper)) {\n      value = item.helper(value);\n    } else if (!item.cancel) {\n      value = SanitizeHtmlHelper.serializeValue(item, value);\n    }\n  }\n\n  return value;\n}\n/**\n * @param {string} dataUrl - specifies the string value\n * @returns {BaseToolbar} - returns the value\n * @hidden\n */\n//Converting the base64 url to blob\n\n\nfunction convertToBlob(dataUrl) {\n  const arr = dataUrl.split(',');\n  const mime = arr[0].match(/:(.*?);/)[1];\n  const bstr = atob(arr[1]);\n  let n = bstr.length;\n  const u8arr = new Uint8Array(n);\n\n  while (n--) {\n    u8arr[n] = bstr.charCodeAt(n);\n  }\n\n  return new Blob([u8arr], {\n    type: mime\n  });\n}\n/**\n * @param {IRichTextEditor} self - specifies the rte\n * @param {string} localeItems - specifies the locale items\n * @param {IDropDownItemModel} item - specifies the dropdown item\n * @returns {string} - returns the value\n * @hidden\n */\n\n\nfunction getLocaleFontFormat(self, localeItems, item) {\n  for (let i = 0; localeItems.length > i; i++) {\n    if (localeItems[i].value === item.value || localeItems[i].value === item.subCommand) {\n      return self.localeObj.getConstant(localeItems[i].locale);\n    }\n  }\n\n  return item.text;\n}\n/**\n * @param {IRichTextEditor} self - specifies the rte\n * @returns {void}\n * @hidden\n */\n\n\nfunction updateDropDownFontFormatLocale(self) {\n  fontFamily.forEach((item, i) => {\n    fontFamily[i].text = getLocaleFontFormat(self, fontNameLocale, fontFamily[i]);\n  });\n  formatItems.forEach((item, i) => {\n    formatItems[i].text = getLocaleFontFormat(self, formatsLocale, formatItems[i]);\n  });\n  numberFormatList.forEach((item, i) => {\n    numberFormatList[i].text = getLocaleFontFormat(self, numberFormatListLocale, numberFormatList[i]);\n  });\n  bulletFormatList.forEach((item, i) => {\n    bulletFormatList[i].text = getLocaleFontFormat(self, bulletFormatListLocale, bulletFormatList[i]);\n  });\n}\n/**\n * `Toolbar renderer` module is used to render toolbar in RichTextEditor.\n *\n * @hidden\n * @deprecated\n */\n\n\nclass ToolbarRenderer {\n  /**\n   * Constructor for toolbar renderer module\n   *\n   * @param {IRichTextEditor} parent - specifies the parent element.\n   */\n  constructor(parent) {\n    this.parent = parent;\n    this.wireEvent();\n  }\n\n  wireEvent() {\n    this.parent.on(destroy, this.unWireEvent, this);\n  }\n\n  unWireEvent() {\n    this.parent.off(destroy, this.unWireEvent);\n\n    if (this.popupOverlay) {\n      EventHandler.remove(this.popupOverlay, 'click touchmove', this.onPopupOverlay);\n    }\n\n    this.removePopupContainer();\n  }\n\n  toolbarBeforeCreate(e) {\n    if (this.mode === 'Extended') {\n      e.enableCollision = false;\n    }\n  }\n\n  toolbarCreated() {\n    this.parent.notify(toolbarCreated, this);\n  }\n\n  toolbarClicked(args) {\n    if (!this.parent.enabled) {\n      return;\n    }\n\n    if (!this.parent.readonly || isNullOrUndefined(args.item)) {\n      this.parent.notify(toolbarClick, args);\n    }\n\n    this.parent.trigger('toolbarClick', args);\n  }\n\n  dropDownSelected(args) {\n    this.parent.notify(dropDownSelect, args);\n    this.onPopupOverlay();\n  }\n\n  beforeDropDownItemRender(args) {\n    if (this.parent.readonly || !this.parent.enabled) {\n      return;\n    }\n\n    this.parent.notify(beforeDropDownItemRender, args);\n  }\n\n  dropDownOpen(args) {\n    if (args.element.parentElement.getAttribute('id').indexOf('TableCell') > -1 && !isNullOrUndefined(args.element.parentElement.querySelector('.e-cell-merge')) && (!isNullOrUndefined(args.element.parentElement.querySelector('.e-cell-horizontal-split')) || !isNullOrUndefined(args.element.parentElement.querySelector('.e-cell-vertical-split')))) {\n      const listEle = args.element.querySelectorAll('li');\n\n      if (this.parent.inputElement.querySelectorAll('.e-cell-select').length === 1) {\n        addClass([listEle[0]], 'e-disabled');\n        removeClass([listEle[1], listEle[2]], 'e-disabled');\n      } else if (this.parent.inputElement.querySelectorAll('.e-cell-select').length > 1) {\n        removeClass([listEle[0]], 'e-disabled');\n        addClass([listEle[1], listEle[2]], 'e-disabled');\n      }\n    }\n\n    if (Browser.isDevice && !args.element.parentElement.classList.contains(CLS_QUICK_DROPDOWN)) {\n      this.popupModal(args.element.parentElement);\n    }\n\n    this.parent.notify(selectionSave, args);\n  }\n\n  dropDownClose(args) {\n    this.removePopupContainer();\n    this.parent.notify(selectionRestore, args);\n  }\n\n  removePopupContainer() {\n    if (Browser.isDevice && !isNullOrUndefined(this.popupContainer)) {\n      const popupEle = this.popupContainer.querySelector('.e-dropdown-popup.e-tbar-btn.e-control');\n\n      if (popupEle) {\n        this.popupContainer.parentNode.insertBefore(popupEle, this.popupContainer.nextSibling);\n        popupEle.style.removeProperty('position');\n        removeClass([popupEle], 'e-popup-modal');\n      }\n\n      detach(this.popupContainer);\n      this.popupContainer = undefined;\n    }\n  }\n  /**\n   * renderToolbar method\n   *\n   * @param {IToolbarOptions} args - specifies the arguments.\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  renderToolbar(args) {\n    this.setPanel(args.target);\n    this.renderPanel();\n    this.mode = args.overflowMode;\n    args.rteToolbarObj.toolbarObj = new Toolbar({\n      items: args.items,\n      width: '100%',\n      overflowMode: args.overflowMode,\n      beforeCreate: this.toolbarBeforeCreate.bind(this),\n      created: this.toolbarCreated.bind(this),\n      clicked: this.toolbarClicked.bind(this),\n      enablePersistence: args.enablePersistence,\n      enableRtl: args.enableRtl\n    });\n    args.rteToolbarObj.toolbarObj.isStringTemplate = true;\n    args.rteToolbarObj.toolbarObj.createElement = this.parent.createElement;\n    args.rteToolbarObj.toolbarObj.appendTo(args.target);\n  }\n  /**\n   * renderDropDownButton method\n   *\n   * @param {IDropDownModel} args - specifies the the arguments.\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  renderDropDownButton(args) {\n    let css;\n    args.element.classList.add(CLS_DROPDOWN_BTN);\n    css = args.cssClass + ' ' + CLS_RTE_ELEMENTS + ' ' + CLS_TB_BTN;\n\n    if (this.parent.inlineMode.enable && Browser.isDevice) {\n      css = css + ' ' + CLS_INLINE_DROPDOWN;\n    } // eslint-disable-next-line\n\n\n    let proxy = this;\n    const dropDown = new DropDownButton({\n      items: args.items,\n      iconCss: args.iconCss,\n      cssClass: css,\n      content: args.content,\n      enablePersistence: this.parent.enablePersistence,\n      enableRtl: this.parent.enableRtl,\n      select: this.dropDownSelected.bind(this),\n      beforeOpen: args => {\n        if (proxy.parent.readonly || !proxy.parent.enabled) {\n          args.cancel = true;\n          return;\n        } // eslint-disable-next-line\n\n\n        for (let index = 0; index < args.element.childNodes.length; index++) {\n          const divNode = this.parent.createElement('div');\n          divNode.innerHTML = dropDown.content.trim();\n\n          if (divNode.textContent.trim() !== '' && args.element.childNodes[index].textContent.trim() === divNode.textContent.trim()) {\n            if (!args.element.childNodes[index].classList.contains('e-active')) {\n              addClass([args.element.childNodes[index]], 'e-active');\n            }\n          } else {\n            removeClass([args.element.childNodes[index]], 'e-active');\n          }\n        }\n\n        proxy.parent.notify(beforeDropDownOpen, args);\n      },\n      close: this.dropDownClose.bind(this),\n      open: this.dropDownOpen.bind(this),\n      beforeItemRender: this.beforeDropDownItemRender.bind(this)\n    });\n    dropDown.isStringTemplate = true;\n    dropDown.createElement = proxy.parent.createElement;\n    dropDown.appendTo(args.element);\n    args.element.tabIndex = -1;\n    const popupElement = document.getElementById(dropDown.element.id + '-popup');\n    popupElement.setAttribute('aria-owns', this.parent.getID());\n    return dropDown;\n  }\n  /**\n   * renderListDropDown method\n   *\n   * @param {IDropDownModel} args - specifies the the arguments.\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  renderListDropDown(args) {\n    // eslint-disable-next-line\n    const proxy = this;\n    let css = CLS_RTE_ELEMENTS + ' ' + CLS_TB_BTN + (this.parent.inlineMode ? ' ' + CLS_INLINE_DROPDOWN : '');\n    css += ' ' + (args.itemName === 'NumberFormatList' ? CLS_NUMBERFORMATLIST_TB_BTN : CLS_BULLETFORMATLIST_TB_BTN);\n    const content = proxy.parent.createElement('span', {\n      className: CLS_LIST_PRIMARY_CONTENT\n    });\n    const inlineEle = proxy.parent.createElement('span', {\n      className: args.cssClass\n    });\n    content.appendChild(inlineEle);\n    const dropDown = new DropDownButton({\n      items: args.items,\n      cssClass: css,\n      content: args.content,\n      enablePersistence: this.parent.enablePersistence,\n      enableRtl: this.parent.enableRtl,\n      select: this.dropDownSelected.bind(this),\n      beforeOpen: args => {\n        if (proxy.parent.readonly || !proxy.parent.enabled) {\n          args.cancel = true;\n          return;\n        }\n\n        const element = args.event ? args.event.target : null;\n        proxy.currentElement = dropDown.element;\n        proxy.currentDropdown = dropDown;\n\n        if (args.event && args.event.type === 'click' && (element.classList.contains(CLS_LIST_PRIMARY_CONTENT) || element.parentElement.classList.contains(CLS_LIST_PRIMARY_CONTENT))) {\n          args.cancel = true;\n          return;\n        }\n\n        proxy.parent.notify(beforeDropDownOpen, args);\n      },\n      close: this.dropDownClose.bind(this),\n      open: this.dropDownOpen.bind(this),\n      beforeItemRender: this.beforeDropDownItemRender.bind(this)\n    });\n    dropDown.isStringTemplate = true;\n    dropDown.createElement = proxy.parent.createElement;\n    dropDown.appendTo(args.element);\n    args.element.tabIndex = -1;\n    const popupElement = document.getElementById(dropDown.element.id + '-popup');\n    popupElement.setAttribute('aria-owns', this.parent.getID());\n\n    if (args.element.childElementCount === 1) {\n      dropDown.element.insertBefore(content, dropDown.element.querySelector('.e-caret'));\n    }\n\n    args.element.tabIndex = -1;\n    dropDown.element.removeAttribute('type');\n    return dropDown;\n  } // eslint-disable-next-line\n\n\n  onPopupOverlay(args) {\n    if (!isNullOrUndefined(this.popupOverlay)) {\n      closest(this.popupOverlay, '.e-popup-container').style.display = 'none';\n      this.popupOverlay.style.display = 'none';\n      removeClass([this.popupOverlay], 'e-popup-overlay');\n    }\n  }\n\n  setIsModel(element) {\n    if (!closest(element, '.e-popup-container')) {\n      this.popupContainer = this.parent.createElement('div', {\n        className: 'e-rte-modal-popup e-popup-container e-center'\n      });\n      element.parentNode.insertBefore(this.popupContainer, element);\n      this.popupContainer.appendChild(element);\n      this.popupContainer.style.zIndex = element.style.zIndex;\n      this.popupContainer.style.display = 'flex';\n      element.style.position = 'relative';\n      addClass([element], 'e-popup-modal');\n      this.popupOverlay = this.parent.createElement('div', {\n        className: 'e-popup-overlay'\n      }); // eslint-disable-next-line\n\n      this.popupOverlay.style.zIndex = (parseInt(element.style.zIndex, null) - 1).toString();\n      this.popupOverlay.style.display = 'block';\n      this.popupContainer.appendChild(this.popupOverlay);\n      EventHandler.add(this.popupOverlay, 'click touchmove', this.onPopupOverlay, this);\n    } else {\n      element.parentElement.style.display = 'flex';\n      this.popupOverlay = element.nextElementSibling;\n      this.popupOverlay.style.display = 'block';\n      addClass([this.popupOverlay], 'e-popup-overlay');\n    }\n  }\n\n  paletteSelection(dropDownArgs, currentElement) {\n    const ele = dropDownArgs.element.querySelector('.e-control.e-colorpicker');\n    const colorbox = [].slice.call(selectAll('.e-tile', ele.parentElement));\n    removeClass(colorbox, 'e-selected');\n    const style = currentElement.querySelector('.' + CLS_RTE_ELEMENTS).style.borderBottomColor;\n    colorbox.filter(colorbox => {\n      if (colorbox.style.backgroundColor === style) {\n        addClass([colorbox], 'e-selected');\n      }\n    });\n  }\n  /**\n   * renderColorPickerDropDown method\n   *\n   * @param {IColorPickerModel} args - specifies the arguments.\n   * @param {string} item - specifies the item.\n   * @param {ColorPicker} colorPicker - specifies the colorpicker.\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  renderColorPickerDropDown(args, item, colorPicker) {\n    // eslint-disable-next-line\n    const proxy = this;\n    let css = CLS_RTE_ELEMENTS + ' ' + CLS_TB_BTN + (this.parent.inlineMode ? ' ' + CLS_INLINE_DROPDOWN : '');\n    css += ' ' + (item === 'backgroundcolor' ? CLS_BACKGROUND_COLOR_DROPDOWN : CLS_FONT_COLOR_DROPDOWN);\n    const content = proxy.parent.createElement('span', {\n      className: CLS_COLOR_CONTENT\n    });\n    const inlineEle = proxy.parent.createElement('span', {\n      className: args.cssClass\n    });\n    let range;\n    inlineEle.style.borderBottomColor = item === 'backgroundcolor' ? proxy.parent.backgroundColor.default : proxy.parent.fontColor.default;\n    content.appendChild(inlineEle);\n    const dropDown = new DropDownButton({\n      target: colorPicker.element.parentElement,\n      cssClass: css,\n      enablePersistence: this.parent.enablePersistence,\n      enableRtl: this.parent.enableRtl,\n      beforeOpen: dropDownArgs => {\n        if (proxy.parent.readonly || !proxy.parent.enabled) {\n          dropDownArgs.cancel = true;\n          return;\n        }\n\n        const element = dropDownArgs.event ? dropDownArgs.event.target : null;\n        proxy.currentElement = dropDown.element;\n        proxy.currentDropdown = dropDown;\n        proxy.paletteSelection(dropDownArgs, proxy.currentElement);\n\n        if (dropDownArgs.event && dropDownArgs.event.type === 'click' && (element.classList.contains(CLS_COLOR_CONTENT) || element.parentElement.classList.contains(CLS_COLOR_CONTENT))) {\n          dropDownArgs.cancel = true;\n          const colorpickerValue = element.classList.contains(CLS_RTE_ELEMENTS) ? element.style.borderBottomColor : element.querySelector('.' + CLS_RTE_ELEMENTS).style.borderBottomColor;\n          proxy.parent.notify(selectionRestore, {});\n          range = proxy.parent.formatter.editorManager.nodeSelection.getRange(proxy.parent.contentModule.getDocument());\n          const parentNode = range.startContainer.parentNode;\n\n          if ((range.startContainer.nodeName === 'TD' || range.startContainer.nodeName === 'TH' || closest(range.startContainer.parentNode, 'td,th') || proxy.parent.iframeSettings.enable && !hasClass(parentNode.ownerDocument.querySelector('body'), 'e-lib')) && range.collapsed && args.subCommand === 'BackgroundColor') {\n            proxy.parent.notify(tableColorPickerChanged, {\n              item: {\n                command: args.command,\n                subCommand: args.subCommand,\n                value: colorpickerValue\n              }\n            });\n          } else {\n            proxy.parent.notify(colorPickerChanged, {\n              item: {\n                command: args.command,\n                subCommand: args.subCommand,\n                value: colorpickerValue\n              }\n            });\n          }\n\n          return;\n        } else {\n          const ele = dropDownArgs.element.querySelector('.e-control.e-colorpicker');\n          const inst = getInstance(ele, ColorPicker);\n          inst.showButtons = dropDownArgs.element.querySelector('.e-color-palette') ? false : true;\n          inst.dataBind();\n        }\n\n        dropDownArgs.element.onclick = args => {\n          if (args.target.classList.contains('e-cancel')) {\n            dropDown.toggle();\n          }\n        };\n      },\n      open: dropDownArgs => {\n        this.setColorPickerContentWidth(colorPicker);\n        let focusEle;\n        const ele = dropDownArgs.element.querySelector('.e-control.e-colorpicker');\n\n        if (dropDownArgs.element.querySelector('.e-color-palette')) {\n          focusEle = ele.parentElement.querySelector('.e-palette');\n        } else {\n          focusEle = ele.parentElement.querySelector('e-handler');\n        }\n\n        if (focusEle) {\n          focusEle.focus();\n        }\n\n        if (Browser.isDevice) {\n          this.popupModal(dropDownArgs.element.parentElement);\n        }\n\n        this.pickerRefresh(dropDownArgs);\n      },\n      beforeClose: dropDownArgs => {\n        const element = dropDownArgs.event ? dropDownArgs.event.target : null;\n\n        if (dropDownArgs.event && dropDownArgs.event.type === 'click' && (element.classList.contains(CLS_COLOR_CONTENT) || element.parentElement.classList.contains(CLS_COLOR_CONTENT))) {\n          const colorpickerValue = element.classList.contains(CLS_RTE_ELEMENTS) ? element.style.borderBottomColor : element.querySelector('.' + CLS_RTE_ELEMENTS).style.borderBottomColor;\n          range = proxy.parent.formatter.editorManager.nodeSelection.getRange(proxy.parent.contentModule.getDocument());\n\n          if ((range.startContainer.nodeName === 'TD' || range.startContainer.nodeName === 'TH' || closest(range.startContainer.parentNode, 'td,th')) && range.collapsed) {\n            proxy.parent.notify(tableColorPickerChanged, {\n              item: {\n                command: args.command,\n                subCommand: args.subCommand,\n                value: colorpickerValue\n              }\n            });\n          } else {\n            proxy.parent.notify(colorPickerChanged, {\n              item: {\n                command: args.command,\n                subCommand: args.subCommand,\n                value: colorpickerValue\n              }\n            });\n          }\n\n          return;\n        }\n      },\n      close: dropDownArgs => {\n        proxy.parent.notify(selectionRestore, {});\n        const dropElement = closest(dropDownArgs.element.parentElement, '.e-popup-container');\n\n        if (dropElement) {\n          dropElement.style.display = 'none';\n          dropElement.lastElementChild.style.display = 'none';\n          removeClass([dropElement.lastElementChild], 'e-popup-overlay');\n        }\n\n        if (Browser.isDevice && !isNullOrUndefined(dropElement)) {\n          const popupEle = dropElement.querySelector('.e-dropdown-popup.e-tbar-btn.e-control');\n\n          if (popupEle) {\n            dropElement.parentNode.insertBefore(popupEle, dropElement.nextSibling);\n            popupEle.style.removeProperty('position');\n            removeClass([popupEle], 'e-popup-modal');\n          }\n\n          detach(dropElement);\n          proxy.popupContainer = undefined;\n        }\n      }\n    });\n    dropDown.isStringTemplate = true;\n    dropDown.createElement = proxy.parent.createElement;\n    args.element.setAttribute('role', 'button');\n    dropDown.appendTo(args.element);\n    const popupElement = document.getElementById(dropDown.element.id + '-popup');\n    popupElement.setAttribute('aria-owns', this.parent.getID());\n    dropDown.element.insertBefore(content, dropDown.element.querySelector('.e-caret'));\n    args.element.tabIndex = -1;\n    dropDown.element.removeAttribute('type');\n\n    dropDown.element.onmousedown = () => {\n      proxy.parent.notify(selectionSave, {});\n    };\n\n    dropDown.element.onkeydown = () => {\n      proxy.parent.notify(selectionSave, {});\n    };\n\n    return dropDown;\n  }\n\n  pickerRefresh(dropDownArgs) {\n    if (this.parent.backgroundColor.mode === 'Picker') {\n      const popupElem = dropDownArgs.element.parentElement;\n      popupElem.style.width = (popupElem.offsetWidth + 5).toString() + 'px';\n      getInstance(popupElem, Popup).refreshPosition(popupElem);\n      popupElem.style.width = (popupElem.offsetWidth - 5).toString() + 'px';\n    }\n  }\n\n  popupModal(element) {\n    const popupInst = getInstance(element, Popup);\n    popupInst.relateTo = document.body;\n    popupInst.position = {\n      X: 0,\n      Y: 0\n    };\n    popupInst.targetType = 'container';\n    popupInst.collision = {\n      X: 'fit',\n      Y: 'fit'\n    };\n    popupInst.offsetY = 4;\n    popupInst.dataBind();\n    this.setIsModel(element);\n  }\n\n  setColorPickerContentWidth(colorPicker) {\n    const colorPickerContent = colorPicker.element.nextSibling;\n\n    if (colorPickerContent.style.width === '0px') {\n      colorPickerContent.style.width = '';\n      const borderWidth = parseInt(getComputedStyle(colorPickerContent).borderBottomWidth, 10);\n      colorPickerContent.style.width = formatUnit(colorPickerContent.children[0].offsetWidth + borderWidth + borderWidth);\n    }\n  }\n  /**\n   * renderColorPicker method\n   *\n   * @param {IColorPickerModel} args - specifies the arguments\n   * @param {string} item - specifies the string values\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  renderColorPicker(args, item) {\n    // eslint-disable-next-line\n    let proxy = this;\n    let value;\n    const colorPicker = new ColorPicker({\n      enablePersistence: this.parent.enablePersistence,\n      enableRtl: this.parent.enableRtl,\n      inline: true,\n      value: '#fff',\n      created: () => {\n        const value = item === 'backgroundcolor' ? proxy.parent.backgroundColor.default : proxy.parent.fontColor.default;\n        colorPicker.setProperties({\n          value: value\n        });\n      },\n      mode: item === 'backgroundcolor' ? proxy.parent.backgroundColor.mode : proxy.parent.fontColor.mode,\n      modeSwitcher: item === 'backgroundcolor' ? proxy.parent.backgroundColor.modeSwitcher : proxy.parent.fontColor.modeSwitcher,\n      beforeTileRender: args => {\n        args.element.classList.add(CLS_COLOR_PALETTE);\n        args.element.classList.add(CLS_CUSTOM_TILE);\n\n        if (args.value === '') {\n          args.element.classList.add(CLS_NOCOLOR_ITEM);\n        }\n      },\n      change: colorPickerArgs => {\n        const colorpickerValue = colorPickerArgs.currentValue.rgba;\n        colorPickerArgs.item = {\n          command: args.command,\n          subCommand: args.subCommand,\n          value: colorpickerValue\n        };\n        proxy.parent.notify(selectionRestore, {});\n        proxy.currentElement.querySelector('.' + CLS_RTE_ELEMENTS).style.borderBottomColor = colorpickerValue;\n        const range = proxy.parent.formatter.editorManager.nodeSelection.getRange(proxy.parent.contentModule.getDocument());\n\n        if ((range.startContainer.nodeName === 'TD' || range.startContainer.nodeName === 'TH' || range.startContainer.nodeName === 'BODY' || closest(range.startContainer.parentNode, 'td,th')) && range.collapsed && args.subCommand === 'BackgroundColor') {\n          proxy.parent.notify(tableColorPickerChanged, colorPickerArgs);\n        } else {\n          proxy.parent.notify(colorPickerChanged, colorPickerArgs);\n        }\n\n        proxy.currentDropdown.toggle();\n      },\n      beforeModeSwitch: args => {\n        value = colorPicker.value;\n\n        if (value === '') {\n          colorPicker.setProperties({\n            value: args.mode === 'Picker' ? '#008000ff' : ''\n          }, true);\n        }\n\n        colorPicker.showButtons = args.mode === 'Palette' ? false : true;\n      }\n    });\n    colorPicker.isStringTemplate = true;\n    colorPicker.columns = item === 'backgroundcolor' ? this.parent.backgroundColor.columns : this.parent.fontColor.columns;\n    colorPicker.presetColors = item === 'backgroundcolor' ? this.parent.backgroundColor.colorCode : this.parent.fontColor.colorCode;\n    colorPicker.cssClass = item === 'backgroundcolor' ? CLS_BACKGROUND_COLOR_PICKER : CLS_FONT_COLOR_PICKER;\n    colorPicker.createElement = this.parent.createElement;\n    colorPicker.appendTo(document.getElementById(args.target));\n    return colorPicker;\n  }\n  /**\n   * The function is used to render Rich Text Editor toolbar\n   *\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  renderPanel() {\n    this.getPanel().classList.add(CLS_TOOLBAR);\n  }\n  /**\n   * Get the toolbar element of RichTextEditor\n   *\n   * @returns {Element} - specifies the element.\n   * @hidden\n   * @deprecated\n   */\n\n\n  getPanel() {\n    return this.toolbarPanel;\n  }\n  /**\n   * Set the toolbar element of RichTextEditor\n   *\n   * @returns {void}\n   * @param  {Element} panel - specifies the element.\n   * @hidden\n   * @deprecated\n   */\n\n\n  setPanel(panel) {\n    this.toolbarPanel = panel;\n  }\n\n}\n/**\n * `Toolbar` module is used to handle Toolbar actions.\n */\n\n\nclass BaseToolbar {\n  constructor(parent, serviceLocator) {\n    this.tools = {};\n    this.parent = parent;\n    this.locator = serviceLocator;\n    this.renderFactory = this.locator.getService('rendererFactory');\n    this.addEventListener();\n\n    if (this.parent.toolbarSettings && Object.keys(this.parent.toolbarSettings.itemConfigs).length > 0) {\n      extend(this.tools, tools, toObjectLowerCase(this.parent.toolbarSettings.itemConfigs), true);\n    } else {\n      this.tools = tools;\n    }\n  }\n\n  addEventListener() {\n    this.parent.on(rtlMode, this.setRtl, this);\n    this.parent.on(destroy, this.removeEventListener, this);\n  }\n\n  removeEventListener() {\n    this.parent.off(rtlMode, this.setRtl);\n    this.parent.off(destroy, this.removeEventListener);\n  }\n\n  setRtl(args) {\n    if (!isNullOrUndefined(this.toolbarObj)) {\n      this.toolbarObj.setProperties({\n        enableRtl: args.enableRtl\n      });\n    }\n  }\n\n  getClass(item) {\n    let classes;\n\n    switch (item) {\n      case 'fontsize':\n        classes = 'e-rte-inline-size-template';\n        break;\n\n      case 'fontcolor':\n      case 'backgroundcolor':\n        classes = 'e-rte-inline-color-template';\n        break;\n\n      default:\n        classes = 'e-rte-inline-template';\n        break;\n    }\n\n    return classes;\n  }\n\n  getTemplateObject(itemStr, container) {\n    let tagName;\n\n    switch (itemStr) {\n      case 'fontcolor':\n      case 'backgroundcolor':\n      case 'numberformatlist':\n      case 'bulletformatlist':\n        tagName = 'span';\n        break;\n\n      default:\n        tagName = 'button';\n        break;\n    }\n\n    return {\n      command: this.tools[itemStr.toLocaleLowerCase()].command,\n      subCommand: this.tools[itemStr.toLocaleLowerCase()].subCommand,\n      template: this.parent.createElement(tagName, {\n        id: this.parent.getID() + '_' + container + '_' + this.tools[itemStr.toLocaleLowerCase()].id\n      }).outerHTML,\n      cssClass: this.parent.inlineMode.enable ? this.getClass(itemStr) : '',\n      tooltipText: getTooltipText(itemStr, this.locator)\n    };\n  }\n  /**\n   * getObject method\n   *\n   * @param {string} item - specifies the string value\n   * @param {string} container - specifies the value of string\n   * @returns {IToolbarItemModel} - returns the model element\n   * @hidden\n   * @deprecated\n   */\n\n\n  getObject(item, container) {\n    const itemStr = item.toLowerCase();\n\n    if (templateItems.indexOf(itemStr) !== -1) {\n      return this.getTemplateObject(itemStr, container);\n    } else {\n      switch (itemStr) {\n        case '|':\n          return {\n            type: 'Separator'\n          };\n\n        case '-':\n          return {\n            type: 'Separator',\n            cssClass: CLS_HR_SEPARATOR\n          };\n\n        default:\n          return {\n            id: this.parent.getID() + '_' + container + '_' + this.tools[itemStr.toLocaleLowerCase()].id,\n            prefixIcon: this.tools[itemStr.toLocaleLowerCase()].icon,\n            tooltipText: getTooltipText(itemStr, this.locator),\n            command: this.tools[itemStr.toLocaleLowerCase()].command,\n            subCommand: this.tools[itemStr.toLocaleLowerCase()].subCommand\n          };\n      }\n    }\n  }\n  /**\n   * @param {string} tbItems - specifies the string value\n   * @param {string} container - specifies the container value\n   * @returns {ItemModel} - retunrs the model element\n   * @hidden\n   * @deprecated\n   */\n\n\n  getItems(tbItems, container) {\n    if (this.parent.toolbarSettings.items.length < 1) {\n      return [];\n    }\n\n    const items = [];\n\n    for (const item of tbItems) {\n      switch (typeof item) {\n        case 'string':\n          items.push(this.getObject(item, container));\n          break;\n\n        default:\n          if (!isNullOrUndefined(item.click)) {\n            const proxy = item;\n            const callback = proxy.click;\n\n            proxy.click = () => {\n              if (proxy.undo && this.parent.formatter.getUndoRedoStack().length === 0) {\n                this.parent.formatter.saveData();\n              }\n\n              callback.call(this);\n\n              if (this.parent.formatter.getUndoRedoStack()[this.parent.formatter.getUndoRedoStack().length - 1].text.trim() === this.parent.inputElement.innerHTML.trim()) {\n                return;\n              }\n\n              if (proxy.undo) {\n                this.parent.formatter.saveData();\n              }\n            };\n          }\n\n          items.push(item);\n      }\n    }\n\n    return items;\n  }\n\n  getToolbarOptions(args) {\n    return {\n      target: args.target,\n      rteToolbarObj: this,\n      items: this.getItems(args.items, args.container),\n      overflowMode: args.mode,\n      enablePersistence: this.parent.enablePersistence,\n      enableRtl: this.parent.enableRtl\n    };\n  }\n  /**\n   * render method\n   *\n   * @param {IToolbarRenderOptions} args - specifies the toolbar options\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  render(args) {\n    this.toolbarRenderer = this.renderFactory.getRenderer(RenderType.Toolbar);\n    this.toolbarRenderer.renderToolbar(this.getToolbarOptions(args));\n  }\n\n}\n/**\n * `Toolbar` module is used to handle Toolbar actions.\n */\n\n\nclass DropDownButtons {\n  constructor(parent, serviceLocator) {\n    this.parent = parent;\n    this.locator = serviceLocator;\n    this.renderFactory = this.locator.getService('rendererFactory');\n    this.addEventListener();\n  }\n\n  initializeInstance() {\n    this.toolbarRenderer = this.renderFactory.getRenderer(RenderType.Toolbar);\n  }\n\n  beforeRender(args) {\n    const item = args.item;\n\n    if (item.cssClass) {\n      addClass([args.element], item.cssClass);\n    }\n\n    if (item.command === 'Alignments' || item.subCommand === 'JustifyLeft' || item.subCommand === 'JustifyRight' || item.subCommand === 'JustifyCenter') {\n      args.element.setAttribute('title', getTooltipText(item.subCommand.toLocaleLowerCase(), this.locator));\n    }\n  }\n\n  dropdownContent(width, type, content) {\n    return '<span style=\"display: inline-flex;' + 'width:' + (type === 'quick' ? 'auto' : width) + '\" >' + '<span class=\"e-rte-dropdown-btn-text\">' + content + '</span></span>';\n  }\n  /**\n   * renderDropDowns method\n   *\n   * @param {IDropDownRenderArgs} args - specifies the arguments\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  renderDropDowns(args) {\n    this.initializeInstance();\n    const type = args.containerType;\n    const tbElement = args.container;\n    templateItems.forEach(item => {\n      let targetElement = undefined;\n\n      if (getIndex(item, args.items) !== -1) {\n        switch (item) {\n          case 'numberformatlist':\n            {\n              targetElement = select('#' + this.parent.getID() + '_' + type + '_NumberFormatList', tbElement);\n\n              if (isNullOrUndefined(targetElement) || targetElement.classList.contains(CLS_DROPDOWN_BTN)) {\n                return;\n              }\n\n              const formatOLItem = this.parent.numberFormatList.types.slice();\n              formatOLItem.forEach(item => {\n                Object.defineProperties(item, {\n                  command: {\n                    value: 'Lists',\n                    enumerable: true\n                  },\n                  subCommand: {\n                    value: 'NumberFormatList',\n                    enumerable: true\n                  }\n                });\n              });\n              this.numberFormatListDropDown = this.toolbarRenderer.renderListDropDown({\n                cssClass: 'e-order-list' + ' ' + CLS_RTE_ELEMENTS + ' ' + CLS_ICONS,\n                itemName: 'NumberFormatList',\n                items: formatOLItem,\n                element: targetElement\n              });\n              break;\n            }\n\n          case 'bulletformatlist':\n            {\n              targetElement = select('#' + this.parent.getID() + '_' + type + '_BulletFormatList', tbElement);\n\n              if (isNullOrUndefined(targetElement) || targetElement.classList.contains(CLS_DROPDOWN_BTN)) {\n                return;\n              }\n\n              const formatULItem = this.parent.bulletFormatList.types.slice();\n              formatULItem.forEach(item => {\n                Object.defineProperties(item, {\n                  command: {\n                    value: 'Lists',\n                    enumerable: true\n                  },\n                  subCommand: {\n                    value: 'BulletFormatList',\n                    enumerable: true\n                  }\n                });\n              });\n              this.bulletFormatListDropDown = this.toolbarRenderer.renderListDropDown({\n                cssClass: 'e-unorder-list' + ' ' + CLS_RTE_ELEMENTS + ' ' + CLS_ICONS,\n                itemName: 'BulletFormatList',\n                items: formatULItem,\n                element: targetElement\n              });\n              break;\n            }\n\n          case 'formats':\n            {\n              targetElement = select('#' + this.parent.getID() + '_' + type + '_Formats', tbElement);\n\n              if (isNullOrUndefined(targetElement) || targetElement.classList.contains(CLS_DROPDOWN_BTN)) {\n                return;\n              }\n\n              const formatItem = this.parent.format.types.slice();\n              formatItem.forEach(item => {\n                Object.defineProperties(item, {\n                  command: {\n                    value: 'Formats',\n                    enumerable: true\n                  },\n                  subCommand: {\n                    value: item.value,\n                    enumerable: true\n                  }\n                });\n              });\n              const formatContent = isNullOrUndefined(this.parent.format.default) ? formatItem[0].text : this.parent.format.default;\n              this.formatDropDown = this.toolbarRenderer.renderDropDownButton({\n                iconCss: type === 'quick' ? 'e-formats e-icons' : '',\n                content: this.dropdownContent(this.parent.format.width, type, type === 'quick' ? '' : getDropDownValue(formatItem, formatContent, 'text', 'text')),\n                cssClass: CLS_DROPDOWN_POPUP + ' ' + CLS_DROPDOWN_ITEMS + ' ' + CLS_FORMATS_TB_BTN,\n                itemName: 'Formats',\n                items: formatItem,\n                element: targetElement\n              });\n              break;\n            }\n\n          case 'fontname':\n            {\n              targetElement = select('#' + this.parent.getID() + '_' + type + '_FontName', tbElement);\n\n              if (isNullOrUndefined(targetElement) || targetElement.classList.contains(CLS_DROPDOWN_BTN)) {\n                return;\n              }\n\n              const fontItem = this.parent.fontFamily.items.slice();\n              fontItem.forEach(item => {\n                Object.defineProperties(item, {\n                  command: {\n                    value: 'Font',\n                    enumerable: true\n                  },\n                  subCommand: {\n                    value: 'FontName',\n                    enumerable: true\n                  }\n                });\n              });\n              const fontNameContent = isNullOrUndefined(this.parent.fontFamily.default) ? fontItem[0].text : this.parent.fontFamily.default;\n              this.fontNameDropDown = this.toolbarRenderer.renderDropDownButton({\n                iconCss: type === 'quick' ? 'e-font-name e-icons' : '',\n                content: this.dropdownContent(this.parent.fontFamily.width, type, type === 'quick' ? '' : getDropDownValue(fontItem, fontNameContent, 'text', 'text')),\n                cssClass: CLS_DROPDOWN_POPUP + ' ' + CLS_DROPDOWN_ITEMS + ' ' + CLS_FONT_NAME_TB_BTN,\n                itemName: 'FontName',\n                items: fontItem,\n                element: targetElement\n              });\n\n              if (!isNullOrUndefined(this.parent.fontFamily.default)) {\n                this.getEditNode().style.fontFamily = this.parent.fontFamily.default;\n              }\n\n              break;\n            }\n\n          case 'fontsize':\n            {\n              targetElement = select('#' + this.parent.getID() + '_' + type + '_FontSize', tbElement);\n\n              if (isNullOrUndefined(targetElement) || targetElement.classList.contains(CLS_DROPDOWN_BTN)) {\n                return;\n              }\n\n              const fontsize = this.parent.fontSize.items.slice();\n              fontsize.forEach(item => {\n                Object.defineProperties(item, {\n                  command: {\n                    value: 'Font',\n                    enumerable: true\n                  },\n                  subCommand: {\n                    value: 'FontSize',\n                    enumerable: true\n                  }\n                });\n              });\n              const fontSizeContent = isNullOrUndefined(this.parent.fontSize.default) ? fontsize[1].text : this.parent.fontSize.default;\n              this.fontSizeDropDown = this.toolbarRenderer.renderDropDownButton({\n                content: this.dropdownContent(this.parent.fontSize.width, type, getFormattedFontSize(getDropDownValue(fontsize, fontSizeContent.replace(/\\s/g, ''), 'value', 'text'))),\n                cssClass: CLS_DROPDOWN_POPUP + ' ' + CLS_DROPDOWN_ITEMS + ' ' + CLS_FONT_SIZE_TB_BTN,\n                itemName: 'FontSize',\n                items: fontsize,\n                element: targetElement\n              });\n\n              if (!isNullOrUndefined(this.parent.fontSize.default)) {\n                this.getEditNode().style.fontSize = this.parent.fontSize.default;\n              }\n\n              break;\n            }\n\n          case 'alignments':\n            targetElement = select('#' + this.parent.getID() + '_' + type + '_Alignments', tbElement);\n\n            if (isNullOrUndefined(targetElement) || targetElement.classList.contains(CLS_DROPDOWN_BTN)) {\n              return;\n            }\n\n            this.alignDropDown = this.toolbarRenderer.renderDropDownButton({\n              iconCss: 'e-justify-left e-icons',\n              cssClass: CLS_DROPDOWN_POPUP + ' ' + CLS_DROPDOWN_ITEMS,\n              itemName: 'Alignments',\n              items: alignmentItems,\n              element: targetElement\n            });\n            break;\n\n          case 'align':\n            this.imageAlignmentDropDown(type, tbElement, targetElement);\n            break;\n\n          case 'display':\n            this.imageDisplayDropDown(type, tbElement, targetElement);\n            break;\n\n          case 'tablerows':\n            this.rowDropDown(type, tbElement, targetElement);\n            break;\n\n          case 'tablecolumns':\n            this.columnDropDown(type, tbElement, targetElement);\n            break;\n\n          case 'tablecell':\n            this.cellDropDown(type, tbElement, targetElement);\n            break;\n\n          case 'tablecellverticalalign':\n            this.verticalAlignDropDown(type, tbElement, targetElement);\n            break;\n\n          case 'styles':\n            this.tableStylesDropDown(type, tbElement, targetElement);\n            break;\n        }\n      }\n    });\n  }\n\n  getUpdateItems(items, value) {\n    const dropDownItems = items.slice();\n    dropDownItems.forEach(item => {\n      Object.defineProperties(item, {\n        command: {\n          value: value === 'Format' ? 'Formats' : 'Font',\n          enumerable: true\n        },\n        subCommand: {\n          value: value === 'Format' ? item.value : value,\n          enumerable: true\n        }\n      });\n    });\n    return dropDownItems;\n  }\n\n  onPropertyChanged(model) {\n    const newProp = model.newProp;\n    let type;\n    let content;\n\n    for (const prop of Object.keys(newProp)) {\n      switch (prop) {\n        case 'fontFamily':\n          if (this.fontNameDropDown) {\n            for (const fontFamily$$1 of Object.keys(newProp.fontFamily)) {\n              switch (fontFamily$$1) {\n                case 'default':\n                case 'width':\n                  {\n                    const fontItems = this.fontNameDropDown.items;\n                    type = !isNullOrUndefined(closest(this.fontNameDropDown.element, '.' + CLS_QUICK_TB)) ? 'quick' : 'toolbar';\n                    const fontNameContent = isNullOrUndefined(this.parent.fontFamily.default) ? fontItems[0].text : this.parent.fontFamily.default;\n                    content = this.dropdownContent(this.parent.fontFamily.width, type, type === 'quick' ? '' : getDropDownValue(fontItems, fontNameContent, 'text', 'text'));\n                    this.fontNameDropDown.setProperties({\n                      content: content\n                    });\n\n                    if (!isNullOrUndefined(this.parent.fontFamily.default)) {\n                      this.getEditNode().style.fontFamily = this.parent.fontFamily.default;\n                    } else {\n                      this.getEditNode().style.removeProperty('font-family');\n                    }\n\n                    break;\n                  }\n\n                case 'items':\n                  this.fontNameDropDown.setProperties({\n                    items: this.getUpdateItems(newProp.fontFamily.items, 'FontName')\n                  });\n                  break;\n              }\n            }\n          }\n\n          break;\n\n        case 'fontSize':\n          if (this.fontSizeDropDown) {\n            for (const fontSize$$1 of Object.keys(newProp.fontSize)) {\n              switch (fontSize$$1) {\n                case 'default':\n                case 'width':\n                  {\n                    const fontsize = this.fontSizeDropDown.items;\n                    type = !isNullOrUndefined(closest(this.fontSizeDropDown.element, '.' + CLS_QUICK_TB)) ? 'quick' : 'toolbar';\n                    const fontSizeContent = isNullOrUndefined(this.parent.fontSize.default) ? fontsize[1].text : this.parent.fontSize.default;\n                    content = this.dropdownContent(this.parent.fontSize.width, type, getFormattedFontSize(getDropDownValue(fontsize, fontSizeContent.replace(/\\s/g, ''), 'value', 'text')));\n                    this.fontSizeDropDown.setProperties({\n                      content: content\n                    });\n\n                    if (!isNullOrUndefined(this.parent.fontSize.default)) {\n                      this.getEditNode().style.fontSize = this.parent.fontSize.default;\n                    } else {\n                      this.getEditNode().style.removeProperty('font-size');\n                    }\n\n                    break;\n                  }\n\n                case 'items':\n                  this.fontSizeDropDown.setProperties({\n                    items: this.getUpdateItems(newProp.fontSize.items, 'FontSize')\n                  });\n                  break;\n              }\n            }\n          }\n\n          break;\n\n        case 'format':\n          if (this.formatDropDown) {\n            for (const format of Object.keys(newProp.format)) {\n              switch (format) {\n                case 'default':\n                case 'width':\n                  {\n                    const formatItems$$1 = this.formatDropDown.items;\n                    type = !isNullOrUndefined(closest(this.formatDropDown.element, '.' + CLS_QUICK_TB)) ? 'quick' : 'toolbar';\n                    const formatContent = isNullOrUndefined(this.parent.format.default) ? formatItems$$1[0].text : this.parent.format.default;\n                    content = this.dropdownContent(this.parent.format.width, type, type === 'quick' ? '' : getDropDownValue(formatItems$$1, formatContent, 'text', 'text'));\n                    this.formatDropDown.setProperties({\n                      content: content\n                    });\n                    break;\n                  }\n\n                case 'types':\n                  this.formatDropDown.setProperties({\n                    items: this.getUpdateItems(newProp.format.types, 'Format')\n                  });\n                  break;\n              }\n            }\n          }\n\n          break;\n      }\n    }\n  }\n\n  getEditNode() {\n    return this.parent.contentModule.getEditPanel();\n  }\n\n  rowDropDown(type, tbElement, targetElement) {\n    targetElement = select('#' + this.parent.getID() + '_' + type + '_TableRows', tbElement);\n\n    if (targetElement.classList.contains(CLS_DROPDOWN_BTN)) {\n      return;\n    }\n\n    this.tableRowsDropDown = this.toolbarRenderer.renderDropDownButton({\n      iconCss: 'e-table-rows e-icons',\n      cssClass: CLS_DROPDOWN_POPUP + ' ' + CLS_DROPDOWN_ITEMS + ' ' + CLS_QUICK_DROPDOWN,\n      itemName: 'TableRows',\n      items: tableRowsItems,\n      element: targetElement\n    });\n  }\n\n  columnDropDown(type, tbElement, targetElement) {\n    targetElement = select('#' + this.parent.getID() + '_' + type + '_TableColumns', tbElement);\n\n    if (targetElement.classList.contains(CLS_DROPDOWN_BTN)) {\n      return;\n    }\n\n    this.tableColumnsDropDown = this.toolbarRenderer.renderDropDownButton({\n      iconCss: 'e-table-columns e-icons',\n      cssClass: CLS_DROPDOWN_POPUP + ' ' + CLS_DROPDOWN_ITEMS + ' ' + CLS_QUICK_DROPDOWN,\n      itemName: 'TableColumns',\n      items: tableColumnsItems,\n      element: targetElement\n    });\n  }\n\n  cellDropDown(type, tbElement, targetElement) {\n    targetElement = select('#' + this.parent.getID() + '_' + type + '_TableCell', tbElement);\n\n    if (targetElement.classList.contains(CLS_DROPDOWN_BTN)) {\n      return;\n    }\n\n    this.tableRowsDropDown = this.toolbarRenderer.renderDropDownButton({\n      iconCss: 'e-table-cell e-icons',\n      cssClass: CLS_DROPDOWN_POPUP + ' ' + CLS_DROPDOWN_ITEMS + ' ' + CLS_QUICK_DROPDOWN,\n      itemName: 'TableCell',\n      items: tableCellItems,\n      element: targetElement\n    });\n  }\n\n  verticalAlignDropDown(type, tbElement, targetElement) {\n    targetElement = select('#' + this.parent.getID() + '_' + type + '_TableCellVerticalAlign', tbElement);\n\n    if (targetElement.classList.contains(CLS_DROPDOWN_BTN)) {\n      return;\n    }\n\n    this.tableCellVerticalAlignDropDown = this.toolbarRenderer.renderDropDownButton({\n      iconCss: 'e-table-cell-ver-align e-icons',\n      cssClass: CLS_DROPDOWN_POPUP + ' ' + CLS_DROPDOWN_ITEMS + ' ' + CLS_QUICK_DROPDOWN,\n      itemName: 'TableCellVerticalAlign',\n      items: TableCellVerticalAlignItems,\n      element: targetElement\n    });\n  }\n\n  imageDisplayDropDown(type, tbElement, targetElement) {\n    targetElement = select('#' + this.parent.getID() + '_' + type + '_Display', tbElement);\n\n    if (targetElement.classList.contains(CLS_DROPDOWN_BTN)) {\n      return;\n    }\n\n    this.displayDropDown = this.toolbarRenderer.renderDropDownButton({\n      iconCss: 'e-display e-icons',\n      cssClass: CLS_DROPDOWN_POPUP + ' ' + CLS_DROPDOWN_ITEMS + ' ' + CLS_QUICK_DROPDOWN,\n      itemName: 'Display',\n      items: imageDisplayItems,\n      element: targetElement\n    });\n  }\n\n  imageAlignmentDropDown(type, tbElement, targetElement) {\n    targetElement = select('#' + this.parent.getID() + '_' + type + '_Align', tbElement);\n\n    if (targetElement.classList.contains(CLS_DROPDOWN_BTN)) {\n      return;\n    }\n\n    this.imageAlignDropDown = this.toolbarRenderer.renderDropDownButton({\n      iconCss: 'e-justify-left e-icons',\n      cssClass: CLS_DROPDOWN_POPUP + ' ' + CLS_DROPDOWN_ICONS + ' ' + CLS_QUICK_DROPDOWN,\n      itemName: 'Align',\n      items: imageAlignItems,\n      element: targetElement\n    });\n  }\n\n  tableStylesDropDown(type, tbElement, targetElement) {\n    targetElement = select('#' + this.parent.getID() + '_' + type + '_Styles', tbElement);\n\n    if (targetElement.classList.contains(CLS_DROPDOWN_BTN)) {\n      return;\n    }\n\n    this.imageAlignDropDown = this.toolbarRenderer.renderDropDownButton({\n      iconCss: 'e-style e-icons',\n      cssClass: CLS_DROPDOWN_POPUP + ' ' + CLS_DROPDOWN_ICONS + ' ' + CLS_QUICK_DROPDOWN,\n      itemName: 'Styles',\n      items: this.parent.tableSettings.styles,\n      element: targetElement\n    });\n  }\n\n  removeDropDownClasses(target) {\n    removeClass([target], [CLS_DROPDOWN_BTN, CLS_DROPDOWN_POPUP, CLS_DROPDOWN_ICONS, CLS_DROPDOWN_ITEMS]);\n  }\n  /**\n   * destroyDropDowns method\n   *\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  destroyDropDowns() {\n    if (this.formatDropDown) {\n      this.removeDropDownClasses(this.formatDropDown.element);\n      this.formatDropDown.destroy();\n    }\n\n    if (this.fontNameDropDown) {\n      this.removeDropDownClasses(this.fontNameDropDown.element);\n      this.fontNameDropDown.destroy();\n    }\n\n    if (this.fontSizeDropDown) {\n      this.removeDropDownClasses(this.fontSizeDropDown.element);\n      this.fontSizeDropDown.destroy();\n    }\n\n    if (this.alignDropDown) {\n      this.removeDropDownClasses(this.alignDropDown.element);\n      this.alignDropDown.destroy();\n    }\n\n    if (this.imageAlignDropDown) {\n      this.removeDropDownClasses(this.imageAlignDropDown.element);\n      this.imageAlignDropDown.destroy();\n    }\n\n    if (this.displayDropDown) {\n      this.removeDropDownClasses(this.displayDropDown.element);\n      this.displayDropDown.destroy();\n    }\n\n    if (this.tableRowsDropDown) {\n      this.removeDropDownClasses(this.tableRowsDropDown.element);\n      this.tableRowsDropDown.destroy();\n    }\n\n    if (this.tableColumnsDropDown) {\n      this.removeDropDownClasses(this.tableColumnsDropDown.element);\n      this.tableColumnsDropDown.destroy();\n    }\n\n    if (this.tableCellVerticalAlignDropDown) {\n      this.removeDropDownClasses(this.tableCellVerticalAlignDropDown.element);\n      this.tableCellVerticalAlignDropDown.destroy();\n    }\n\n    if (this.numberFormatListDropDown) {\n      this.removeDropDownClasses(this.numberFormatListDropDown.element);\n      this.numberFormatListDropDown.destroy();\n    }\n\n    if (this.bulletFormatListDropDown) {\n      this.removeDropDownClasses(this.bulletFormatListDropDown.element);\n      this.bulletFormatListDropDown.destroy();\n    }\n  }\n\n  setRtl(args) {\n    if (this.formatDropDown) {\n      this.formatDropDown.setProperties({\n        enableRtl: args.enableRtl\n      });\n    }\n\n    if (this.fontNameDropDown) {\n      this.fontNameDropDown.setProperties({\n        enableRtl: args.enableRtl\n      });\n    }\n\n    if (this.fontSizeDropDown) {\n      this.fontSizeDropDown.setProperties({\n        enableRtl: args.enableRtl\n      });\n    }\n\n    if (this.alignDropDown) {\n      this.alignDropDown.setProperties({\n        enableRtl: args.enableRtl\n      });\n    }\n\n    if (this.imageAlignDropDown) {\n      this.imageAlignDropDown.setProperties({\n        enableRtl: args.enableRtl\n      });\n    }\n\n    if (this.displayDropDown) {\n      this.displayDropDown.setProperties({\n        enableRtl: args.enableRtl\n      });\n    }\n\n    if (this.numberFormatListDropDown) {\n      this.numberFormatListDropDown.setProperties({\n        enableRtl: args.enableRtl\n      });\n    }\n\n    if (this.bulletFormatListDropDown) {\n      this.bulletFormatListDropDown.setProperties({\n        enableRtl: args.enableRtl\n      });\n    }\n  }\n\n  addEventListener() {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.on(beforeDropDownItemRender, this.beforeRender, this);\n    this.parent.on(iframeMouseDown, this.onIframeMouseDown, this);\n    this.parent.on(rtlMode, this.setRtl, this);\n    this.parent.on(destroy, this.removeEventListener, this);\n    this.parent.on(modelChanged, this.onPropertyChanged, this);\n  }\n\n  onIframeMouseDown() {\n    dispatchEvent(document, 'mousedown');\n  }\n\n  removeEventListener() {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.off(iframeMouseDown, this.onIframeMouseDown);\n    this.parent.off(rtlMode, this.setRtl);\n    this.parent.off(beforeDropDownItemRender, this.beforeRender);\n    this.parent.off(destroy, this.removeEventListener);\n    this.parent.off(modelChanged, this.onPropertyChanged);\n  }\n\n}\n/**\n * ServiceLocator\n *\n * @hidden\n * @deprecated\n */\n\n\nclass ServiceLocator {\n  constructor() {\n    this.services = {};\n  }\n  /* eslint-disable */\n\n  /**\n   * register method\n   *\n   * @param {string} name - specifies the name.\n   * @param {T} type - specifies the type.\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n  /* eslint-enable */\n\n\n  register(name, type) {\n    if (isNullOrUndefined(this.services[name])) {\n      this.services[name] = type;\n    }\n  }\n  /**\n   * getService method\n   *\n   * @param {string} name - specifies the name.\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  getService(name) {\n    if (isNullOrUndefined(this.services[name])) {\n      // eslint-disable-next-line\n      throw `The service ${name} is not registered`;\n    }\n\n    return this.services[name];\n  }\n\n}\n/**\n * RendererFactory\n *\n * @hidden\n * @deprecated\n */\n\n\nclass RendererFactory {\n  constructor() {\n    this.rendererMap = {};\n  }\n  /**\n   * addRenderer method\n   *\n   * @param {RenderType} name - specifies the render type\n   * @param {IRenderer} type - specifies the renderer.\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  addRenderer(name, type) {\n    const rName = getEnumValue(RenderType, name);\n\n    if (isNullOrUndefined(this.rendererMap[rName])) {\n      this.rendererMap[rName] = type;\n    }\n  }\n  /**\n   * getRenderer method\n   *\n   * @param {RenderType} name - specifies the render type\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  getRenderer(name) {\n    const rName = getEnumValue(RenderType, name);\n\n    if (isNullOrUndefined(this.rendererMap[rName])) {\n      // eslint-disable-next-line\n      throw `The renderer ${rName} is not found`;\n    } else {\n      return this.rendererMap[rName];\n    }\n  }\n\n}\n/**\n * `ToolbarAction` module is used to toolbar click action\n */\n\n\nclass ToolbarAction {\n  constructor(parent) {\n    this.parent = parent;\n    this.addEventListener();\n    this.serviceLocator = new ServiceLocator();\n    this.serviceLocator.register('rendererFactory', new RendererFactory());\n  }\n\n  addEventListener() {\n    this.parent.on(toolbarClick, this.toolbarClick, this);\n    this.parent.on(dropDownSelect, this.dropDownSelect, this);\n    this.parent.on(colorPickerChanged, this.renderSelection, this);\n    this.parent.on(destroy, this.removeEventListener, this);\n  }\n\n  toolbarClick(args) {\n    if (isNullOrUndefined(args.item)) {\n      return;\n    }\n\n    if (!isNullOrUndefined(args.item.controlParent)) {\n      // eslint-disable-next-line\n      let activeEle = args.item.controlParent.activeEle;\n\n      if (activeEle) {\n        activeEle.tabIndex = -1;\n      }\n    }\n\n    if (args.item.command === 'NumberFormatList' || args.item.command === 'BulletFormatList') {\n      if (args.originalEvent.target.classList.contains('e-order-list') || args.originalEvent.target.classList.contains('e-unorder-list')) {\n        args.item.command = 'Lists';\n        args.item.subCommand = args.item.subCommand === 'NumberFormatList' ? 'OL' : 'UL';\n      }\n    }\n\n    if (args.item.command === 'Lists') {\n      if (args.originalEvent.target.classList.contains('e-caret') && (args.originalEvent.target.parentElement.classList.contains('e-rte-bulletformatlist-dropdown') || args.originalEvent.target.parentElement.classList.contains('e-rte-numberformatlist-dropdown'))) {\n        args.item.command = args.item.subCommand = null;\n      }\n    }\n\n    this.parent.notify(htmlToolbarClick, args);\n    this.parent.notify(markdownToolbarClick, args);\n  }\n\n  dropDownSelect(e) {\n    this.parent.notify(selectionRestore, {});\n\n    if (!(document.body.contains(document.body.querySelector('.e-rte-quick-toolbar')) && e.item && (e.item.command === 'Images' || e.item.command === 'Display' || e.item.command === 'Table'))) {\n      const value = e.item.controlParent && this.parent.quickToolbarModule && this.parent.quickToolbarModule.tableQTBar && this.parent.quickToolbarModule.tableQTBar.element.contains(e.item.controlParent.element) ? 'Table' : null;\n\n      if (e.item.command === 'Lists') {\n        const listItem = {\n          listStyle: e.item.value,\n          listImage: e.item.listImage,\n          type: e.item.subCommand\n        };\n        this.parent.formatter.process(this.parent, e, e.originalEvent, listItem);\n      } else {\n        this.parent.formatter.process(this.parent, e, e.originalEvent, value);\n      }\n    }\n\n    this.parent.notify(selectionSave, {});\n  }\n\n  renderSelection(args) {\n    this.parent.notify(selectionRestore, {});\n    this.parent.formatter.process(this.parent, args, args.originalEvent, null);\n    this.parent.notify(selectionSave, {});\n  }\n\n  removeEventListener() {\n    this.parent.off(toolbarClick, this.toolbarClick);\n    this.parent.off(dropDownSelect, this.dropDownSelect);\n    this.parent.off(colorPickerChanged, this.renderSelection);\n    this.parent.off(destroy, this.removeEventListener);\n  }\n\n}\n/**\n * `Toolbar` module is used to handle Toolbar actions.\n */\n\n\nclass Toolbar$2 {\n  constructor(parent, serviceLocator) {\n    this.parent = parent;\n    this.isToolbar = false;\n    this.locator = serviceLocator;\n    this.isTransformChild = false;\n    this.renderFactory = this.locator.getService('rendererFactory');\n    updateDropDownLocale(this.parent);\n    updateDropDownFontFormatLocale(this.parent);\n    this.renderFactory.addRenderer(RenderType.Toolbar, new ToolbarRenderer(this.parent));\n    this.toolbarRenderer = this.renderFactory.getRenderer(RenderType.Toolbar);\n    this.baseToolbar = new BaseToolbar(this.parent, this.locator);\n    this.addEventListener();\n\n    if (this.parent.toolbarSettings && Object.keys(this.parent.toolbarSettings.itemConfigs).length > 0) {\n      extend(this.tools, tools, toObjectLowerCase(this.parent.toolbarSettings.itemConfigs), true);\n    } else {\n      this.tools = tools;\n    }\n  }\n\n  initializeInstance() {\n    this.contentRenderer = this.renderFactory.getRenderer(RenderType.Content);\n    this.editableElement = this.contentRenderer.getEditPanel();\n    this.editPanel = this.contentRenderer.getPanel();\n  }\n\n  toolbarBindEvent() {\n    if (!this.parent.inlineMode.enable) {\n      this.keyBoardModule = new KeyboardEvents(this.getToolbarElement(), {\n        keyAction: this.toolBarKeyDown.bind(this),\n        keyConfigs: this.parent.formatter.keyConfig,\n        eventName: 'keydown'\n      });\n    }\n  }\n\n  toolBarKeyDown(e) {\n    switch (e.action) {\n      case 'escape':\n        this.parent.contentModule.getEditPanel().focus();\n        break;\n    }\n  }\n\n  createToolbarElement() {\n    this.tbElement = this.parent.createElement('div', {\n      id: this.parent.getID() + '_toolbar'\n    });\n\n    if (!Browser.isDevice && this.parent.inlineMode.enable && isIDevice()) {\n      return;\n    } else {\n      if (this.parent.toolbarSettings.enableFloating && !this.parent.inlineMode.enable) {\n        this.tbWrapper = this.parent.createElement('div', {\n          id: this.parent.getID() + '_toolbar_wrapper',\n          innerHTML: this.tbElement.outerHTML,\n          className: CLS_TB_WRAP\n        });\n        this.tbElement = this.tbWrapper.firstElementChild;\n        this.parent.element.insertBefore(this.tbWrapper, this.editPanel);\n      } else {\n        this.parent.element.insertBefore(this.tbElement, this.editPanel);\n      }\n    }\n  }\n\n  getToolbarMode() {\n    let tbMode;\n\n    switch (this.parent.toolbarSettings.type) {\n      case ToolbarType.Expand:\n        tbMode = 'Extended';\n        break;\n\n      case ToolbarType.Scrollable:\n        tbMode = 'Scrollable';\n        break;\n\n      default:\n        tbMode = 'MultiRow';\n    }\n\n    if (isIDevice() && this.parent.toolbarSettings.type === ToolbarType.Expand) {\n      tbMode = ToolbarType.Scrollable;\n    }\n\n    return tbMode;\n  }\n\n  checkToolbarResponsive(ele) {\n    if (!Browser.isDevice || isIDevice()) {\n      return false;\n    }\n\n    let tBarMode;\n\n    if (this.parent.toolbarSettings.type === ToolbarType.Expand) {\n      tBarMode = ToolbarType.MultiRow;\n    } else {\n      tBarMode = this.parent.toolbarSettings.type;\n    }\n\n    this.baseToolbar.render({\n      container: this.parent.inlineMode.enable ? 'quick' : 'toolbar',\n      items: this.parent.toolbarSettings.items,\n      mode: tBarMode,\n      target: ele\n    });\n\n    if (this.parent.toolbarSettings.type === ToolbarType.Expand) {\n      addClass([ele], ['e-rte-tb-mobile']);\n\n      if (this.parent.inlineMode.enable) {\n        this.addFixedTBarClass();\n      } else {\n        addClass([ele], [CLS_TB_STATIC]);\n      }\n    }\n\n    this.wireEvents();\n    this.dropDownModule.renderDropDowns({\n      container: ele,\n      containerType: this.parent.inlineMode.enable ? 'quick' : 'toolbar',\n      items: this.parent.toolbarSettings.items\n    });\n    this.parent.notify(renderColorPicker, {\n      container: this.tbElement,\n      containerType: this.parent.inlineMode.enable ? 'quick' : 'toolbar',\n      items: this.parent.toolbarSettings.items\n    });\n    return true;\n  }\n\n  checkIsTransformChild() {\n    this.isTransformChild = false;\n    const transformElements = selectAll('[style*=\"transform\"]', document);\n\n    for (let i = 0; i < transformElements.length; i++) {\n      if (!isNullOrUndefined(transformElements[i].contains) && transformElements[i].contains(this.parent.element)) {\n        this.isTransformChild = true;\n        break;\n      }\n    }\n  }\n\n  toggleFloatClass(e) {\n    let topValue;\n    let isBody = false;\n    let isFloat = false;\n    let scrollParent;\n    const floatOffset = this.parent.floatingToolbarOffset;\n\n    if (e && this.parent.iframeSettings.enable && this.parent.inputElement.ownerDocument === e.target) {\n      scrollParent = e.target.body;\n    } else if (e && e.target !== document) {\n      scrollParent = e.target;\n    } else {\n      isBody = true;\n      scrollParent = document.body;\n    }\n\n    const tbHeight = this.getToolbarHeight() + this.getExpandTBarPopHeight();\n\n    if (this.isTransformChild) {\n      topValue = 0;\n      let scrollParentRelativeTop = 0;\n      const trgHeight = this.parent.element.offsetHeight;\n\n      if (isBody) {\n        const bodyStyle = window.getComputedStyle(scrollParent);\n        scrollParentRelativeTop = parseFloat(bodyStyle.marginTop.split('px')[0]) + parseFloat(bodyStyle.paddingTop.split('px')[0]);\n      }\n\n      const targetTop = this.parent.element.getBoundingClientRect().top;\n      const scrollParentYOffset = Browser.isMSPointer && isBody ? window.pageYOffset : scrollParent.parentElement.scrollTop;\n      const scrollParentRect = scrollParent.getBoundingClientRect();\n      const scrollParentTop = !isBody ? scrollParentRect.top : scrollParentRect.top + scrollParentYOffset;\n      const outOfRange = targetTop - (!isBody ? scrollParentTop : 0) + trgHeight > tbHeight + floatOffset ? false : true;\n\n      if (targetTop > scrollParentTop + floatOffset || targetTop < -trgHeight || (targetTop < 0 ? outOfRange : false)) {\n        isFloat = false;\n        removeClass([this.tbElement], [CLS_TB_ABS_FLOAT]);\n      } else if (targetTop < scrollParentTop + floatOffset) {\n        if (targetTop < 0) {\n          topValue = -targetTop + scrollParentTop;\n        } else {\n          topValue = scrollParentTop - targetTop;\n        }\n\n        topValue = isBody ? topValue - scrollParentRelativeTop : topValue;\n        addClass([this.tbElement], [CLS_TB_ABS_FLOAT]);\n        isFloat = true;\n      }\n    } else {\n      const parent = this.parent.element.getBoundingClientRect();\n\n      if (window.innerHeight < parent.top) {\n        return;\n      }\n\n      topValue = e && e.target !== document ? scrollParent.getBoundingClientRect().top : 0;\n\n      if (parent.bottom < floatOffset + tbHeight + topValue || parent.bottom < 0 || parent.top > floatOffset + topValue) {\n        isFloat = false;\n      } else if (parent.top < floatOffset) {\n        isFloat = true;\n      }\n    }\n\n    if (!isFloat) {\n      removeClass([this.tbElement], [CLS_TB_FLOAT]);\n      setStyleAttribute(this.tbElement, {\n        top: 0 + 'px',\n        width: '100%'\n      });\n    } else {\n      addClass([this.tbElement], [CLS_TB_FLOAT]);\n      setStyleAttribute(this.tbElement, {\n        width: this.parent.element.offsetWidth + 'px',\n        top: floatOffset + topValue + 'px'\n      });\n    }\n  }\n\n  renderToolbar() {\n    this.initializeInstance();\n    this.createToolbarElement();\n\n    if (this.checkToolbarResponsive(this.tbElement)) {\n      return;\n    }\n\n    if (this.parent.inlineMode.enable) {\n      this.parent.notify(renderInlineToolbar, {});\n    } else {\n      this.baseToolbar.render({\n        container: 'toolbar',\n        items: this.parent.toolbarSettings.items,\n        mode: this.getToolbarMode(),\n        target: this.tbElement\n      });\n\n      if (!this.parent.inlineMode.enable) {\n        if (this.parent.toolbarSettings.enableFloating) {\n          this.checkIsTransformChild();\n          this.toggleFloatClass();\n        }\n\n        addClass([this.parent.element], [CLS_RTE_TB_ENABLED]);\n\n        if (this.parent.toolbarSettings.type === ToolbarType.Expand) {\n          addClass([this.parent.element], [CLS_RTE_EXPAND_TB]);\n        }\n      }\n    }\n\n    this.wireEvents();\n\n    if (this.parent.inlineMode.enable && !isIDevice()) {\n      this.addFixedTBarClass();\n    }\n\n    if (!this.parent.inlineMode.enable) {\n      this.dropDownModule.renderDropDowns({\n        container: this.tbElement,\n        containerType: 'toolbar',\n        items: this.parent.toolbarSettings.items\n      });\n      this.parent.notify(renderColorPicker, {\n        container: this.tbElement,\n        containerType: 'toolbar',\n        items: this.parent.toolbarSettings.items\n      });\n      this.refreshToolbarOverflow();\n    }\n\n    const divEle = this.parent.element.querySelector('.e-rte-srctextarea');\n    const iframeEle = this.parent.element.querySelector('.e-source-content');\n\n    if (!this.parent.iframeSettings.enable && !isNullOrUndefined(divEle) && divEle.style.display === 'block' || this.parent.iframeSettings.enable && !isNullOrUndefined(iframeEle) && iframeEle.style.display === 'block') {\n      this.parent.notify(updateToolbarItem, {\n        targetItem: 'SourceCode',\n        updateItem: 'Preview',\n        baseToolbar: this.parent.getBaseToolbarObject()\n      });\n      this.parent.disableToolbarItem(this.parent.toolbarSettings.items);\n    }\n  }\n  /**\n   * addFixedTBarClass method\n   *\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  addFixedTBarClass() {\n    addClass([this.tbElement], [CLS_TB_FIXED]);\n  }\n  /**\n   * removeFixedTBarClass method\n   *\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  removeFixedTBarClass() {\n    removeClass([this.tbElement], [CLS_TB_FIXED]);\n  }\n\n  showFixedTBar() {\n    addClass([this.tbElement], [CLS_SHOW]);\n\n    if (Browser.isIos) {\n      addClass([this.tbElement], [CLS_TB_IOS_FIX]);\n    }\n  }\n\n  hideFixedTBar() {\n    // eslint-disable-next-line\n    !this.isToolbar ? removeClass([this.tbElement], [CLS_SHOW, CLS_TB_IOS_FIX]) : this.isToolbar = false;\n  }\n  /**\n   * updateItem method\n   *\n   * @param {IUpdateItemsModel} args - specifies the arguments.\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  updateItem(args) {\n    const item = this.tools[args.updateItem.toLocaleLowerCase()];\n    const trgItem = this.tools[args.targetItem.toLocaleLowerCase()];\n    const index = getTBarItemsIndex(getCollection(trgItem.subCommand), args.baseToolbar.toolbarObj.items)[0];\n\n    if (!isNullOrUndefined(index)) {\n      const prefixId = this.parent.inlineMode.enable ? '_quick_' : '_toolbar_';\n      args.baseToolbar.toolbarObj.items[index].id = this.parent.getID() + prefixId + item.id;\n      args.baseToolbar.toolbarObj.items[index].prefixIcon = item.icon;\n      args.baseToolbar.toolbarObj.items[index].tooltipText = item.tooltip;\n      args.baseToolbar.toolbarObj.items[index].subCommand = item.subCommand;\n      args.baseToolbar.toolbarObj.dataBind();\n    } else {\n      this.addTBarItem(args, 0);\n    }\n  }\n\n  updateToolbarStatus(args) {\n    if (!this.tbElement || this.parent.inlineMode.enable && (isIDevice() || !Browser.isDevice)) {\n      return;\n    }\n\n    const options = {\n      args: args,\n      dropDownModule: this.dropDownModule,\n      parent: this.parent,\n      tbElements: selectAll('.' + CLS_TB_ITEM, this.tbElement),\n      tbItems: this.baseToolbar.toolbarObj.items\n    };\n    setToolbarStatus(options, this.parent.inlineMode.enable ? true : false, this.parent);\n  }\n\n  fullScreen(e) {\n    this.parent.fullScreenModule.showFullScreen(e);\n  }\n\n  hideScreen(e) {\n    this.parent.fullScreenModule.hideFullScreen(e);\n  }\n  /**\n   * getBaseToolbar method\n   *\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  getBaseToolbar() {\n    return this.baseToolbar;\n  }\n  /**\n   * addTBarItem method\n   *\n   * @param {IUpdateItemsModel} args - specifies the arguments.\n   * @param {number} index - specifies the index value.\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  addTBarItem(args, index) {\n    args.baseToolbar.toolbarObj.addItems([args.baseToolbar.getObject(args.updateItem, 'toolbar')], index);\n  }\n  /**\n   * enableTBarItems method\n   *\n   * @param {BaseToolbar} baseToolbar - specifies the toolbar.\n   * @param {string} items - specifies the string value.\n   * @param {boolean} isEnable - specifies the boolean value.\n   * @param {boolean} muteToolbarUpdate - specifies the toolbar.\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  enableTBarItems(baseToolbar, items, isEnable, muteToolbarUpdate) {\n    const trgItems = getTBarItemsIndex(getCollection(items), baseToolbar.toolbarObj.items);\n    this.tbItems = selectAll('.' + CLS_TB_ITEM, baseToolbar.toolbarObj.element);\n\n    for (let i = 0; i < trgItems.length; i++) {\n      const item = this.tbItems[trgItems[i]];\n\n      if (item) {\n        baseToolbar.toolbarObj.enableItems(item, isEnable);\n      }\n    }\n\n    if (!select('.e-rte-srctextarea', this.parent.element) && !muteToolbarUpdate) {\n      updateUndoRedoStatus(baseToolbar, this.parent.formatter.editorManager.undoRedoManager.getUndoStatus());\n    }\n  }\n  /**\n   * removeTBarItems method\n   *\n   * @param {string} items - specifies the string value.\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  removeTBarItems(items) {\n    if (isNullOrUndefined(this.baseToolbar.toolbarObj)) {\n      this.baseToolbar = this.parent.getBaseToolbarObject();\n    }\n\n    const trgItems = getTBarItemsIndex(getCollection(items), this.baseToolbar.toolbarObj.items);\n    this.tbItems = this.parent.inlineMode.enable ? selectAll('.' + CLS_TB_ITEM, this.baseToolbar.toolbarObj.element) : selectAll('.' + CLS_TB_ITEM, this.parent.element);\n\n    for (let i = 0; i < trgItems.length; i++) {\n      this.baseToolbar.toolbarObj.removeItems(this.tbItems[trgItems[i]]);\n    }\n  }\n  /**\n   * getExpandTBarPopHeight method\n   *\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  getExpandTBarPopHeight() {\n    let popHeight = 0;\n\n    if (this.parent.toolbarSettings.type === ToolbarType.Expand && this.tbElement.classList.contains('e-extended-toolbar')) {\n      const expandPopup = select('.e-toolbar-extended', this.tbElement);\n\n      if (expandPopup && this.tbElement.classList.contains('e-expand-open') || expandPopup && expandPopup.classList.contains('e-popup-open')) {\n        addClass([expandPopup], [CLS_VISIBLE]);\n        popHeight = popHeight + expandPopup.offsetHeight;\n        removeClass([expandPopup], [CLS_VISIBLE]);\n      } else {\n        removeClass([this.tbElement], [CLS_EXPAND_OPEN]);\n      }\n    }\n\n    return popHeight;\n  }\n  /**\n   * getToolbarHeight method\n   *\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  getToolbarHeight() {\n    return this.tbElement.offsetHeight;\n  }\n  /**\n   * getToolbarElement method\n   *\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  getToolbarElement() {\n    return select('.' + CLS_TOOLBAR, this.parent.element);\n  }\n  /**\n   * refreshToolbarOverflow method\n   *\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  refreshToolbarOverflow() {\n    this.baseToolbar.toolbarObj.refreshOverflow();\n  }\n\n  isToolbarDestroyed() {\n    return this.baseToolbar.toolbarObj && !this.baseToolbar.toolbarObj.isDestroyed;\n  }\n\n  destroyToolbar() {\n    if (this.isToolbarDestroyed()) {\n      this.parent.unWireScrollElementsEvents();\n      this.unWireEvents();\n      this.parent.notify(destroyColorPicker, {});\n      this.dropDownModule.destroyDropDowns();\n      this.baseToolbar.toolbarObj.destroy();\n      this.removeEventListener();\n      removeClass([this.parent.element], [CLS_RTE_TB_ENABLED]);\n      removeClass([this.parent.element], [CLS_RTE_EXPAND_TB]);\n      const tbWrapper = select('.' + CLS_TB_WRAP, this.parent.element);\n      const tbElement = select('.' + CLS_TOOLBAR, this.parent.element);\n\n      if (!isNullOrUndefined(tbWrapper)) {\n        detach(tbWrapper);\n      } else if (!isNullOrUndefined(tbElement)) {\n        detach(tbElement);\n      }\n    }\n  }\n  /**\n   * Destroys the ToolBar.\n   *\n   * @function destroy\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  destroy() {\n    if (this.isToolbarDestroyed()) {\n      this.destroyToolbar();\n\n      if (this.keyBoardModule) {\n        this.keyBoardModule.destroy();\n      }\n    }\n  }\n\n  scrollHandler(e) {\n    if (!this.parent.inlineMode.enable) {\n      if (this.parent.toolbarSettings.enableFloating && this.getDOMVisibility(this.tbElement)) {\n        this.toggleFloatClass(e.args);\n      }\n    }\n  }\n\n  getDOMVisibility(el) {\n    if (!el.offsetParent && el.offsetWidth === 0 && el.offsetHeight === 0) {\n      return false;\n    }\n\n    return true;\n  }\n\n  mouseDownHandler() {\n    if (Browser.isDevice && this.parent.inlineMode.enable && !isIDevice()) {\n      this.showFixedTBar();\n    }\n  }\n\n  focusChangeHandler() {\n    if (Browser.isDevice && this.parent.inlineMode.enable && !isIDevice()) {\n      this.isToolbar = false;\n      this.hideFixedTBar();\n    }\n  }\n\n  dropDownBeforeOpenHandler() {\n    this.isToolbar = true;\n  } // eslint-disable-next-line\n\n\n  tbFocusHandler(e) {\n    const activeElm = document.activeElement;\n    const isToolbaractive = closest(activeElm, '.e-rte-toolbar');\n\n    if (activeElm === this.parent.getToolbarElement() || isToolbaractive === this.parent.getToolbarElement()) {\n      const toolbarItem = this.parent.getToolbarElement().querySelectorAll('.e-expended-nav');\n\n      for (let i = 0; i < toolbarItem.length; i++) {\n        if (isNullOrUndefined(this.parent.getToolbarElement().querySelector('.e-insert-table-btn'))) {\n          toolbarItem[i].setAttribute('tabindex', '0');\n        } else {\n          toolbarItem[i].setAttribute('tabindex', '1');\n        }\n      }\n    }\n  }\n\n  tbKeydownHandler(e) {\n    if (e.target.classList.contains('e-dropdown-btn') || e.target.getAttribute('id') === this.parent.getID() + '_toolbar_CreateTable') {\n      e.target.setAttribute('tabindex', '0');\n    }\n  }\n\n  toolbarClickHandler(e) {\n    const trg = closest(e.originalEvent.target, '.e-hor-nav');\n\n    if (trg && this.parent.toolbarSettings.type === ToolbarType.Expand && !isNullOrUndefined(trg)) {\n      if (!trg.classList.contains('e-nav-active')) {\n        removeClass([this.tbElement], [CLS_EXPAND_OPEN]);\n        this.parent.setContentHeight('toolbar', false);\n      } else {\n        addClass([this.tbElement], [CLS_EXPAND_OPEN]);\n        this.parent.setContentHeight('toolbar', true);\n      }\n    } else if (Browser.isDevice || this.parent.inlineMode.enable) {\n      this.isToolbar = true;\n    }\n\n    if (isNullOrUndefined(trg) && this.parent.toolbarSettings.type === ToolbarType.Expand) {\n      removeClass([this.tbElement], [CLS_EXPAND_OPEN]);\n    }\n  }\n\n  wireEvents() {\n    if (this.parent.inlineMode.enable && isIDevice()) {\n      return;\n    }\n\n    EventHandler.add(this.tbElement, 'focusin', this.tbFocusHandler, this);\n    EventHandler.add(this.tbElement, 'keydown', this.tbKeydownHandler, this);\n  }\n\n  unWireEvents() {\n    EventHandler.remove(this.tbElement, 'focusin', this.tbFocusHandler);\n    EventHandler.remove(this.tbElement, 'keydown', this.tbKeydownHandler);\n  }\n\n  addEventListener() {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.dropDownModule = new DropDownButtons(this.parent, this.locator);\n    this.toolbarActionModule = new ToolbarAction(this.parent);\n    this.parent.on(initialEnd, this.renderToolbar, this);\n    this.parent.on(scroll, this.scrollHandler, this);\n    this.parent.on(bindOnEnd, this.toolbarBindEvent, this);\n    this.parent.on(toolbarUpdated, this.updateToolbarStatus, this);\n    this.parent.on(modelChanged, this.onPropertyChanged, this);\n    this.parent.on(refreshBegin, this.onRefresh, this);\n    this.parent.on(destroy, this.destroy, this);\n    this.parent.on(enableFullScreen, this.fullScreen, this);\n    this.parent.on(disableFullScreen, this.hideScreen, this);\n    this.parent.on(updateToolbarItem, this.updateItem, this);\n    this.parent.on(beforeDropDownOpen, this.dropDownBeforeOpenHandler, this);\n    this.parent.on(expandPopupClick, this.parent.setContentHeight, this.parent);\n    this.parent.on(focusChange, this.focusChangeHandler, this);\n    this.parent.on(mouseDown, this.mouseDownHandler, this);\n    this.parent.on(sourceCodeMouseDown, this.mouseDownHandler, this);\n\n    if (!this.parent.inlineMode.enable && !isIDevice()) {\n      this.parent.on(toolbarClick, this.toolbarClickHandler, this);\n    }\n  }\n\n  removeEventListener() {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.off(initialEnd, this.renderToolbar);\n    this.parent.off(scroll, this.scrollHandler);\n    this.parent.off(bindOnEnd, this.toolbarBindEvent);\n    this.parent.off(toolbarUpdated, this.updateToolbarStatus);\n    this.parent.off(modelChanged, this.onPropertyChanged);\n    this.parent.off(refreshBegin, this.onRefresh);\n    this.parent.off(destroy, this.destroy);\n    this.parent.off(enableFullScreen, this.parent.fullScreenModule.showFullScreen);\n    this.parent.off(disableFullScreen, this.parent.fullScreenModule.hideFullScreen);\n    this.parent.off(updateToolbarItem, this.updateItem);\n    this.parent.off(beforeDropDownOpen, this.dropDownBeforeOpenHandler);\n    this.parent.off(expandPopupClick, this.parent.setContentHeight);\n    this.parent.off(focusChange, this.focusChangeHandler);\n    this.parent.off(mouseDown, this.mouseDownHandler);\n    this.parent.off(sourceCodeMouseDown, this.mouseDownHandler);\n\n    if (!this.parent.inlineMode.enable && !isIDevice()) {\n      this.parent.off(toolbarClick, this.toolbarClickHandler);\n    }\n  }\n\n  onRefresh() {\n    this.refreshToolbarOverflow();\n    this.parent.setContentHeight('', true);\n  }\n  /**\n   * Called internally if any of the property value changed.\n   *\n   * @param {RichTextEditorModel} e - specifies the string value\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  onPropertyChanged(e) {\n    if (!isNullOrUndefined(e.newProp.inlineMode)) {\n      for (const prop of Object.keys(e.newProp.inlineMode)) {\n        switch (prop) {\n          case 'enable':\n            this.refreshToolbar();\n            break;\n        }\n      }\n    }\n\n    if (e.module !== this.getModuleName()) {\n      return;\n    }\n\n    this.refreshToolbar();\n  }\n\n  refreshToolbar() {\n    if (isNullOrUndefined(this.baseToolbar.toolbarObj)) {\n      this.baseToolbar = this.parent.getBaseToolbarObject();\n    }\n\n    const tbWrapper = select('.' + CLS_TB_WRAP, this.parent.element);\n    const tbElement = select('.' + CLS_TOOLBAR, this.parent.element);\n\n    if (tbElement || tbWrapper) {\n      this.destroyToolbar();\n    }\n\n    if (this.parent.toolbarSettings.enable) {\n      this.addEventListener();\n      this.renderToolbar();\n      this.parent.wireScrollElementsEvents();\n\n      if (!select('.e-rte-srctextarea', this.parent.element)) {\n        updateUndoRedoStatus(this.baseToolbar, this.parent.formatter.editorManager.undoRedoManager.getUndoStatus());\n      }\n\n      this.parent.notify(dynamicModule, {});\n    }\n  }\n  /**\n   * For internal use only - Get the module name.\n   *\n   * @returns {void}\n   * @hidden\n   */\n\n\n  getModuleName() {\n    return 'toolbar';\n  }\n\n}\n\nvar __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar KeyboardEvents_1;\nconst keyCode = {\n  'backspace': 8,\n  'tab': 9,\n  'enter': 13,\n  'shift': 16,\n  'control': 17,\n  'alt': 18,\n  'pause': 19,\n  'capslock': 20,\n  'space': 32,\n  'escape': 27,\n  'pageup': 33,\n  'pagedown': 34,\n  'end': 35,\n  'home': 36,\n  'leftarrow': 37,\n  'uparrow': 38,\n  'rightarrow': 39,\n  'downarrow': 40,\n  'insert': 45,\n  'delete': 46,\n  'f1': 112,\n  'f2': 113,\n  'f3': 114,\n  'f4': 115,\n  'f5': 116,\n  'f6': 117,\n  'f7': 118,\n  'f8': 119,\n  'f9': 120,\n  'f10': 121,\n  'f11': 122,\n  'f12': 123,\n  'semicolon': 186,\n  'plus': 187,\n  'comma': 188,\n  'minus': 189,\n  'dot': 190,\n  'forwardslash': 191,\n  'graveaccent': 192,\n  'openbracket': 219,\n  'backslash': 220,\n  'closebracket': 221,\n  'singlequote': 222,\n  ']': 221,\n  '[': 219,\n  '=': 187\n};\n/**\n * KeyboardEvents class enables you to bind key action desired key combinations for ex., Ctrl+A, Delete, Alt+Space etc.\n * ```html\n * <div id='testEle'>  </div>;\n * <script>\n *   let node: HTMLElement = document.querySelector('#testEle');\n *   let kbInstance = new KeyboardEvents({\n *       element: node,\n *       keyConfigs:{ selectAll : 'ctrl+a' },\n *       keyAction: function (e:KeyboardEvent, action:string) {\n *           // handler function code\n *       }\n *   });\n * </script>\n * ```\n *\n * @hidden\n * @deprecated\n */\n\nlet KeyboardEvents$1 = KeyboardEvents_1 = class KeyboardEvents$$1 extends Base {\n  /**\n   * Initializes the KeyboardEvents\n   *\n   * @param {HTMLElement} element - specifies the elements.\n   * @param {KeyboardEventsModel} options - specify the options\n   */\n  constructor(element, options) {\n    super(options, element);\n    /**\n     * To handle a key press event returns null\n     *\n     * @param {KeyboardEventArgs} e - specifies the event arguments.\n     * @returns {void}\n     */\n\n    this.keyPressHandler = e => {\n      /* eslint-disable */\n      const isAltKey = e.altKey;\n      const isCtrlKey = e.ctrlKey;\n      const isShiftKey = e.shiftKey;\n      const isMetaKey = e.metaKey;\n      /* eslint-enable */\n\n      const curkeyCode = e.which;\n      const keys = Object.keys(this.keyConfigs);\n\n      for (const key of keys) {\n        const configCollection = this.keyConfigs[key].split(',');\n\n        for (const rconfig of configCollection) {\n          const rKeyObj = KeyboardEvents_1.getKeyConfigData(rconfig.trim());\n\n          if (isAltKey === rKeyObj.altKey && (isCtrlKey === rKeyObj.ctrlKey || isMetaKey) && isShiftKey === rKeyObj.shiftKey && curkeyCode === rKeyObj.keyCode) {\n            e.action = key;\n          }\n        }\n      }\n\n      if (this.keyAction) {\n        this.keyAction(e);\n      }\n    };\n\n    this.bind();\n  }\n  /**\n   * Unwire bound events and destroy the instance.\n   *\n   * @returns {void}\n   */\n\n\n  destroy() {\n    this.unwireEvents();\n    super.destroy();\n  }\n  /**\n   * Function can be used to specify certain action if a property is changed\n   *\n   * @param {KeyboardEventsModel} newProp - specifies the keyboard event.\n   * @param {KeyboardEventsModel} oldProp - specifies the old property.\n   * @returns {void}\n   * @private\n   */\n  // eslint-disable-next-line\n\n\n  onPropertyChanged(newProp, oldProp) {// No code are needed\n  }\n\n  bind() {\n    this.wireEvents();\n  }\n  /**\n   * To get the module name, returns 'keyboard'.\n   *\n   * @returns {void}\n   */\n\n\n  getModuleName() {\n    return 'keyboard';\n  }\n  /**\n   * Wiring event handlers to events\n   *\n   * @returns {void}\n   */\n\n\n  wireEvents() {\n    this.element.addEventListener(this.eventName, this.keyPressHandler);\n  }\n  /**\n   * Unwiring event handlers to events\n   *\n   * @returns {void}\n   */\n\n\n  unwireEvents() {\n    this.element.removeEventListener(this.eventName, this.keyPressHandler);\n  }\n  /**\n   * To get the key configuration data\n   *\n   * @param {string} config - configuration data\n   * @returns {KeyData} - specifies the key data\n   */\n\n\n  static getKeyConfigData(config) {\n    if (config in this.configCache) {\n      return this.configCache[config];\n    }\n\n    const keys = config.toLowerCase().split('+');\n    const keyData = {\n      altKey: keys.indexOf('alt') !== -1 ? true : false,\n      ctrlKey: keys.indexOf('ctrl') !== -1 ? true : false,\n      shiftKey: keys.indexOf('shift') !== -1 ? true : false,\n      keyCode: null\n    };\n\n    if (keys[keys.length - 1].length > 1 && !!Number(keys[keys.length - 1])) {\n      keyData.keyCode = Number(keys[keys.length - 1]);\n    } else {\n      keyData.keyCode = KeyboardEvents_1.getKeyCode(keys[keys.length - 1]);\n    }\n\n    KeyboardEvents_1.configCache[config] = keyData;\n    return keyData;\n  } // Return the keycode value as string\n\n\n  static getKeyCode(keyVal) {\n    return keyCode[keyVal] || keyVal.toUpperCase().charCodeAt(0);\n  }\n\n};\nKeyboardEvents$1.configCache = {};\n\n__decorate([Property({})], KeyboardEvents$1.prototype, \"keyConfigs\", void 0);\n\n__decorate([Property('keyup')], KeyboardEvents$1.prototype, \"eventName\", void 0);\n\n__decorate([Event()], KeyboardEvents$1.prototype, \"keyAction\", void 0);\n\nKeyboardEvents$1 = KeyboardEvents_1 = __decorate([NotifyPropertyChanges], KeyboardEvents$1);\n/**\n * `Color Picker` module is used to handle ColorPicker actions.\n */\n\nclass ColorPickerInput {\n  constructor(parent, serviceLocator) {\n    this.tools = {};\n    this.parent = parent;\n    this.locator = serviceLocator;\n    this.renderFactory = this.locator.getService('rendererFactory');\n    this.addEventListener();\n\n    if (this.parent.toolbarSettings && Object.keys(this.parent.toolbarSettings.itemConfigs).length > 0) {\n      extend(this.tools, tools, toObjectLowerCase(this.parent.toolbarSettings.itemConfigs), true);\n    } else {\n      this.tools = tools;\n    }\n  }\n\n  initializeInstance() {\n    this.toolbarRenderer = this.renderFactory.getRenderer(RenderType.Toolbar);\n  }\n  /**\n   * renderColorPickerInput method\n   *\n   * @param {IColorPickerRenderArgs} args - specify the arguments.\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  renderColorPickerInput(args) {\n    this.initializeInstance();\n    const suffixID = args.containerType;\n    const tbElement = args.container;\n    let targetID;\n    let options;\n    templateItems.forEach(item => {\n      if (getIndex(item, args.items) !== -1) {\n        switch (item) {\n          case 'fontcolor':\n            {\n              targetID = this.parent.getID() + '_' + suffixID + '_FontColor_Target';\n              const fontNode = this.parent.createElement('input');\n              fontNode.id = targetID;\n              fontNode.classList.add(CLS_FONT_COLOR_TARGET);\n              document.body.appendChild(fontNode);\n              options = {\n                cssClass: this.tools[item.toLocaleLowerCase()].icon + ' ' + CLS_RTE_ELEMENTS + ' ' + CLS_ICONS,\n                value: this.tools[item.toLocaleLowerCase()].value,\n                command: this.tools[item.toLocaleLowerCase()].command,\n                subCommand: this.tools[item.toLocaleLowerCase()].subCommand,\n                element: select('#' + this.parent.getID() + '_' + suffixID + '_FontColor', tbElement),\n                target: targetID\n              };\n              this.fontColorPicker = this.toolbarRenderer.renderColorPicker(options, 'fontcolor');\n              this.fontColorDropDown = this.toolbarRenderer.renderColorPickerDropDown(options, 'fontcolor', this.fontColorPicker);\n              break;\n            }\n\n          case 'backgroundcolor':\n            {\n              targetID = this.parent.getID() + '_' + suffixID + '_BackgroundColor_Target';\n              const backNode = this.parent.createElement('input');\n              backNode.id = targetID;\n              backNode.classList.add(CLS_BACKGROUND_COLOR_TARGET);\n              document.body.appendChild(backNode);\n              options = {\n                cssClass: this.tools[item.toLocaleLowerCase()].icon + ' ' + CLS_RTE_ELEMENTS + ' ' + CLS_ICONS,\n                value: this.tools[item.toLocaleLowerCase()].value,\n                command: this.tools[item.toLocaleLowerCase()].command,\n                subCommand: this.tools[item.toLocaleLowerCase()].subCommand,\n                element: select('#' + this.parent.getID() + '_' + suffixID + '_BackgroundColor', tbElement),\n                target: targetID\n              };\n              this.backgroundColorPicker = this.toolbarRenderer.renderColorPicker(options, 'backgroundcolor');\n              this.backgroundColorDropDown = this.toolbarRenderer.renderColorPickerDropDown(options, 'backgroundcolor', this.backgroundColorPicker);\n              break;\n            }\n        }\n      }\n    });\n  }\n\n  destroy() {\n    this.removeEventListener();\n    this.destroyColorPicker();\n  }\n  /**\n   * destroyColorPicker method\n   *\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  destroyColorPicker() {\n    if (this.fontColorPicker && !this.fontColorPicker.isDestroyed) {\n      this.fontColorPicker.destroy();\n    }\n\n    if (this.backgroundColorPicker && !this.backgroundColorPicker.isDestroyed) {\n      this.backgroundColorPicker.destroy();\n    }\n\n    if (this.fontColorDropDown && !this.fontColorDropDown.isDestroyed) {\n      const innerEle = this.fontColorDropDown.element.querySelector('.e-rte-color-content');\n\n      if (innerEle) {\n        detach(innerEle);\n      }\n\n      this.fontColorDropDown.destroy();\n    }\n\n    if (this.backgroundColorDropDown && !this.backgroundColorDropDown.isDestroyed) {\n      const innerEle = this.backgroundColorDropDown.element.querySelector('.e-rte-color-content');\n\n      if (innerEle) {\n        detach(innerEle);\n      }\n\n      this.backgroundColorDropDown.destroy();\n    }\n  }\n\n  setRtl(args) {\n    if (this.fontColorPicker) {\n      this.fontColorPicker.setProperties({\n        enableRtl: args.enableRtl\n      });\n      this.fontColorDropDown.setProperties({\n        enableRtl: args.enableRtl\n      });\n    }\n\n    if (this.backgroundColorPicker) {\n      this.backgroundColorPicker.setProperties({\n        enableRtl: args.enableRtl\n      });\n      this.backgroundColorDropDown.setProperties({\n        enableRtl: args.enableRtl\n      });\n    }\n  }\n\n  addEventListener() {\n    this.parent.on(toolbarRenderComplete, this.renderColorPickerInput, this);\n    this.parent.on(rtlMode, this.setRtl, this);\n    this.parent.on(destroy, this.destroy, this);\n    this.parent.on(destroyColorPicker, this.destroyColorPicker, this);\n    this.parent.on(modelChanged, this.onPropertyChanged, this);\n  }\n\n  onPropertyChanged(model) {\n    const newProp = model.newProp;\n    let element;\n\n    for (const prop of Object.keys(newProp)) {\n      switch (prop) {\n        case 'fontColor':\n          if (this.fontColorPicker) {\n            for (const font of Object.keys(newProp.fontColor)) {\n              switch (font) {\n                case 'default':\n                  {\n                    this.fontColorPicker.setProperties({\n                      value: newProp.fontColor.default\n                    });\n                    element = this.fontColorDropDown.element;\n                    const fontBorder = element.querySelector('.' + this.tools['fontcolor'].icon);\n                    fontBorder.style.borderBottomColor = newProp.fontColor.default;\n                    break;\n                  }\n\n                case 'mode':\n                  this.fontColorPicker.setProperties({\n                    mode: newProp.fontColor.mode\n                  });\n                  break;\n\n                case 'columns':\n                  this.fontColorPicker.setProperties({\n                    columns: newProp.fontColor.columns\n                  });\n                  break;\n\n                case 'colorCode':\n                  this.fontColorPicker.setProperties({\n                    presetColors: newProp.fontColor.colorCode\n                  });\n                  break;\n\n                case 'modeSwitcher':\n                  this.fontColorPicker.setProperties({\n                    modeSwitcher: newProp.fontColor.modeSwitcher\n                  });\n                  break;\n              }\n            }\n          }\n\n          break;\n\n        case 'backgroundColor':\n          if (this.backgroundColorPicker) {\n            for (const background of Object.keys(newProp.backgroundColor)) {\n              switch (background) {\n                case 'default':\n                  {\n                    this.backgroundColorPicker.setProperties({\n                      value: newProp.backgroundColor.default\n                    });\n                    element = this.backgroundColorDropDown.element;\n                    const backgroundBorder = element.querySelector('.' + this.tools['backgroundcolor'].icon);\n                    backgroundBorder.style.borderBottomColor = newProp.backgroundColor.default;\n                    break;\n                  }\n\n                case 'mode':\n                  this.backgroundColorPicker.setProperties({\n                    mode: newProp.backgroundColor.mode\n                  });\n                  break;\n\n                case 'columns':\n                  this.backgroundColorPicker.setProperties({\n                    columns: newProp.backgroundColor.columns\n                  });\n                  break;\n\n                case 'colorCode':\n                  this.backgroundColorPicker.setProperties({\n                    presetColors: newProp.backgroundColor.colorCode\n                  });\n                  break;\n\n                case 'modeSwitcher':\n                  this.backgroundColorPicker.setProperties({\n                    modeSwitcher: newProp.backgroundColor.modeSwitcher\n                  });\n                  break;\n              }\n            }\n          }\n\n          break;\n      }\n    }\n  }\n\n  removeEventListener() {\n    this.parent.off(toolbarRenderComplete, this.renderColorPickerInput);\n    this.parent.off(destroy, this.destroy);\n    this.parent.off(rtlMode, this.setRtl);\n    this.parent.off(destroyColorPicker, this.destroyColorPicker);\n    this.parent.off(modelChanged, this.onPropertyChanged);\n  }\n\n}\n/**\n * `Quick toolbar` module is used to handle Quick toolbar actions.\n */\n\n\nclass BaseQuickToolbar {\n  constructor(parent, locator) {\n    this.parent = parent;\n    this.locator = locator;\n    this.isDOMElement = false;\n    this.renderFactory = this.locator.getService('rendererFactory');\n    this.contentRenderer = this.renderFactory.getRenderer(RenderType.Content);\n    this.popupRenderer = this.renderFactory.getRenderer(RenderType.Popup);\n    this.dropDownButtons = new DropDownButtons(this.parent, this.locator);\n    this.colorPickerObj = new ColorPickerInput(this.parent, this.locator);\n  }\n\n  appendPopupContent() {\n    this.toolbarElement = this.parent.createElement('div', {\n      className: CLS_QUICK_TB\n    });\n    this.element.appendChild(this.toolbarElement);\n  }\n  /**\n   * render method\n   *\n   * @param {IQuickToolbarOptions} args - specifies the arguments\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  render(args) {\n    let className;\n\n    if (args.popupType === 'Image') {\n      className = CLS_IMAGE_POP;\n    } else if (args.popupType === 'Inline') {\n      className = CLS_INLINE_POP;\n    } else {\n      className = '';\n    }\n\n    const popupId = getUniqueID(args.popupType + '_Quick_Popup');\n    this.stringItems = args.toolbarItems;\n    this.element = this.parent.createElement('div', {\n      id: popupId,\n      className: className + ' ' + CLS_RTE_ELEMENTS\n    });\n    this.element.setAttribute('aria-owns', this.parent.getID());\n    this.appendPopupContent();\n    this.createToolbar(args.toolbarItems, args.mode);\n    this.popupRenderer.renderPopup(this);\n    this.addEventListener();\n  }\n\n  createToolbar(items, mode) {\n    this.quickTBarObj = new BaseToolbar(this.parent, this.locator);\n    this.quickTBarObj.render({\n      container: 'quick',\n      target: this.toolbarElement,\n      items: items,\n      mode: mode\n    });\n    this.quickTBarObj.toolbarObj.refresh();\n  }\n\n  setPosition(e) {\n    let x;\n    let y;\n    const imgWrapper = closest(e.target, '.e-img-caption');\n    const target = !isNullOrUndefined(imgWrapper) ? imgWrapper : e.target;\n    addClass([this.toolbarElement], [CLS_RM_WHITE_SPACE]);\n    const targetOffsetTop = target.offsetTop;\n    const parentOffsetTop = window.pageYOffset + e.parentData.top;\n\n    if (targetOffsetTop - e.editTop > e.popHeight) {\n      y = parentOffsetTop + e.tBarElementHeight + (targetOffsetTop - e.editTop) - e.popHeight - 5;\n    } else if (e.editTop + e.editHeight - (targetOffsetTop + target.offsetHeight) > e.popHeight) {\n      y = parentOffsetTop + e.tBarElementHeight + (targetOffsetTop - e.editTop) + target.offsetHeight + 5;\n    } else {\n      y = e.y;\n    }\n\n    if (target.offsetWidth > e.popWidth) {\n      x = target.offsetWidth / 2 - e.popWidth / 2 + e.parentData.left + target.offsetLeft;\n    } else {\n      x = e.parentData.left + target.offsetLeft;\n    }\n\n    this.popupObj.position.X = x + e.popWidth > e.parentData.right ? e.parentData.right - e.popWidth : x;\n    this.popupObj.position.Y = y >= 0 ? y : e.y + 5;\n    this.popupObj.dataBind();\n    removeClass([this.toolbarElement], [CLS_RM_WHITE_SPACE]);\n  }\n\n  checkCollision(e, viewPort, type) {\n    let x;\n    let y;\n    const parentTop = e.parentData.top;\n    const contentTop = e.windowY + parentTop + e.tBarElementHeight;\n    let collision = [];\n\n    if (viewPort === 'document') {\n      collision = isCollide(e.popup);\n    } else {\n      collision = isCollide(e.popup, e.parentElement);\n    }\n\n    for (let i = 0; i < collision.length; i++) {\n      switch (collision[i]) {\n        case 'top':\n          if (viewPort === 'document') {\n            y = e.windowY;\n          } else {\n            y = window.pageYOffset + parentTop + e.tBarElementHeight;\n          }\n\n          break;\n\n        case 'bottom':\n          {\n            let posY;\n\n            if (viewPort === 'document') {\n              if (type === 'inline') {\n                posY = e.y - e.popHeight - 10;\n              } else {\n                if (e.windowHeight - (parentTop + e.tBarElementHeight) > e.popHeight) {\n                  if (contentTop - e.windowHeight > e.popHeight) {\n                    posY = contentTop + (e.windowHeight - parentTop) - e.popHeight;\n                  } else {\n                    posY = contentTop;\n                  }\n                } else {\n                  posY = e.windowY + (parentTop + e.tBarElementHeight);\n                }\n              }\n            } else {\n              if (e.target.tagName !== 'IMG') {\n                posY = e.parentData.bottom + window.pageYOffset - e.popHeight - 10;\n              } else {\n                posY = e.parentData.bottom + window.pageYOffset - e.popHeight - 5;\n              }\n            }\n\n            y = posY;\n            break;\n          }\n\n        case 'right':\n          if (type === 'inline') {\n            x = window.pageXOffset + (e.windowWidth - (e.popWidth + e.bodyRightSpace + 10));\n          } else {\n            x = e.x - e.popWidth;\n          }\n\n          break;\n\n        case 'left':\n          if (type === 'inline') {\n            x = 0;\n          } else {\n            x = e.parentData.left;\n          }\n\n          break;\n      }\n    }\n\n    this.popupObj.position.X = x ? x : this.popupObj.position.X;\n    this.popupObj.position.Y = y ? y : this.popupObj.position.Y;\n    this.popupObj.dataBind();\n  }\n  /**\n   * showPopup method\n   *\n   * @param {number} x - specifies the x value\n   * @param {number} y - specifies the y value\n   * @param {Element} target - specifies the element\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  showPopup(x, y, target) {\n    const eventArgs = {\n      popup: this.popupObj,\n      cancel: false,\n      targetElement: target\n    };\n    this.parent.trigger(beforeQuickToolbarOpen, eventArgs, beforeQuickToolbarArgs => {\n      if (!beforeQuickToolbarArgs.cancel) {\n        let editPanelTop;\n        let editPanelHeight;\n        const bodyStyle = window.getComputedStyle(document.body);\n        const bodyRight = parseFloat(bodyStyle.marginRight.split('px')[0]) + parseFloat(bodyStyle.paddingRight.split('px')[0]);\n        const windowHeight = window.innerHeight;\n        const windowWidth = window.innerWidth;\n        const parent = this.parent.element;\n        const toolbarAvail = !isNullOrUndefined(this.parent.getToolbar());\n        const tbHeight = toolbarAvail && this.parent.toolbarModule.getToolbarHeight();\n        const expTBHeight = toolbarAvail && this.parent.toolbarModule.getExpandTBarPopHeight();\n        const tBarHeight = toolbarAvail ? tbHeight + expTBHeight : 0;\n        addClass([this.element], [CLS_HIDE]);\n\n        if (Browser.isDevice && !isIDevice()) {\n          addClass([this.parent.getToolbar()], [CLS_HIDE]);\n        }\n\n        if (this.parent.iframeSettings.enable) {\n          const cntEle = this.contentRenderer.getPanel().contentWindow;\n          editPanelTop = cntEle.pageYOffset;\n          editPanelHeight = cntEle.innerHeight;\n        } else {\n          const cntEle = closest(target, '.' + CLS_RTE_CONTENT);\n          editPanelTop = cntEle ? cntEle.scrollTop : 0;\n          editPanelHeight = cntEle ? cntEle.offsetHeight : 0;\n        }\n\n        if (!this.parent.inlineMode.enable && !closest(target, 'table')) {\n          this.parent.disableToolbarItem(this.parent.toolbarSettings.items);\n          this.parent.enableToolbarItem(['Undo', 'Redo']);\n        }\n\n        append([this.element], document.body);\n        this.popupObj.position.X = x + 20;\n        this.popupObj.position.Y = y + 20;\n        this.popupObj.dataBind();\n        this.popupObj.element.classList.add('e-popup-open');\n        this.dropDownButtons.renderDropDowns({\n          container: this.toolbarElement,\n          containerType: 'quick',\n          items: this.stringItems\n        });\n        this.colorPickerObj.renderColorPickerInput({\n          container: this.toolbarElement,\n          containerType: 'quick',\n          items: this.stringItems\n        });\n        const showPopupData = {\n          x: x,\n          y: y,\n          target: target,\n          editTop: editPanelTop,\n          editHeight: editPanelHeight,\n          popup: this.popupObj.element,\n          popHeight: this.popupObj.element.offsetHeight,\n          popWidth: this.popupObj.element.offsetWidth,\n          parentElement: parent,\n          bodyRightSpace: bodyRight,\n          windowY: window.pageYOffset,\n          windowHeight: windowHeight,\n          windowWidth: windowWidth,\n          parentData: parent.getBoundingClientRect(),\n          tBarElementHeight: tBarHeight\n        };\n\n        if (target.tagName === 'IMG') {\n          this.setPosition(showPopupData);\n        }\n\n        if (!this.parent.inlineMode.enable) {\n          this.checkCollision(showPopupData, 'parent', '');\n        }\n\n        this.checkCollision(showPopupData, 'document', this.parent.inlineMode.enable ? 'inline' : '');\n        this.popupObj.element.classList.remove('e-popup-open');\n        removeClass([this.element], [CLS_HIDE]);\n        this.popupObj.show({\n          name: 'ZoomIn',\n          duration: Browser.isIE ? 250 : 400\n        });\n        setStyleAttribute(this.element, {\n          maxWidth: window.outerWidth + 'px'\n        });\n        addClass([this.element], [CLS_POP]);\n        this.isDOMElement = true;\n      }\n    });\n  }\n  /**\n   * hidePopup method\n   *\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  hidePopup() {\n    const viewSourcePanel = this.parent.sourceCodeModule.getViewPanel();\n\n    if (Browser.isDevice && !isIDevice()) {\n      removeClass([this.parent.getToolbar()], [CLS_HIDE]);\n    }\n\n    if (!isNullOrUndefined(this.parent.getToolbar()) && !this.parent.inlineMode.enable) {\n      if (isNullOrUndefined(viewSourcePanel) || viewSourcePanel.style.display === 'none') {\n        this.parent.enableToolbarItem(this.parent.toolbarSettings.items);\n      }\n    }\n\n    this.removeEleFromDOM();\n    this.isDOMElement = false;\n  }\n  /**\n   * @param {string} item - specifies the string value\n   * @param {number} index - specifies the index value\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  addQTBarItem(item, index) {\n    this.quickTBarObj.toolbarObj.addItems(this.quickTBarObj.getItems(item, 'toolbar'), index);\n  }\n  /**\n   * @param {number} index - specifies the index value\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  removeQTBarItem(index) {\n    this.quickTBarObj.toolbarObj.removeItems(index);\n  }\n\n  removeEleFromDOM() {\n    const element = this.popupObj.element;\n\n    if (this.isDOMElement) {\n      this.dropDownButtons.destroyDropDowns();\n      this.colorPickerObj.destroyColorPicker();\n      removeClass([this.element], [CLS_POP]);\n      detach(element);\n      const args = this.popupObj;\n      this.parent.trigger(quickToolbarClose, args);\n    }\n  }\n\n  updateStatus(args) {\n    const options = {\n      args: args,\n      dropDownModule: this.dropDownButtons,\n      parent: this.parent,\n      tbElements: selectAll('.' + CLS_TB_ITEM, this.element),\n      tbItems: this.quickTBarObj.toolbarObj.items\n    };\n    setToolbarStatus(options, true, this.parent);\n\n    if (!select('.e-rte-srctextarea', this.parent.element)) {\n      updateUndoRedoStatus(this.parent.getBaseToolbarObject(), this.parent.formatter.editorManager.undoRedoManager.getUndoStatus());\n    }\n  }\n  /**\n   * Destroys the Quick toolbar.\n   *\n   * @function destroy\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  destroy() {\n    if (this.popupObj && !this.popupObj.isDestroyed) {\n      this.popupObj.destroy();\n      this.removeEleFromDOM();\n    }\n\n    this.removeEventListener();\n  }\n  /**\n   * addEventListener method\n   *\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  addEventListener() {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.on(destroy, this.destroy, this);\n    this.parent.on(modelChanged, this.onPropertyChanged, this);\n\n    if (this.parent.inlineMode.enable) {\n      this.parent.on(toolbarUpdated, this.updateStatus, this);\n    }\n  }\n  /**\n   * Called internally if any of the property value changed.\n   *\n   * @param {RichTextEditorModel} e - specifies the model element\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  onPropertyChanged(e) {\n    if (!isNullOrUndefined(e.newProp.inlineMode)) {\n      for (const prop of Object.keys(e.newProp.inlineMode)) {\n        switch (prop) {\n          case 'enable':\n            if (e.newProp.inlineMode.enable) {\n              this.parent.on(toolbarUpdated, this.updateStatus, this);\n            } else {\n              this.parent.off(toolbarUpdated, this.updateStatus);\n            }\n\n            break;\n        }\n      }\n    }\n  }\n  /**\n   * removeEventListener method\n   *\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  removeEventListener() {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.off(destroy, this.destroy);\n    this.parent.off(modelChanged, this.onPropertyChanged);\n\n    if (this.parent.inlineMode.enable) {\n      this.parent.off(toolbarUpdated, this.updateStatus);\n    }\n  }\n\n}\n/**\n * `Popup renderer` module is used to render popup in RichTextEditor.\n *\n * @hidden\n * @deprecated\n */\n\n\nclass PopupRenderer {\n  /**\n   * Constructor for popup renderer module\n   *\n   * @param {IRichTextEditor} parent - specifies the parent.\n   */\n  constructor(parent) {\n    this.parent = parent;\n  }\n\n  quickToolbarOpen() {\n    const args = this.popupObj;\n    this.parent.trigger(quickToolbarOpen, args);\n  }\n  /**\n   * renderPopup method\n   *\n   * @param {BaseQuickToolbar} args - specifies  the arguments.\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  renderPopup(args) {\n    this.setPanel(args.element);\n    this.renderPanel();\n    args.popupObj = new Popup(args.element, {\n      targetType: 'relative',\n      relateTo: this.parent.element,\n      open: this.quickToolbarOpen.bind(this)\n    });\n    this.popupObj = args.popupObj;\n    args.popupObj.hide();\n  }\n  /**\n   * The function is used to add popup class in Quick Toolbar\n   *\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  renderPanel() {\n    this.getPanel().classList.add(CLS_QUICK_POP);\n  }\n  /**\n   * Get the popup element of RichTextEditor\n   *\n   * @returns {Element} - specifies the element\n   * @hidden\n   * @deprecated\n   */\n\n\n  getPanel() {\n    return this.popupPanel;\n  }\n  /**\n   * Set the popup element of RichTextEditor\n   *\n   * @returns {void}\n   * @param  {Element} panel - specifies the element\n   * @hidden\n   * @deprecated\n   */\n\n\n  setPanel(panel) {\n    this.popupPanel = panel;\n  }\n\n}\n/**\n * `Quick toolbar` module is used to handle Quick toolbar actions.\n */\n\n\nclass QuickToolbar {\n  constructor(parent, locator) {\n    this.parent = parent;\n    this.locator = locator;\n    this.renderFactory = this.locator.getService('rendererFactory');\n    this.renderFactory.addRenderer(RenderType.Popup, new PopupRenderer(this.parent));\n    this.addEventListener();\n  }\n\n  formatItems(items) {\n    const formattedItems = [];\n    items.forEach(item => {\n      if (typeof item === 'string') {\n        switch (item.toLocaleLowerCase()) {\n          case 'open':\n            formattedItems.push('openLink');\n            break;\n\n          case 'edit':\n            formattedItems.push('editLink');\n            break;\n\n          case 'unlink':\n            formattedItems.push('removeLink');\n            break;\n\n          default:\n            formattedItems.push(item);\n            break;\n        }\n      } else {\n        formattedItems.push(item);\n      }\n    });\n    return formattedItems;\n  }\n\n  getQTBarOptions(popType, mode, items, type) {\n    return {\n      popupType: popType,\n      toolbarItems: items,\n      mode: mode,\n      renderType: type\n    };\n  }\n  /**\n   * createQTBar method\n   *\n   * @param {string} popupType - specifies the string value\n   * @param {string} mode - specifies the string value.\n   * @param {string} items - specifies the string.\n   * @param {RenderType} type - specifies the render type.\n   * @returns {BaseQuickToolbar} - specifies the quick toolbar\n   * @hidden\n   * @deprecated\n   */\n\n\n  createQTBar(popupType, mode, items, type) {\n    if (items.length < 1) {\n      return null;\n    }\n\n    const qTBar = new BaseQuickToolbar(this.parent, this.locator);\n    qTBar.render(this.getQTBarOptions(popupType, mode, this.formatItems(items), type));\n    return qTBar;\n  }\n\n  initializeQuickToolbars() {\n    this.parent.quickToolbarModule = this;\n    this.contentRenderer = this.renderFactory.getRenderer(RenderType.Content);\n\n    if (this.parent.inlineMode.enable && this.parent.inlineMode.onSelection && isIDevice()) {\n      EventHandler.add(this.contentRenderer.getDocument(), 'selectionchange', this.selectionChangeHandler, this);\n    }\n  } // eslint-disable-next-line\n\n\n  onMouseDown(e) {\n    this.parent.isBlur = false;\n    this.parent.isRTE = true;\n  }\n\n  keyUpQT(e) {\n    if (e.which == 27) {\n      this.hideQuickToolbars();\n    }\n  }\n\n  renderQuickToolbars() {\n    if (this.linkQTBar || this.imageQTBar || this.textQTBar || this.tableQTBar) {\n      return;\n    }\n\n    this.linkQTBar = this.createQTBar('Link', 'Scrollable', this.parent.quickToolbarSettings.link, RenderType.LinkToolbar);\n    this.renderFactory.addRenderer(RenderType.LinkToolbar, this.linkQTBar);\n    this.textQTBar = this.createQTBar('Text', 'Scrollable', this.parent.quickToolbarSettings.text, RenderType.TextToolbar);\n    this.renderFactory.addRenderer(RenderType.TextToolbar, this.textQTBar);\n    this.imageQTBar = this.createQTBar('Image', 'MultiRow', this.parent.quickToolbarSettings.image, RenderType.ImageToolbar);\n    this.renderFactory.addRenderer(RenderType.ImageToolbar, this.imageQTBar);\n    this.tableQTBar = this.createQTBar('Table', 'MultiRow', this.parent.quickToolbarSettings.table, RenderType.TableToolbar);\n    this.renderFactory.addRenderer(RenderType.TableToolbar, this.tableQTBar);\n\n    if (this.linkQTBar) {\n      EventHandler.add(this.linkQTBar.element, 'mousedown', this.onMouseDown, this);\n      EventHandler.add(this.linkQTBar.element, 'keyup', this.keyUpQT, this);\n    }\n\n    if (this.imageQTBar) {\n      EventHandler.add(this.imageQTBar.element, 'mousedown', this.onMouseDown, this);\n      EventHandler.add(this.imageQTBar.element, 'keyup', this.keyUpQT, this);\n    }\n\n    if (this.textQTBar) {\n      EventHandler.add(this.textQTBar.element, 'mousedown', this.onMouseDown, this);\n      EventHandler.add(this.textQTBar.element, 'keyup', this.keyUpQT, this);\n    }\n\n    if (this.tableQTBar) {\n      EventHandler.add(this.tableQTBar.element, 'mousedown', this.onMouseDown, this);\n      EventHandler.add(this.tableQTBar.element, 'keyup', this.keyUpQT, this);\n    }\n  }\n\n  renderInlineQuickToolbar() {\n    if (this.parent.inlineMode.enable && (!Browser.isDevice || isIDevice())) {\n      addClass([this.parent.element], [CLS_INLINE]);\n      this.inlineQTBar = this.createQTBar('Inline', 'MultiRow', this.parent.toolbarSettings.items, RenderType.InlineToolbar);\n      this.renderFactory.addRenderer(RenderType.InlineToolbar, this.inlineQTBar);\n      EventHandler.add(this.inlineQTBar.element, 'mousedown', this.onMouseDown, this);\n      EventHandler.add(this.inlineQTBar.element, 'keyup', this.keyUpQT, this);\n    }\n  }\n  /**\n   * Method for showing the inline quick toolbar\n   *\n   * @param {number} x -specifies the value of x.\n   * @param {number} y - specifies the y valu.\n   * @param {HTMLElement} target - specifies the target element.\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  showInlineQTBar(x, y, target) {\n    if (this.parent.readonly || target.tagName.toLowerCase() === \"img\") {\n      return;\n    }\n\n    this.inlineQTBar.showPopup(x, y, target);\n  }\n  /**\n   * Method for hidding the inline quick toolbar\n   *\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  hideInlineQTBar() {\n    if (this.inlineQTBar && !hasClass(this.inlineQTBar.element, 'e-popup-close')) {\n      this.inlineQTBar.hidePopup();\n    }\n  }\n  /**\n   * Method for hidding the quick toolbar\n   *\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  hideQuickToolbars() {\n    if (this.linkQTBar && !hasClass(this.linkQTBar.element, 'e-popup-close') && document.body.contains(this.linkQTBar.element)) {\n      this.linkQTBar.hidePopup();\n    }\n\n    if (this.textQTBar && !hasClass(this.textQTBar.element, 'e-popup-close') && document.body.contains(this.textQTBar.element)) {\n      this.textQTBar.hidePopup();\n    }\n\n    if (this.imageQTBar && !hasClass(this.imageQTBar.element, 'e-popup-close') && document.body.contains(this.imageQTBar.element)) {\n      this.imageQTBar.hidePopup();\n    }\n\n    if (this.tableQTBar && !hasClass(this.tableQTBar.element, 'e-popup-close') && document.body.contains(this.tableQTBar.element)) {\n      this.tableQTBar.hidePopup();\n    }\n\n    if (this.parent.inlineMode.enable && (!Browser.isDevice || isIDevice())) {\n      this.hideInlineQTBar();\n    }\n  }\n\n  deBounce(x, y, target) {\n    clearTimeout(this.deBouncer);\n    this.deBouncer = window.setTimeout(() => {\n      this.showInlineQTBar(x, y, target);\n    }, 1000);\n  }\n\n  mouseUpHandler(e) {\n    if (this.parent.inlineMode.enable && (!Browser.isDevice || isIDevice())) {\n      const args = e.args.touches ? e.args.changedTouches[0] : e.args;\n      const range = this.parent.getRange();\n      let target = e.args.target;\n\n      if (isNullOrUndefined(select('.' + CLS_INLINE_POP, document.body))) {\n        if (isIDevice() && e.touchData && e.touchData.prevClientX !== e.touchData.clientX && e.touchData.prevClientY !== e.touchData.clientY) {\n          return;\n        }\n\n        this.hideInlineQTBar();\n        const parentLeft = this.parent.element.getBoundingClientRect().left;\n        this.offsetX = this.parent.iframeSettings.enable ? window.pageXOffset + parentLeft + args.clientX : args.pageX;\n        this.offsetY = pageYOffset(args, this.parent.element, this.parent.iframeSettings.enable);\n\n        if (target.nodeName === 'TEXTAREA') {\n          this.showInlineQTBar(this.offsetX, this.offsetY, target);\n        } else {\n          const closestAnchor = closest(target, 'a');\n          target = closestAnchor ? closestAnchor : target;\n          const startNode = this.parent.getRange().startContainer.parentElement;\n          const endNode = this.parent.getRange().endContainer.parentElement;\n\n          if ((isNullOrUndefined(closest(startNode, 'A')) || isNullOrUndefined(closest(endNode, 'A'))) && (!closest(target, 'td,th') || !range.collapsed) && (target.tagName !== 'IMG' || this.parent.getRange().startOffset !== this.parent.getRange().endOffset)) {\n            if (this.parent.inlineMode.onSelection && range.collapsed) {\n              return;\n            }\n\n            this.target = target;\n            this.showInlineQTBar(this.offsetX, this.offsetY, target);\n          }\n        }\n      }\n    }\n  }\n\n  keyDownHandler() {\n    if (this.parent.inlineMode.enable && (!Browser.isDevice || isIDevice()) && !isNullOrUndefined(select('.' + CLS_INLINE_POP, document))) {\n      this.hideInlineQTBar();\n    }\n  }\n\n  inlineQTBarMouseDownHandler() {\n    if (this.parent.inlineMode.enable && (!Browser.isDevice || isIDevice()) && !isNullOrUndefined(select('.' + CLS_INLINE_POP, document))) {\n      this.hideInlineQTBar();\n    }\n  }\n\n  keyUpHandler(e) {\n    if (this.parent.inlineMode.enable && !Browser.isDevice) {\n      if (this.parent.inlineMode.onSelection) {\n        return;\n      }\n\n      const args = e.args;\n      this.deBounce(this.offsetX, this.offsetY, args.target);\n    }\n  }\n\n  selectionChangeHandler(e) {\n    clearTimeout(this.deBouncer);\n    this.deBouncer = window.setTimeout(() => {\n      this.onSelectionChange(e);\n    }, 1000);\n  }\n\n  onSelectionChange(e) {\n    if (!isNullOrUndefined(select('.' + CLS_INLINE_POP, document.body))) {\n      return;\n    }\n\n    const selection = this.contentRenderer.getDocument().getSelection();\n\n    if (!selection.isCollapsed) {\n      this.mouseUpHandler({\n        args: e\n      });\n    }\n  }\n  /**\n   * getInlineBaseToolbar method\n   *\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  getInlineBaseToolbar() {\n    return this.inlineQTBar && this.inlineQTBar.quickTBarObj;\n  }\n  /**\n   * Destroys the ToolBar.\n   *\n   * @function destroy\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  destroy() {\n    if (this.linkQTBar) {\n      EventHandler.remove(this.linkQTBar.element, 'mousedown', this.onMouseDown);\n      EventHandler.remove(this.linkQTBar.element, 'keyup', this.keyUpQT);\n      this.linkQTBar.destroy();\n    }\n\n    if (this.textQTBar) {\n      EventHandler.remove(this.textQTBar.element, 'mousedown', this.onMouseDown);\n      EventHandler.remove(this.textQTBar.element, 'keyup', this.keyUpQT);\n      this.textQTBar.destroy();\n    }\n\n    if (this.imageQTBar) {\n      EventHandler.remove(this.imageQTBar.element, 'mousedown', this.onMouseDown);\n      EventHandler.remove(this.imageQTBar.element, 'keyup', this.keyUpQT);\n      this.imageQTBar.destroy();\n    }\n\n    if (this.tableQTBar) {\n      EventHandler.remove(this.tableQTBar.element, 'mousedown', this.onMouseDown);\n      EventHandler.remove(this.tableQTBar.element, 'keyup', this.keyUpQT);\n      this.tableQTBar.destroy();\n    }\n\n    if (this.inlineQTBar) {\n      EventHandler.remove(this.inlineQTBar.element, 'mousedown', this.onMouseDown);\n      EventHandler.remove(this.inlineQTBar.element, 'keyup', this.keyUpQT);\n\n      if (isIDevice()) {\n        EventHandler.remove(document, 'selectionchange', this.selectionChangeHandler);\n      }\n\n      this.inlineQTBar.destroy();\n    }\n\n    this.removeEventListener();\n  }\n\n  wireInlineQTBarEvents() {\n    this.parent.on(mouseUp, this.mouseUpHandler, this);\n    this.parent.on(mouseDown, this.inlineQTBarMouseDownHandler, this);\n    this.parent.on(keyDown, this.keyDownHandler, this);\n    this.parent.on(keyUp, this.keyUpHandler, this);\n    this.parent.on(sourceCodeMouseDown, this.mouseUpHandler, this);\n    this.parent.on(renderInlineToolbar, this.renderInlineQuickToolbar, this);\n  }\n\n  unWireInlineQTBarEvents() {\n    this.parent.off(mouseUp, this.mouseUpHandler);\n    this.parent.off(mouseDown, this.inlineQTBarMouseDownHandler);\n    this.parent.off(keyDown, this.keyDownHandler);\n    this.parent.off(keyUp, this.keyUpHandler);\n    this.parent.off(sourceCodeMouseDown, this.mouseUpHandler);\n    this.parent.off(renderInlineToolbar, this.renderInlineQuickToolbar);\n  } // eslint-disable-next-line\n\n\n  toolbarUpdated(args) {\n    if (this.linkQTBar && !hasClass(this.linkQTBar.element, 'e-popup-close')) {\n      this.linkQTBar.hidePopup();\n    }\n\n    if (this.imageQTBar && !hasClass(this.imageQTBar.element, 'e-popup-close')) {\n      this.imageQTBar.hidePopup();\n    }\n\n    if (this.tableQTBar && !hasClass(this.tableQTBar.element, 'e-popup-close')) {\n      this.tableQTBar.hidePopup();\n    }\n  }\n  /**\n   * addEventListener\n   *\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  addEventListener() {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.on(initialEnd, this.initializeQuickToolbars, this);\n    this.parent.on(mouseDown, this.renderQuickToolbars, this);\n    this.parent.on(toolbarUpdated, this.toolbarUpdated, this);\n    this.parent.on(drop, this.renderQuickToolbars, this);\n    this.wireInlineQTBarEvents();\n    this.parent.on(modelChanged, this.onPropertyChanged, this);\n\n    if (this.parent.quickToolbarSettings.actionOnScroll === 'hide') {\n      this.parent.on(scroll, this.hideQuickToolbars, this);\n      this.parent.on(contentscroll, this.hideQuickToolbars, this);\n    }\n\n    this.parent.on(focusChange, this.hideQuickToolbars, this);\n    this.parent.on(iframeMouseDown, this.onIframeMouseDown, this);\n    this.parent.on(destroy, this.destroy, this);\n    this.parent.on(keyDown, this.onKeyDown, this);\n    this.parent.on(rtlMode, this.setRtl, this);\n  }\n\n  onKeyDown(e) {\n    const args = e.args;\n\n    if (args.which === 8 || args.which === 46) {\n      if (this.imageQTBar && !hasClass(this.imageQTBar.element, 'e-popup-close')) {\n        this.imageQTBar.hidePopup();\n      }\n    }\n  }\n\n  onIframeMouseDown() {\n    this.hideQuickToolbars();\n    this.hideInlineQTBar();\n  }\n\n  setRtl(args) {\n    if (this.inlineQTBar) {\n      this.inlineQTBar.quickTBarObj.toolbarObj.setProperties({\n        enableRtl: args.enableRtl\n      });\n    }\n\n    if (this.imageQTBar) {\n      this.imageQTBar.quickTBarObj.toolbarObj.setProperties({\n        enableRtl: args.enableRtl\n      });\n    }\n\n    if (this.linkQTBar) {\n      this.imageQTBar.quickTBarObj.toolbarObj.setProperties({\n        enableRtl: args.enableRtl\n      });\n    }\n  }\n  /**\n   * removeEventListener\n   *\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  removeEventListener() {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.off(initialEnd, this.initializeQuickToolbars);\n    this.parent.off(mouseDown, this.renderQuickToolbars);\n    this.parent.off(toolbarUpdated, this.toolbarUpdated);\n    this.parent.off(drop, this.renderQuickToolbars);\n    this.unWireInlineQTBarEvents();\n    this.parent.off(modelChanged, this.onPropertyChanged);\n\n    if (this.parent.quickToolbarSettings.actionOnScroll === 'hide') {\n      this.parent.off(scroll, this.hideQuickToolbars);\n      this.parent.off(contentscroll, this.hideQuickToolbars);\n    }\n\n    this.parent.off(focusChange, this.hideQuickToolbars);\n    this.parent.off(destroy, this.destroy);\n    this.parent.off(iframeMouseDown, this.onIframeMouseDown);\n    this.parent.off(keyDown, this.onKeyDown);\n    this.parent.off(rtlMode, this.setRtl);\n  }\n  /**\n   * Called internally if any of the property value changed.\n   *\n   * @param {RichTextEditorModel} e - specifies the element.\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  onPropertyChanged(e) {\n    if (!isNullOrUndefined(e.newProp.quickToolbarSettings)) {\n      for (const prop of Object.keys(e.newProp.quickToolbarSettings)) {\n        switch (prop) {\n          case 'actionOnScroll':\n            if (e.newProp.quickToolbarSettings.actionOnScroll === 'none') {\n              this.parent.off(scroll, this.hideQuickToolbars);\n              this.parent.off(contentscroll, this.hideQuickToolbars);\n            } else {\n              this.parent.on(scroll, this.hideQuickToolbars, this);\n              this.parent.on(contentscroll, this.hideQuickToolbars, this);\n            }\n\n            break;\n        }\n      }\n    }\n\n    if (e.module !== this.getModuleName()) {\n      return;\n    }\n\n    if (this.inlineQTBar) {\n      removeClass([this.parent.element], [CLS_INLINE]);\n      this.unWireInlineQTBarEvents();\n      this.hideInlineQTBar();\n    }\n\n    if (this.parent.inlineMode.enable && (!Browser.isDevice || isIDevice())) {\n      addClass([this.parent.element], [CLS_INLINE]);\n      this.wireInlineQTBarEvents();\n    }\n  }\n  /**\n   * For internal use only - Get the module name.\n   *\n   * @returns {void}\n   * @hidden\n   */\n\n\n  getModuleName() {\n    return 'quickToolbar';\n  }\n\n}\n/**\n * `Count` module is used to handle Count actions.\n */\n\n\nclass Count {\n  constructor(parent, serviceLocator) {\n    this.parent = parent;\n    this.locator = serviceLocator;\n    this.renderFactory = this.locator.getService('rendererFactory');\n    this.addEventListener();\n  }\n\n  initializeInstance() {\n    this.contentRenderer = this.renderFactory.getRenderer(RenderType.Content);\n    this.editPanel = this.contentRenderer.getEditPanel();\n    this.addEventListener();\n  }\n  /**\n   * renderCount method\n   *\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  renderCount() {\n    this.initializeInstance();\n    this.element = this.parent.createElement('span', {\n      className: CLS_COUNT\n    });\n    this.contentRenderer.getPanel().parentElement.appendChild(this.element);\n    this.appendCount();\n\n    if (this.parent.maxLength !== -1) {\n      this.charCountBackground(this.htmlLength);\n    }\n  }\n\n  appendCount() {\n    const htmlText = this.parent.editorMode === 'Markdown' ? this.editPanel.value.trim() : this.editPanel.textContent.trim();\n\n    if (this.parent.editorMode !== 'Markdown' && htmlText.indexOf('\\u200B') !== -1) {\n      this.htmlLength = htmlText.replace(/\\u200B/g, '').length;\n    } else {\n      this.htmlLength = htmlText.length;\n    }\n\n    const string = this.parent.maxLength === -1 ? this.htmlLength : this.htmlLength + ' / ' + this.parent.maxLength;\n    this.element.innerHTML = string;\n  }\n\n  charCountBackground(htmlLength) {\n    const percentage = htmlLength / this.parent.maxLength * 100;\n\n    if (percentage < 85) {\n      this.element.classList.remove(CLS_WARNING);\n      this.element.classList.remove(CLS_ERROR);\n    } else if (percentage > 85 && percentage <= 90) {\n      this.element.classList.remove(CLS_ERROR);\n      this.element.classList.add(CLS_WARNING);\n    } else if (percentage > 90) {\n      this.element.classList.remove(CLS_WARNING);\n      this.element.classList.add(CLS_ERROR);\n    }\n  }\n  /**\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  refresh() {\n    if (!isNullOrUndefined(this.editPanel)) {\n      this.appendCount();\n\n      if (this.parent.maxLength !== -1) {\n        this.charCountBackground(this.htmlLength);\n      }\n    }\n  }\n  /**\n   * Destroys the Count.\n   *\n   * @function destroy\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  destroy() {\n    if (this.element && !isNullOrUndefined(this.parent.element.querySelector('.' + CLS_COUNT))) {\n      detach(this.element);\n    }\n\n    this.removeEventListener();\n  }\n\n  toggle(e) {\n    this.element.style.display = e.member === 'viewSource' ? 'none' : 'block';\n  }\n\n  addEventListener() {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.on(initialEnd, this.renderCount, this);\n    this.parent.on(keyUp, this.refresh, this);\n    this.parent.on(count, this.refresh, this);\n    this.parent.on(refreshBegin, this.refresh, this);\n    this.parent.on(mouseDown, this.refresh, this);\n    this.parent.on(destroy, this.destroy, this);\n    this.parent.on(sourceCode, this.toggle, this);\n    this.parent.on(updateSource, this.toggle, this);\n  }\n\n  removeEventListener() {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.off(initialEnd, this.renderCount);\n    this.parent.off(keyUp, this.refresh);\n    this.parent.off(refreshBegin, this.refresh);\n    this.parent.off(count, this.refresh);\n    this.parent.off(mouseDown, this.refresh);\n    this.parent.off(destroy, this.destroy);\n    this.parent.off(sourceCode, this.toggle);\n    this.parent.off(updateSource, this.toggle);\n  }\n  /**\n   * For internal use only - Get the module name.\n   *\n   * @returns {string} - returns the string value\n   */\n\n\n  getModuleName() {\n    return 'count';\n  }\n\n}\n/**\n * MarkdownSelection internal module\n *\n * @hidden\n * @deprecated\n */\n\n\nclass MarkdownSelection {\n  /**\n   * markdown getLineNumber method\n   *\n   * @param {HTMLTextAreaElement} textarea - specifies the text area element\n   * @param {number} point - specifies the number value\n   * @returns {number} - returns the value\n   * @hidden\n   * @deprecated\n   */\n  getLineNumber(textarea, point) {\n    return textarea.value.substr(0, point).split('\\n').length;\n  }\n  /**\n   * markdown getSelectedText method\n   *\n   * @param {HTMLTextAreaElement} textarea - specifies the text area element\n   * @returns {string} - specifies the string value\n   * @hidden\n   * @deprecated\n   */\n\n\n  getSelectedText(textarea) {\n    const start = textarea.selectionStart;\n    const end = textarea.selectionEnd;\n    return textarea.value.substring(start, end);\n  }\n  /**\n   * markdown getAllParents method\n   *\n   * @param {string} value - specifies the string value\n   * @returns {string[]} - returns the string value\n   * @hidden\n   * @deprecated\n   */\n\n\n  getAllParents(value) {\n    return value.split('\\n');\n  }\n  /**\n   * markdown getSelectedLine method\n   *\n   * @param {HTMLTextAreaElement} textarea - specifies the text area element\n   * @returns {string} - returns the string value\n   * @hidden\n   * @deprecated\n   */\n\n\n  getSelectedLine(textarea) {\n    const lines = this.getAllParents(textarea.value);\n    const index = this.getLineNumber(textarea, textarea.selectionStart);\n    return lines[index - 1];\n  }\n  /**\n   * markdown getLine method\n   *\n   * @param {HTMLTextAreaElement} textarea - specifies the text area element\n   * @param {number} index - specifies the number value\n   * @returns {string} - returns the string value\n   * @hidden\n   * @deprecated\n   */\n\n\n  getLine(textarea, index) {\n    const lines = this.getAllParents(textarea.value);\n    return lines[index];\n  }\n  /**\n   * markdown getSelectedParentPoints method\n   *\n   * @param {HTMLTextAreaElement} textarea - specifies the text area element\n   * @returns {string} - returns the string value\n   * @hidden\n   * @deprecated\n   */\n\n\n  getSelectedParentPoints(textarea) {\n    const lines = this.getAllParents(textarea.value);\n    const start = this.getLineNumber(textarea, textarea.selectionStart);\n    const end = this.getLineNumber(textarea, textarea.selectionEnd);\n    const parents = this.getSelectedText(textarea).split('\\n');\n    const selectedPoints = [];\n    const selectedLine = lines[start - 1];\n    const startLength = lines.slice(0, start - 1).join('').length;\n    const firstPoint = {};\n    firstPoint.line = start - 1;\n    firstPoint.start = startLength + firstPoint.line;\n    firstPoint.end = selectedLine !== '' ? firstPoint.start + selectedLine.length + 1 : firstPoint.start + selectedLine.length;\n    firstPoint.text = selectedLine;\n    selectedPoints.push(firstPoint);\n\n    if (parents.length > 1) {\n      for (let i = 1; i < parents.length - 1; i++) {\n        const points = {};\n        points.line = selectedPoints[i - 1].line + 1;\n        points.start = parents[i] !== '' ? selectedPoints[i - 1].end : selectedPoints[i - 1].end;\n        points.end = points.start + parents[i].length + 1;\n        points.text = parents[i];\n        selectedPoints.push(points);\n      }\n\n      const lastPoint = {};\n      lastPoint.line = selectedPoints[selectedPoints.length - 1].line + 1;\n      lastPoint.start = selectedPoints[selectedPoints.length - 1].end;\n      lastPoint.end = lastPoint.start + lines[end - 1].length + 1;\n      lastPoint.text = lines[end - 1];\n      selectedPoints.push(lastPoint);\n    }\n\n    return selectedPoints;\n  }\n  /**\n   * markdown setSelection method\n   *\n   * @param {HTMLTextAreaElement} textarea - specifies the text area element\n   * @param {number} start - specifies the start vaulue\n   * @param {number} end - specifies the end value\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  setSelection(textarea, start, end) {\n    textarea.setSelectionRange(start, end);\n    textarea.focus();\n  }\n  /**\n   * markdown save method\n   *\n   * @param {number} start - specifies the start vaulue\n   * @param {number} end - specifies the end value\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  save(start, end) {\n    this.selectionStart = start;\n    this.selectionEnd = end;\n  }\n  /**\n   * markdown restore method\n   *\n   * @param {HTMLTextAreaElement} textArea - specifies the text area element\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  restore(textArea) {\n    this.setSelection(textArea, this.selectionStart, this.selectionEnd);\n  }\n  /**\n   * markdown isStartWith method\n   *\n   * @param {string} line - specifies the string value\n   * @param {string} command - specifies the string value\n   * @returns {boolean} - returns the boolean value\n   * @hidden\n   * @deprecated\n   */\n\n\n  isStartWith(line, command) {\n    let isStart = false;\n\n    if (line) {\n      const reg = line.trim() === command.trim() ? new RegExp('^(' + this.replaceSpecialChar(command.trim()) + ')', 'gim') : new RegExp('^(' + this.replaceSpecialChar(command) + ')', 'gim');\n      isStart = reg.test(line.trim());\n    }\n\n    return isStart;\n  }\n  /**\n   * markdown replaceSpecialChar method\n   *\n   * @param {string} value - specifies the string value\n   * @returns {string} - returns the value\n   * @hidden\n   * @deprecated\n   */\n\n\n  replaceSpecialChar(value) {\n    // eslint-disable-next-line\n    return value.replace(/[`~!@#$%^&*()_|+\\-=?;:'\",.<>\\{\\}\\[\\]\\\\\\/]/g, '\\\\$&');\n  }\n  /**\n   * markdown isClear method\n   *\n   * @param {string} parents - specifies the parent element\n   * @param {string} regex - specifies the regex value\n   * @returns {boolean} - returns the boolean value\n   * @hidden\n   * @deprecated\n   */\n\n\n  isClear(parents, regex) {\n    const isClear = false;\n\n    for (let i = 0; i < parents.length; i++) {\n      if (new RegExp(regex, 'gim').test(parents[i].text)) {\n        return true;\n      }\n    }\n\n    return isClear;\n  }\n  /**\n   * markdown getSelectedInlinePoints method\n   *\n   * @param {HTMLTextAreaElement} textarea - specifies the text area\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  getSelectedInlinePoints(textarea) {\n    const start = textarea.selectionStart;\n    const end = textarea.selectionEnd;\n    const selection = this.getSelectedText(textarea);\n    return {\n      start: start,\n      end: end,\n      text: selection\n    };\n  }\n\n}\n/**\n * Defines common util methods used by Rich Text Editor.\n */\n\n\nconst inlineNode$1 = ['a', 'abbr', 'acronym', 'audio', 'b', 'bdi', 'bdo', 'big', 'br', 'button', 'canvas', 'cite', 'code', 'data', 'datalist', 'del', 'dfn', 'em', 'embed', 'font', 'i', 'iframe', 'img', 'input', 'ins', 'kbd', 'label', 'map', 'mark', 'meter', 'noscript', 'object', 'output', 'picture', 'progress', 'q', 'ruby', 's', 'samp', 'script', 'select', 'slot', 'small', 'span', 'strong', 'strike', 'sub', 'sup', 'svg', 'template', 'textarea', 'time', 'u', 'tt', 'var', 'video', 'wbr'];\n/**\n * @returns {void}\n * @hidden\n */\n\nfunction isIDevice$1() {\n  let result = false;\n\n  if (Browser.isDevice && Browser.isIos) {\n    result = true;\n  }\n\n  return result;\n}\n/**\n * @param {Element} editableElement - specifies the editable element.\n * @param {string} selector - specifies the string values.\n * @returns {void}\n * @hidden\n */\n\n\nfunction setEditFrameFocus(editableElement, selector) {\n  if (editableElement.nodeName === 'BODY' && !isNullOrUndefined(selector)) {\n    const iframe = top.window.document.querySelector(selector);\n\n    if (!isNullOrUndefined(iframe)) {\n      iframe.contentWindow.focus();\n    }\n  }\n}\n/**\n * @param {string} value - specifies the string value\n * @returns {void}\n * @hidden\n */\n\n\nfunction updateTextNode$1(value) {\n  const tempNode = document.createElement('div');\n  tempNode.innerHTML = value;\n  tempNode.setAttribute('class', 'tempDiv');\n  const resultElm = document.createElement('div');\n  const childNodes = tempNode.childNodes;\n\n  if (childNodes.length > 0) {\n    let isPreviousInlineElem;\n    let previousParent;\n    let paraElm;\n\n    while (tempNode.firstChild) {\n      if (tempNode.firstChild.nodeName === '#text' && (tempNode.firstChild.textContent.indexOf('\\n') < 0 || tempNode.firstChild.textContent.trim() !== '') || inlineNode$1.indexOf(tempNode.firstChild.nodeName.toLocaleLowerCase()) >= 0) {\n        if (!isPreviousInlineElem) {\n          paraElm = createElement('p');\n          resultElm.appendChild(paraElm);\n          paraElm.appendChild(tempNode.firstChild);\n        } else {\n          previousParent.appendChild(tempNode.firstChild);\n        }\n\n        previousParent = paraElm;\n        isPreviousInlineElem = true;\n      } else if (tempNode.firstChild.nodeName === '#text' && (tempNode.firstChild.textContent === '\\n' || tempNode.firstChild.textContent.indexOf('\\n') >= 0 && tempNode.firstChild.textContent.trim() === '')) {\n        detach(tempNode.firstChild);\n      } else {\n        resultElm.appendChild(tempNode.firstChild);\n        isPreviousInlineElem = false;\n      }\n    }\n\n    const tableElm = resultElm.querySelectorAll('table');\n\n    for (let i = 0; i < tableElm.length; i++) {\n      if (tableElm[i].getAttribute('border') === '0') {\n        tableElm[i].removeAttribute('border');\n      }\n\n      const tdElm = tableElm[i].querySelectorAll('td');\n\n      for (let j = 0; j < tdElm.length; j++) {\n        if (tdElm[j].style.borderLeft === 'none') {\n          tdElm[j].style.removeProperty('border-left');\n        }\n\n        if (tdElm[j].style.borderRight === 'none') {\n          tdElm[j].style.removeProperty('border-right');\n        }\n\n        if (tdElm[j].style.borderBottom === 'none') {\n          tdElm[j].style.removeProperty('border-bottom');\n        }\n\n        if (tdElm[j].style.borderTop === 'none') {\n          tdElm[j].style.removeProperty('border-top');\n        }\n\n        if (tdElm[j].style.border === 'none') {\n          tdElm[j].style.removeProperty('border');\n        }\n      }\n\n      if (!tableElm[i].classList.contains(CLS_TABLE)) {\n        tableElm[i].classList.add(CLS_TABLE);\n      }\n    }\n\n    const imageElm = resultElm.querySelectorAll('img');\n\n    for (let i = 0; i < imageElm.length; i++) {\n      if (!imageElm[i].classList.contains(CLS_RTE_IMAGE)) {\n        imageElm[i].classList.add(CLS_RTE_IMAGE);\n      }\n\n      if (!(imageElm[i].classList.contains(CLS_IMGINLINE) || imageElm[i].classList.contains(CLS_IMGBREAK))) {\n        imageElm[i].classList.add(CLS_IMGINLINE);\n      }\n    }\n  }\n\n  return resultElm.innerHTML;\n}\n/**\n * @param {Node} startChildNodes - specifies the node\n * @returns {void}\n * @hidden\n */\n\n\nfunction getLastTextNode(startChildNodes) {\n  let finalNode = startChildNodes;\n\n  do {\n    if (finalNode.childNodes.length > 0) {\n      finalNode = finalNode.childNodes[0];\n    }\n  } while (finalNode.childNodes.length > 0);\n\n  return finalNode;\n}\n/**\n * @returns {void}\n * @hidden\n */\n\n\nfunction getDefaultHtmlTbStatus() {\n  return {\n    bold: false,\n    italic: false,\n    subscript: false,\n    superscript: false,\n    strikethrough: false,\n    orderedlist: false,\n    unorderedlist: false,\n    underline: false,\n    alignments: null,\n    backgroundcolor: null,\n    fontcolor: null,\n    fontname: null,\n    fontsize: null,\n    formats: null,\n    createlink: false,\n    insertcode: false\n  };\n}\n/**\n * @returns {void}\n * @hidden\n */\n\n\nfunction getDefaultMDTbStatus() {\n  return {\n    bold: false,\n    italic: false,\n    subscript: false,\n    superscript: false,\n    strikethrough: false,\n    orderedlist: false,\n    uppercase: false,\n    lowercase: false,\n    inlinecode: false,\n    unorderedlist: false,\n    formats: null\n  };\n}\n/**\n * MarkdownToolbarStatus module for refresh the toolbar status\n */\n\n\nclass MarkdownToolbarStatus {\n  constructor(parent) {\n    this.toolbarStatus = this.prevToolbarStatus = getDefaultMDTbStatus();\n    this.selection = new MarkdownSelection();\n    this.parent = parent;\n    this.element = this.parent.contentModule.getEditPanel();\n    this.addEventListener();\n  }\n\n  addEventListener() {\n    this.parent.on(toolbarRefresh, this.onRefreshHandler, this);\n    this.parent.on(destroy, this.removeEventListener, this);\n  }\n\n  removeEventListener() {\n    this.parent.off(toolbarRefresh, this.onRefreshHandler);\n    this.parent.off(destroy, this.removeEventListener);\n  }\n\n  onRefreshHandler(args) {\n    const parentsLines = this.selection.getSelectedParentPoints(this.element);\n    this.toolbarStatus = {\n      orderedlist: args.documentNode ? false : this.isListsApplied(parentsLines, 'OL'),\n      unorderedlist: args.documentNode ? false : this.isListsApplied(parentsLines, 'UL'),\n      formats: this.currentFormat(parentsLines, args.documentNode),\n      bold: args.documentNode ? false : this.parent.formatter.editorManager.mdSelectionFormats.isAppliedCommand('Bold'),\n      italic: args.documentNode ? false : this.parent.formatter.editorManager.mdSelectionFormats.isAppliedCommand('Italic'),\n      inlinecode: args.documentNode ? false : this.parent.formatter.editorManager.mdSelectionFormats.isAppliedCommand('InlineCode'),\n      strikethrough: args.documentNode ? false : this.parent.formatter.editorManager.mdSelectionFormats.isAppliedCommand('StrikeThrough'),\n      subscript: args.documentNode ? false : this.parent.formatter.editorManager.mdSelectionFormats.isAppliedCommand('SubScript'),\n      superscript: args.documentNode ? false : this.parent.formatter.editorManager.mdSelectionFormats.isAppliedCommand('SuperScript'),\n      uppercase: args.documentNode ? false : this.parent.formatter.editorManager.mdSelectionFormats.isAppliedCommand('UpperCase')\n    };\n\n    if (this.parent.formatter.editorManager.mdSelectionFormats.isAppliedCommand('InlineCode')) {\n      this.toolbarStatus.formats = 'pre';\n    }\n\n    const tbStatusString = JSON.stringify(this.toolbarStatus);\n    this.parent.notify(toolbarUpdated, this.toolbarStatus);\n\n    if (JSON.stringify(this.prevToolbarStatus) !== tbStatusString) {\n      this.parent.notify(updateTbItemsStatus, {\n        html: null,\n        markdown: JSON.parse(tbStatusString)\n      });\n      this.prevToolbarStatus = JSON.parse(tbStatusString);\n    }\n  }\n\n  isListsApplied(lines, type) {\n    let isApply = true;\n\n    if (type === 'OL') {\n      for (let i = 0; i < lines.length; i++) {\n        const lineSplit = lines[i].text.trim().split(' ', 2)[0] + ' ';\n\n        if (!/^[\\d.]+[ ]+$/.test(lineSplit)) {\n          isApply = false;\n          break;\n        }\n      }\n    } else {\n      for (let i = 0; i < lines.length; i++) {\n        if (!this.selection.isStartWith(lines[i].text, this.parent.formatter.listTags[type])) {\n          isApply = false;\n          break;\n        }\n      }\n    }\n\n    return isApply;\n  }\n\n  currentFormat(lines, documentNode) {\n    let format = 'p';\n    const keys = Object.keys(this.parent.formatter.formatTags);\n    const direction = this.element.selectionDirection;\n    const checkLine = direction === 'backward' ? lines[0].text : lines[lines.length - 1].text;\n\n    for (let i = 0; !documentNode && i < keys.length; i++) {\n      if (keys[i] !== 'pre' && this.selection.isStartWith(checkLine, this.parent.formatter.formatTags[keys[i]])) {\n        format = keys[i];\n        break;\n      } else if (keys[i] === 'pre') {\n        if (this.codeFormat()) {\n          format = keys[i];\n          break;\n        }\n      }\n    }\n\n    return format;\n  }\n\n  codeFormat() {\n    let isFormat = false;\n    const textArea = this.parent.inputElement;\n    const start = textArea.selectionStart;\n\n    const splitAt = index => x => [x.slice(0, index), x.slice(index)];\n\n    const splitText = splitAt(start)(textArea.value);\n    const cmdPre = this.parent.formatter.formatTags.pre;\n    const selectedText = this.getSelectedText(textArea);\n\n    if (selectedText !== '' && selectedText === selectedText.toLocaleUpperCase()) {\n      return true;\n    } else if (selectedText === '') {\n      const beforeText = textArea.value.substr(splitText[0].length - 1, 1);\n      const afterText = splitText[1].substr(0, 1);\n\n      if (beforeText !== '' && afterText !== '' && beforeText.match(/[a-z]/i) && beforeText === beforeText.toLocaleUpperCase() && afterText === afterText.toLocaleUpperCase()) {\n        return true;\n      }\n    }\n\n    if (this.isCode(splitText[0], cmdPre) && this.isCode(splitText[1], cmdPre) && splitText[0].match(this.multiCharRegx(cmdPre)).length % 2 === 1 && splitText[1].match(this.multiCharRegx(cmdPre)).length % 2 === 1) {\n      isFormat = true;\n    }\n\n    return isFormat;\n  }\n\n  getSelectedText(textarea) {\n    return textarea.value.substring(textarea.selectionStart, textarea.selectionEnd);\n  }\n\n  isCode(text, cmd) {\n    return text.search('\\\\' + cmd + '') !== -1;\n  }\n\n  multiCharRegx(cmd) {\n    return new RegExp('(\\\\' + cmd + ')', 'g');\n  }\n\n}\n/**\n * `ExecCommandCallBack` module is used to run the editor manager command\n */\n\n\nclass ExecCommandCallBack {\n  constructor(parent) {\n    this.parent = parent;\n    this.addEventListener();\n  }\n\n  addEventListener() {\n    this.parent.on(execCommandCallBack, this.commandCallBack, this);\n    this.parent.on(destroy, this.removeEventListener, this);\n  }\n\n  commandCallBack(args) {\n    if (args.requestType !== 'Undo' && args.requestType !== 'Redo') {\n      this.parent.formatter.saveData();\n    }\n\n    this.parent.notify(toolbarRefresh, {\n      args: args\n    });\n    this.parent.notify(count, {});\n  }\n\n  removeEventListener() {\n    this.parent.off(execCommandCallBack, this.commandCallBack);\n    this.parent.off(destroy, this.removeEventListener);\n  }\n\n}\n/**\n * Constant values for Common\n */\n\n/**\n * Keydown event trigger\n *\n * @hidden\n */\n\n\nconst KEY_DOWN = 'keydown';\n/**\n * Undo and Redo action HTML plugin events\n *\n * @hidden\n */\n\nconst ACTION = 'action';\n/**\n * Formats plugin events\n *\n * @hidden\n */\n\nconst FORMAT_TYPE = 'format-type';\n/**\n * Keydown handler event trigger\n *\n * @hidden\n */\n\nconst KEY_DOWN_HANDLER = 'keydown-handler';\n/**\n * List plugin events\n *\n * @hidden\n */\n\nconst LIST_TYPE = 'list-type';\n/**\n * Keyup handler event trigger\n *\n * @hidden\n */\n\nconst KEY_UP_HANDLER = 'keyup-handler';\n/**\n * Keyup event trigger\n *\n * @hidden\n */\n\nconst KEY_UP = 'keyup';\n/**\n * Model changed plugin event trigger\n *\n * @hidden\n */\n\nconst MODEL_CHANGED_PLUGIN = 'model_changed_plugin';\n/**\n * Model changed event trigger\n *\n * @hidden\n */\n\nconst MODEL_CHANGED = 'model_changed';\n/**\n * PasteCleanup plugin for MSWord content\n *\n * @hidden\n */\n\nconst MS_WORD_CLEANUP_PLUGIN = 'ms_word_cleanup_plugin';\n/**\n * PasteCleanup for MSWord content\n *\n * @hidden\n */\n\nconst MS_WORD_CLEANUP = 'ms_word_cleanup';\n/**\n * ActionBegin event callback\n *\n * @hidden\n */\n\nconst ON_BEGIN = 'onBegin';\n/**\n * Callback for spacelist action\n *\n * @hidden\n */\n\nconst SPACE_ACTION = 'actionBegin';\n/**\n * Formatter\n *\n * @hidden\n * @deprecated\n */\n\nclass Formatter {\n  /**\n   * To execute the command\n   *\n   * @param  {IRichTextEditor} self - specifies the self element.\n   * @param  {ActionBeginEventArgs} args - specifies the event arguments.\n   * @param  {MouseEvent|KeyboardEvent} event - specifies the keyboard event.\n   * @param  {IItemCollectionArgs} value - specifies the collection arguments\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n  process(self, args, event, value) {\n    const selection = self.contentModule.getDocument().getSelection();\n    const range = selection.rangeCount > 0 ? selection.getRangeAt(selection.rangeCount - 1) : null;\n    let saveSelection;\n\n    if (self.editorMode === 'HTML') {\n      saveSelection = this.editorManager.nodeSelection.save(range, self.contentModule.getDocument());\n    }\n\n    if (!isNullOrUndefined(args) && args.item.command && args.item.command !== 'Table' && args.item.command !== 'Actions' && args.item.command !== 'Links' && args.item.command !== 'Images' && args.item.command !== 'Files' && range && !(self.contentModule.getEditPanel().contains(this.getAncestorNode(range.commonAncestorContainer)) || self.contentModule.getEditPanel() === range.commonAncestorContainer || self.contentModule.getPanel() === range.commonAncestorContainer)) {\n      return;\n    }\n\n    if (isNullOrUndefined(args)) {\n      const action = event.action;\n\n      if (action !== 'tab' && action !== 'enter' && action !== 'space' && action !== 'escape') {\n        args = {};\n\n        if (self.editorMode === 'Markdown' && action === 'insert-table') {\n          value = {\n            'headingText': self.localeObj.getConstant('TableHeadingText'),\n            'colText': self.localeObj.getConstant('TableColText')\n          };\n        }\n\n        const items = {\n          originalEvent: event,\n          cancel: false,\n          requestType: action || event.key + 'Key',\n          itemCollection: value\n        };\n        extend(args, args, items, true);\n        self.trigger(actionBegin, args, actionBeginArgs => {\n          if (actionBeginArgs.cancel) {\n            if (action === 'paste' || action === 'cut' || action === 'copy') {\n              event.preventDefault();\n            }\n          }\n        });\n      }\n\n      const isTableModule = isNullOrUndefined(self.tableModule) ? true : self.tableModule ? self.tableModule.ensureInsideTableList : false;\n\n      if (event.which === 9 && isTableModule || event.which !== 9) {\n        if (event.which === 13 && self.editorMode === 'HTML') {\n          value = {\n            'enterAction': self.enterKey\n          };\n        }\n\n        this.editorManager.observer.notify(event.type === 'keydown' ? KEY_DOWN : KEY_UP, {\n          event: event,\n          callBack: this.onSuccess.bind(this, self),\n          value: value,\n          enterAction: self.enterKey\n        });\n      }\n    } else if (!isNullOrUndefined(args) && args.item.command && args.item.subCommand && (args.item.command !== args.item.subCommand && args.item.command !== 'Font' || (args.item.subCommand === 'FontName' || args.item.subCommand === 'FontSize') && args.name === 'dropDownSelect' || (args.item.subCommand === 'BackgroundColor' || args.item.subCommand === 'FontColor') && args.name === 'colorPickerChanged')) {\n      extend(args, args, {\n        requestType: args.item.subCommand,\n        cancel: false,\n        itemCollection: value,\n        selectType: args.name\n      }, true);\n      self.trigger(actionBegin, args, actionBeginArgs => {\n        if (!actionBeginArgs.cancel) {\n          if (this.getUndoRedoStack().length === 0 && actionBeginArgs.item.command !== 'Links' && actionBeginArgs.item.command !== 'Images') {\n            this.saveData();\n          }\n\n          self.isBlur = false;\n          self.contentModule.getEditPanel().focus();\n\n          if (self.editorMode === 'HTML') {\n            saveSelection.restore();\n          }\n\n          const command = actionBeginArgs.item.subCommand.toLocaleLowerCase();\n\n          if (command === 'paste' || command === 'cut' || command === 'copy') {\n            self.clipboardAction(command, event);\n          } else {\n            this.editorManager.observer.notify(checkUndo, {\n              subCommand: actionBeginArgs.item.subCommand\n            });\n            this.editorManager.execCommand(actionBeginArgs.item.command, actionBeginArgs.item.subCommand, event, this.onSuccess.bind(this, self), actionBeginArgs.item.value, actionBeginArgs.item.subCommand === 'Pre' && actionBeginArgs.selectType === 'dropDownSelect' ? {\n              name: actionBeginArgs.selectType\n            } : value, '#' + self.getID() + ' iframe', self.enterKey);\n          }\n        }\n      });\n    }\n\n    if (isNullOrUndefined(event) || event && event.action !== 'copy') {\n      this.enableUndo(self);\n    }\n  }\n\n  getAncestorNode(node) {\n    node = node.nodeType === 3 ? node.parentNode : node;\n    return node;\n  }\n  /**\n   * onKeyHandler method\n   *\n   * @param {IRichTextEditor} self - specifies the self element.\n   * @param {KeyboardEvent} e - specifies the keyboard event.\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  onKeyHandler(self, e) {\n    this.editorManager.observer.notify(KEY_UP, {\n      event: e,\n      callBack: () => {\n        self.notify(contentChanged, {});\n        this.enableUndo(self);\n      }\n    });\n  }\n  /**\n   * onSuccess method\n   *\n   * @param {IRichTextEditor} self - specifies the self element.\n   * @param {IMarkdownFormatterCallBack} events - specifies the event call back\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  onSuccess(self, events) {\n    self.notify(contentChanged, {});\n\n    if (events && (isNullOrUndefined(events.event) || events.event.action !== 'copy')) {\n      this.enableUndo(self);\n      self.notify(execCommandCallBack, events);\n    }\n\n    self.trigger(actionComplete, events, callbackArgs => {\n      self.setPlaceHolder();\n\n      if (callbackArgs.requestType === 'Images' || callbackArgs.requestType === 'Links' && self.editorMode === 'HTML') {\n        const args = callbackArgs;\n\n        if (callbackArgs.requestType === 'Links' && callbackArgs.event && callbackArgs.event.type === 'keydown' && callbackArgs.event.keyCode === 32) {\n          return;\n        }\n\n        self.notify(insertCompleted, {\n          args: args.event,\n          type: callbackArgs.requestType,\n          isNotify: true,\n          elements: args.elements\n        });\n      }\n\n      self.autoResize();\n    });\n  }\n  /**\n   * Save the data for undo and redo action.\n   *\n   * @param {KeyboardEvent} e - specifies the keyboard event.\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  saveData(e) {\n    this.editorManager.undoRedoManager.saveData(e);\n  }\n  /**\n   * getUndoStatus method\n   *\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  getUndoStatus() {\n    return this.editorManager.undoRedoManager.getUndoStatus();\n  }\n  /* eslint-disable */\n\n  /**\n   * getUndoRedoStack method\n   *\n   * @param {IHtmlUndoRedoData}  - specifies the redo data.\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n  /* eslint-enable */\n\n\n  getUndoRedoStack() {\n    return this.editorManager.undoRedoManager.undoRedoStack;\n  }\n  /**\n   * enableUndo method\n   *\n   * @param {IRichTextEditor} self - specifies the self element.\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  enableUndo(self) {\n    const status = this.getUndoStatus();\n\n    if (self.inlineMode.enable && (!Browser.isDevice || isIDevice())) {\n      updateUndoRedoStatus(self.quickToolbarModule.inlineQTBar.quickTBarObj, status);\n    } else {\n      if (self.toolbarModule) {\n        updateUndoRedoStatus(self.toolbarModule.baseToolbar, status);\n      }\n    }\n  }\n\n}\n/**\n * Constant values for Markdown Parser\n */\n\n/**\n * List plugin events\n *\n * @hidden\n */\n\n\nconst LISTS_COMMAND = 'lists-commands';\n/**\n * selectioncommand plugin events\n *\n * @hidden\n */\n\nconst selectionCommand = 'command-type';\n/**\n * Link plugin events\n *\n * @hidden\n */\n\nconst LINK_COMMAND = 'link-commands';\n/**\n * Clear plugin events\n *\n * @hidden\n */\n\nconst CLEAR_COMMAND = 'clear-commands';\n/**\n * Table plugin events\n *\n * @hidden\n */\n\nconst MD_TABLE = 'insert-table';\n/**\n * Lists internal component\n *\n * @hidden\n */\n\nclass MDLists {\n  /**\n   * Constructor for creating the Lists plugin\n   *\n   * @param {IMDFormats} options - specifies the options\n   * @hidden\n   */\n  constructor(options) {\n    extend(this, this, options, true);\n    this.selection = this.parent.markdownSelection;\n    this.addEventListener();\n  }\n\n  addEventListener() {\n    this.parent.observer.on(LISTS_COMMAND, this.applyListsHandler, this);\n    this.parent.observer.on(KEY_DOWN_HANDLER, this.keyDownHandler, this);\n    this.parent.observer.on(KEY_UP_HANDLER, this.keyUpHandler, this);\n  }\n\n  keyDownHandler(event) {\n    switch (event.event.which) {\n      case 9:\n        this.tabKey(event);\n        break;\n    }\n\n    switch (event.event.action) {\n      case 'ordered-list':\n        this.applyListsHandler({\n          subCommand: 'OL',\n          callBack: event.callBack\n        });\n        event.event.preventDefault();\n        break;\n\n      case 'unordered-list':\n        this.applyListsHandler({\n          subCommand: 'UL',\n          callBack: event.callBack\n        });\n        event.event.preventDefault();\n        break;\n    }\n  }\n\n  keyUpHandler(event) {\n    switch (event.event.which) {\n      case 13:\n        this.enterKey(event);\n        break;\n    }\n  }\n\n  tabKey(event) {\n    const textArea = this.parent.element;\n    this.selection.save(textArea.selectionStart, textArea.selectionEnd);\n    let start = textArea.selectionStart;\n    const end = textArea.selectionEnd;\n    const parents = this.selection.getSelectedParentPoints(textArea);\n    let addedLength = 0;\n    const isNotFirst = this.isNotFirstLine(textArea, parents[0]);\n\n    if (!isNotFirst && !event.event.shiftKey) {\n      this.restore(textArea, start, end + addedLength, event);\n      return;\n    }\n\n    const listFormat = this.olListType();\n    const regex = this.getListRegex();\n    this.currentAction = this.getAction(parents[0].text);\n\n    for (let i = 0; i < parents.length; i++) {\n      let prevIndex = event.event.shiftKey ? parents[i].line - 1 : parents[i].line - 1;\n      let prevLine = this.selection.getLine(textArea, prevIndex);\n\n      if (prevLine && (!event.event.shiftKey && isNotFirst || event.event.shiftKey)) {\n        const prevLineSplit = prevLine.split('. ');\n        const tabSpace = '\\t';\n        const tabSpaceLength = event.event.shiftKey ? -tabSpace.length : tabSpace.length;\n        const splitTab = parents[i].text.split('\\t');\n\n        if (event.event.shiftKey && splitTab.length === 1) {\n          break;\n        }\n\n        if (this.currentAction === 'OL' && /^\\d+$/.test(prevLineSplit[0].trim()) && listFormat) {\n          event.event.preventDefault();\n          parents[i].text = event.event.shiftKey ? splitTab.splice(1, splitTab.length).join('\\t') : tabSpace + parents[i].text;\n          const curTabSpace = this.getTabSpace(parents[i].text);\n          let prevTabSpace = this.getTabSpace(prevLine);\n          const splitText = parents[i].text.split('. ');\n\n          if (curTabSpace === prevTabSpace) {\n            this.changeTextAreaValue(splitText, this.nextOrderedListValue(prevLineSplit[0].trim()), event, textArea, parents, i, end);\n          } else if (prevTabSpace < curTabSpace) {\n            this.changeTextAreaValue(splitText, '1. ', event, textArea, parents, i, end);\n          } else {\n            for (; prevTabSpace.length > curTabSpace.length; null) {\n              prevIndex = prevIndex - 1;\n              prevLine = this.selection.getLine(textArea, prevIndex);\n              const prevLineSplit = prevLine.trim().split('. ');\n\n              if (/^\\d+$/.test(prevLineSplit[0])) {\n                prevTabSpace = this.getTabSpace(prevLine);\n\n                if (prevTabSpace.length <= curTabSpace.length) {\n                  this.changeTextAreaValue(splitText, this.nextOrderedListValue(prevLineSplit[0]), event, textArea, parents, i, end);\n                  break;\n                }\n              }\n            }\n          }\n        } else if (this.currentAction === 'UL' && regex.test(prevLine.trim()) || !listFormat) {\n          event.event.preventDefault();\n          parents[i].text = event.event.shiftKey ? splitTab.splice(1, splitTab.length).join('\\t') : tabSpace + parents[i].text;\n          textArea.value = textArea.value.substr(0, parents[i].start) + parents[i].text + '\\n' + textArea.value.substr(parents[i].end, textArea.value.length);\n        }\n\n        start = i === 0 ? start + tabSpaceLength : start;\n        addedLength += tabSpaceLength;\n\n        if (parents.length !== 1) {\n          for (let j = i; j < parents.length; j++) {\n            parents[j].start = j !== 0 ? parents[j].start + tabSpaceLength : parents[j].start;\n            parents[j].end = parents[j].end + tabSpaceLength;\n          }\n        }\n      }\n    }\n\n    this.restore(textArea, start, end + addedLength, event);\n  }\n\n  changeTextAreaValue(splitText, prefixValue, event, // eslint-disable-next-line\n  textArea, parents, k, end) {\n    const prefix = prefixValue;\n    splitText.splice(0, 1);\n    const textAreaLength = this.selection.getAllParents(textArea.value).length;\n    let changedList = '';\n    const curTabSpace = this.getTabSpace(parents[k].text); // eslint-disable-next-line\n\n    let prefixNumber = parseInt(prefix.split('.')[0], null);\n    let nestedTabSpace = this.getTabSpace(parents[k].text);\n    let nestedlistorder = true;\n    let nestedListStart = true;\n    let curTabSpaceLength;\n    let nextPrefixValue = -1;\n    let traversIncreased = true;\n    let nextLineLength = 0;\n    let lineBreak = '';\n    changedList = this.selection.getLine(textArea, parents[0].line + 1) !== '' ? '' : changedList + textArea.value.substr(parents[0].end, textArea.value.length);\n\n    for (let i = 1; i < textAreaLength && !isNullOrUndefined(this.selection.getLine(textArea, parents[0].line + i)) && this.selection.getLine(textArea, parents[0].line + i) !== ''; i++) {\n      const nextLine = this.selection.getLine(textArea, parents[0].line + i);\n      const nextTabSpace = this.getTabSpace(nextLine);\n      const nextLineSplit = nextLine.split('. ');\n\n      if (nextLineSplit.length === 1) {\n        changedList += textArea.value.substr(parents[0].end + nextLineLength, textArea.value.length);\n        break;\n      } else {\n        nextLineLength += nextLine.length;\n        let shiftTabTargetList = false;\n        curTabSpaceLength = event.event.shiftKey ? curTabSpace.length + 1 : curTabSpace.length - 1;\n\n        if (nextTabSpace.length > nestedTabSpace.length) {\n          traversIncreased = false;\n        }\n\n        if (curTabSpace.length !== nextTabSpace.length && nextTabSpace.length < nestedTabSpace.length) {\n          nestedListStart = true;\n          nestedlistorder = false;\n          shiftTabTargetList = event.event.shiftKey && curTabSpace.length === nextTabSpace.length ? (nestedListStart = false, true) : false;\n        } else if (traversIncreased && event.event.shiftKey && curTabSpace.length === nextTabSpace.length && nextTabSpace.length === nestedTabSpace.length) {\n          nestedListStart = false;\n          shiftTabTargetList = true;\n        }\n\n        lineBreak = changedList === '' ? '' : '\\n';\n\n        if (curTabSpaceLength === nextTabSpace.length && nestedListStart) {\n          const nextPrefix = event.event.shiftKey ? (nextPrefixValue++, this.nextOrderedListValue(nextPrefixValue.toString())) : this.previousOrderedListValue(nextLineSplit[0]);\n          nextLineSplit.splice(0, 1);\n          changedList = changedList + lineBreak + nextTabSpace + nextPrefix + nextLineSplit.join('. ');\n        } else if (curTabSpace.length === nextTabSpace.length && nestedlistorder || shiftTabTargetList) {\n          const nextPrefix = this.nextOrderedListValue(prefixNumber.toString());\n          prefixNumber++;\n          nextLineSplit.splice(0, 1);\n          changedList = changedList + lineBreak + nextTabSpace + nextPrefix + nextLineSplit.join('. ');\n        } else {\n          changedList = changedList + lineBreak + nextLine;\n          nestedListStart = false;\n        }\n\n        nestedTabSpace = this.getTabSpace(nextLine);\n      }\n    }\n\n    parents[k].text = this.getTabSpace(parents[k].text) + prefix + splitText.join('. ') + '\\n';\n    textArea.value = textArea.value.substr(0, parents[k].start) + parents[k].text + changedList;\n  }\n\n  getTabSpace(line) {\n    const split = line.split('\\t');\n    let tabs = '';\n\n    for (let i = 0; i < split.length; i++) {\n      if (split[i] === '') {\n        tabs += '\\t';\n      } else {\n        break;\n      }\n    }\n\n    return tabs;\n  }\n\n  isNotFirstLine(textArea, points) {\n    const currentLine = points.text;\n    let prevIndex = points.line - 1;\n    let prevLine = this.selection.getLine(textArea, prevIndex);\n    const regex = this.getListRegex();\n    let isNotFirst = false;\n    let regexFirstCondition;\n\n    if (prevLine) {\n      this.currentAction = this.getAction(prevLine);\n      const prevLineSplit = prevLine.split('. ');\n      regexFirstCondition = this.currentAction === 'OL' ? /^\\d+$/.test(prevLineSplit[0].trim()) : regex.test(prevLine.trim());\n    }\n\n    if (prevLine && regexFirstCondition) {\n      const curTabSpace = this.getTabSpace(currentLine);\n      let prevTabSpace = this.getTabSpace(prevLine);\n      isNotFirst = curTabSpace === prevTabSpace ? true : isNotFirst;\n\n      for (; prevTabSpace.length > curTabSpace.length; null) {\n        prevIndex = prevIndex - 1;\n        prevLine = this.selection.getLine(textArea, prevIndex);\n        const prevLineSplit = prevLine.trim().split('. ');\n        const regexSecondCondition = this.currentAction === 'OL' ? /^\\d+$/.test(prevLineSplit[0]) : regex.test(prevLine.trim());\n\n        if (regexSecondCondition) {\n          prevTabSpace = this.getTabSpace(prevLine);\n\n          if (prevTabSpace.length <= curTabSpace.length) {\n            isNotFirst = true;\n            break;\n          }\n        }\n      }\n    }\n\n    return isNotFirst;\n  }\n\n  getAction(line) {\n    const ol = line.split('. ')[0]; // eslint-disable-next-line\n\n    const currentState = /^\\d+$/.test(ol.trim());\n    const ul = line.trim().split(new RegExp('^(' + this.selection.replaceSpecialChar(this.syntax.UL).trim() + ')'))[1];\n    return currentState ? 'OL' : ul ? 'UL' : 'NOTLIST';\n  }\n\n  nextOrderedListValue(previousLine) {\n    // eslint-disable-next-line\n    const currentValue = parseInt(previousLine, null);\n    const nextValue = currentValue + 1;\n    return nextValue.toString() + '. ';\n  }\n\n  previousOrderedListValue(previousLine) {\n    // eslint-disable-next-line\n    const currentValue = parseInt(previousLine, null);\n    const nextValue = currentValue - 1;\n    return nextValue.toString() + '. ';\n  }\n\n  enterKey(event) {\n    const textArea = this.parent.element;\n    this.selection.save(textArea.selectionStart, textArea.selectionEnd);\n    let start = textArea.selectionStart;\n    const end = textArea.selectionEnd;\n    const parents = this.selection.getSelectedParentPoints(textArea);\n    const prevLine = this.selection.getLine(textArea, parents[0].line - 1);\n    const listFormat = this.olListType();\n    const regex = this.getListRegex();\n    let prevLineSplit = [];\n\n    if (!isNullOrUndefined(prevLine)) {\n      prevLineSplit = prevLine.split('. ');\n      this.currentAction = this.getAction(prevLine);\n    }\n\n    let addedLength = 0;\n\n    if (this.currentAction === 'OL' && prevLineSplit.length > 1 && /^\\d+$/.test(prevLineSplit[0].trim()) && listFormat && prevLineSplit[1] !== '') {\n      const tabSpace = this.getTabSpace(prevLine);\n      this.currentAction = this.getAction(prevLine);\n      const prefix = this.nextOrderedListValue(prevLineSplit[0]);\n      parents[0].text = tabSpace + prefix + parents[0].text;\n      const textAreaLength = this.selection.getAllParents(textArea.value).length;\n      let changedList = '\\n';\n      const curTabSpace = this.getTabSpace(prevLine);\n      let nestedTabSpace = this.getTabSpace(parents[0].text);\n      let nestedListOrder = true;\n\n      for (let i = 1; i < textAreaLength && textArea.value.substr(parents[0].end, textArea.value.length) !== ''; i++) {\n        const nextLine = this.selection.getLine(textArea, parents[0].line + i);\n\n        if (isNullOrUndefined(nextLine)) {\n          changedList = changedList + '';\n        } else {\n          const nextLineSplit = nextLine.split('. ');\n          const nextTabSpace = this.getTabSpace(nextLine);\n\n          if (nextTabSpace.length < nestedTabSpace.length) {\n            nestedListOrder = false;\n          }\n\n          if (nextLineSplit.length > 1 && /^\\d+$/.test(nextLineSplit[0].trim()) && curTabSpace.length === nextTabSpace.length && nestedListOrder) {\n            const nextPrefix = this.nextOrderedListValue(nextLineSplit[0]);\n            nextLineSplit.splice(0, 1);\n            changedList = changedList + nextTabSpace + nextPrefix + nextLineSplit.join('. ') + '\\n';\n          } else {\n            changedList = changedList + nextLine + '\\n';\n            nestedTabSpace = this.getTabSpace(nextLine);\n          }\n        }\n      }\n\n      textArea.value = textArea.value.substr(0, parents[0].start) + curTabSpace + prefix + this.selection.getLine(textArea, parents[0].line) + changedList;\n      start = start + prefix.length + tabSpace.length;\n      addedLength += prefix.length + tabSpace.length;\n    } else if (this.currentAction === 'UL' && prevLine && regex.test(prevLine.trim()) && prevLine.trim().replace(regex, '') !== '' || this.currentAction === 'OL' && !listFormat) {\n      const tabSpace = this.getTabSpace(prevLine);\n      const prefix = this.syntax[this.currentAction];\n      parents[0].text = tabSpace + prefix + parents[0].text + (parents[0].text.trim().length > 0 ? '\\n' : '');\n      textArea.value = textArea.value.substr(0, parents[0].start) + parents[0].text + textArea.value.substr(parents[0].end, textArea.value.length);\n      start = start + prefix.length + tabSpace.length;\n      addedLength += prefix.length + tabSpace.length;\n    }\n\n    this.restore(textArea, start, end + addedLength, event);\n  }\n\n  olListType() {\n    const olSyntaxList = this.syntax.OL.split('.,');\n    const listType = olSyntaxList.length === 1 ? null : // eslint-disable-next-line\n    parseInt(olSyntaxList[2].trim(), null) - parseInt(olSyntaxList[0].trim(), null);\n\n    if (listType) {\n      return 1;\n    } else {\n      return 0;\n    }\n  }\n\n  applyListsHandler(e) {\n    const textArea = this.parent.element;\n    this.selection.save(textArea.selectionStart, textArea.selectionEnd);\n    this.currentAction = e.subCommand;\n    let start = textArea.selectionStart;\n    const end = textArea.selectionEnd;\n    let addedLength = 0;\n    let startLength = 0;\n    let endLength = 0;\n    const parents = this.selection.getSelectedParentPoints(textArea);\n    let prefix = '';\n    const listFormat = this.olListType();\n    let regex;\n    const perfixObj = {};\n\n    for (let i = 0; i < parents.length; i++) {\n      if (listFormat) {\n        regex = this.currentAction === 'OL' ? i + listFormat + '. ' : this.syntax[this.currentAction];\n      } else {\n        regex = this.currentAction === 'OL' ? this.syntax.OL : this.syntax[this.currentAction];\n      }\n\n      if (!this.selection.isStartWith(parents[i].text, regex)) {\n        if (parents[i].text === '' && i === 0) {\n          this.selection.save(start, end);\n\n          if (parents.length !== 1) {\n            for (let j = i; j < parents.length; j++) {\n              parents[j].start = j !== 0 ? 1 + parents[j].start : parents[j].start;\n              parents[j].end = 1 + parents[j].end;\n            }\n          }\n        }\n\n        const preLineTabSpaceLength = !isNullOrUndefined(parents[i - 1]) ? this.getTabSpace(parents[i - 1].text).length : 0;\n        const replace = this.appliedLine(parents[i].text, regex, perfixObj, preLineTabSpaceLength);\n        prefix = replace.line ? prefix : regex;\n        parents[i].text = replace.line ? replace.line : prefix + parents[i].text;\n        replace.space = replace.space ? replace.space : 0;\n        textArea.value = textArea.value.substr(0, parents[i].start + endLength) + parents[i].text + '\\n' + textArea.value.substr(parents[i].end, textArea.value.length);\n        start = i === 0 ? start + prefix.length + replace.space > 0 ? start + prefix.length + replace.space : 0 : start;\n        addedLength += prefix.length + replace.space;\n\n        if (parents.length !== 1) {\n          for (let j = i; j < parents.length; j++) {\n            parents[j].start = j !== 0 ? prefix.length + parents[j].start + replace.space : parents[j].start;\n            parents[j].end = prefix.length + parents[j].end + replace.space;\n          }\n        }\n\n        this.restore(textArea, start, end + addedLength, null);\n      } else {\n        parents[i].text = parents[i].text.replace(regex, '');\n        textArea.value = textArea.value.substr(0, parents[i].start + endLength) + parents[i].text + '\\n' + textArea.value.substr(parents[i].end + endLength, textArea.value.length);\n        endLength -= regex.length;\n        startLength = regex.length;\n        this.restore(textArea, start - startLength, end + endLength, null);\n      }\n    }\n\n    this.restore(textArea, null, null, e);\n  }\n\n  appliedLine(line, prefixPattern, perfixObj, preTabSpaceLength) {\n    const points = {};\n    const regex = new RegExp('^[' + this.syntax.UL.trim() + ']');\n    const lineSplit = line.split('. ');\n    const currentPrefix = lineSplit[0] + '. ';\n    const isExist = regex.test(line.trim()) || line.trim() === this.syntax.OL.trim() || line.trim() === this.syntax.UL.trim() || /^\\d+$/.test(lineSplit[0].trim());\n    const listFormat = this.olListType();\n    const curTabSpaceLength = this.getTabSpace(line).length;\n\n    if (this.currentAction === 'OL' && listFormat) {\n      perfixObj[curTabSpaceLength.toString()] = !isNullOrUndefined(perfixObj[curTabSpaceLength.toString()]) ? perfixObj[curTabSpaceLength.toString()].valueOf() + 1 : 1;\n      prefixPattern = perfixObj[curTabSpaceLength.toString()].valueOf().toString() + '. ';\n\n      if (!isNullOrUndefined(preTabSpaceLength) && preTabSpaceLength > curTabSpaceLength) {\n        perfixObj[preTabSpaceLength.toString()] = 0;\n      }\n    }\n\n    if (isExist) {\n      let replace;\n      let pattern; // eslint-disable-next-line\n\n      if (regex.test(line.trim())) {\n        pattern = this.syntax.UL;\n        replace = prefixPattern;\n        points.space = prefixPattern.trim().length - this.syntax.UL.trim().length;\n      } else if (/^\\d+$/.test(lineSplit[0].trim()) && listFormat) {\n        pattern = lineSplit[0].trim() + '. ';\n        replace = prefixPattern;\n        points.space = this.syntax.UL.trim().length - currentPrefix.trim().length;\n      } else if (/^\\d+$/.test(lineSplit[0].trim())) {\n        pattern = lineSplit[0].trim() + '. ';\n        replace = this.syntax.UL;\n        points.space = this.syntax.UL.trim().length - currentPrefix.trim().length;\n      }\n\n      points.line = line.replace(pattern, replace);\n    }\n\n    return points;\n  }\n\n  restore(textArea, start, end, event) {\n    if (!isNullOrUndefined(start) && !isNullOrUndefined(start)) {\n      this.selection.save(start, end);\n    }\n\n    if (!isNullOrUndefined(event)) {\n      this.selection.restore(textArea);\n    }\n\n    if (event && event.callBack) {\n      event.callBack({\n        requestType: this.currentAction,\n        selectedText: this.selection.getSelectedText(textArea),\n        editorMode: 'Markdown',\n        event: event.event\n      });\n    }\n  }\n\n  getListRegex() {\n    let regex = '';\n    const configKey = Object.keys(this.syntax);\n\n    for (let j = 0; j < configKey.length; j++) {\n      const syntax = this.selection.replaceSpecialChar(this.syntax[configKey[j]]);\n      regex += regex === '' ? '^(' + syntax + ')|^(' + syntax.trim() + ')' : '|^(' + syntax + ')|^(' + syntax.trim() + ')';\n    }\n\n    return new RegExp(regex);\n  }\n\n}\n/**\n * MDFormats internal plugin\n *\n * @hidden\n * @deprecated\n */\n\n\nclass MDFormats {\n  /**\n   * Constructor for creating the Formats plugin\n   *\n   * @param {IMDFormats} options - specifies the formats\n   * @hidden\n   * @deprecated\n   */\n  constructor(options) {\n    extend(this, this, options, true);\n    this.selection = this.parent.markdownSelection;\n    this.addEventListener();\n  }\n\n  addEventListener() {\n    this.parent.observer.on(FORMAT_TYPE, this.applyFormats, this);\n  }\n\n  applyFormats(e) {\n    e.subCommand = e.subCommand.toLowerCase();\n    const textArea = this.parent.element;\n    this.selection.save(textArea.selectionStart, textArea.selectionEnd);\n    let parents = this.selection.getSelectedParentPoints(textArea);\n\n    if (this.isAppliedFormat(parents) === e.subCommand) {\n      if (e.subCommand === 'pre') {\n        if (parents.length > 1) {\n          this.applyCodeBlock(textArea, e, parents);\n        } else {\n          return;\n        }\n      }\n\n      this.cleanFormat(textArea);\n      this.restore(textArea, textArea.selectionStart, textArea.selectionEnd, e);\n      return;\n    }\n\n    if (e.subCommand === 'p') {\n      this.cleanFormat(textArea);\n      this.restore(textArea, textArea.selectionStart, textArea.selectionEnd, e);\n      return;\n    } else {\n      if (e.subCommand === 'pre' && parents.length !== 1 || e.subCommand !== 'pre') {\n        this.cleanFormat(textArea, e.subCommand);\n      }\n    }\n\n    let start = textArea.selectionStart;\n    const end = textArea.selectionEnd;\n    let addedLength = 0;\n    parents = this.selection.getSelectedParentPoints(textArea);\n\n    if (e.subCommand === 'pre') {\n      if (parents.length > 1) {\n        this.applyCodeBlock(textArea, e, parents);\n      } else {\n        extend(e, e, {\n          subCommand: 'InlineCode'\n        }, true);\n        this.parent.observer.notify(selectionCommand, e);\n      }\n\n      return;\n    }\n\n    for (let i = 0; i < parents.length; i++) {\n      if (parents[i].text !== '' && !this.selection.isStartWith(parents[i].text, '\\\\' + this.syntax[e.subCommand])) {\n        parents[i].text = this.syntax[e.subCommand] + parents[i].text;\n        textArea.value = textArea.value.substr(0, parents[i].start) + parents[i].text + '\\n' + textArea.value.substr(parents[i].end, textArea.value.length);\n        start = i === 0 ? start + this.syntax[e.subCommand].length : start;\n        addedLength += this.syntax[e.subCommand].length;\n\n        if (parents.length !== 1) {\n          for (let j = i; j < parents.length; j++) {\n            parents[j].start = j !== 0 ? this.syntax[e.subCommand].length + parents[j].start : parents[j].start;\n            parents[j].end = this.syntax[e.subCommand].length + parents[j].end;\n          }\n        }\n      } else if (parents[i].text === '' && i === 0) {\n        this.selection.save(start, end);\n\n        if (this.selection.getSelectedText(textArea).length === 0) {\n          parents[i].text = this.syntax[e.subCommand];\n          textArea.value = textArea.value.substr(0, parents[i].start) + this.syntax[e.subCommand] + textArea.value.substr(parents[i].end, textArea.value.length);\n          start = i === 0 ? start + this.syntax[e.subCommand].length : start;\n          addedLength += this.syntax[e.subCommand].length;\n        }\n\n        if (parents.length !== 1) {\n          for (let j = i; j < parents.length; j++) {\n            parents[j].start = j !== 0 ? 1 + parents[j].start : parents[j].start;\n            parents[j].end = 1 + parents[j].end;\n          }\n        }\n      }\n    }\n\n    this.restore(textArea, start, end + addedLength, e);\n  }\n\n  clearRegex() {\n    let regex = '';\n    const configKey = Object.keys(this.syntax);\n\n    for (let j = 0; j < configKey.length && configKey[j] !== 'pre' && configKey[j] !== 'p'; j++) {\n      regex += regex === '' ? '^(' + this.selection.replaceSpecialChar(this.syntax[configKey[j]].trim()) + ')' : '|^(' + this.selection.replaceSpecialChar(this.syntax[configKey[j]].trim()) + ')';\n    }\n\n    return regex;\n  }\n\n  cleanFormat(textArea, command) {\n    const parents = this.selection.getSelectedParentPoints(textArea);\n    let start = textArea.selectionStart;\n    const end = textArea.selectionEnd;\n    let removeLength = 0;\n\n    if (this.selection.isClear(parents, this.clearRegex())) {\n      for (let i = 0; i < parents.length; i++) {\n        const configKey = Object.keys(this.syntax);\n\n        for (let j = 0; parents[i].text !== '' && j < configKey.length; j++) {\n          const removeText = this.syntax[configKey[j]];\n\n          if (configKey[j] === command) {\n            continue;\n          }\n\n          const regex = new RegExp('^(' + this.selection.replaceSpecialChar(removeText) + ')', 'gim');\n\n          if (regex.test(parents[i].text)) {\n            parents[i].text = parents[i].text.replace(regex, '');\n            textArea.value = textArea.value.substr(0, parents[i].start) + parents[i].text + '\\n' + textArea.value.substr(parents[i].end, textArea.value.length);\n            start = i === 0 ? start - removeText.length > 0 ? start - removeText.length : 0 : start;\n            removeLength += removeText.length;\n\n            if (parents.length !== 1) {\n              for (let k = 0; k < parents.length; k++) {\n                parents[k].start = k !== 0 ? parents[k].start - removeText.length : parents[k].start;\n                parents[k].end = parents[k].end - removeText.length;\n              }\n            }\n\n            break;\n          }\n        }\n\n        if (parents[i].text === '' && i === 0) {\n          this.selection.save(start, end);\n\n          if (parents.length !== 1) {\n            for (let j = i; j < parents.length; j++) {\n              parents[j].start = j !== 0 ? 1 + parents[j].start : parents[j].start;\n              parents[j].end = 1 + parents[j].end;\n            }\n          }\n        }\n      }\n\n      this.restore(textArea, start, end - removeLength);\n    }\n  }\n\n  applyCodeBlock(textArea, event, parents) {\n    const command = event.subCommand;\n    let start = parents[0].start;\n    let end = parents[parents.length - 1].end;\n    const parentLines = this.selection.getAllParents(textArea.value);\n    const firstPrevText = parentLines[parents[0].line - 1];\n    const lastNextText = parentLines[parents.length + 1 + 1]; // eslint-disable-next-line\n\n    if (!this.selection.isStartWith(firstPrevText, this.syntax.pre.split('\\n')[0]) && !this.selection.isStartWith(lastNextText, this.syntax.pre.split('\\n')[0])) {\n      const lines = textArea.value.substring(start, end).split('\\n');\n      const lastLine = lines[lines.length - 1] === '' ? '' : '\\n';\n      textArea.value = textArea.value.substr(0, start) + this.syntax[command] + textArea.value.substring(start, end) + lastLine + this.syntax[command] + textArea.value.substr(end, textArea.value.length);\n      start = this.selection.selectionStart + this.syntax[command].length;\n      end = this.selection.selectionEnd + this.syntax[command].length - 1;\n    } else {\n      const cmd = this.syntax[command];\n      const selection = this.parent.markdownSelection.getSelectedInlinePoints(textArea);\n      const startNo = textArea.value.substr(0, textArea.selectionStart).lastIndexOf(cmd);\n      let endNo = textArea.value.substr(textArea.selectionEnd, textArea.selectionEnd).indexOf(cmd);\n      endNo = endNo + selection.end;\n      const repStartText = this.replaceAt(textArea.value.substr(0, selection.start), cmd, '', startNo, selection.start);\n      const repEndText = this.replaceAt(textArea.value.substr(selection.end, textArea.value.length), cmd, '', 0, endNo);\n      textArea.value = repStartText + selection.text + repEndText;\n      start = this.selection.selectionStart - cmd.length;\n      end = this.selection.selectionEnd - cmd.length;\n    }\n\n    this.restore(textArea, start, end, event);\n  }\n\n  replaceAt(input, search, replace, start, end) {\n    return input.slice(0, start) + input.slice(start, end).replace(search, replace) + input.slice(end);\n  }\n\n  restore(textArea, start, end, event) {\n    this.selection.save(start, end);\n    this.selection.restore(textArea);\n\n    if (event && event.callBack) {\n      event.callBack({\n        requestType: event.subCommand,\n        selectedText: this.selection.getSelectedText(textArea),\n        editorMode: 'Markdown',\n        event: event.event\n      });\n    }\n  }\n\n  isAppliedFormat(lines, documentNode) {\n    let format = 'p'; // eslint-disable-next-line\n\n    const configKey = Object.keys(this.syntax);\n    const keys = Object.keys(this.syntax);\n    const direction = this.parent.element.selectionDirection;\n    const checkLine = direction === 'backward' ? lines[0].text : lines[lines.length - 1].text;\n\n    for (let i = 0; !documentNode && i < keys.length; i++) {\n      if (keys[i] !== 'pre' && this.selection.isStartWith(checkLine, this.syntax[keys[i]])) {\n        format = keys[i];\n        break;\n      } else if (keys[i] === 'pre') {\n        const parentLines = this.selection.getAllParents(this.parent.element.value);\n        const firstPrevText = parentLines[lines[0].line - 1];\n        const lastNextText = parentLines[lines.length + 1];\n\n        if (this.selection.isStartWith(firstPrevText, this.syntax[keys[i]].split('\\n')[0]) && this.selection.isStartWith(lastNextText, this.syntax[keys[i]].split('\\n')[0])) {\n          format = keys[i];\n          break;\n        }\n      }\n    }\n\n    return format;\n  }\n\n}\n/**\n * SelectionCommands internal component\n *\n * @hidden\n * @deprecated\n */\n\n\nclass MDSelectionFormats {\n  constructor(parent) {\n    extend(this, this, parent, true);\n    this.selection = this.parent.markdownSelection;\n    this.addEventListener();\n  }\n\n  addEventListener() {\n    this.parent.observer.on(selectionCommand, this.applyCommands, this);\n    this.parent.observer.on(KEY_DOWN_HANDLER, this.keyDownHandler, this);\n  }\n\n  keyDownHandler(e) {\n    switch (e.event.action) {\n      case 'bold':\n        this.applyCommands({\n          subCommand: 'Bold',\n          callBack: e.callBack\n        });\n        e.event.preventDefault();\n        break;\n\n      case 'italic':\n        this.applyCommands({\n          subCommand: 'Italic',\n          callBack: e.callBack\n        });\n        e.event.preventDefault();\n        break;\n\n      case 'strikethrough':\n        this.applyCommands({\n          subCommand: 'StrikeThrough',\n          callBack: e.callBack\n        });\n        e.event.preventDefault();\n        break;\n\n      case 'uppercase':\n        this.applyCommands({\n          subCommand: 'UpperCase',\n          callBack: e.callBack\n        });\n        e.event.preventDefault();\n        break;\n\n      case 'lowercase':\n        this.applyCommands({\n          subCommand: 'LowerCase',\n          callBack: e.callBack\n        });\n        e.event.preventDefault();\n        break;\n\n      case 'superscript':\n        this.applyCommands({\n          subCommand: 'SuperScript',\n          callBack: e.callBack\n        });\n        e.event.preventDefault();\n        break;\n\n      case 'subscript':\n        this.applyCommands({\n          subCommand: 'SubScript',\n          callBack: e.callBack\n        });\n        e.event.preventDefault();\n        break;\n    }\n  }\n\n  isBold(text, cmd) {\n    return text.search('\\\\' + cmd + '\\\\' + cmd + '') !== -1;\n  }\n\n  isItalic(text, cmd) {\n    return text.search('\\\\' + cmd) !== -1;\n  }\n\n  isMatch(text, cmd) {\n    let matchText = [''];\n\n    switch (cmd) {\n      case this.syntax.Italic:\n        matchText = text.match(this.singleCharRegx(cmd));\n        break;\n\n      case this.syntax.InlineCode:\n        matchText = text.match(this.singleCharRegx(cmd));\n        break;\n\n      case this.syntax.StrikeThrough:\n        matchText = text.match(this.singleCharRegx(cmd));\n        break;\n    }\n\n    return matchText;\n  }\n\n  multiCharRegx(cmd) {\n    return new RegExp('(\\\\' + cmd + '\\\\' + cmd + ')', 'g');\n  }\n\n  singleCharRegx(cmd) {\n    return new RegExp('(\\\\' + cmd + ')', 'g');\n  }\n\n  isAppliedCommand(cmd) {\n    // eslint-disable-next-line\n    let isFormat = false;\n    const textArea = this.parent.element;\n    const start = textArea.selectionStart;\n\n    const splitAt = index => x => [x.slice(0, index), x.slice(index)];\n\n    const splitText = splitAt(start)(textArea.value);\n    const cmdB = this.syntax.Bold.substr(0, 1);\n    const cmdI = this.syntax.Italic;\n    const selectedText = this.parent.markdownSelection.getSelectedText(textArea);\n\n    if (selectedText !== '' && selectedText === selectedText.toLocaleUpperCase() && cmd === 'UpperCase') {\n      return true;\n    } else if (selectedText === '') {\n      const beforeText = textArea.value.substr(splitText[0].length - 1, 1);\n      const afterText = splitText[1].substr(0, 1);\n\n      if (beforeText !== '' && afterText !== '' && beforeText.match(/[a-z]/i) && beforeText === beforeText.toLocaleUpperCase() && afterText === afterText.toLocaleUpperCase() && cmd === 'UpperCase') {\n        return true;\n      }\n    }\n\n    if (!this.isBold(splitText[0], cmdB) && !this.isItalic(splitText[0], cmdI) && !this.isBold(splitText[1], cmdB) && !this.isItalic(splitText[1], cmdI)) {\n      if (!isNullOrUndefined(this.isMatch(splitText[0], this.syntax.StrikeThrough)) && !isNullOrUndefined(this.isMatch(splitText[1], this.syntax.StrikeThrough)) && this.isMatch(splitText[0], this.syntax.StrikeThrough).length % 2 === 1 && this.isMatch(splitText[1], this.syntax.StrikeThrough).length % 2 === 1 && cmd === 'StrikeThrough') {\n        isFormat = true;\n      }\n\n      if (!isNullOrUndefined(this.isMatch(splitText[0], this.syntax.InlineCode)) && !isNullOrUndefined(this.isMatch(splitText[1], this.syntax.InlineCode)) && this.isMatch(splitText[0], this.syntax.InlineCode).length % 2 === 1 && this.isMatch(splitText[1], this.syntax.InlineCode).length % 2 === 1 && cmd === 'InlineCode') {\n        isFormat = true;\n      }\n      /* eslint-disable */\n\n\n      if (!isNullOrUndefined(splitText[0].match(/\\<sub>/g)) && !isNullOrUndefined(splitText[1].match(/\\<\\/sub>/g)) && splitText[0].match(/\\<sub>/g).length % 2 === 1 && splitText[1].match(/\\<\\/sub>/g).length % 2 === 1 && cmd === 'SubScript') {\n        isFormat = true;\n      }\n\n      if (!isNullOrUndefined(splitText[0].match(/\\<sup>/g)) && !isNullOrUndefined(splitText[1].match(/\\<\\/sup>/g)) && splitText[0].match(/\\<sup>/g).length % 2 === 1 && splitText[1].match(/\\<\\/sup>/g).length % 2 === 1 && cmd === 'SuperScript') {\n        isFormat = true;\n      }\n      /* eslint-enable */\n\n    }\n\n    if (this.isBold(splitText[0], cmdB) && this.isBold(splitText[1], cmdB) && splitText[0].match(this.multiCharRegx(cmdB)).length % 2 === 1 && splitText[1].match(this.multiCharRegx(cmdB)).length % 2 === 1 && cmd === 'Bold') {\n      isFormat = true;\n    }\n\n    splitText[0] = this.isBold(splitText[0], cmdB) ? splitText[0].replace(this.multiCharRegx(cmdB), '$%@') : splitText[0];\n    splitText[1] = this.isBold(splitText[1], cmdB) ? splitText[1].replace(this.multiCharRegx(cmdB), '$%@') : splitText[1];\n\n    if (!isNullOrUndefined(this.isMatch(splitText[0], this.syntax.Italic)) && !isNullOrUndefined(this.isMatch(splitText[1], this.syntax.Italic)) && this.isMatch(splitText[0], this.syntax.Italic).length % 2 === 1 && this.isMatch(splitText[1], this.syntax.Italic).length % 2 === 1 && cmd === 'Italic') {\n      isFormat = true;\n    }\n\n    if (!isNullOrUndefined(this.isMatch(splitText[0], this.syntax.StrikeThrough)) && !isNullOrUndefined(this.isMatch(splitText[1], this.syntax.StrikeThrough)) && this.isMatch(splitText[0], this.syntax.StrikeThrough).length % 2 === 1 && this.isMatch(splitText[1], this.syntax.StrikeThrough).length % 2 === 1 && cmd === 'StrikeThrough') {\n      isFormat = true;\n    }\n\n    if (!isNullOrUndefined(this.isMatch(splitText[0], this.syntax.InlineCode)) && !isNullOrUndefined(this.isMatch(splitText[1], this.syntax.InlineCode)) && this.isMatch(splitText[0], this.syntax.InlineCode).length % 2 === 1 && this.isMatch(splitText[1], this.syntax.InlineCode).length % 2 === 1 && cmd === 'InlineCode') {\n      isFormat = true;\n    }\n    /* eslint-disable */\n\n\n    if (!isNullOrUndefined(splitText[0].match(/\\<sub>/g)) && !isNullOrUndefined(splitText[1].match(/\\<\\/sub>/g)) && splitText[0].match(/\\<sub>/g).length % 2 === 1 && splitText[1].match(/\\<\\/sub>/g).length % 2 === 1 && cmd === 'SubScript') {\n      isFormat = true;\n    }\n\n    if (!isNullOrUndefined(splitText[0].match(/\\<sup>/g)) && !isNullOrUndefined(splitText[1].match(/\\<\\/sup>/g)) && splitText[0].match(/\\<sup>/g).length % 2 === 1 && splitText[1].match(/\\<\\/sup>/g).length % 2 === 1 && cmd === 'SuperScript') {\n      isFormat = true;\n      /* eslint-enable */\n    }\n\n    return isFormat;\n  }\n\n  applyCommands(e) {\n    this.currentAction = e.subCommand;\n    const textArea = this.parent.element;\n    this.selection.save(textArea.selectionStart, textArea.selectionEnd);\n    const start = textArea.selectionStart;\n    const end = textArea.selectionEnd;\n    let addedLength = 0;\n    const selection = this.parent.markdownSelection.getSelectedInlinePoints(textArea);\n\n    if (this.isAppliedCommand(e.subCommand) && selection.text !== '') {\n      const startCmd = this.syntax[e.subCommand];\n      const endCmd = e.subCommand === 'SubScript' ? '</sub>' : e.subCommand === 'SuperScript' ? '</sup>' : this.syntax[e.subCommand];\n      const startLength = e.subCommand === 'UpperCase' || e.subCommand === 'LowerCase' ? 0 : startCmd.length;\n      const startNo = textArea.value.substr(0, selection.start).lastIndexOf(startCmd);\n      let endNo = textArea.value.substr(selection.end, textArea.value.length).indexOf(endCmd);\n      endNo = endNo + selection.end;\n      const repStartText = this.replaceAt(textArea.value.substr(0, selection.start), startCmd, '', startNo, selection.start);\n      const repEndText = this.replaceAt(textArea.value.substr(selection.end, textArea.value.length), endCmd, '', 0, endNo);\n      textArea.value = repStartText + selection.text + repEndText;\n      this.restore(textArea, start - startLength, end - startLength, e);\n      return;\n    }\n\n    if (selection.text !== '' && !this.isApplied(selection, e.subCommand)) {\n      addedLength = e.subCommand === 'UpperCase' || e.subCommand === 'LowerCase' ? 0 : this.syntax[e.subCommand].length;\n      const repStart = textArea.value.substr(selection.start - this.syntax[e.subCommand].length, this.syntax[e.subCommand].length);\n      let repEnd;\n\n      if (repStart === e.subCommand || selection.start - this.syntax[e.subCommand].length === textArea.value.indexOf(this.syntax[e.subCommand]) && (selection.end === textArea.value.lastIndexOf(this.syntax[e.subCommand]) || selection.end === textArea.value.lastIndexOf('</' + this.syntax[e.subCommand].substring(1, 5)))) {\n        if (e.subCommand === 'SubScript' || e.subCommand === 'SuperScript') {\n          repEnd = textArea.value.substr(selection.end, this.syntax[e.subCommand].length + 1);\n        } else {\n          repEnd = textArea.value.substr(selection.end, this.syntax[e.subCommand].length);\n        }\n\n        const repStartText = this.replaceAt(textArea.value.substr(0, selection.start), repStart, '', selection.start - this.syntax[e.subCommand].length, selection.start);\n        const repEndText = this.replaceAt(textArea.value.substr(selection.end, textArea.value.length), repEnd, '', 0, repEnd.length);\n        textArea.value = repStartText + selection.text + repEndText;\n        this.restore(textArea, start - addedLength, end - addedLength, e);\n      } else {\n        if (e.subCommand === 'SubScript' || e.subCommand === 'SuperScript') {\n          selection.text = this.syntax[e.subCommand] + selection.text + '</' + this.syntax[e.subCommand].substring(1, 5);\n        } else if (e.subCommand === 'UpperCase' || e.subCommand === 'LowerCase') {\n          selection.text = e.subCommand === 'UpperCase' ? selection.text.toUpperCase() : selection.text.toLowerCase();\n        } else {\n          selection.text = this.syntax[e.subCommand] + selection.text + this.syntax[e.subCommand];\n        }\n\n        textArea.value = textArea.value.substr(0, selection.start) + selection.text + textArea.value.substr(selection.end, textArea.value.length);\n        this.restore(textArea, start + addedLength, end + addedLength, e);\n      }\n    } else if (e.subCommand !== 'UpperCase' && e.subCommand !== 'LowerCase') {\n      if (e.subCommand === 'SubScript' || e.subCommand === 'SuperScript') {\n        selection.text = this.textReplace(selection.text, e.subCommand);\n        selection.text = this.syntax[e.subCommand] + selection.text + '</' + this.syntax[e.subCommand].substring(1, 5);\n      } else {\n        selection.text = this.textReplace(selection.text, e.subCommand);\n        selection.text = this.syntax[e.subCommand] + selection.text + this.syntax[e.subCommand];\n      }\n\n      textArea.value = textArea.value.substr(0, selection.start) + selection.text + textArea.value.substr(selection.end, textArea.value.length);\n      addedLength = this.syntax[e.subCommand].length;\n\n      if (selection.start === selection.end) {\n        this.restore(textArea, start + addedLength, end + addedLength, e);\n      } else {\n        this.restore(textArea, start + addedLength, end - addedLength, e);\n      }\n    } else {\n      this.restore(textArea, start, end, e);\n    }\n\n    this.parent.undoRedoManager.saveData();\n  }\n\n  replaceAt(input, search, replace, start, end) {\n    return input.slice(0, start) + input.slice(start, end).replace(search, replace) + input.slice(end);\n  }\n\n  restore(textArea, start, end, event) {\n    this.selection.save(start, end);\n    this.selection.restore(textArea);\n\n    if (event && event.callBack) {\n      event.callBack({\n        requestType: this.currentAction,\n        selectedText: this.selection.getSelectedText(textArea),\n        editorMode: 'Markdown',\n        event: event.event\n      });\n    }\n  }\n\n  textReplace(text, command) {\n    let regx = this.singleCharRegx(this.syntax[command]);\n\n    switch (command) {\n      case 'Bold':\n        regx = this.multiCharRegx(this.syntax[command].substr(0, 1));\n        text = text.replace(regx, '');\n        break;\n\n      case 'Italic':\n        if (!this.isBold(text, this.syntax[command].substr(0, 1))) {\n          text = text.replace(regx, '');\n        } else {\n          const regxB = this.multiCharRegx(this.syntax[command].substr(0, 1));\n          let repText = text;\n          repText = repText.replace(regxB, '$%@').replace(regx, '');\n          const regxTemp = new RegExp('\\\\$%@', 'g');\n          text = repText.replace(regxTemp, this.syntax[command].substr(0, 1) + this.syntax[command].substr(0, 1));\n        }\n\n        break;\n\n      case 'StrikeThrough':\n        text = text.replace(regx, '');\n        break;\n\n      case 'InlineCode':\n        text = text.replace(regx, '');\n        break;\n\n      case 'SubScript':\n        text = text.replace(/<sub>/g, '').replace(/<\\/sub>/g, '');\n        break;\n\n      case 'SuperScript':\n        text = text.replace(/<sup>/g, '').replace(/<\\/sup>/g, '');\n        break;\n    }\n\n    return text;\n  }\n\n  isApplied(line, command) {\n    let regx = this.singleCharRegx(this.syntax[command]);\n\n    switch (command) {\n      case 'SubScript':\n      case 'SuperScript':\n        regx = this.singleCharRegx(this.syntax[command]);\n        return regx.test(line.text);\n\n      case 'Bold':\n      case 'StrikeThrough':\n        regx = this.multiCharRegx(this.syntax[command].substr(0, 1));\n        return regx.test(line.text);\n\n      case 'UpperCase':\n      case 'LowerCase':\n        regx = new RegExp('^[' + this.syntax[command] + ']*$', 'g');\n        return regx.test(line.text);\n\n      case 'Italic':\n        {\n          let regTest;\n          const regxB = this.multiCharRegx(this.syntax[command].substr(0, 1));\n\n          if (regxB.test(line.text)) {\n            let repText = line.text;\n            repText = repText.replace(regxB, '$%#');\n            regTest = regx.test(repText);\n          } else {\n            regTest = regx.test(line.text);\n          }\n\n          return regTest;\n        }\n\n      case 'InlineCode':\n        return regx.test(line.text);\n    }\n  }\n\n}\n/**\n * Default Markdown formats config for adapter\n */\n\n\nconst markdownFormatTags = {\n  'h6': '###### ',\n  'h5': '##### ',\n  'h4': '#### ',\n  'h3': '### ',\n  'h2': '## ',\n  'h1': '# ',\n  'blockquote': '> ',\n  'pre': '```\\n',\n  'p': ''\n};\n/**\n * Default selection formats config for adapter\n */\n\nconst markdownSelectionTags = {\n  'Bold': '**',\n  'Italic': '*',\n  'StrikeThrough': '~~',\n  'InlineCode': '`',\n  'SubScript': '<sub>',\n  'SuperScript': '<sup>',\n  'UpperCase': 'A-Z',\n  'LowerCase': 'a-z'\n};\n/**\n * Default Markdown lists config for adapter\n */\n\nconst markdownListsTags = {\n  'OL': '1. ',\n  'UL': '- '\n};\n/**\n * Default html key config for adapter\n */\n\nconst htmlKeyConfig = {\n  'toolbar-focus': 'alt+f10',\n  'escape': '27',\n  'insert-link': 'ctrl+k',\n  'insert-image': 'ctrl+shift+i',\n  'insert-table': 'ctrl+shift+e',\n  'undo': 'ctrl+z',\n  'redo': 'ctrl+y',\n  'copy': 'ctrl+c',\n  'cut': 'ctrl+x',\n  'paste': 'ctrl+v',\n  'bold': 'ctrl+b',\n  'italic': 'ctrl+i',\n  'underline': 'ctrl+u',\n  'strikethrough': 'ctrl+shift+s',\n  'uppercase': 'ctrl+shift+u',\n  'lowercase': 'ctrl+shift+l',\n  'superscript': 'ctrl+shift+=',\n  'subscript': 'ctrl+=',\n  'indents': 'ctrl+]',\n  'outdents': 'ctrl+[',\n  'html-source': 'ctrl+shift+h',\n  'full-screen': 'ctrl+shift+f',\n  'decrease-fontsize': 'ctrl+shift+<',\n  'increase-fontsize': 'ctrl+shift+>',\n  'justify-center': 'ctrl+e',\n  'justify-full': 'ctrl+j',\n  'justify-left': 'ctrl+l',\n  'justify-right': 'ctrl+r',\n  'clear-format': 'ctrl+shift+r',\n  'ordered-list': 'ctrl+shift+o',\n  'unordered-list': 'ctrl+alt+o',\n  'space': '32',\n  'enter': '13',\n  'tab': 'tab',\n  'delete': '46'\n};\n/**\n * Default  markdown key config for adapter\n */\n\nconst markdownKeyConfig = {\n  'toolbar-focus': 'alt+f10',\n  'escape': '27',\n  'insert-link': 'ctrl+k',\n  'insert-image': 'ctrl+shift+i',\n  'insert-table': 'ctrl+shift+e',\n  'undo': 'ctrl+z',\n  'redo': 'ctrl+y',\n  'copy': 'ctrl+c',\n  'cut': 'ctrl+x',\n  'paste': 'ctrl+v',\n  'bold': 'ctrl+b',\n  'italic': 'ctrl+i',\n  'strikethrough': 'ctrl+shift+s',\n  'uppercase': 'ctrl+shift+u',\n  'lowercase': 'ctrl+shift+l',\n  'superscript': 'ctrl+shift+=',\n  'subscript': 'ctrl+=',\n  'full-screen': 'ctrl+shift+f',\n  'ordered-list': 'ctrl+shift+o',\n  'unordered-list': 'ctrl+alt+o'\n};\n/**\n * PasteCleanup Grouping of similar functionality tags\n */\n\nconst pasteCleanupGroupingTags = {\n  'b': ['strong'],\n  'strong': ['b'],\n  'i': ['emp', 'cite'],\n  'emp': ['i', 'cite'],\n  'cite': ['i', 'emp']\n};\n/**\n * PasteCleanup Grouping of similar functionality tags\n */\n\nconst listConversionFilters = {\n  'first': 'MsoListParagraphCxSpFirst',\n  'middle': 'MsoListParagraphCxSpMiddle',\n  'last': 'MsoListParagraphCxSpLast'\n};\n/**\n * Dom-Node Grouping of self closing tags\n *\n * @hidden\n */\n\nconst selfClosingTags = ['BR', 'IMG'];\n/**\n * `Undo` module is used to handle undo actions.\n */\n\nclass UndoRedoCommands {\n  constructor(parent, options) {\n    this.undoRedoStack = [];\n    this.parent = parent;\n    this.undoRedoSteps = !isNullOrUndefined(options) ? options.undoRedoSteps : 30;\n    this.undoRedoTimer = !isNullOrUndefined(options) ? options.undoRedoTimer : 300;\n    this.selection = this.parent.markdownSelection;\n    this.addEventListener();\n  }\n\n  addEventListener() {\n    const debounceListener = debounce(this.keyUp, this.undoRedoTimer);\n    this.parent.observer.on(KEY_UP_HANDLER, debounceListener, this);\n    this.parent.observer.on(KEY_DOWN_HANDLER, this.keyDown, this);\n    this.parent.observer.on(ACTION, this.onAction, this);\n    this.parent.observer.on(MODEL_CHANGED_PLUGIN, this.onPropertyChanged, this);\n  }\n\n  onPropertyChanged(props) {\n    for (const prop of Object.keys(props.newProp)) {\n      switch (prop) {\n        case 'undoRedoSteps':\n          this.undoRedoSteps = props.newProp.undoRedoSteps;\n          break;\n\n        case 'undoRedoTimer':\n          this.undoRedoTimer = props.newProp.undoRedoTimer;\n          break;\n      }\n    }\n  }\n\n  removeEventListener() {\n    const debounceListener = debounce(this.keyUp, 300);\n    this.parent.observer.off(KEY_UP_HANDLER, debounceListener);\n    this.parent.observer.off(KEY_DOWN_HANDLER, this.keyDown);\n    this.parent.observer.off(ACTION, this.onAction);\n    this.parent.observer.off(MODEL_CHANGED_PLUGIN, this.onPropertyChanged);\n  }\n  /**\n   * Destroys the ToolBar.\n   *\n   * @function destroy\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  destroy() {\n    this.removeEventListener();\n  }\n  /**\n   * onAction method\n   *\n   * @param {IMarkdownSubCommands} e - specifies the sub commands\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  onAction(e) {\n    if (e.subCommand === 'Undo') {\n      this.undo(e);\n    } else {\n      this.redo(e);\n    }\n  }\n\n  keyDown(e) {\n    const event = e.event; // eslint-disable-next-line\n\n    const proxy = this;\n\n    switch (event.action) {\n      case 'undo':\n        event.preventDefault();\n        proxy.undo(e);\n        break;\n\n      case 'redo':\n        event.preventDefault();\n        proxy.redo(e);\n        break;\n    }\n  }\n\n  keyUp(e) {\n    if (e.event.keyCode !== 17 && !e.event.ctrlKey) {\n      this.saveData(e);\n    }\n  }\n  /**\n   * MD collection stored string format.\n   *\n   * @param {KeyboardEvent} e - specifies the key board event\n   * @function saveData\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  saveData(e) {\n    const textArea = this.parent.element;\n    this.selection.save(textArea.selectionStart, textArea.selectionEnd);\n    const start = textArea.selectionStart;\n    const end = textArea.selectionEnd;\n    const textValue = this.parent.element.value;\n    const changEle = {\n      text: textValue,\n      start: start,\n      end: end\n    };\n\n    if (this.undoRedoStack.length >= this.steps) {\n      this.undoRedoStack = this.undoRedoStack.slice(0, this.steps + 1);\n    }\n\n    if (this.undoRedoStack.length > 1 && this.undoRedoStack[this.undoRedoStack.length - 1].start === start && this.undoRedoStack[this.undoRedoStack.length - 1].end === end) {\n      return;\n    }\n\n    this.undoRedoStack.push(changEle);\n    this.steps = this.undoRedoStack.length - 1;\n\n    if (this.steps > this.undoRedoSteps) {\n      this.undoRedoStack.shift();\n      this.steps--;\n    }\n\n    if (e && e.callBack) {\n      e.callBack();\n    }\n  }\n  /**\n   * Undo the editable text.\n   *\n   * @param {IMarkdownSubCommands} e - specifies the sub commands\n   * @function undo\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  undo(e) {\n    if (this.steps > 0) {\n      this.currentAction = 'Undo';\n      const start = this.undoRedoStack[this.steps - 1].start;\n      const end = this.undoRedoStack[this.steps - 1].end;\n      const removedContent = this.undoRedoStack[this.steps - 1].text;\n      this.parent.element.value = removedContent;\n      this.parent.element.focus();\n      this.steps--;\n      this.restore(this.parent.element, start, end, e);\n    }\n  }\n  /**\n   * Redo the editable text.\n   *\n   * @param {IMarkdownSubCommands} e - specifies the sub commands\n   * @function redo\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  redo(e) {\n    if (this.undoRedoStack[this.steps + 1] != null) {\n      this.currentAction = 'Redo';\n      const start = this.undoRedoStack[this.steps + 1].start;\n      const end = this.undoRedoStack[this.steps + 1].end;\n      this.parent.element.value = this.undoRedoStack[this.steps + 1].text;\n      this.parent.element.focus();\n      this.steps++;\n      this.restore(this.parent.element, start, end, e);\n    }\n  }\n\n  restore(textArea, start, end, event) {\n    this.selection.save(start, end);\n    this.selection.restore(textArea);\n\n    if (event && event.callBack) {\n      event.callBack({\n        requestType: this.currentAction,\n        selectedText: this.selection.getSelectedText(textArea),\n        editorMode: 'Markdown',\n        event: event.event\n      });\n    }\n  }\n  /**\n   * getUndoStatus method\n   *\n   * @returns {boolean} - returns the boolean value\n   * @hidden\n   * @deprecated\n   */\n\n\n  getUndoStatus() {\n    const status = {\n      undo: false,\n      redo: false\n    };\n\n    if (this.steps > 0) {\n      status.undo = true;\n    }\n\n    if (this.undoRedoStack[this.steps + 1] != null) {\n      status.redo = true;\n    }\n\n    return status;\n  }\n\n}\n/**\n * Link internal component\n *\n * @hidden\n * @deprecated\n */\n\n\nclass MDLink {\n  /**\n   * Constructor for creating the Formats plugin\n   *\n   * @param {MarkdownParser} parent - specifies the parent element\n   * @hidden\n   * @deprecated\n   */\n  constructor(parent) {\n    this.parent = parent;\n    this.selection = this.parent.markdownSelection;\n    this.addEventListener();\n  }\n\n  addEventListener() {\n    this.parent.observer.on(LINK_COMMAND, this.createLink, this);\n  }\n\n  createLink(e) {\n    const textArea = this.parent.element;\n    textArea.focus();\n    const start = textArea.selectionStart;\n    const end = textArea.selectionEnd;\n    let text = e.subCommand === 'Image' ? this.selection.getSelectedText(textArea) : e.item.text;\n    const startOffset = e.subCommand === 'Image' ? start + 2 : start + 1;\n    const endOffset = e.subCommand === 'Image' ? end + 2 : end + 1;\n    text = e.subCommand === 'Image' ? '![' + text + '](' + e.item.url + ')' : '[' + text + '](' + e.item.url + ')';\n    textArea.value = textArea.value.substr(0, start) + text + textArea.value.substr(end, textArea.value.length);\n    this.parent.markdownSelection.setSelection(textArea, startOffset, endOffset);\n    this.restore(textArea, startOffset, endOffset, e);\n  }\n\n  restore(textArea, start, end, event) {\n    this.selection.save(start, end);\n    this.selection.restore(textArea);\n\n    if (event && event.callBack) {\n      event.callBack({\n        requestType: event.subCommand,\n        selectedText: this.selection.getSelectedText(textArea),\n        editorMode: 'Markdown',\n        event: event.event\n      });\n    }\n  }\n\n}\n/**\n * Link internal component\n *\n * @hidden\n * @deprecated\n */\n\n\nclass MDTable {\n  /**\n   * Constructor for creating the Formats plugin\n   *\n   * @param {IMDTable} options - specifies the options\n   * @hidden\n   * @deprecated\n   */\n  constructor(options) {\n    extend(this, this, options, true);\n    this.selection = this.parent.markdownSelection;\n    this.addEventListener();\n  }\n\n  addEventListener() {\n    this.parent.observer.on(MD_TABLE, this.createTable, this);\n    this.parent.observer.on(KEY_DOWN_HANDLER, this.onKeyDown, this);\n  }\n\n  removeEventListener() {\n    this.parent.observer.off(MD_TABLE, this.createTable);\n    this.parent.observer.off(KEY_DOWN_HANDLER, this.onKeyDown);\n  }\n  /**\n   * markdown destroy method\n   *\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  destroy() {\n    this.removeEventListener();\n  }\n\n  onKeyDown(e) {\n    if (e.event.action === 'insert-table') {\n      e.item = e.value;\n      this.createTable(e);\n    }\n  }\n\n  createTable(e) {\n    this.element = this.parent.element;\n    const start = this.element.selectionStart;\n    const end = this.element.selectionEnd;\n    const textAreaInitial = this.element.value;\n    this.locale = e;\n    this.selection.save(start, end);\n    this.restore(this.element.selectionStart, this.element.selectionEnd, null);\n    this.insertTable(start, end, textAreaInitial, e);\n  }\n\n  getTable() {\n    let table = '';\n    table += this.textNonEmpty();\n    table += this.tableHeader(this.locale);\n    table += this.tableCell(this.locale);\n    return table;\n  }\n\n  tableHeader(e) {\n    let text = '';\n\n    for (let i = 1; i <= 2; i++) {\n      text += '|';\n\n      for (let j = 1; j <= 2; j++) {\n        if (i === 1) {\n          text += e.item.headingText + ' ' + j + '|';\n        } else {\n          text += '---------|';\n        }\n      }\n\n      text += this.insertLine();\n    }\n\n    return text;\n  }\n\n  tableCell(e) {\n    let text = '';\n\n    for (let i = 1; i <= 2; i++) {\n      text += '|';\n\n      for (let j = 1; j <= 2; j++) {\n        text += e.item.colText + ' ' + this.convertToLetters(i) + j + '|';\n      }\n\n      text += this.insertLine();\n    }\n\n    text += this.insertLine();\n    return text;\n  }\n\n  insertLine() {\n    const dummyElement = document.createElement('div');\n    dummyElement.innerHTML = '\\n';\n    return dummyElement.textContent;\n  }\n\n  insertTable(start, end, textAreaInitial, e) {\n    const parentText = this.selection.getSelectedParentPoints(this.element);\n    const lastLineSplit = parentText[parentText.length - 1].text.split(' ', 2);\n    const syntaxArr = this.getFormatTag(); // eslint-disable-next-line\n\n    if (lastLineSplit.length < 2) {\n      this.element.value = this.updateValue(this.getTable());\n      this.makeSelection(textAreaInitial, start, end);\n    } else {\n      if (this.ensureFormatApply(parentText[parentText.length - 1].text)) {\n        this.checkValid(start, end, this.getTable(), textAreaInitial, e, lastLineSplit, parentText, syntaxArr);\n      } else {\n        this.element.value = this.updateValue(this.getTable());\n        this.makeSelection(textAreaInitial, start, end);\n      }\n    }\n\n    this.restore(this.element.selectionStart, this.element.selectionEnd, e);\n  }\n\n  makeSelection(textAreaInitial, start, end) {\n    end = start + (textAreaInitial.length > 0 ? 12 : 10); //end is added 12 or 10 because to make the table heading selected\n\n    start += textAreaInitial.length > 0 ? 3 : 1; // Start is added 3 or 1 because new lines are added when inserting table\n\n    this.selection.setSelection(this.element, start, end);\n  }\n\n  getFormatTag() {\n    const syntaxFormatKey = Object.keys(this.syntaxTag.Formats);\n    const syntaxListKey = Object.keys(this.syntaxTag.List);\n    const syntaxArr = [];\n\n    for (let i = 0; i < syntaxFormatKey.length; i++) {\n      syntaxArr.push(this.syntaxTag.Formats[syntaxFormatKey[i]]);\n    }\n\n    for (let j = 0; j < syntaxListKey.length; j++) {\n      syntaxArr.push(this.syntaxTag.List[syntaxListKey[j]]);\n    }\n\n    return syntaxArr;\n  }\n\n  ensureFormatApply(line) {\n    const formatTags = this.getFormatTag();\n    const formatSplitZero = line.trim().split(' ', 2)[0] + ' ';\n\n    for (let i = 0; i < formatTags.length; i++) {\n      if (formatSplitZero === formatTags[i] || /^[\\d.]+[ ]+$/.test(formatSplitZero)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  ensureStartValid(firstLine, parentText) {\n    const firstLineSplit = parentText[0].text.split(' ', 2);\n\n    for (let i = firstLine + 1; i <= firstLine + firstLineSplit[0].length + 1; i++) {\n      if (this.element.selectionStart === i || this.element.selectionEnd === i) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  ensureEndValid(lastLine, formatSplitLength) {\n    for (let i = lastLine + 1; i <= lastLine + formatSplitLength + 1; i++) {\n      if (this.element.selectionEnd === i) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  updateValueWithFormat(formatSplit, text) {\n    const textApplyFormat = this.element.value.substring(this.element.selectionEnd, this.element.value.length);\n    text += textApplyFormat.replace(textApplyFormat, formatSplit[0] + ' ' + textApplyFormat);\n    return this.element.value.substr(0, this.element.selectionStart) + text;\n  }\n\n  updateValue(text) {\n    return this.element.value.substr(0, this.element.selectionStart) + text + this.element.value.substr(this.element.selectionEnd, this.element.value.length);\n  }\n\n  checkValid(start, end, text, textAreaInitial, // eslint-disable-next-line\n  e, formatSplit, parentText, syntaxArr) {\n    if (this.ensureStartValid(parentText[0].start, parentText) && this.ensureEndValid(parentText[parentText.length - 1].start, formatSplit[0].length)) {\n      if (start === parentText[0].start) {\n        if (start !== end && end !== parentText[parentText.length - 1].end - 1) {\n          this.element.value = this.updateValueWithFormat(formatSplit, text);\n        } else {\n          this.element.value = this.updateValue(text);\n        }\n      } else if (end === parentText[parentText.length - 1].end - 1) {\n        this.element.value = this.updateValue(text);\n      } else {\n        this.element.value = this.updateValueWithFormat(formatSplit, text);\n      }\n\n      this.makeSelection(textAreaInitial, start, end);\n    }\n  }\n\n  convertToLetters(rowNumber) {\n    const baseChar = 'A'.charCodeAt(0);\n    let letters = '';\n\n    do {\n      rowNumber -= 1;\n      letters = String.fromCharCode(baseChar + rowNumber % 26) + letters;\n      rowNumber = rowNumber / 26 >> 0;\n    } while (rowNumber > 0);\n\n    return letters;\n  }\n\n  textNonEmpty() {\n    let emptyText = '';\n\n    if (this.isCursorBased() || this.isSelectionBased()) {\n      if (this.element.value.length > 0) {\n        emptyText += this.insertLine();\n        emptyText += this.insertLine(); // to append two new line when textarea having content.\n      }\n    }\n\n    return emptyText;\n  }\n\n  isCursorBased() {\n    return this.element.selectionStart === this.element.selectionEnd;\n  }\n\n  isSelectionBased() {\n    return this.element.selectionStart !== this.element.selectionEnd;\n  }\n\n  restore(start, end, event) {\n    this.selection.save(start, end);\n    this.selection.restore(this.element);\n\n    if (event && event.callBack) {\n      event.callBack({\n        requestType: event.subCommand,\n        selectedText: this.selection.getSelectedText(this.element),\n        editorMode: 'Markdown',\n        event: event.event\n      });\n    }\n  }\n\n}\n/**\n * Link internal component\n *\n * @hidden\n * @deprecated\n */\n\n\nclass ClearFormat {\n  /**\n   * Constructor for creating the clear format plugin\n   *\n   * @param {MarkdownParser} parent - specifies the parent element\n   * @hidden\n   * @deprecated\n   */\n  constructor(parent) {\n    this.parent = parent;\n    this.selection = this.parent.markdownSelection;\n    this.addEventListener();\n  }\n\n  addEventListener() {\n    this.parent.observer.on(CLEAR_COMMAND, this.clear, this);\n  }\n\n  replaceRegex(data) {\n    /* eslint-disable */\n    return data.replace(/\\*/ig, '\\\\*').replace(/\\&/ig, '\\\\&').replace(/\\-/ig, '\\\\-').replace(/\\^/ig, '\\\\^').replace(/\\$/ig, '\\\\$').replace(/\\./ig, '\\\\.').replace(/\\|/ig, '\\\\|').replace(/\\?/ig, '\\\\?').replace(/\\+/ig, '\\\\+').replace(/\\-/ig, '\\\\-').replace(/\\&/ig, '\\\\&');\n    /* eslint-enable */\n  }\n\n  clearSelectionTags(text) {\n    const data = this.parent.selectionTags;\n    const keys = Object.keys(data);\n\n    for (let num = 0; num < keys.length; num++) {\n      const key = keys[num]; // eslint-disable-next-line\n\n      if (data.hasOwnProperty(key) && data[key] !== '') {\n        const expString = this.replaceRegex(data[key]);\n        let regExp;\n        const startExp = data[key].length;\n        const endExp = data[key] === '<sup>' || data[key] === '<sub>' ? data[key].length + 1 : data[key].length;\n\n        if (data[key] === '<sup>') {\n          // eslint-disable-next-line\n          regExp = new RegExp('<sup>(.*?)<\\/sup>', 'ig');\n        } else if (data[key] === '<sub>') {\n          // eslint-disable-next-line\n          regExp = new RegExp('<sub>(.*?)<\\/sub>', 'ig');\n        } else {\n          regExp = new RegExp(expString + '(.*?)' + expString, 'ig');\n        }\n\n        const val = text.match(regExp);\n\n        for (let index = 0; val && index < val.length && val[index] !== ''; index++) {\n          text = text.replace(val[index], val[index].substr(startExp, val[index].length - endExp - startExp));\n        }\n      }\n    }\n\n    return text;\n  }\n\n  clearFormatTags(text) {\n    const lines = text.split('\\n');\n    return this.clearFormatLines(lines);\n  }\n\n  clearFormatLines(lines) {\n    const tags = [this.parent.formatTags, this.parent.listTags];\n    let str = '';\n\n    for (let len = 0; len < lines.length; len++) {\n      for (let num = 0; num < tags.length; num++) {\n        const data = tags[num];\n        const keys = Object.keys(data);\n\n        for (let index = 0; index < keys.length; index++) {\n          const key = keys[index]; // eslint-disable-next-line\n\n          if (data.hasOwnProperty(key) && data[key] !== '') {\n            if (lines[len].indexOf(data[key]) === 0) {\n              lines[len] = lines[len].replace(data[key], '');\n              lines[len] = this.clearFormatLines([lines[len]]);\n            }\n          }\n        }\n      }\n\n      str = str + lines[len] + (len !== lines.length - 1 ? '\\n' : '');\n    }\n\n    return str;\n  }\n\n  clear(e) {\n    const textArea = this.parent.element;\n    textArea.focus();\n    const start = textArea.selectionStart;\n    const end = textArea.selectionEnd;\n    let text = this.selection.getSelectedText(textArea);\n    text = this.clearSelectionTags(text);\n    text = this.clearFormatTags(text);\n    textArea.value = textArea.value.substr(0, start) + text + textArea.value.substr(end, textArea.value.length);\n    this.parent.markdownSelection.setSelection(textArea, start, start + text.length);\n    this.restore(textArea, start, start + text.length, e);\n  }\n\n  restore(textArea, start, end, event) {\n    this.selection.save(start, end);\n    this.selection.restore(textArea);\n\n    if (event && event.callBack) {\n      event.callBack({\n        requestType: event.subCommand,\n        selectedText: this.selection.getSelectedText(textArea),\n        editorMode: 'Markdown',\n        event: event.event\n      });\n    }\n  }\n\n}\n/**\n * MarkdownParser internal component\n *\n * @hidden\n * @deprecated\n */\n\n\nclass MarkdownParser {\n  /**\n   * Constructor for creating the component\n   *\n   * @param {IMarkdownParserModel} options - specifies the options\n   * @hidden\n   * @deprecated\n   */\n  constructor(options) {\n    this.initialize();\n    extend(this, this, options, true);\n    this.observer = new Observer(this);\n    this.markdownSelection = new MarkdownSelection();\n    this.listObj = new MDLists({\n      parent: this,\n      syntax: this.listTags\n    });\n    this.formatObj = new MDFormats({\n      parent: this,\n      syntax: this.formatTags\n    });\n    this.undoRedoManager = new UndoRedoCommands(this, options.options);\n    this.mdSelectionFormats = new MDSelectionFormats({\n      parent: this,\n      syntax: this.selectionTags\n    });\n    this.linkObj = new MDLink(this);\n    this.tableObj = new MDTable({\n      parent: this,\n      syntaxTag: {\n        Formats: this.formatTags,\n        List: this.listTags\n      }\n    });\n    this.clearObj = new ClearFormat(this);\n    this.wireEvents();\n  }\n\n  initialize() {\n    this.formatTags = markdownFormatTags;\n    this.listTags = markdownListsTags;\n    this.selectionTags = markdownSelectionTags;\n  }\n\n  wireEvents() {\n    this.observer.on(KEY_DOWN, this.editorKeyDown, this);\n    this.observer.on(KEY_UP, this.editorKeyUp, this);\n    this.observer.on(MODEL_CHANGED, this.onPropertyChanged, this);\n  }\n\n  onPropertyChanged(props) {\n    this.observer.notify(MODEL_CHANGED_PLUGIN, props);\n  }\n\n  editorKeyDown(e) {\n    this.observer.notify(KEY_DOWN_HANDLER, e);\n  }\n\n  editorKeyUp(e) {\n    this.observer.notify(KEY_UP_HANDLER, e);\n  }\n  /* eslint-disable */\n\n  /**\n   * markdown execCommand method\n   *\n   * @param {MarkdownExecCommand} command - specifies the command\n   * @param {T} - specifies the value\n   * @param {Event} event - specifies the event\n   * @param {Function} callBack - specifies the call back function\n   * @param {string} text - specifies the string value\n   * @param {T} exeValue - specifies the value\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n  /* eslint-enable */\n\n\n  execCommand(command, value, event, callBack, text, exeValue) {\n    switch (command.toLocaleLowerCase()) {\n      case 'lists':\n        this.observer.notify(LISTS_COMMAND, {\n          subCommand: value,\n          event: event,\n          callBack: callBack\n        });\n        break;\n\n      case 'formats':\n        this.observer.notify(FORMAT_TYPE, {\n          subCommand: value,\n          event: event,\n          callBack: callBack\n        });\n        break;\n\n      case 'actions':\n        this.observer.notify(ACTION, {\n          subCommand: value,\n          event: event,\n          callBack: callBack\n        });\n        break;\n\n      case 'style':\n      case 'effects':\n      case 'casing':\n        this.observer.notify(selectionCommand, {\n          subCommand: value,\n          event: event,\n          callBack: callBack\n        });\n        break;\n\n      case 'links':\n      case 'images':\n        this.observer.notify(LINK_COMMAND, {\n          subCommand: value,\n          event: event,\n          callBack: callBack,\n          item: exeValue\n        });\n        break;\n\n      case 'table':\n        switch (value.toString().toLocaleLowerCase()) {\n          case 'createtable':\n            this.observer.notify(MD_TABLE, {\n              subCommand: value,\n              item: exeValue,\n              event: event,\n              callBack: callBack\n            });\n            break;\n        }\n\n        break;\n\n      case 'clear':\n        this.observer.notify(CLEAR_COMMAND, {\n          subCommand: value,\n          event: event,\n          callBack: callBack\n        });\n        break;\n    }\n  }\n\n}\n/**\n * Markdown adapter\n *\n * @hidden\n * @deprecated\n */\n\n\nclass MarkdownFormatter extends Formatter {\n  constructor(options) {\n    super();\n    this.initialize();\n    extend(this, this, options, true);\n\n    if (options && this.element) {\n      this.updateFormatter(this.element, document, options.options);\n    }\n  }\n\n  initialize() {\n    this.keyConfig = markdownKeyConfig;\n    this.formatTags = markdownFormatTags;\n    this.listTags = markdownListsTags;\n    this.selectionTags = markdownSelectionTags;\n  }\n  /**\n   * Update the formatter of RichTextEditor\n   *\n   * @param  {Element} editElement - specifies the edit element.\n   * @param  {Document} doc - specifies the document.\n   * @param {number} options - specifies the options\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  updateFormatter(editElement, doc, options) {\n    if (editElement) {\n      this.editorManager = new MarkdownParser({\n        element: editElement,\n        formatTags: this.formatTags,\n        listTags: this.listTags,\n        selectionTags: this.selectionTags,\n        options: options\n      });\n    }\n  }\n\n}\n/**\n * Markdown module is used to render Rich Text Editor as Markdown editor content\n *\n * @hidden\n * @deprecated\n */\n\n\nclass MarkdownRender {\n  /**\n   * Constructor for content renderer module\n   *\n   * @param {IRichTextEditor} parent - specifies the parent.\n   */\n  constructor(parent) {\n    this.parent = parent;\n  }\n  /**\n   * The function is used to render Rich Text Editor content div\n   *\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  renderPanel() {\n    const rteObj = this.parent;\n    const div = this.parent.createElement('div', {\n      id: this.parent.getID() + '_view',\n      className: 'e-rte-content'\n    });\n    this.editableElement = this.parent.createElement('textarea', {\n      className: 'e-content',\n      id: this.parent.getID() + '_editable-content'\n    });\n    div.appendChild(this.editableElement);\n    this.setPanel(div);\n    rteObj.element.appendChild(div);\n  }\n  /**\n   * Get the content div element of RichTextEditor\n   *\n   * @returns {Element} - specifies the element\n   * @hidden\n   * @deprecated\n   */\n\n\n  getPanel() {\n    return this.contentPanel;\n  }\n  /**\n   * Get the editable element of RichTextEditor\n   *\n   * @returns {Element} - specifies the element\n   * @hidden\n   * @deprecated\n   */\n\n\n  getEditPanel() {\n    return this.editableElement;\n  }\n  /**\n   * Returns the text content as string.\n   *\n   * @returns {string} - specifies the string values.\n   */\n\n\n  getText() {\n    return this.getEditPanel().value;\n  }\n  /**\n   * Set the content div element of RichTextEditor\n   *\n   * @param  {Element} panel - specifies the element.\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  setPanel(panel) {\n    this.contentPanel = panel;\n  }\n  /**\n   * Get the document of RichTextEditor\n   *\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  getDocument() {\n    return this.getEditPanel().ownerDocument;\n  }\n\n}\n/**\n * `MarkdownEditor` module is used to markdown editor\n */\n\n\nclass MarkdownEditor {\n  constructor(parent, serviceLocator) {\n    this.parent = parent;\n    this.locator = serviceLocator;\n    this.renderFactory = this.locator.getService('rendererFactory');\n    this.addEventListener();\n  }\n  /**\n   * Destroys the Markdown.\n   *\n   * @function destroy\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  destroy() {\n    this.removeEventListener();\n  }\n\n  addEventListener() {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.saveSelection = new MarkdownSelection();\n    this.parent.on(initialLoad, this.instantiateRenderer, this);\n    this.parent.on(initialEnd, this.render, this);\n    this.parent.on(modelChanged, this.onPropertyChanged, this);\n    this.parent.on(markdownToolbarClick, this.onToolbarClick, this);\n    this.parent.on(destroy, this.destroy, this);\n    this.parent.on(selectAll$1, this.selectAll, this);\n    this.parent.on(getSelectedHtml, this.getSelectedHtml, this);\n    this.parent.on(selectionSave, this.onSelectionSave, this);\n    this.parent.on(selectionRestore, this.onSelectionRestore, this);\n    this.parent.on(readOnlyMode, this.updateReadOnly, this);\n  }\n\n  updateReadOnly() {\n    if (this.parent.readonly) {\n      this.parent.contentModule.getEditPanel().setAttribute('readonly', 'readonly');\n      addClass([this.parent.element], CLS_RTE_READONLY);\n    } else {\n      this.parent.contentModule.getEditPanel().removeAttribute('readonly');\n      removeClass([this.parent.element], CLS_RTE_READONLY);\n    }\n  }\n\n  onSelectionSave() {\n    const textArea = this.parent.contentModule.getEditPanel();\n    this.saveSelection.save(textArea.selectionStart, textArea.selectionEnd);\n  } // eslint-disable-next-line\n\n\n  onSelectionRestore(e) {\n    this.contentRenderer.getEditPanel().focus();\n    const textArea = this.parent.contentModule.getEditPanel();\n    this.saveSelection.restore(textArea);\n  }\n\n  onToolbarClick(args) {\n    const item = args.item;\n    const textArea = this.parent.contentModule.getEditPanel();\n    textArea.focus();\n    const startOffset = textArea.selectionStart;\n    const endOffset = textArea.selectionEnd;\n    const text = textArea.value.substring(startOffset, endOffset);\n\n    switch (item.subCommand) {\n      case 'Maximize':\n        this.parent.notify(enableFullScreen, {\n          args: args\n        });\n        break;\n\n      case 'Minimize':\n        this.parent.notify(disableFullScreen, {\n          args: args\n        });\n        break;\n\n      case 'CreateLink':\n        this.parent.notify(insertLink, {\n          member: 'link',\n          args: args,\n          text: text,\n          module: 'Markdown'\n        });\n        break;\n\n      case 'Image':\n        this.parent.notify(insertImage, {\n          member: 'image',\n          args: args,\n          text: text,\n          module: 'Markdown'\n        });\n        break;\n\n      case 'CreateTable':\n        {\n          const tableConstant = {\n            'headingText': this.parent.localeObj.getConstant('TableHeadingText'),\n            'colText': this.parent.localeObj.getConstant('TableColText')\n          };\n          this.parent.formatter.process(this.parent, args, args.originalEvent, tableConstant);\n          break;\n        }\n\n      default:\n        this.parent.formatter.process(this.parent, args, args.originalEvent, null);\n        break;\n    }\n  }\n\n  instantiateRenderer() {\n    this.renderFactory.addRenderer(RenderType.Content, new MarkdownRender(this.parent));\n  }\n\n  removeEventListener() {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.off(initialEnd, this.render);\n    this.parent.off(modelChanged, this.onPropertyChanged);\n    this.parent.off(destroy, this.destroy);\n    this.parent.off(markdownToolbarClick, this.onToolbarClick);\n    this.parent.off(initialLoad, this.instantiateRenderer);\n    this.parent.off(selectAll$1, this.selectAll);\n    this.parent.off(getSelectedHtml, this.getSelectedHtml);\n    this.parent.off(selectionSave, this.onSelectionSave);\n    this.parent.off(selectionRestore, this.onSelectionRestore);\n    this.parent.off(readOnlyMode, this.updateReadOnly);\n  }\n\n  render() {\n    this.contentRenderer = this.renderFactory.getRenderer(RenderType.Content);\n    const editElement = this.contentRenderer.getEditPanel();\n    const option = {\n      undoRedoSteps: this.parent.undoRedoSteps,\n      undoRedoTimer: this.parent.undoRedoTimer\n    };\n\n    if (isNullOrUndefined(this.parent.formatter)) {\n      this.parent.formatter = new MarkdownFormatter({\n        element: editElement,\n        options: option\n      });\n    } else {\n      this.parent.formatter.updateFormatter(editElement, this.contentRenderer.getDocument(), option);\n    }\n\n    if (this.parent.toolbarSettings.enable) {\n      this.toolbarUpdate = new MarkdownToolbarStatus(this.parent);\n    }\n\n    this.parent.notify(bindOnEnd, {});\n  }\n  /**\n   * Called internally if any of the property value changed.\n   *\n   * @param {RichTextEditorModel} e - specifies the editor model\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  onPropertyChanged(e) {\n    // On property code change here\n    if (!isNullOrUndefined(e.newProp.formatter)) {\n      const editElement = this.contentRenderer.getEditPanel();\n      const option = {\n        undoRedoSteps: this.parent.undoRedoSteps,\n        undoRedoTimer: this.parent.undoRedoTimer\n      };\n      this.parent.formatter.updateFormatter(editElement, this.contentRenderer.getDocument(), option);\n    }\n  }\n  /**\n   * For internal use only - Get the module name.\n   *\n   * @returns {void}\n   */\n\n\n  getModuleName() {\n    return 'markdownEditor';\n  }\n  /**\n   * For selecting all content in RTE\n   *\n   * @returns {void}\n   * @private\n   */\n\n\n  selectAll() {\n    this.parent.formatter.editorManager.markdownSelection.setSelection(this.parent.contentModule.getEditPanel(), 0, this.parent.contentModule.getEditPanel().value.length);\n  }\n  /**\n   * For get a selected text in RTE\n   *\n   * @param {NotifyArgs} e - specifies the arguments.\n   * @returns {void}\n   * @private\n   */\n\n\n  getSelectedHtml(e) {\n    e.callBack(this.parent.formatter.editorManager.markdownSelection.getSelectedText(this.parent.contentModule.getEditPanel()));\n  }\n\n}\n/**\n * Constant values for EditorManager\n */\n\n/**\n * Image plugin events\n *\n * @hidden\n */\n\n\nconst IMAGE = 'INSERT-IMAGE';\nconst TABLE = 'INSERT-TABLE';\nconst LINK = 'INSERT-LINK';\nconst INSERT_ROW = 'INSERT-ROW';\nconst INSERT_COLUMN = 'INSERT-COLUMN';\nconst DELETEROW = 'DELETE-ROW';\nconst DELETECOLUMN = 'DELETE-COLUMN';\nconst REMOVETABLE = 'REMOVE-TABLE';\nconst TABLEHEADER = 'TABLE-HEADER';\nconst TABLE_VERTICAL_ALIGN = 'TABLE_VERTICAL_ALIGN';\nconst TABLE_MERGE = 'TABLE_MERGE';\nconst TABLE_VERTICAL_SPLIT = 'TABLE_VERTICAL_SPLIT';\nconst TABLE_HORIZONTAL_SPLIT = 'TABLE_HORIZONTAL_SPLIT';\nconst TABLE_MOVE = 'TABLE_MOVE';\n/**\n * Alignments plugin events\n *\n * @hidden\n */\n\nconst ALIGNMENT_TYPE = 'alignment-type';\n/**\n * Indents plugin events\n *\n * @hidden\n */\n\nconst INDENT_TYPE = 'indent-type';\n/**\n * Constant tag names\n *\n * @hidden\n */\n\nconst DEFAULT_TAG = 'p';\n/**\n * @hidden\n */\n\nconst BLOCK_TAGS = ['address', 'article', 'aside', 'audio', 'blockquote', 'canvas', 'details', 'dd', 'div', 'dl', 'dt', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'hgroup', 'hr', 'li', 'main', 'nav', 'noscript', 'ol', 'output', 'p', 'pre', 'section', 'table', 'tbody', 'td', 'tfoot', 'th', 'thead', 'tr', 'ul', 'video', 'body'];\n/**\n * @hidden\n */\n\nconst IGNORE_BLOCK_TAGS = ['td', 'th'];\n/**\n * @hidden\n */\n\nconst TABLE_BLOCK_TAGS = ['table', 'tbody', 'td', 'tfoot', 'th', 'thead', 'tr'];\n/**\n * Selection plugin events\n *\n * @hidden\n */\n\nconst SELECTION_TYPE = 'selection-type';\n/**\n * Insert HTML plugin events\n *\n * @hidden\n */\n\nconst INSERTHTML_TYPE = 'inserthtml-type';\n/**\n * Insert Text plugin events\n *\n * @hidden\n */\n\nconst INSERT_TEXT_TYPE = 'insert-text-type';\n/**\n * Clear Format HTML plugin events\n *\n * @hidden\n */\n\nconst CLEAR_TYPE = 'clear-type';\n/**\n * `Selection` module is used to handle RTE Selections.\n */\n\nclass NodeSelection {\n  constructor() {\n    this.startNodeName = [];\n    this.endNodeName = [];\n  }\n\n  saveInstance(range, body) {\n    this.range = range.cloneRange();\n    this.rootNode = this.documentFromRange(range);\n    this.body = body;\n    this.startContainer = this.getNodeArray(range.startContainer, true);\n    this.endContainer = this.getNodeArray(range.endContainer, false);\n    this.startOffset = range.startOffset;\n    this.endOffset = range.endOffset;\n    this.html = this.body.innerHTML;\n    return this;\n  }\n\n  documentFromRange(range) {\n    return 9 === range.startContainer.nodeType ? range.startContainer : range.startContainer.ownerDocument;\n  }\n\n  getRange(docElement) {\n    const select$$1 = this.get(docElement);\n    const range = select$$1 && select$$1.rangeCount > 0 ? select$$1.getRangeAt(select$$1.rangeCount - 1) : docElement.createRange();\n    return range.startContainer !== docElement || range.endContainer !== docElement || range.startOffset || range.endOffset || (range.setStart(docElement.body, 0), range.collapse(!0)), range;\n  }\n  /**\n   * get method\n   *\n   * @param {Document} docElement - specifies the get function\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  get(docElement) {\n    return docElement.defaultView.getSelection();\n  }\n  /**\n   * save method\n   *\n   * @param {Range} range - range value.\n   * @param {Document} docElement - specifies the document.\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  save(range, docElement) {\n    range = range ? range.cloneRange() : this.getRange(docElement);\n    return this.saveInstance(range, docElement.body);\n  }\n  /**\n   * getIndex method\n   *\n   * @param {Node} node - specifies the node value.\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  getIndex(node) {\n    let index;\n    let num = 0;\n    node = !node.previousSibling && node.tagName === 'BR' ? node : node.previousSibling;\n\n    if (node) {\n      for (let type = node.nodeType; node; null) {\n        index = node.nodeType;\n        num++; //eslint-disable-next-line\n\n        type = index;\n        node = node.previousSibling;\n      }\n    }\n\n    return num;\n  }\n\n  isChildNode(nodeCollection, parentNode) {\n    for (let index = 0; index < parentNode.childNodes.length; index++) {\n      if (nodeCollection.indexOf(parentNode.childNodes[index]) > -1) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  getNode(startNode, endNode, nodeCollection) {\n    if (endNode === startNode && (startNode.nodeType === 3 || !startNode.firstChild || nodeCollection.indexOf(startNode.firstChild) !== -1 || this.isChildNode(nodeCollection, startNode))) {\n      return null;\n    }\n\n    if (nodeCollection.indexOf(startNode.firstChild) === -1 && startNode.firstChild && !this.isChildNode(nodeCollection, startNode)) {\n      return startNode.firstChild;\n    }\n\n    if (startNode.nextSibling) {\n      return startNode.nextSibling;\n    }\n\n    if (!startNode.parentNode) {\n      return null;\n    } else {\n      return startNode.parentNode;\n    }\n  }\n  /**\n   * getNodeCollection method\n   *\n   * @param {Range} range -specifies the range.\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  getNodeCollection(range) {\n    let startNode = range.startContainer.childNodes[range.startOffset] || range.startContainer;\n    const endNode = range.endContainer.childNodes[range.endOffset > 0 ? range.endOffset - 1 : range.endOffset] || range.endContainer;\n\n    if ((startNode === endNode || startNode.nodeName === 'BR' && startNode === range.endContainer.childNodes[range.endOffset]) && startNode.childNodes.length === 0) {\n      return [startNode];\n    }\n\n    if (range.startOffset === range.endOffset && range.startOffset !== 0 && range.startContainer.nodeName === 'PRE') {\n      return [startNode.nodeName === 'BR' || startNode.nodeName === '#text' ? startNode : startNode.childNodes[0]];\n    }\n\n    const nodeCollection = [];\n\n    do {\n      if (nodeCollection.indexOf(startNode) === -1) {\n        nodeCollection.push(startNode);\n      }\n\n      startNode = this.getNode(startNode, endNode, nodeCollection);\n    } while (startNode);\n\n    return nodeCollection;\n  }\n  /**\n   * getParentNodeCollection method\n   *\n   * @param {Range} range - specifies the range value.\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  getParentNodeCollection(range) {\n    return this.getParentNodes(this.getNodeCollection(range), range);\n  }\n  /**\n   * getParentNodes method\n   *\n   * @param {Node[]} nodeCollection - specifies the collection of nodes.\n   * @param {Range} range - specifies the range values.\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  getParentNodes(nodeCollection, range) {\n    nodeCollection = nodeCollection.reverse();\n\n    for (let index = 0; index < nodeCollection.length; index++) {\n      if (nodeCollection.indexOf(nodeCollection[index].parentNode) !== -1 || nodeCollection[index].nodeType === 3 && range.startContainer !== range.endContainer && range.startContainer.parentNode !== range.endContainer.parentNode) {\n        nodeCollection.splice(index, 1);\n        index--;\n      } else if (nodeCollection[index].nodeType === 3) {\n        nodeCollection[index] = nodeCollection[index].parentNode;\n      }\n    }\n\n    return nodeCollection;\n  }\n  /**\n   * getSelectionNodeCollection method\n   *\n   * @param {Range} range - specifies the range value.\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  getSelectionNodeCollection(range) {\n    return this.getSelectionNodes(this.getNodeCollection(range));\n  }\n  /**\n   * getSelectionNodeCollection along with BR node method\n   *\n   * @param {Range} range - specifies the range value.\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  getSelectionNodeCollectionBr(range) {\n    return this.getSelectionNodesBr(this.getNodeCollection(range));\n  }\n  /**\n   * getParentNodes method\n   *\n   * @param {Node[]} nodeCollection - specifies the collection of nodes.\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  getSelectionNodes(nodeCollection) {\n    nodeCollection = nodeCollection.reverse();\n    const regEx = new RegExp(String.fromCharCode(8203), 'g');\n\n    for (let index = 0; index < nodeCollection.length; index++) {\n      if (nodeCollection[index].nodeType !== 3 || nodeCollection[index].textContent.trim() === '' || nodeCollection[index].textContent.length === 1 && nodeCollection[index].textContent.match(regEx)) {\n        nodeCollection.splice(index, 1);\n        index--;\n      }\n    }\n\n    return nodeCollection.reverse();\n  }\n  /**\n   * Get selection text nodes with br method.\n   *\n   * @param {Node[]} nodeCollection - specifies the collection of nodes.\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  getSelectionNodesBr(nodeCollection) {\n    nodeCollection = nodeCollection.reverse();\n    const regEx = new RegExp(String.fromCharCode(8203), 'g');\n\n    for (let index = 0; index < nodeCollection.length; index++) {\n      if (nodeCollection[index].nodeName !== 'BR' && (nodeCollection[index].nodeType !== 3 || nodeCollection[index].textContent.trim() === '' || nodeCollection[index].textContent.length === 1 && nodeCollection[index].textContent.match(regEx))) {\n        nodeCollection.splice(index, 1);\n        index--;\n      }\n    }\n\n    return nodeCollection.reverse();\n  }\n  /**\n   * getInsertNodeCollection method\n   *\n   * @param {Range} range - specifies the range value.\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  getInsertNodeCollection(range) {\n    return this.getInsertNodes(this.getNodeCollection(range));\n  }\n  /**\n   * getInsertNodes method\n   *\n   * @param {Node[]} nodeCollection - specifies the collection of nodes.\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  getInsertNodes(nodeCollection) {\n    nodeCollection = nodeCollection.reverse();\n\n    for (let index = 0; index < nodeCollection.length; index++) {\n      if (nodeCollection[index].childNodes.length !== 0 && nodeCollection[index].nodeType !== 3 || nodeCollection[index].nodeType === 3 && nodeCollection[index].textContent === '') {\n        nodeCollection.splice(index, 1);\n        index--;\n      }\n    }\n\n    return nodeCollection.reverse();\n  }\n  /**\n   * getNodeArray method\n   *\n   * @param {Node} node - specifies the node content.\n   * @param {boolean} isStart - specifies the boolean value.\n   * @param {Document} root - specifies the root document.\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  getNodeArray(node, isStart, root) {\n    const array = []; // eslint-disable-next-line\n\n    isStart ? this.startNodeName = [] : this.endNodeName = [];\n\n    for (; node !== (root ? root : this.rootNode); null) {\n      if (isNullOrUndefined(node)) {\n        break;\n      } // eslint-disable-next-line\n\n\n      isStart ? this.startNodeName.push(node.nodeName.toLowerCase()) : this.endNodeName.push(node.nodeName.toLowerCase());\n      array.push(this.getIndex(node));\n      node = node.parentNode;\n    }\n\n    return array;\n  }\n\n  setRangePoint(range, isvalid, num, size) {\n    let node = this.rootNode;\n    let index = num.length;\n    const constant = size;\n\n    for (; index--; null) {\n      node = node && node.childNodes[num[index]];\n    }\n\n    if (node && constant >= 0 && node.nodeName !== 'html') {\n      range[isvalid ? 'setStart' : 'setEnd'](node, constant);\n    }\n\n    return range;\n  }\n  /**\n   * restore method\n   *\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  restore() {\n    let range = this.range.cloneRange();\n    range = this.setRangePoint(range, true, this.startContainer, this.startOffset);\n    range = this.setRangePoint(range, false, this.endContainer, this.endOffset);\n    this.selectRange(this.rootNode, range);\n    return range;\n  }\n\n  selectRange(docElement, range) {\n    this.setRange(docElement, range);\n    this.save(range, docElement);\n  }\n  /**\n   * setRange method\n   *\n   * @param {Document} docElement - specifies the document.\n   * @param {Range} range - specifies the range.\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  setRange(docElement, range) {\n    const selection = this.get(docElement);\n    selection.removeAllRanges();\n    selection.addRange(range);\n  }\n  /**\n   * setSelectionText method\n   *\n   * @param {Document} docElement - specifies the documrent\n   * @param {Node} startNode - specifies the starting node.\n   * @param {Node} endNode - specifies the the end node.\n   * @param {number} startIndex - specifies the starting index.\n   * @param {number} endIndex - specifies the end index.\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  setSelectionText(docElement, startNode, endNode, startIndex, endIndex) {\n    const range = docElement.createRange();\n    range.setStart(startNode, startIndex);\n    range.setEnd(endNode, endIndex);\n    this.setRange(docElement, range);\n  }\n  /**\n   * setSelectionContents method\n   *\n   * @param {Document} docElement - specifies the document.\n   * @param {Node} element - specifies the node.\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  setSelectionContents(docElement, element) {\n    const range = docElement.createRange();\n    range.selectNode(element);\n    this.setRange(docElement, range);\n  }\n  /**\n   * setSelectionNode method\n   *\n   * @param {Document} docElement - specifies the document.\n   * @param {Node} element - specifies the node.\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  setSelectionNode(docElement, element) {\n    const range = docElement.createRange();\n    range.selectNodeContents(element);\n    this.setRange(docElement, range);\n  }\n  /**\n   * getSelectedNodes method\n   *\n   * @param {Document} docElement - specifies the document.\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  getSelectedNodes(docElement) {\n    return this.getNodeCollection(this.getRange(docElement));\n  }\n  /**\n   * Clear method\n   *\n   * @param {Document} docElement - specifies the document.\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  Clear(docElement) {\n    this.get(docElement).removeAllRanges();\n  }\n  /**\n   * insertParentNode method\n   *\n   * @param {Document} docElement - specifies the document.\n   * @param {Node} newNode - specicfies the new node.\n   * @param {Range} range - specifies the range.\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  insertParentNode(docElement, newNode, range) {\n    range.surroundContents(newNode);\n    this.selectRange(docElement, range);\n  }\n  /**\n   * setCursorPoint method\n   *\n   * @param {Document} docElement - specifies the document.\n   * @param {Element} element - specifies the element.\n   * @param {number} point - specifies the point.\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  setCursorPoint(docElement, element, point) {\n    const range = docElement.createRange();\n    const selection = docElement.defaultView.getSelection();\n    range.setStart(element, point);\n    range.collapse(true);\n    selection.removeAllRanges();\n    selection.addRange(range);\n  }\n\n}\n/**\n * `Selection` module is used to handle RTE Selections.\n */\n\n\nconst markerClassName = {\n  startSelection: 'e-editor-select-start',\n  endSelection: 'e-editor-select-end'\n};\n/**\n * DOMNode internal plugin\n *\n * @hidden\n * @deprecated\n */\n\nclass DOMNode {\n  /**\n   * Constructor for creating the DOMNode plugin\n   *\n   * @param {Element} parent - specifies the parent element\n   * @param {Document} currentDocument - specifies the current document.\n   * @hidden\n   * @deprecated\n   */\n  constructor(parent, currentDocument) {\n    this.parent = parent;\n    this.nodeSelection = new NodeSelection();\n    this.currentDocument = currentDocument;\n  }\n  /**\n   * contents method\n   *\n   * @param {Element} element - specifies the element.\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  contents(element) {\n    return element && 'IFRAME' !== element.tagName ? Array.prototype.slice.call(element.childNodes || []) : [];\n  }\n  /**\n   * isBlockNode method\n   *\n   * @param {Element} element - specifies the node element.\n   * @returns {boolean} - sepcifies the boolean value\n   * @hidden\n   * @deprecated\n   */\n\n\n  isBlockNode(element) {\n    return !!element && element.nodeType === Node.ELEMENT_NODE && BLOCK_TAGS.indexOf(element.tagName.toLowerCase()) >= 0;\n  }\n  /**\n   * isLink method\n   *\n   * @param {Element} element - specifies the element\n   * @returns {boolean} -  specifies the boolean value\n   * @hidden\n   * @deprecated\n   */\n\n\n  isLink(element) {\n    return !!element && element.nodeType === Node.ELEMENT_NODE && 'a' === element.tagName.toLowerCase();\n  }\n  /**\n   * blockParentNode method\n   *\n   * @param {Element} element - specifies the element\n   * @returns {Element} - returns the element value\n   * @hidden\n   * @deprecated\n   */\n\n\n  blockParentNode(element) {\n    for (; element && element.parentNode !== this.parent && (!element.parentNode || !this.hasClass(element.parentNode, 'e-node-inner')); null) {\n      element = element.parentNode;\n\n      if (this.isBlockNode(element)) {\n        return element;\n      }\n    }\n\n    return element;\n  }\n  /**\n   * rawAttributes method\n   *\n   * @param {Element} element - specifies the element\n   * @returns {string} - returns the string value\n   * @hidden\n   * @deprecated\n   */\n\n\n  rawAttributes(element) {\n    const rawAttr = {};\n    const attributes$$1 = element.attributes;\n\n    if (attributes$$1.length > 0) {\n      for (let d = 0; d < attributes$$1.length; d++) {\n        const e = attributes$$1[d];\n        rawAttr[e.nodeName] = e.value;\n      }\n    }\n\n    return rawAttr;\n  }\n  /**\n   * attributes method\n   *\n   * @param {Element} element - sepcifies the element.\n   * @returns {string} - returns the string value.\n   * @hidden\n   * @deprecated\n   */\n\n\n  attributes(element) {\n    if (!element) {\n      return '';\n    }\n\n    let attr = '';\n    const rawAttr = this.rawAttributes(element);\n    const orderRawAttr = Object.keys(rawAttr).sort();\n\n    for (let e = 0; e < orderRawAttr.length; e++) {\n      const attrKey = orderRawAttr[e];\n      let attrValue = rawAttr[attrKey];\n      /* eslint-disable */\n\n      if (attrValue.indexOf(\"'\") < 0 && attrValue.indexOf('\"') >= 0) {\n        attr += ' ' + attrKey + \"='\" + attrValue + \"'\";\n      } else if (attrValue.indexOf('\"') >= 0 && attrValue.indexOf(\"'\") >= 0) {\n        /* eslint-enable */\n        attrValue = attrValue.replace(/\"/g, '&quot;');\n        attr += ' ' + attrKey + '=\"' + attrValue + '\"';\n      } else {\n        attr += ' ' + attrKey + '=\"' + attrValue + '\"';\n      }\n    }\n\n    return attr;\n  }\n  /**\n   * clearAttributes method\n   *\n   * @param {Element} element - specifies the element\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  clearAttributes(element) {\n    for (let attr = element.attributes, c = attr.length - 1; c >= 0; c--) {\n      const key = attr[c];\n      element.removeAttribute(key.nodeName);\n    }\n  }\n  /**\n   * openTagString method\n   *\n   * @param {Element} element - specifies the element.\n   * @returns {string} - returns the string\n   * @hidden\n   * @deprecated\n   */\n\n\n  openTagString(element) {\n    return '<' + element.tagName.toLowerCase() + this.attributes(element) + '>';\n  }\n  /**\n   * closeTagString method\n   *\n   * @param {Element} element - specifies the element\n   * @returns {string} - returns the string value\n   * @hidden\n   * @deprecated\n   */\n\n\n  closeTagString(element) {\n    return '</' + element.tagName.toLowerCase() + '>';\n  }\n  /**\n   * createTagString method\n   *\n   * @param {string} tagName - specifies the tag name\n   * @param {Element} relativeElement - specifies the relative element\n   * @param {string} innerHTML - specifies the string value\n   * @returns {string} - returns the string value.\n   * @hidden\n   * @deprecated\n   */\n\n\n  createTagString(tagName, relativeElement, innerHTML) {\n    return '<' + tagName.toLowerCase() + this.attributes(relativeElement) + '>' + innerHTML + '</' + tagName.toLowerCase() + '>';\n  }\n  /**\n   * isList method\n   *\n   * @param {Element} element - specifes the element.\n   * @returns {boolean} - returns the boolean value\n   * @hidden\n   * @deprecated\n   */\n\n\n  isList(element) {\n    return !!element && ['UL', 'OL'].indexOf(element.tagName) >= 0;\n  }\n  /**\n   * isElement method\n   *\n   * @param {Element} element - specifes the element.\n   * @returns {boolean} - returns the boolean value\n   * @hidden\n   * @deprecated\n   */\n\n\n  isElement(element) {\n    return element === this.parent;\n  }\n  /**\n   * isEditable method\n   *\n   * @param {Element} element - specifes the element.\n   * @returns {boolean} - returns the boolean value\n   * @hidden\n   * @deprecated\n   */\n\n\n  isEditable(element) {\n    return (!element.getAttribute || element.getAttribute('contenteditable') === 'true') && ['STYLE', 'SCRIPT'].indexOf(element.tagName) < 0;\n  }\n  /**\n   * hasClass method\n   *\n   * @param {Element} element - specifes the element.\n   * @param {string} className - specifies the class name value\n   * @returns {boolean} - returns the boolean value\n   * @hidden\n   * @deprecated\n   */\n\n\n  hasClass(element, className) {\n    return element && element.classList && element.classList.contains(className);\n  }\n  /**\n   * replaceWith method\n   *\n   * @param {Element} element - specifes the element.\n   * @param {string} value - specifies the string value\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  replaceWith(element, value) {\n    const parentNode = element.parentNode;\n    parentNode.insertBefore(this.parseHTMLFragment(value), element);\n    detach(element);\n  }\n  /**\n   * parseHTMLFragment method\n   *\n   * @param {string} value - specifies the string value\n   * @returns {Element} - returns the element\n   * @hidden\n   * @deprecated\n   */\n\n\n  parseHTMLFragment(value) {\n    /* eslint-disable */\n    let temp = createElement('template');\n    temp.innerHTML = value;\n\n    if (temp.content instanceof DocumentFragment) {\n      return temp.content;\n    } else {\n      return document.createRange().createContextualFragment(value);\n    }\n    /* eslint-enable */\n\n  }\n  /**\n   * wrap method\n   *\n   * @param {Element} element - specifies the element\n   * @param {Element} wrapper - specifies the element.\n   * @returns {Element} - returns the element\n   * @hidden\n   * @deprecated\n   */\n\n\n  wrap(element, wrapper) {\n    element.parentNode.insertBefore(wrapper, element);\n    wrapper = element.previousSibling;\n    wrapper.appendChild(element);\n    return wrapper;\n  }\n  /**\n   * insertAfter method\n   *\n   * @param {Element} newNode - specifies the new node element\n   * @param {Element} referenceNode - specifies the referenece node\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  insertAfter(newNode, referenceNode) {\n    referenceNode.parentNode.insertBefore(newNode, referenceNode.nextSibling);\n  }\n  /**\n   * wrapInner method\n   *\n   * @param {Element} parent - specifies the parent element.\n   * @param {Element} wrapper - specifies the wrapper element.\n   * @returns {Element} - returns the element\n   * @hidden\n   * @deprecated\n   */\n\n\n  wrapInner(parent, wrapper) {\n    parent.appendChild(wrapper);\n    wrapper = parent.querySelector('.e-rte-wrap-inner');\n    wrapper.classList.remove('e-rte-wrap-inner');\n\n    if (wrapper.classList.length === 0) {\n      wrapper.removeAttribute('class');\n    }\n\n    while (parent.firstChild !== wrapper) {\n      wrapper.appendChild(parent.firstChild);\n    }\n\n    return wrapper;\n  }\n  /**\n   * unWrap method\n   *\n   * @param {Element} element - specifies the element.\n   * @returns {Element} - returns the element.\n   * @hidden\n   * @deprecated\n   */\n\n\n  unWrap(element) {\n    const parent = element.parentNode;\n    let unWrapNode = [];\n\n    while (element.firstChild) {\n      unWrapNode.push(element.firstChild);\n      parent.insertBefore(element.firstChild, element);\n    }\n\n    unWrapNode = unWrapNode.length > 0 ? unWrapNode : [element.parentNode];\n    parent.removeChild(element);\n    return unWrapNode;\n  }\n  /**\n   * getSelectedNode method\n   *\n   * @param {Element} element - specifies the element\n   * @param {number} index - specifies the index value.\n   * @returns {Element} - returns the element\n   * @hidden\n   * @deprecated\n   */\n\n\n  getSelectedNode(element, index) {\n    if (element.nodeType === Node.ELEMENT_NODE && element.childNodes.length > 0 && element.childNodes[index - 1] && element.childNodes[index - 1].nodeType === Node.ELEMENT_NODE && (element.childNodes[index - 1].classList.contains(markerClassName.startSelection) || element.childNodes[index - 1].classList.contains(markerClassName.endSelection))) {\n      element = element.childNodes[index - 1];\n    } else if (element.nodeType === Node.ELEMENT_NODE && element.childNodes.length > 0 && element.childNodes[index]) {\n      element = element.childNodes[index];\n    }\n\n    if (element.nodeType === Node.TEXT_NODE) {\n      element = element.parentNode;\n    }\n\n    return element;\n  }\n  /**\n   * nodeFinds method\n   *\n   * @param {Element} element - specifies the element.\n   * @param {Element[]} elements - specifies the array of elements\n   * @returns {Element[]} - returnts the array elements\n   * @hidden\n   * @deprecated\n   */\n\n\n  nodeFinds(element, elements) {\n    const existNodes = [];\n\n    for (let i = 0; i < elements.length; i++) {\n      if (element.contains(elements[i]) && element !== elements[i]) {\n        existNodes.push(elements[i]);\n      }\n    }\n\n    return existNodes;\n  }\n  /**\n   * isEditorArea method\n   *\n   * @returns {boolean} - returns the boolean value\n   * @hidden\n   * @deprecated\n   */\n\n\n  isEditorArea() {\n    const range = this.getRangePoint(0);\n    let element;\n\n    for (element = range.commonAncestorContainer; element && !this.isElement(element); null) {\n      element = element.parentNode;\n    }\n\n    return !!this.isElement(element);\n  }\n  /**\n   * getRangePoint method\n   *\n   * @param {number} point - specifies the number value.\n   * @returns {Range} - returns the range.\n   * @hidden\n   * @deprecated\n   */\n\n\n  getRangePoint(point) {\n    const selection = this.getSelection();\n    let ranges = [];\n\n    if (selection && selection.getRangeAt && selection.rangeCount) {\n      ranges = [];\n\n      for (let f = 0; f < selection.rangeCount; f++) {\n        ranges.push(selection.getRangeAt(f));\n      }\n    } else {\n      ranges = [this.currentDocument.createRange()];\n    }\n\n    return 'undefined' !== typeof point ? ranges[point] : ranges;\n  }\n\n  getSelection() {\n    return this.nodeSelection.get(this.currentDocument);\n  }\n  /**\n   * getPreviousNode method\n   *\n   * @param {Element} element - specifies the element\n   * @returns {Element} - returns the element\n   * @hidden\n   * @deprecated\n   */\n\n\n  getPreviousNode(element) {\n    element = element.previousElementSibling;\n\n    for (; element && element.textContent === '\\n'; null) {\n      element = element.previousElementSibling;\n    }\n\n    return element;\n  }\n  /**\n   * encode method\n   *\n   * @param {string} value - specifies the string value\n   * @returns {string} - specifies the string value\n   * @hidden\n   * @deprecated\n   */\n\n\n  encode(value) {\n    const divNode = document.createElement('div');\n    divNode.innerText = value; // eslint-disable-next-line\n\n    return divNode.innerHTML.replace(/<br\\s*[\\/]?>/gi, '\\n');\n  }\n  /**\n   * saveMarker method\n   *\n   * @param {NodeSelection} save - specifies the node selection,\n   * @param {string} action - specifies the action  value.\n   * @returns {NodeSelection} - returns the value\n   * @hidden\n   * @deprecated\n   */\n\n\n  saveMarker(save, action) {\n    let start = this.parent.querySelector('.' + markerClassName.startSelection);\n    let end = this.parent.querySelector('.' + markerClassName.endSelection);\n    let startTextNode;\n    let endTextNode;\n\n    if (start.textContent === '' && isNullOrUndefined(end) && action !== 'tab') {\n      if (start.childNodes.length === 1 && start.childNodes[0].nodeName === 'BR') {\n        start.innerHTML = '&#65279;&#65279;<br>';\n      } else {\n        start.innerHTML = '&#65279;&#65279;';\n      }\n    }\n\n    if (this.hasClass(start, markerClassName.startSelection) && start.classList.length > 1) {\n      const replace = this.createTagString(DEFAULT_TAG, start, this.encode(start.textContent));\n      this.replaceWith(start, replace);\n      start = this.parent.querySelector('.' + markerClassName.startSelection);\n      start.classList.remove(markerClassName.startSelection);\n      startTextNode = start.childNodes[0];\n    } else {\n      startTextNode = this.unWrap(start)[0];\n    }\n\n    if (this.hasClass(end, markerClassName.endSelection) && end.classList.length > 1) {\n      const replace = this.createTagString(DEFAULT_TAG, end, this.encode(end.textContent));\n      this.replaceWith(end, replace);\n      end = this.parent.querySelector('.' + markerClassName.endSelection);\n      end.classList.remove(markerClassName.endSelection);\n      endTextNode = end.childNodes[0];\n    } else {\n      endTextNode = end ? this.unWrap(end)[0] : startTextNode;\n    }\n\n    save.startContainer = save.getNodeArray(startTextNode, true);\n    save.endContainer = save.getNodeArray(endTextNode, false);\n    return save;\n  }\n\n  marker(className, textContent) {\n    return '<span class=\"' + className + '\">' + textContent + '</span>';\n  }\n  /**\n   * setMarker method\n   *\n   * @param {NodeSelection} save - specifies the node selection.\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  setMarker(save) {\n    const range = save.range;\n    const startChildNodes = range.startContainer.childNodes;\n    const isTableStart = startChildNodes.length > 1 && startChildNodes[0].nodeName === 'TABLE';\n    let start = (isTableStart ? getLastTextNode(startChildNodes[range.startOffset + 1]) : startChildNodes[range.startOffset > 0 ? range.startOffset - 1 : range.startOffset]) || range.startContainer;\n    let end = range.endContainer.childNodes[range.endOffset > 0 ? range.endOffset - 1 : range.endOffset] || range.endContainer;\n\n    if (start.nodeType === Node.ELEMENT_NODE && end.nodeType === Node.ELEMENT_NODE && (start.contains(end) || end.contains(start))) {\n      const existNode = start.contains(end) ? start : end;\n      const isElement = existNode.nodeType !== Node.TEXT_NODE;\n\n      if (isElement) {\n        const nodes = [];\n        const textNodes = [];\n\n        for (let node = existNode; existNode.contains(node); null) {\n          if (nodes.indexOf(node) < 0 && node.childNodes && node.childNodes.length) {\n            nodes.push(node);\n            node = node.childNodes[0];\n          } else if (node.nextSibling) {\n            node = node.nextSibling;\n          } else if (node.parentNode) {\n            node = node.parentNode;\n            nodes.push(node);\n          }\n\n          if (textNodes.indexOf(node) < 0 && (node.nodeType === Node.TEXT_NODE || IGNORE_BLOCK_TAGS.indexOf(node.parentNode.tagName.toLocaleLowerCase()) >= 0 && (node.tagName === 'BR' || node.tagName === 'IMG'))) {\n            textNodes.push(node);\n          }\n        }\n\n        if (textNodes.length) {\n          start = start.contains(end) ? textNodes[0] : start;\n          end = textNodes[textNodes.length - 1];\n        }\n      }\n    }\n\n    if (start !== end) {\n      if (start.nodeType !== Node.TEXT_NODE && (start.tagName === 'BR' && IGNORE_BLOCK_TAGS.indexOf(start.parentNode.tagName.toLocaleLowerCase()) >= 0 || start.tagName === 'IMG')) {\n        this.replaceWith(start, this.marker(markerClassName.startSelection, this.encode(start.textContent)));\n        const markerStart = range.startContainer.querySelector('.' + markerClassName.startSelection);\n        markerStart.appendChild(start);\n      } else {\n        this.replaceWith(start, this.marker(markerClassName.startSelection, this.encode(start.textContent)));\n      }\n\n      if (end.nodeType !== Node.TEXT_NODE && end.tagName === 'BR' && IGNORE_BLOCK_TAGS.indexOf(end.parentNode.tagName.toLocaleLowerCase()) >= 0) {\n        this.replaceWith(end, this.marker(markerClassName.endSelection, this.encode(end.textContent)));\n        const markerEnd = range.endContainer.querySelector('.' + markerClassName.endSelection);\n        markerEnd.appendChild(end);\n      } else {\n        this.ensureSelfClosingTag(end, markerClassName.endSelection, range);\n      }\n    } else {\n      this.ensureSelfClosingTag(start, markerClassName.startSelection, range);\n    }\n  }\n  /**\n   * ensureSelfClosingTag method\n   *\n   * @param {Element} start - specifies the element.\n   * @param {string} className - specifes the class name string value\n   * @param {Range} range - specifies the range value\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  ensureSelfClosingTag(start, className, range) {\n    let isTable = false;\n\n    if (start.nodeType === 3) {\n      this.replaceWith(start, this.marker(className, this.encode(start.textContent)));\n    } else if (start.tagName === 'BR') {\n      this.replaceWith(start, this.marker(className, this.encode(start.textContent)));\n      const markerStart = range.startContainer.querySelector('.' + className);\n      markerStart.appendChild(start);\n    } else {\n      if (start.tagName === 'IMG') {\n        const parNode = document.createElement('p');\n        start.parentElement.insertBefore(parNode, start);\n        parNode.appendChild(start);\n        start = parNode.children[0];\n      }\n\n      if (start.tagName === 'TABLE') {\n        isTable = true;\n\n        if (start.textContent === '') {\n          const tdNode = start.querySelectorAll('td');\n          start = tdNode[tdNode.length - 1];\n          start = !isNullOrUndefined(start.childNodes[0]) ? start.childNodes[0] : start;\n        } else {\n          let lastNode = start.lastChild;\n\n          while (lastNode.nodeType !== 3 && lastNode.nodeName !== '#text' && lastNode.nodeName !== 'BR') {\n            lastNode = lastNode.lastChild;\n          }\n\n          start = lastNode;\n        }\n      }\n\n      for (let i = 0; i < selfClosingTags.length; i++) {\n        start = start.tagName === selfClosingTags[i] && !isTable ? start.parentNode : start;\n      }\n\n      if (start.nodeType === 3 && start.nodeName === '#text') {\n        this.replaceWith(start, this.marker(className, this.encode(start.textContent)));\n      } else if (start.nodeName === 'BR') {\n        this.replaceWith(start, this.marker(markerClassName.endSelection, this.encode(start.textContent)));\n        const markerEnd = range.endContainer.querySelector('.' + markerClassName.endSelection);\n        markerEnd.appendChild(start);\n      } else {\n        const marker = this.marker(className, '');\n        append([this.parseHTMLFragment(marker)], start);\n      }\n    }\n  }\n  /**\n   * createTempNode method\n   *\n   * @param {Element} element - specifies the element.\n   * @returns {Element} - returns the element\n   * @hidden\n   * @deprecated\n   */\n\n\n  createTempNode(element) {\n    const textContent = element.textContent;\n\n    if (element.tagName === 'BR') {\n      const wrapper = '<' + DEFAULT_TAG + '></' + DEFAULT_TAG + '>';\n      const node = element.parentNode;\n\n      if (IGNORE_BLOCK_TAGS.indexOf(node.tagName.toLocaleLowerCase()) >= 0) {\n        element = this.wrap(element, this.parseHTMLFragment(wrapper));\n      }\n    } else if (element.nodeType !== Node.TEXT_NODE && (element.classList.contains(markerClassName.startSelection) || element.classList.contains(markerClassName.endSelection)) || textContent.replace(/\\n/g, '').replace(/(^ *)|( *$)/g, '').length > 0 || textContent.length && textContent.indexOf('\\n') < 0) {\n      const wrapper = '<' + DEFAULT_TAG + '></' + DEFAULT_TAG + '>';\n      const target = element;\n      element = this.wrap(element, this.parseHTMLFragment(wrapper));\n      const ignoreBr = target.nodeType === Node.ELEMENT_NODE && target.firstChild && target.firstChild.nodeName === 'BR' && (target.classList.contains(markerClassName.startSelection) || target.classList.contains(markerClassName.endSelection));\n\n      if (!ignoreBr && element.nextElementSibling && element.nextElementSibling.tagName === 'BR') {\n        element.appendChild(element.nextElementSibling);\n      }\n    }\n\n    return element;\n  }\n  /**\n   * getImageTagInSelection method\n   *\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  getImageTagInSelection() {\n    const selection = this.getSelection();\n\n    if (this.isEditorArea() && selection.rangeCount) {\n      return selection.focusNode.querySelectorAll('img');\n    }\n\n    return null;\n  }\n  /**\n   * blockNodes method\n   *\n   * @returns {Node[]} - returns the node array values\n   * @hidden\n   * @deprecated\n   */\n\n\n  blockNodes() {\n    const collectionNodes = [];\n    const selection = this.getSelection();\n\n    if (this.isEditorArea() && selection.rangeCount) {\n      const ranges = this.getRangePoint();\n\n      for (let j = 0; j < ranges.length; j++) {\n        let parentNode;\n        const range = ranges[j];\n        const startNode = this.getSelectedNode(range.startContainer, range.startOffset);\n        const endNode = this.getSelectedNode(range.endContainer, range.endOffset);\n\n        if (this.isBlockNode(startNode) && collectionNodes.indexOf(startNode) < 0) {\n          collectionNodes.push(startNode);\n        }\n\n        parentNode = this.blockParentNode(startNode);\n\n        if (parentNode && collectionNodes.indexOf(parentNode) < 0) {\n          if (IGNORE_BLOCK_TAGS.indexOf(parentNode.tagName.toLocaleLowerCase()) >= 0 && (startNode.tagName === 'BR' || startNode.nodeType === Node.TEXT_NODE || startNode.classList.contains(markerClassName.startSelection) || startNode.classList.contains(markerClassName.endSelection))) {\n            const tempNode = startNode.previousSibling && startNode.previousSibling.nodeType === Node.TEXT_NODE ? startNode.previousSibling : startNode;\n\n            if (!startNode.nextSibling && !startNode.previousSibling && startNode.tagName === 'BR') {\n              collectionNodes.push(tempNode);\n            } else {\n              collectionNodes.push(this.createTempNode(tempNode));\n            }\n          } else {\n            collectionNodes.push(parentNode);\n          }\n        }\n\n        const nodes = [];\n\n        for (let node = startNode; node !== endNode && node !== this.parent; null) {\n          if (nodes.indexOf(node) < 0 && node.childNodes && node.childNodes.length) {\n            nodes.push(node);\n            node = node.childNodes[0];\n          } else if (node && node.nodeType !== 8 && (node.tagName === 'BR' || node.nodeType === Node.TEXT_NODE && node.textContent.trim() !== '' || node.nodeType !== Node.TEXT_NODE && (node.classList.contains(markerClassName.startSelection) || node.classList.contains(markerClassName.endSelection))) && IGNORE_BLOCK_TAGS.indexOf(node.parentNode.tagName.toLocaleLowerCase()) >= 0) {\n            node = this.createTempNode(node);\n          } else if (node.nextSibling && node.nextSibling.nodeType !== 8 && (node.nextSibling.tagName === 'BR' || node.nextSibling.nodeType === Node.TEXT_NODE || node.nextSibling.classList.contains(markerClassName.startSelection) || node.nextSibling.classList.contains(markerClassName.endSelection)) && IGNORE_BLOCK_TAGS.indexOf(node.nextSibling.parentNode.tagName.toLocaleLowerCase()) >= 0) {\n            node = this.createTempNode(node.nextSibling);\n          } else if (node.nextSibling) {\n            node = node.nextSibling;\n          } else if (node.parentNode) {\n            node = node.parentNode;\n            nodes.push(node);\n          }\n\n          if (collectionNodes.indexOf(node) < 0 && node.nodeType === Node.ELEMENT_NODE && IGNORE_BLOCK_TAGS.indexOf(node.parentNode.tagName.toLocaleLowerCase()) >= 0 && (node.classList.contains(markerClassName.startSelection) || node.classList.contains(markerClassName.endSelection))) {\n            collectionNodes.push(this.createTempNode(node));\n          }\n\n          if (this.isBlockNode(node) && this.ignoreTableTag(node) && nodes.indexOf(node) < 0 && collectionNodes.indexOf(node) < 0 && (node !== endNode || range.endOffset > 0)) {\n            collectionNodes.push(node);\n          }\n\n          if (node.nodeName === 'IMG' && node.parentElement.contentEditable === 'true') {\n            collectionNodes.push(node);\n          }\n        }\n\n        parentNode = this.blockParentNode(endNode);\n\n        if (parentNode && this.ignoreTableTag(parentNode) && collectionNodes.indexOf(parentNode) < 0 && !isNullOrUndefined(parentNode.previousElementSibling) && parentNode.previousElementSibling.tagName !== 'IMG') {\n          collectionNodes.push(parentNode);\n        }\n      }\n    }\n\n    for (let i = collectionNodes.length - 1; i > 0; i--) {\n      const nodes = this.nodeFinds(collectionNodes[i], collectionNodes);\n\n      if (nodes.length) {\n        const listNodes = collectionNodes[i].querySelectorAll('ul, ol');\n\n        if (collectionNodes[i].tagName === 'LI' && listNodes.length > 0) {\n          continue;\n        } else {\n          collectionNodes.splice(i, 1);\n        }\n      }\n    }\n\n    return collectionNodes;\n  }\n\n  ignoreTableTag(element) {\n    return !(TABLE_BLOCK_TAGS.indexOf(element.tagName.toLocaleLowerCase()) >= 0);\n  }\n\n}\n/**\n * Lists internal component\n *\n * @hidden\n * @deprecated\n */\n\n\nclass Lists {\n  /**\n   * Constructor for creating the Lists plugin\n   *\n   * @param {EditorManager} parent - specifies the parent element\n   * @hidden\n   * @deprecated\n   */\n  constructor(parent) {\n    this.parent = parent;\n    this.domNode = this.parent.domNode;\n    this.addEventListener();\n  }\n\n  addEventListener() {\n    this.parent.observer.on(LIST_TYPE, this.applyListsHandler, this);\n    this.parent.observer.on(KEY_DOWN_HANDLER, this.keyDownHandler, this);\n    this.parent.observer.on(SPACE_ACTION, this.spaceKeyAction, this);\n  }\n\n  testList(elem) {\n    const olListRegex = [/^[\\d]+[.]+$/, /^(?=[MDCLXVI])M*(C[MD]|D?C{0,3})(X[CL]|L?X{0,3})(I[XV]|V?I{0,3})[.]$/gi, /^[a-zA-Z][.]+$/];\n    const elementStart = !isNullOrUndefined(elem) ? elem.innerText.trim().split('.')[0] + '.' : null;\n\n    if (!isNullOrUndefined(elementStart)) {\n      for (let i = 0; i < olListRegex.length; i++) {\n        if (olListRegex[i].test(elementStart)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  testCurrentList(range) {\n    const olListStartRegex = [/^[1]+[.]+$/, /^[i]+[.]+$/, /^[a]+[.]+$/];\n\n    if (!isNullOrUndefined(range.startContainer.textContent.slice(0, range.startOffset))) {\n      for (let i = 0; i < olListStartRegex.length; i++) {\n        if (olListStartRegex[i].test(range.startContainer.textContent.replace(/\\u200B/g, '').slice(0, range.startOffset).trim())) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  spaceList(e) {\n    const range = this.parent.nodeSelection.getRange(this.parent.currentDocument);\n    this.saveSelection = this.parent.nodeSelection.save(range, this.parent.currentDocument);\n    const startNode = this.parent.domNode.getSelectedNode(range.startContainer, range.startOffset); // eslint-disable-next-line\n\n    const endNode = this.parent.domNode.getSelectedNode(range.endContainer, range.endOffset);\n    const preElement = startNode.previousElementSibling;\n    const nextElement = startNode.nextElementSibling;\n    const preElemULStart = !isNullOrUndefined(preElement) ? preElement.innerText.trim().substring(0, 1) : null;\n    const nextElemULStart = !isNullOrUndefined(nextElement) ? nextElement.innerText.trim().substring(0, 1) : null;\n    const startElementOLTest = this.testCurrentList(range);\n    const preElementOLTest = this.testList(preElement);\n    const nextElementOLTest = this.testList(nextElement);\n\n    if (!preElementOLTest && !nextElementOLTest && preElemULStart !== '*' && nextElemULStart !== '*') {\n      if (startElementOLTest) {\n        range.startContainer.textContent = range.startContainer.textContent.slice(range.startOffset, range.startContainer.textContent.length);\n        this.applyListsHandler({\n          subCommand: 'OL',\n          callBack: e.callBack\n        });\n        e.event.preventDefault();\n      } else if (range.startContainer.textContent.replace(/\\u200B/g, '').slice(0, range.startOffset).trim() === '*' || range.startContainer.textContent.replace(/\\u200B/g, '').slice(0, range.startOffset).trim() === '-') {\n        range.startContainer.textContent = range.startContainer.textContent.slice(range.startOffset, range.startContainer.textContent.length);\n        this.applyListsHandler({\n          subCommand: 'UL',\n          callBack: e.callBack\n        });\n        e.event.preventDefault();\n      }\n    }\n  }\n\n  enterList(e) {\n    const range = this.parent.nodeSelection.getRange(this.parent.currentDocument);\n    const startNode = range.startContainer.nodeName === 'LI' ? range.startContainer : range.startContainer.parentElement.closest('LI');\n    const endNode = range.endContainer.nodeName === 'LI' ? range.endContainer : range.endContainer.parentElement.closest('LI');\n\n    if (!isNullOrUndefined(startNode) && !isNullOrUndefined(endNode) && startNode === endNode && startNode.tagName === 'LI' && startNode.textContent.trim() === '') {\n      if (startNode.textContent.charCodeAt(0) === 65279) {\n        startNode.textContent = '';\n      }\n\n      const startNodeParent = startNode.parentElement;\n\n      if (isNullOrUndefined(startNodeParent.parentElement.closest('UL')) && isNullOrUndefined(startNodeParent.parentElement.closest('OL'))) {\n        if (!isNullOrUndefined(startNode.nextElementSibling)) {\n          const nearBlockNode = this.parent.domNode.blockParentNode(startNode);\n          this.parent.nodeCutter.GetSpliceNode(range, nearBlockNode);\n        }\n\n        let insertTag;\n\n        if (e.enterAction === 'DIV') {\n          insertTag = createElement('div');\n          insertTag.innerHTML = '<br>';\n        } else if (e.enterAction === 'P') {\n          insertTag = createElement('p');\n          insertTag.innerHTML = '<br>';\n        } else {\n          insertTag = createElement('br');\n        }\n\n        this.parent.domNode.insertAfter(insertTag, startNodeParent);\n        e.event.preventDefault();\n        this.parent.nodeSelection.setCursorPoint(this.parent.currentDocument, insertTag, 0);\n\n        if (startNodeParent.textContent === '') {\n          detach(startNodeParent);\n        } else {\n          detach(startNode);\n        }\n      }\n    }\n  } // eslint-disable-next-line\n\n\n  backspaceList(e) {\n    const range = this.parent.nodeSelection.getRange(this.parent.currentDocument);\n    let startNode = this.parent.domNode.getSelectedNode(range.startContainer, range.startOffset);\n    let endNode = this.parent.domNode.getSelectedNode(range.endContainer, range.endOffset);\n    startNode = startNode.nodeName === 'BR' ? startNode.parentElement : startNode;\n    endNode = endNode.nodeName === 'BR' ? endNode.parentElement : endNode;\n\n    if (startNode === endNode && !isNullOrUndefined(closest(startNode, 'li')) && (startNode.textContent.trim() === '' && startNode.textContent.charCodeAt(0) === 65279 || startNode.textContent.length === 1 && startNode.textContent.charCodeAt(0) === 8203)) {\n      startNode.textContent = '';\n    }\n\n    if (startNode === endNode && startNode.textContent === '') {\n      if (startNode.parentElement.tagName === 'LI' && endNode.parentElement.tagName === 'LI') {\n        detach(startNode);\n      } else if (startNode.closest('ul') || startNode.closest('ol')) {\n        const parentList = !isNullOrUndefined(startNode.closest('ul')) ? startNode.closest('ul') : startNode.closest('ol');\n\n        if (parentList.firstElementChild === startNode && !isNullOrUndefined(parentList.children[1]) && (parentList.children[1].tagName === 'OL' || parentList.children[1].tagName === 'UL')) {\n          if (parentList.tagName === parentList.children[1].tagName) {\n            while (parentList.children[1].lastChild) {\n              this.parent.domNode.insertAfter(parentList.children[1].lastChild, parentList.children[1]);\n            }\n\n            detach(parentList.children[1]);\n          } else {\n            parentList.parentElement.insertBefore(parentList.children[1], parentList);\n          }\n        }\n      }\n    } else if (!isNullOrUndefined(startNode.firstChild) && startNode.firstChild.nodeName === 'BR' && !isNullOrUndefined(startNode.childNodes[1]) && (startNode.childNodes[1].nodeName === 'UL' || startNode.childNodes[1].nodeName === 'OL')) {\n      const parentList = !isNullOrUndefined(startNode.closest('ul')) ? startNode.closest('ul') : startNode.closest('ol');\n\n      if (parentList.tagName === startNode.childNodes[1].nodeName) {\n        while (startNode.childNodes[1].lastChild) {\n          this.parent.domNode.insertAfter(startNode.children[1].lastChild, startNode);\n        }\n\n        detach(startNode.childNodes[1]);\n      } else {\n        parentList.parentElement.insertBefore(startNode.children[1], parentList);\n      }\n    }\n  }\n\n  keyDownHandler(e) {\n    if (e.event.which === 13) {\n      this.enterList(e);\n    }\n\n    if (e.event.which === 32) {\n      this.spaceList(e);\n    }\n\n    if (e.event.which === 8) {\n      this.backspaceList(e);\n    }\n\n    if (e.event.which === 46 && e.event.action === 'delete') {\n      const range = this.parent.nodeSelection.getRange(this.parent.currentDocument);\n      const commonAncestor = range.commonAncestorContainer;\n      const startEle = range.startContainer;\n      const endEle = range.endContainer;\n      const startNode = startEle.nodeType === 3 ? startEle.parentElement : startEle;\n      const endNode = endEle.nodeType === 3 ? endEle.parentElement : endEle;\n\n      if ((commonAncestor.nodeName === 'UL' || commonAncestor.nodeName === 'OL') && startNode !== endNode && (!isNullOrUndefined(closest(startNode, 'ul')) || !isNullOrUndefined(closest(startNode, 'ol'))) && (!isNullOrUndefined(closest(endNode, 'ul')) || !isNullOrUndefined(closest(endNode, 'ol'))) && commonAncestor.lastElementChild === closest(endNode, 'li') && !range.collapsed) {\n        detach(commonAncestor);\n      }\n    }\n\n    if (e.event.which === 9) {\n      const range = this.parent.nodeSelection.getRange(this.parent.currentDocument);\n\n      if (!(e.event.action && e.event.action === 'indent')) {\n        this.saveSelection = this.parent.nodeSelection.save(range, this.parent.currentDocument);\n      }\n\n      let blockNodes;\n      const startOffset = range.startOffset;\n      const endOffset = range.endOffset;\n      const startNode = this.parent.domNode.getSelectedNode(range.startContainer, range.startOffset);\n      const endNode = this.parent.domNode.getSelectedNode(range.endContainer, range.endOffset);\n\n      if (startNode === endNode && (startNode.nodeName === 'BR' || startNode.nodeName === '#text') && IGNORE_BLOCK_TAGS.indexOf(startNode.parentNode.tagName.toLocaleLowerCase()) >= 0) {\n        return;\n      } else {\n        if (!(e.event.action && e.event.action === 'indent')) {\n          this.domNode.setMarker(this.saveSelection);\n        }\n\n        blockNodes = this.domNode.blockNodes();\n      }\n\n      const nodes = [];\n      let isNested = true;\n\n      for (let i = 0; i < blockNodes.length; i++) {\n        if (blockNodes[i].parentNode.tagName === 'LI') {\n          nodes.push(blockNodes[i].parentNode);\n        } else if (blockNodes[i].tagName === 'LI' && blockNodes[i].childNodes[0].tagName !== 'P' && blockNodes[i].childNodes[0].tagName !== 'OL' && blockNodes[i].childNodes[0].tagName !== 'UL') {\n          nodes.push(blockNodes[i]);\n        }\n      }\n\n      if (nodes.length > 1 || nodes.length && (startOffset === 0 && endOffset === 0 || e.ignoreDefault)) {\n        e.event.preventDefault();\n        e.event.stopPropagation();\n        this.currentAction = this.getAction(nodes[0]);\n\n        if (e.event.shiftKey) {\n          this.revertList(nodes);\n          this.revertClean();\n        } else {\n          isNested = this.nestedList(nodes);\n        }\n\n        if (isNested) {\n          this.cleanNode();\n          this.parent.editableElement.focus();\n        }\n\n        if (!(e.event.action && e.event.action === 'indent')) {\n          this.saveSelection = this.domNode.saveMarker(this.saveSelection);\n          this.saveSelection.restore();\n\n          if (e.callBack) {\n            e.callBack({\n              requestType: this.currentAction,\n              editorMode: 'HTML',\n              range: this.parent.nodeSelection.getRange(this.parent.currentDocument),\n              elements: this.parent.domNode.blockNodes(),\n              event: e.event\n            });\n          }\n        }\n      } else {\n        if (!(e.event.action && e.event.action === 'indent')) {\n          if (e.event && e.event.shiftKey && e.event.key === 'Tab') {\n            e.event.action = 'tab';\n          }\n\n          this.saveSelection = this.domNode.saveMarker(this.saveSelection, e.event.action);\n          this.saveSelection.restore();\n        }\n      }\n    } else {\n      switch (e.event.action) {\n        case 'ordered-list':\n          this.applyListsHandler({\n            subCommand: 'OL',\n            callBack: e.callBack\n          });\n          e.event.preventDefault();\n          break;\n\n        case 'unordered-list':\n          this.applyListsHandler({\n            subCommand: 'UL',\n            callBack: e.callBack\n          });\n          e.event.preventDefault();\n          break;\n      }\n    }\n  }\n\n  spaceKeyAction(e) {\n    if (e.event.which === 32) {\n      this.spaceList(e);\n    }\n  }\n\n  getAction(element) {\n    const parentNode = element.parentNode;\n    return parentNode.nodeName === 'OL' ? 'OL' : 'UL';\n  }\n\n  revertClean() {\n    const collectionNodes = this.parent.editableElement.querySelectorAll('ul, ol');\n\n    for (let i = 0; i < collectionNodes.length; i++) {\n      const listNodes = collectionNodes[i].querySelectorAll('ul, ol');\n\n      if (listNodes.length > 0) {\n        for (let j = 0; j < listNodes.length; j++) {\n          const prevSibling = listNodes[j].previousSibling;\n\n          if (prevSibling && prevSibling.tagName === 'LI') {\n            prevSibling.appendChild(listNodes[j]);\n          }\n        }\n      }\n    }\n  }\n\n  noPreviousElement(elements) {\n    let firstNode;\n    let firstNodeOL;\n    const siblingListOL = elements.querySelectorAll('ol, ul');\n    const siblingListLI = elements.querySelectorAll('li');\n    const siblingListLIFirst = this.domNode.contents(siblingListLI[0])[0];\n\n    if (siblingListLI.length > 0 && (siblingListLIFirst.nodeName === 'OL' || siblingListLIFirst.nodeName === 'UL')) {\n      firstNode = siblingListLI[0];\n    } else {\n      firstNodeOL = siblingListOL[0];\n    }\n\n    if (firstNode) {\n      for (let h = this.domNode.contents(elements)[0]; h && !this.domNode.isList(h); null) {\n        const nextSibling = h.nextSibling;\n        prepend([h], firstNode);\n        setStyleAttribute(elements, {\n          'list-style-type': 'none'\n        });\n        setStyleAttribute(firstNode, {\n          'list-style-type': ''\n        });\n        h = nextSibling;\n      }\n    } else if (firstNodeOL) {\n      const nestedElement = createElement('li');\n      prepend([nestedElement], firstNodeOL);\n\n      for (let h = this.domNode.contents(elements)[0]; h && !this.domNode.isList(h); null) {\n        const nextSibling = h.nextSibling;\n        nestedElement.appendChild(h);\n        h = nextSibling;\n      }\n\n      prepend([firstNodeOL], elements.parentNode);\n      detach(elements);\n      const nestedElementLI = createElement('li', {\n        styles: 'list-style-type: none;'\n      });\n      prepend([nestedElementLI], firstNodeOL.parentNode);\n      append([firstNodeOL], nestedElementLI);\n    } else {\n      const nestedElementLI = createElement('li', {\n        styles: 'list-style-type: none;'\n      });\n      prepend([nestedElementLI], elements.parentNode);\n      const nestedElement = createElement(elements.parentNode.tagName);\n      prepend([nestedElement], nestedElementLI);\n      append([elements], nestedElement);\n    }\n  }\n\n  nestedList(elements) {\n    let isNested = false;\n\n    for (let i = 0; i < elements.length; i++) {\n      const prevSibling = this.domNode.getPreviousNode(elements[i]);\n\n      if (prevSibling) {\n        isNested = true;\n        let firstNode;\n        let firstNodeLI;\n        const siblingListOL = elements[i].querySelectorAll('ol, ul');\n        const siblingListLI = elements[i].querySelectorAll('li');\n        const siblingListLIFirst = this.domNode.contents(siblingListLI[0])[0];\n\n        if (siblingListLI.length > 0 && (siblingListLIFirst.nodeName === 'OL' || siblingListLIFirst.nodeName === 'UL')) {\n          firstNodeLI = siblingListLI[0];\n        } else {\n          firstNode = siblingListOL[0];\n        }\n\n        if (firstNode) {\n          const nestedElement = createElement('li');\n          prepend([nestedElement], firstNode);\n\n          for (let h = this.domNode.contents(elements[i])[0]; h && !this.domNode.isList(h); null) {\n            const nextSibling = h.nextSibling;\n            nestedElement.appendChild(h);\n            h = nextSibling;\n          }\n\n          append([firstNode], prevSibling);\n          detach(elements[i]);\n        } else if (firstNodeLI) {\n          if (prevSibling.tagName === 'LI') {\n            for (let h = this.domNode.contents(elements[i])[0]; h && !this.domNode.isList(h); null) {\n              const nextSibling = h.nextSibling;\n              prepend([h], firstNodeLI);\n              setStyleAttribute(elements[i], {\n                'list-style-type': 'none'\n              });\n              setStyleAttribute(firstNodeLI, {\n                'list-style-type': ''\n              });\n              h = nextSibling;\n            }\n\n            append([firstNodeLI.parentNode], prevSibling);\n            detach(elements[i]);\n          }\n        } else {\n          if (prevSibling.tagName === 'LI') {\n            const nestedElement = createElement(elements[i].parentNode.tagName);\n            append([nestedElement], prevSibling);\n            append([elements[i]], nestedElement);\n          }\n        }\n      } else {\n        const element = elements[i];\n        isNested = true;\n        this.noPreviousElement(element);\n      }\n    }\n\n    return isNested;\n  }\n\n  applyListsHandler(e) {\n    const range = this.parent.nodeSelection.getRange(this.parent.currentDocument);\n    this.saveSelection = this.parent.nodeSelection.save(range, this.parent.currentDocument);\n    this.currentAction = e.subCommand;\n    this.currentAction = e.subCommand = this.currentAction === 'NumberFormatList' ? 'OL' : this.currentAction === 'BulletFormatList' ? 'UL' : this.currentAction;\n    this.domNode.setMarker(this.saveSelection);\n    let listsNodes = this.domNode.blockNodes();\n\n    if (e.enterAction === 'BR') {\n      this.setSelectionBRConfig();\n      const allSelectedNode = this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument);\n      const selectedNodes = this.parent.nodeSelection.getSelectionNodes(allSelectedNode);\n      const currentFormatNodes = [];\n\n      if (selectedNodes.length === 0) {\n        selectedNodes.push(listsNodes[0]);\n      }\n\n      for (let i = 0; i < selectedNodes.length; i++) {\n        let currentNode = selectedNodes[i];\n        let previousCurrentNode;\n\n        while (!this.parent.domNode.isBlockNode(currentNode) && currentNode !== this.parent.editableElement) {\n          previousCurrentNode = currentNode;\n          currentNode = currentNode.parentElement;\n        }\n\n        if (this.parent.domNode.isBlockNode(currentNode) && currentNode === this.parent.editableElement) {\n          currentFormatNodes.push(previousCurrentNode);\n        }\n      }\n\n      for (let i = 0; i < currentFormatNodes.length; i++) {\n        if (!this.parent.domNode.isBlockNode(currentFormatNodes[i])) {\n          let currentNode = currentFormatNodes[i];\n          let previousNode = currentNode;\n\n          while (currentNode === this.parent.editableElement) {\n            previousNode = currentNode;\n            currentNode = currentNode.parentElement;\n          }\n\n          let tempElem;\n\n          if (this.parent.domNode.isBlockNode(previousNode.parentElement) && previousNode.parentElement === this.parent.editableElement) {\n            tempElem = createElement('p');\n            previousNode.parentElement.insertBefore(tempElem, previousNode);\n            tempElem.appendChild(previousNode);\n          } else {\n            tempElem = previousNode;\n          }\n\n          let preNode = tempElem.previousSibling;\n\n          while (!isNullOrUndefined(preNode) && preNode.nodeName !== 'BR' && !this.parent.domNode.isBlockNode(preNode)) {\n            tempElem.firstChild.parentElement.insertBefore(preNode, tempElem.firstChild);\n            preNode = tempElem.previousSibling;\n          }\n\n          if (!isNullOrUndefined(preNode) && preNode.nodeName === 'BR') {\n            detach(preNode);\n          }\n\n          let postNode = tempElem.nextSibling;\n\n          while (!isNullOrUndefined(postNode) && postNode.nodeName !== 'BR' && !this.parent.domNode.isBlockNode(postNode)) {\n            tempElem.appendChild(postNode);\n            postNode = tempElem.nextSibling;\n          }\n\n          if (!isNullOrUndefined(postNode) && postNode.nodeName === 'BR') {\n            detach(postNode);\n          }\n        }\n      }\n\n      this.setSelectionBRConfig();\n      listsNodes = this.parent.domNode.blockNodes();\n    }\n\n    for (let i = 0; i < listsNodes.length; i++) {\n      if (listsNodes[i].tagName === 'TABLE' && !range.collapsed) {\n        listsNodes.splice(i, 1);\n      }\n\n      if (listsNodes.length > 0 && listsNodes[i].tagName !== 'LI' && 'LI' === listsNodes[i].parentNode.tagName) {\n        listsNodes[i] = listsNodes[i].parentNode;\n      }\n    }\n\n    this.applyLists(listsNodes, this.currentAction, e.selector, e.item);\n\n    if (e.callBack) {\n      e.callBack({\n        requestType: this.currentAction,\n        event: e.event,\n        editorMode: 'HTML',\n        range: this.parent.nodeSelection.getRange(this.parent.currentDocument),\n        elements: this.parent.domNode.blockNodes()\n      });\n    }\n  }\n\n  setSelectionBRConfig() {\n    const startElem = this.parent.editableElement.querySelector('.' + markerClassName.startSelection);\n    const endElem = this.parent.editableElement.querySelector('.' + markerClassName.endSelection);\n\n    if (isNullOrUndefined(endElem)) {\n      this.parent.nodeSelection.setCursorPoint(this.parent.currentDocument, startElem, 0);\n    } else {\n      this.parent.nodeSelection.setSelectionText(this.parent.currentDocument, startElem, endElem, 0, 0);\n    }\n  }\n\n  applyLists(elements, type, selector, item) {\n    if (this.isRevert(elements, type) && isNullOrUndefined(item)) {\n      this.revertList(elements);\n      this.removeEmptyListElements();\n    } else {\n      this.checkLists(elements, type, item);\n\n      for (let i = 0; i < elements.length; i++) {\n        if (!isNullOrUndefined(item) && !isNullOrUndefined(item.listStyle)) {\n          if (item.listStyle === 'listImage') {\n            setStyleAttribute(elements[i], {\n              'list-style-image': item.listImage\n            });\n          } else {\n            setStyleAttribute(elements[i], {\n              'list-style-image': 'none'\n            });\n            setStyleAttribute(elements[i], {\n              'list-style-type': item.listStyle.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase()\n            });\n          }\n        }\n\n        if (elements[i].getAttribute('contenteditable') === 'true' && elements[i].childNodes.length === 1 && elements[i].childNodes[0].nodeName === 'TABLE') {\n          const listEle = document.createElement(type);\n          listEle.innerHTML = '<li><br/></li>';\n          elements[i].appendChild(listEle);\n        } else if ('LI' !== elements[i].tagName && isNullOrUndefined(item)) {\n          const elemAtt = elements[i].tagName === 'IMG' ? '' : this.domNode.attributes(elements[i]);\n          const openTag = '<' + type + '>';\n          const closeTag = '</' + type + '>';\n          const newTag = 'li' + elemAtt;\n          const replaceHTML = elements[i].tagName.toLowerCase() === DEFAULT_TAG ? elements[i].innerHTML : elements[i].outerHTML;\n          const innerHTML = this.domNode.createTagString(newTag, null, replaceHTML);\n          const collectionString = openTag + innerHTML + closeTag;\n          this.domNode.replaceWith(elements[i], collectionString);\n        } else if (!isNullOrUndefined(item) && 'LI' !== elements[i].tagName) {\n          // eslint-disable-next-line\n          const elemAtt = elements[i].tagName === 'IMG' ? '' : this.domNode.attributes(elements[i]);\n          const openTag = '<' + type + elemAtt + '>';\n          const closeTag = '</' + type + '>';\n          const newTag = 'li';\n          const replaceHTML = elements[i].tagName.toLowerCase() === DEFAULT_TAG ? elements[i].innerHTML : elements[i].outerHTML;\n          const innerHTML = this.domNode.createTagString(newTag, null, replaceHTML);\n          const collectionString = openTag + innerHTML + closeTag;\n          this.domNode.replaceWith(elements[i], collectionString);\n        }\n      }\n    }\n\n    this.cleanNode();\n    this.parent.editableElement.focus();\n\n    if (isIDevice$1()) {\n      setEditFrameFocus(this.parent.editableElement, selector);\n    }\n\n    this.saveSelection = this.domNode.saveMarker(this.saveSelection);\n    this.saveSelection.restore();\n  }\n\n  removeEmptyListElements() {\n    const listElem = this.parent.editableElement.querySelectorAll('ol, ul');\n\n    for (let i = 0; i < listElem.length; i++) {\n      if (listElem[i].textContent.trim() === '') {\n        detach(listElem[i]);\n      }\n    }\n  }\n\n  isRevert(nodes, tagName) {\n    let isRevert = true;\n\n    for (let i = 0; i < nodes.length; i++) {\n      if (nodes[i].tagName !== 'LI') {\n        return false;\n      }\n\n      if (nodes[i].parentNode.tagName !== tagName) {\n        isRevert = false;\n      }\n    }\n\n    return isRevert;\n  }\n\n  checkLists(nodes, tagName, item) {\n    const nodesTemp = [];\n\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i].parentNode;\n\n      if (!isNullOrUndefined(item) && 'LI' === nodes[i].tagName && !isNullOrUndefined(item.listStyle)) {\n        if (item.listStyle === 'listImage') {\n          setStyleAttribute(node, {\n            'list-style-image': item.listImage\n          });\n        } else {\n          setStyleAttribute(node, {\n            'list-style-image': 'none'\n          });\n          setStyleAttribute(node, {\n            'list-style-type': item.listStyle.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase()\n          });\n        }\n      }\n\n      if (nodes[i].tagName === 'LI' && node.tagName !== tagName && nodesTemp.indexOf(node) < 0 || nodes[i].tagName === 'LI' && node.tagName === tagName && nodesTemp.indexOf(node) < 0 && item !== null) {\n        nodesTemp.push(node);\n      }\n    }\n\n    for (let j = nodesTemp.length - 1; j >= 0; j--) {\n      const h = nodesTemp[j];\n      const replace = '<' + tagName.toLowerCase() + ' ' + this.domNode.attributes(h) + '>' + h.innerHTML + '</' + tagName.toLowerCase() + '>';\n      this.domNode.replaceWith(nodesTemp[j], replace);\n    }\n  }\n\n  cleanNode() {\n    const liParents = this.parent.editableElement.querySelectorAll('ol + ol, ul + ul');\n\n    for (let c = 0; c < liParents.length; c++) {\n      const node = liParents[c];\n\n      if (this.domNode.isList(node.previousElementSibling) && this.domNode.openTagString(node) === this.domNode.openTagString(node.previousElementSibling)) {\n        const contentNodes = this.domNode.contents(node);\n\n        for (let f = 0; f < contentNodes.length; f++) {\n          node.previousElementSibling.appendChild(contentNodes[f]);\n        }\n\n        node.parentNode.removeChild(node);\n      }\n    }\n  }\n\n  findUnSelected(temp, elements) {\n    temp = temp.slice().reverse();\n\n    if (temp.length > 0) {\n      const rightIndent = [];\n      const indentElements = [];\n      const lastElement = elements[elements.length - 1];\n      let lastElementChild = [];\n      const childElements = [];\n      lastElementChild = lastElement.childNodes;\n\n      for (let z = 0; z < lastElementChild.length; z++) {\n        if (lastElementChild[z].tagName === 'OL' || lastElementChild[z].tagName === 'UL') {\n          const childLI = lastElementChild[z].querySelectorAll('li');\n\n          if (childLI.length > 0) {\n            for (let y = 0; y < childLI.length; y++) {\n              childElements.push(childLI[y]);\n            }\n          }\n        }\n      }\n\n      for (let i = 0; i < childElements.length; i++) {\n        let count = 0;\n\n        for (let j = 0; j < temp.length; j++) {\n          if (!childElements[i].contains(temp[j])) {\n            count = count + 1;\n          }\n        }\n\n        if (count === temp.length) {\n          indentElements.push(childElements[i]);\n        }\n      }\n\n      if (indentElements.length > 0) {\n        for (let x = 0; x < indentElements.length; x++) {\n          if (this.domNode.contents(indentElements[x])[0].nodeName !== 'OL' && this.domNode.contents(indentElements[x])[0].nodeName !== 'UL') {\n            rightIndent.push(indentElements[x]);\n          }\n        }\n      }\n\n      if (rightIndent.length > 0) {\n        this.nestedList(rightIndent);\n      }\n    }\n  }\n\n  revertList(elements) {\n    const temp = [];\n\n    for (let i = elements.length - 1; i >= 0; i--) {\n      for (let j = i - 1; j >= 0; j--) {\n        if (elements[j].contains(elements[i]) || elements[j] === elements[i]) {\n          temp.push(elements[i]);\n          elements.splice(i, 1);\n          break;\n        }\n      }\n    }\n\n    this.findUnSelected(temp, elements);\n    const viewNode = [];\n\n    for (let i = 0; i < elements.length; i++) {\n      const element = elements[i];\n\n      if (this.domNode.contents(element)[0].nodeType === 3 && this.domNode.contents(element)[0].textContent.trim().length === 0) {\n        detach(this.domNode.contents(element)[0]);\n      }\n\n      let parentNode = elements[i].parentNode;\n      let className = element.getAttribute('class');\n\n      if (temp.length === 0) {\n        const siblingList = elements[i].querySelectorAll('ul, ol');\n        const firstNode = siblingList[0];\n\n        if (firstNode) {\n          const child = firstNode.querySelectorAll('li');\n\n          if (child) {\n            const nestedElement = createElement(firstNode.tagName);\n            append([nestedElement], firstNode.parentNode);\n            const nestedElementLI = createElement('li', {\n              styles: 'list-style-type: none;'\n            });\n            append([nestedElementLI], nestedElement);\n            append([firstNode], nestedElementLI);\n          }\n        }\n      }\n\n      if (element.parentNode.insertBefore(this.closeTag(parentNode.tagName), element), 'LI' === parentNode.parentNode.tagName) {\n        element.parentNode.insertBefore(this.closeTag('LI'), element);\n      } else {\n        if (DEFAULT_TAG && 0 === element.querySelectorAll(BLOCK_TAGS.join(', ')).length) {\n          const wrapperclass = isNullOrUndefined(className) ? ' class=\"e-rte-wrap-inner\"' : ' class=\"' + className + ' e-rte-wrap-inner\"';\n          const wrapper = '<' + DEFAULT_TAG + wrapperclass + this.domNode.attributes(parentNode) + '></' + DEFAULT_TAG + '>';\n          this.domNode.wrapInner(element, this.domNode.parseHTMLFragment(wrapper));\n        } else if (this.domNode.contents(element)[0].nodeType === 3) {\n          const replace = this.domNode.createTagString(DEFAULT_TAG, parentNode, this.parent.domNode.encode(this.domNode.contents(element)[0].textContent));\n          this.domNode.replaceWith(this.domNode.contents(element)[0], replace);\n        } else if (this.domNode.contents(element)[0].classList.contains(markerClassName.startSelection) || this.domNode.contents(element)[0].classList.contains(markerClassName.endSelection)) {\n          const replace = this.domNode.createTagString(DEFAULT_TAG, parentNode, this.domNode.contents(element)[0].outerHTML);\n          this.domNode.replaceWith(this.domNode.contents(element)[0], replace);\n        } else {\n          const childNode = element.firstChild;\n          className = childNode.getAttribute('class');\n          attributes(childNode, this.domNode.rawAttributes(parentNode));\n\n          if (className && childNode.getAttribute('class')) {\n            attributes(childNode, {\n              'class': className + ' ' + childNode.getAttribute('class')\n            });\n          }\n        }\n\n        append([this.openTag('LI')], element);\n        prepend([this.closeTag('LI')], element);\n      }\n\n      this.domNode.insertAfter(this.openTag(parentNode.tagName), element);\n\n      if (parentNode.parentNode.tagName === 'LI') {\n        parentNode = parentNode.parentNode.parentNode;\n      }\n\n      if (viewNode.indexOf(parentNode) < 0) {\n        viewNode.push(parentNode);\n      }\n    }\n\n    for (let i = 0; i < viewNode.length; i++) {\n      const node = viewNode[i];\n      let nodeInnerHtml = node.innerHTML;\n      const closeTag = /<span class=\"e-rte-list-close-([a-z]*)\"><\\/span>/g;\n      const openTag = /<span class=\"e-rte-list-open-([a-z]*)\"><\\/span>/g;\n      nodeInnerHtml = nodeInnerHtml.replace(closeTag, '</$1>');\n      nodeInnerHtml = nodeInnerHtml.replace(openTag, '<$1 ' + this.domNode.attributes(node) + '>');\n      this.domNode.replaceWith(node, this.domNode.openTagString(node) + nodeInnerHtml.trim() + this.domNode.closeTagString(node));\n    }\n\n    const emptyUl = this.parent.editableElement.querySelectorAll('ul:empty, ol:empty');\n\n    for (let i = 0; i < emptyUl.length; i++) {\n      detach(emptyUl[i]);\n    }\n\n    const emptyLi = this.parent.editableElement.querySelectorAll('li:empty');\n\n    for (let i = 0; i < emptyLi.length; i++) {\n      detach(emptyLi[i]);\n    }\n  }\n\n  openTag(type) {\n    return this.domNode.parseHTMLFragment('<span class=\"e-rte-list-open-' + type.toLowerCase() + '\"></span>');\n  }\n\n  closeTag(type) {\n    return this.domNode.parseHTMLFragment('<span class=\"e-rte-list-close-' + type.toLowerCase() + '\"></span>');\n  }\n\n}\n/**\n * Node appending methods.\n *\n * @hidden\n */\n\n\nclass InsertMethods {\n  /**\n   * WrapBefore method\n   *\n   * @param {Text} textNode - specifies the text node\n   * @param {HTMLElement} parentNode - specifies the parent node\n   * @param {boolean} isAfter - specifies the boolean value\n   * @returns {Text} - returns the text value\n   * @hidden\n   * @deprecated\n   */\n  static WrapBefore(textNode, parentNode, isAfter) {\n    parentNode.innerText = textNode.textContent; //eslint-disable-next-line\n\n    !isAfter ? this.AppendBefore(parentNode, textNode) : this.AppendBefore(parentNode, textNode, true);\n\n    if (textNode.parentNode) {\n      textNode.parentNode.removeChild(textNode);\n    }\n\n    return parentNode.childNodes[0];\n  }\n  /**\n   * Wrap method\n   *\n   * @param {HTMLElement} childNode - specifies the child node\n   * @param {HTMLElement} parentNode - specifies the parent node.\n   * @returns {HTMLElement} - returns the element\n   * @hidden\n   * @deprecated\n   */\n\n\n  static Wrap(childNode, parentNode) {\n    this.AppendBefore(parentNode, childNode);\n    parentNode.appendChild(childNode);\n    return childNode;\n  }\n  /**\n   * unwrap method\n   *\n   * @param {Node} node - specifies the node element.\n   * @returns {Node[]} - returns the array of value\n   * @hidden\n   * @deprecated\n   */\n\n\n  static unwrap(node) {\n    const parent = node.parentNode;\n    const child = [];\n\n    for (; node.firstChild; null) {\n      child.push(parent.insertBefore(node.firstChild, node));\n    }\n\n    parent.removeChild(node);\n    return child;\n  }\n  /**\n   * AppendBefore method\n   *\n   * @param {HTMLElement} textNode - specifies the element\n   * @param {HTMLElement} parentNode - specifies the parent node\n   * @param {boolean} isAfter - specifies the boolean value\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  static AppendBefore(textNode, parentNode, isAfter) {\n    return parentNode.parentNode ? !isAfter ? parentNode.parentNode.insertBefore(textNode, parentNode) : parentNode.parentNode.insertBefore(textNode, parentNode.nextSibling) : parentNode;\n  }\n\n}\n/**\n * Split the Node based on selection\n *\n * @hidden\n * @deprecated\n */\n\n\nclass NodeCutter {\n  constructor() {\n    this.enterAction = 'P';\n    this.position = -1;\n    this.nodeSelection = new NodeSelection();\n  } // Split Selection Node\n\n  /**\n   * GetSpliceNode method\n   *\n   * @param {Range} range - specifies the range\n   * @param {HTMLElement} node - specifies the node element.\n   * @returns {Node} - returns the node value\n   * @hidden\n   * @deprecated\n   */\n\n\n  GetSpliceNode(range, node) {\n    node = this.SplitNode(range, node, true);\n    node = this.SplitNode(range, node, false);\n    return node;\n  }\n  /**\n   * @param {Range} range - specifies the range\n   * @param {HTMLElement} node - specifies the node element.\n   * @param {boolean} isCollapsed - specifies the boolean value\n   * @returns {HTMLElement} - returns the element\n   * @hidden\n   * @deprecated\n   */\n\n\n  SplitNode(range, node, isCollapsed) {\n    if (node) {\n      const clone = range.cloneRange();\n      const parent = node.parentNode;\n      const index = this.nodeSelection.getIndex(node);\n      clone.collapse(isCollapsed); // eslint-disable-next-line\n\n      isCollapsed ? clone.setStartBefore(node) : clone.setEndAfter(node);\n      let fragment = clone.extractContents();\n\n      if (isCollapsed) {\n        node = parent.childNodes[index];\n        fragment = this.spliceEmptyNode(fragment, false);\n\n        if (fragment && fragment.childNodes.length > 0) {\n          const isEmpty = fragment.childNodes.length === 1 && fragment.childNodes[0].nodeName !== 'IMG' && this.isImgElm(fragment) && fragment.textContent === '' ? true : false;\n\n          if (!isEmpty) {\n            if (node) {\n              InsertMethods.AppendBefore(fragment, node);\n            } else {\n              parent.appendChild(fragment);\n              const divNode = document.createElement('div');\n              divNode.innerHTML = '&#65279;&#65279;';\n              node = divNode.firstChild;\n              parent.appendChild(node);\n            }\n          }\n        }\n      } else {\n        node = parent.childNodes.length > 1 ? parent.childNodes[index] : parent.childNodes[0];\n        fragment = this.spliceEmptyNode(fragment, true);\n\n        if (fragment && fragment.childNodes.length > 0) {\n          const isEmpty = fragment.childNodes.length === 1 && fragment.childNodes[0].nodeName !== 'IMG' && this.isImgElm(fragment) && fragment.textContent.trim() === '' ? true : false;\n\n          if (!isEmpty) {\n            if (node) {\n              InsertMethods.AppendBefore(fragment, node, true);\n            } else {\n              parent.appendChild(fragment);\n              const divNode = document.createElement('div');\n              divNode.innerHTML = '&#65279;&#65279;';\n              parent.insertBefore(divNode.firstChild, parent.firstChild);\n              node = parent.firstChild;\n            }\n          }\n        }\n      }\n\n      return node;\n    } else {\n      return null;\n    }\n  }\n\n  isImgElm(fragment) {\n    let result = true;\n\n    if (fragment.childNodes.length === 1 && fragment.childNodes[0].nodeName !== 'IMG') {\n      const firstChild = fragment.childNodes[0];\n\n      for (let i = 0; !isNullOrUndefined(firstChild.childNodes) && i < firstChild.childNodes.length; i++) {\n        if (firstChild.childNodes[i].nodeName === 'IMG') {\n          result = false;\n        }\n      }\n    } else {\n      result = true;\n    }\n\n    return result;\n  }\n\n  spliceEmptyNode(fragment, isStart) {\n    let len;\n\n    if (fragment.childNodes.length === 1 && fragment.childNodes[0].nodeName === '#text' && fragment.childNodes[0].textContent === '' || fragment.textContent === '') {\n      len = -1;\n    } else {\n      len = fragment.childNodes.length - 1;\n    }\n\n    if (len > -1 && !isStart) {\n      this.spliceEmptyNode(fragment.childNodes[len], isStart);\n    } else if (len > -1) {\n      this.spliceEmptyNode(fragment.childNodes[0], isStart);\n    } else if (fragment.nodeType !== 3 && fragment.nodeType !== 11) {\n      fragment.parentNode.removeChild(fragment);\n    }\n\n    return fragment;\n  } // Cursor Position split\n\n\n  GetCursorStart(indexes, index, isStart) {\n    indexes = isStart ? indexes : indexes.reverse();\n    let position = indexes[0];\n\n    for (let num = 0; num < indexes.length && (isStart ? indexes[num] < index : indexes[num] >= index); num++) {\n      position = indexes[num];\n    }\n\n    return position;\n  }\n  /**\n   * GetCursorRange method\n   *\n   * @param {Document} docElement - specifies the document\n   * @param {Range} range - specifies the range\n   * @param {Node} node - specifies the node.\n   * @returns {Range} - returns the range value\n   * @hidden\n   * @deprecated\n   */\n\n\n  GetCursorRange(docElement, range, node) {\n    let cursorRange = docElement.createRange();\n    const indexes = [];\n    indexes.push(0);\n    const str = this.TrimLineBreak(node.data);\n    let index = str.indexOf(' ', 0);\n\n    while (index !== -1) {\n      if (indexes.indexOf(index) < 0) {\n        indexes.push(index);\n      }\n\n      if (new RegExp('\\\\s').test(str[index - 1]) && indexes.indexOf(index - 1) < 0) {\n        indexes.push(index - 1);\n      }\n\n      if (new RegExp('\\\\s').test(str[index + 1])) {\n        indexes.push(index + 1);\n      }\n\n      index = str.indexOf(' ', index + 1);\n    }\n\n    indexes.push(str.length);\n\n    if (indexes.indexOf(range.startOffset) >= 0 || indexes.indexOf(range.startOffset - 1) >= 0 && (range.startOffset !== 1 || range.startOffset === 1 && new RegExp('\\\\s').test(str[0])) || indexes[indexes.length - 1] - 1 === range.startOffset) {\n      cursorRange = range;\n      this.position = 1;\n    } else {\n      const startOffset = this.GetCursorStart(indexes, range.startOffset, true);\n      this.position = range.startOffset - startOffset;\n      cursorRange.setStart(range.startContainer, startOffset);\n      cursorRange.setEnd(range.startContainer, this.GetCursorStart(indexes, range.startOffset, false));\n    }\n\n    return cursorRange;\n  }\n  /**\n   * GetCursorNode method\n   *\n   * @param {Document} docElement - specifies the document\n   * @param {Range} range - specifies the range\n   * @param {Node} node - specifies the node.\n   * @returns {Node} - returns the node value\n   * @hidden\n   * @deprecated\n   */\n\n\n  GetCursorNode(docElement, range, node) {\n    return this.GetSpliceNode(this.GetCursorRange(docElement, range, node), node);\n  }\n  /**\n   * TrimLineBreak method\n   *\n   * @param {string} line - specifies the string value.\n   * @returns {string} - returns the string\n   * @hidden\n   * @deprecated\n   */\n\n\n  TrimLineBreak(line) {\n    return line.replace(/(\\r\\n\\t|\\n|\\r\\t)/gm, ' ');\n  }\n\n}\n/**\n * Formats internal component\n *\n * @hidden\n * @deprecated\n */\n\n\nclass Formats {\n  /**\n   * Constructor for creating the Formats plugin\n   *\n   * @param {EditorManager} parent - specifies the parent element.\n   * @hidden\n   * @deprecated\n   */\n  constructor(parent) {\n    this.parent = parent;\n    this.addEventListener();\n  }\n\n  addEventListener() {\n    this.parent.observer.on(FORMAT_TYPE, this.applyFormats, this);\n    this.parent.observer.on(KEY_UP_HANDLER, this.onKeyUp, this);\n    this.parent.observer.on(KEY_DOWN_HANDLER, this.onKeyDown, this);\n  }\n\n  getParentNode(node) {\n    for (; node.parentNode && node.parentNode !== this.parent.editableElement; null) {\n      node = node.parentNode;\n    }\n\n    return node;\n  }\n\n  onKeyUp(e) {\n    const range = this.parent.nodeSelection.getRange(this.parent.currentDocument);\n    const endCon = range.endContainer;\n    const lastChild = endCon.lastChild;\n\n    if (e.event.which === 13 && range.startContainer === endCon && endCon.nodeType !== 3) {\n      const pTag = createElement('p');\n      pTag.innerHTML = '<br>';\n\n      if (!isNullOrUndefined(lastChild) && lastChild && lastChild.nodeName === 'BR' && lastChild.previousSibling && lastChild.previousSibling.nodeName === 'TABLE') {\n        endCon.replaceChild(pTag, lastChild);\n        this.parent.nodeSelection.setCursorPoint(this.parent.currentDocument, pTag, 0);\n      } else {\n        const brNode = this.parent.nodeSelection.getSelectionNodeCollectionBr(range)[0];\n\n        if (!isNullOrUndefined(brNode) && brNode.nodeName === 'BR' && brNode.previousSibling && brNode.previousSibling.nodeName === 'TABLE') {\n          endCon.replaceChild(pTag, brNode);\n          this.parent.nodeSelection.setCursorPoint(this.parent.currentDocument, pTag, 0);\n        }\n      }\n    }\n  }\n\n  onKeyDown(e) {\n    if (e.event.which === 13) {\n      let range = this.parent.nodeSelection.getRange(this.parent.currentDocument);\n      const startCon = range.startContainer.textContent.length === 0 || range.startContainer.nodeName === 'PRE' ? range.startContainer : range.startContainer.parentElement;\n      const endCon = range.endContainer.textContent.length === 0 || range.endContainer.nodeName === 'PRE' ? range.endContainer : range.endContainer.parentElement;\n      const preElem = closest(startCon, 'pre');\n      const endPreElem = closest(endCon, 'pre');\n      const liParent = !isNullOrUndefined(preElem) && !isNullOrUndefined(preElem.parentElement) && preElem.parentElement.tagName === 'LI';\n\n      if (liParent) {\n        return;\n      }\n\n      if (isNullOrUndefined(preElem) && !isNullOrUndefined(endPreElem) || !isNullOrUndefined(preElem) && isNullOrUndefined(endPreElem)) {\n        e.event.preventDefault();\n        this.deleteContent(range);\n        this.removeCodeContent(range);\n        range = this.parent.nodeSelection.getRange(this.parent.currentDocument);\n        this.parent.nodeSelection.setCursorPoint(this.parent.currentDocument, endCon, 0);\n      }\n\n      if (e.event.which === 13 && !isNullOrUndefined(preElem) && !isNullOrUndefined(endPreElem)) {\n        e.event.preventDefault();\n        this.deleteContent(range);\n        this.removeCodeContent(range);\n        range = this.parent.nodeSelection.getRange(this.parent.currentDocument);\n        const lastEmpty = range.startContainer.childNodes[range.endOffset];\n        const lastBeforeBr = range.startContainer.childNodes[range.endOffset - 1];\n        let startParent = range.startContainer;\n\n        if (!isNullOrUndefined(lastEmpty) && !isNullOrUndefined(lastBeforeBr) && isNullOrUndefined(lastEmpty.nextSibling) && lastEmpty.nodeName === 'BR' && lastBeforeBr.nodeName === 'BR') {\n          this.paraFocus(range.startContainer, e.enterAction);\n        } else if (startParent.textContent.charCodeAt(0) === 8203 && startParent.textContent.length === 1 || startParent.textContent.length === 0) {\n          //Double enter with any parent tag for the node\n          while (startParent.parentElement.nodeName !== 'PRE' && (startParent.textContent.length === 1 || startParent.textContent.length === 0)) {\n            startParent = startParent.parentElement;\n          }\n\n          if (!isNullOrUndefined(startParent.previousSibling) && startParent.previousSibling.nodeName === 'BR' && isNullOrUndefined(startParent.nextSibling)) {\n            this.paraFocus(startParent.parentElement);\n          } else {\n            this.isNotEndCursor(preElem, range);\n          }\n        } else {\n          //Cursor at start and middle\n          this.isNotEndCursor(preElem, range);\n        }\n      }\n    }\n  }\n\n  removeCodeContent(range) {\n    const regEx = new RegExp(String.fromCharCode(65279), 'g');\n\n    if (!isNullOrUndefined(range.endContainer.textContent.match(regEx))) {\n      const pointer = range.endContainer.textContent.charCodeAt(range.endOffset - 1) === 65279 ? range.endOffset - 2 : range.endOffset;\n      range.endContainer.textContent = range.endContainer.textContent.replace(regEx, '');\n\n      if (range.endContainer.textContent === '') {\n        this.parent.nodeSelection.setCursorPoint(this.parent.currentDocument, range.endContainer.parentElement, 0);\n      } else {\n        this.parent.nodeSelection.setCursorPoint(this.parent.currentDocument, range.endContainer, pointer);\n      }\n    }\n  }\n\n  deleteContent(range) {\n    if (range.startContainer !== range.endContainer || range.startOffset !== range.endOffset) {\n      range.deleteContents();\n    }\n  }\n\n  paraFocus(referNode, enterAction) {\n    let insertTag;\n\n    if (enterAction === 'DIV') {\n      insertTag = createElement('div');\n      insertTag.innerHTML = '<br>';\n    } else if (enterAction === 'BR') {\n      insertTag = createElement('br');\n    } else {\n      insertTag = createElement('p');\n      insertTag.innerHTML = '<br>';\n    }\n\n    this.parent.domNode.insertAfter(insertTag, referNode);\n    this.parent.nodeSelection.setCursorPoint(this.parent.currentDocument, insertTag, 0);\n    detach(referNode.lastChild);\n  }\n\n  isNotEndCursor(preElem, range) {\n    const nodeCutter = new NodeCutter();\n    const isEnd = range.startOffset === preElem.lastChild.textContent.length && preElem.lastChild.textContent === range.startContainer.textContent; //Cursor at start point\n\n    if (preElem.textContent.indexOf(range.startContainer.textContent) === 0 && (range.startOffset === 0 && range.endOffset === 0 || range.startContainer.nodeName === 'PRE')) {\n      this.insertMarker(preElem, range);\n      const brTag = createElement('br');\n      preElem.childNodes[range.endOffset].parentElement.insertBefore(brTag, preElem.childNodes[range.endOffset]);\n    } else {\n      //Cursor at middle\n      const cloneNode = nodeCutter.SplitNode(range, preElem, true);\n      this.insertMarker(preElem, range);\n      const previousSib = preElem.previousElementSibling;\n\n      if (previousSib.tagName === 'PRE') {\n        previousSib.insertAdjacentHTML('beforeend', '<br>' + cloneNode.innerHTML);\n        detach(preElem);\n      }\n    } //To place the cursor position\n\n\n    this.setCursorPosition(isEnd, preElem);\n  }\n\n  setCursorPosition(isEnd, preElem) {\n    let isEmpty = false;\n    const markerElem = this.parent.editableElement.querySelector('.tempSpan');\n    const mrkParentElem = markerElem.parentElement; // eslint-disable-next-line\n\n    markerElem.parentNode.textContent === '' ? isEmpty = true : this.parent.nodeSelection.setCursorPoint(this.parent.currentDocument, markerElem, 0);\n\n    if (isEnd) {\n      if (isEmpty) {\n        //Enter press when pre element is empty\n        if (mrkParentElem === preElem) {\n          this.parent.nodeSelection.setCursorPoint(this.parent.currentDocument, markerElem, 0);\n          detach(markerElem);\n        } else {\n          this.focusSelectionParent(markerElem, mrkParentElem);\n        }\n      } else {\n        const brElm = createElement('br');\n        this.parent.domNode.insertAfter(brElm, markerElem);\n        this.parent.nodeSelection.setCursorPoint(this.parent.currentDocument, markerElem, 0);\n        detach(markerElem);\n      }\n    } else {\n      // eslint-disable-next-line\n      isEmpty ? this.focusSelectionParent(markerElem, mrkParentElem) : detach(markerElem);\n    }\n  }\n\n  focusSelectionParent(markerElem, tempSpanPElem) {\n    detach(markerElem);\n    tempSpanPElem.innerHTML = '\\u200B';\n    this.parent.nodeSelection.setCursorPoint(this.parent.currentDocument, tempSpanPElem, 0);\n  }\n\n  insertMarker(preElem, range) {\n    const tempSpan = createElement('span', {\n      className: 'tempSpan'\n    });\n\n    if (range.startContainer.nodeName === 'PRE') {\n      preElem.childNodes[range.endOffset].parentElement.insertBefore(tempSpan, preElem.childNodes[range.endOffset]);\n    } else {\n      range.startContainer.parentElement.insertBefore(tempSpan, range.startContainer);\n    }\n  }\n\n  applyFormats(e) {\n    const range = this.parent.nodeSelection.getRange(this.parent.currentDocument);\n    let isSelectAll = false;\n\n    if (this.parent.editableElement === range.endContainer && !isNullOrUndefined(this.parent.editableElement.children[range.endOffset - 1]) && this.parent.editableElement.children[range.endOffset - 1].tagName === 'TABLE' && !range.collapsed) {\n      isSelectAll = true;\n    }\n\n    let save = this.parent.nodeSelection.save(range, this.parent.currentDocument);\n    this.parent.domNode.setMarker(save);\n    let formatsNodes = this.parent.domNode.blockNodes();\n\n    if (e.enterAction === 'BR') {\n      this.setSelectionBRConfig();\n      const allSelectedNode = this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument);\n      const selectedNodes = this.parent.nodeSelection.getSelectionNodes(allSelectedNode);\n      const currentFormatNodes = [];\n\n      if (selectedNodes.length === 0) {\n        selectedNodes.push(formatsNodes[0]);\n      }\n\n      for (let i = 0; i < selectedNodes.length; i++) {\n        let currentNode = selectedNodes[i];\n        let previousCurrentNode;\n\n        while (!this.parent.domNode.isBlockNode(currentNode) && currentNode !== this.parent.editableElement) {\n          previousCurrentNode = currentNode;\n          currentNode = currentNode.parentElement;\n        }\n\n        if (this.parent.domNode.isBlockNode(currentNode) && currentNode === this.parent.editableElement) {\n          currentFormatNodes.push(previousCurrentNode);\n        }\n      }\n\n      for (let i = 0; i < currentFormatNodes.length; i++) {\n        if (!this.parent.domNode.isBlockNode(currentFormatNodes[i])) {\n          let currentNode = currentFormatNodes[i];\n          let previousNode = currentNode;\n\n          while (currentNode === this.parent.editableElement) {\n            previousNode = currentNode;\n            currentNode = currentNode.parentElement;\n          }\n\n          let tempElem;\n\n          if (this.parent.domNode.isBlockNode(previousNode.parentElement) && previousNode.parentElement === this.parent.editableElement) {\n            tempElem = createElement('div');\n            previousNode.parentElement.insertBefore(tempElem, previousNode);\n            tempElem.appendChild(previousNode);\n          } else {\n            tempElem = previousNode;\n          }\n\n          let preNode = tempElem.previousSibling;\n\n          while (!isNullOrUndefined(preNode) && preNode.nodeName !== 'BR' && !this.parent.domNode.isBlockNode(preNode)) {\n            tempElem.firstChild.parentElement.insertBefore(preNode, tempElem.firstChild);\n            preNode = tempElem.previousSibling;\n          }\n\n          if (!isNullOrUndefined(preNode) && preNode.nodeName === 'BR') {\n            detach(preNode);\n          }\n\n          let postNode = tempElem.nextSibling;\n\n          while (!isNullOrUndefined(postNode) && postNode.nodeName !== 'BR' && !this.parent.domNode.isBlockNode(postNode)) {\n            tempElem.appendChild(postNode);\n            postNode = tempElem.nextSibling;\n          }\n\n          if (!isNullOrUndefined(postNode) && postNode.nodeName === 'BR') {\n            detach(postNode);\n          }\n        }\n      }\n\n      this.setSelectionBRConfig();\n      formatsNodes = this.parent.domNode.blockNodes();\n    }\n\n    for (let i = 0; i < formatsNodes.length; i++) {\n      let parentNode;\n      let replaceHTML;\n\n      if (e.subCommand.toLowerCase() === 'blockquote') {\n        parentNode = this.getParentNode(formatsNodes[i]);\n        replaceHTML = this.parent.domNode.isList(parentNode) || parentNode.tagName === 'TABLE' ? parentNode.outerHTML : parentNode.innerHTML;\n      } else {\n        parentNode = formatsNodes[i];\n        replaceHTML = parentNode.innerHTML;\n      }\n\n      if (e.subCommand.toLowerCase() === parentNode.tagName.toLowerCase() && (e.subCommand.toLowerCase() !== 'pre' || !isNullOrUndefined(e.exeValue) && e.exeValue.name === 'dropDownSelect') || isNullOrUndefined(parentNode.parentNode) || parentNode.tagName === 'TABLE' && e.subCommand.toLowerCase() === 'pre') {\n        continue;\n      }\n\n      this.cleanFormats(parentNode, e.subCommand);\n      const replaceNode = e.subCommand.toLowerCase() === 'pre' && parentNode.tagName.toLowerCase() === 'pre' ? 'p' : e.subCommand;\n      const replaceTag = this.parent.domNode.createTagString(replaceNode, parentNode, replaceHTML.replace(/>\\s+</g, '><'));\n\n      if (parentNode.tagName === 'LI') {\n        parentNode.innerHTML = '';\n        parentNode.insertAdjacentHTML('beforeend', replaceTag);\n      } else {\n        this.parent.domNode.replaceWith(parentNode, replaceTag);\n      }\n    }\n\n    this.preFormatMerge();\n    let startNode = this.parent.editableElement.querySelector('.' + markerClassName.startSelection);\n    let endNode = this.parent.editableElement.querySelector('.' + markerClassName.endSelection);\n\n    if (!isNullOrUndefined(startNode) && !isNullOrUndefined(endNode)) {\n      startNode = startNode.lastChild;\n      endNode = endNode.lastChild;\n    }\n\n    save = this.parent.domNode.saveMarker(save, null);\n\n    if (isIDevice$1()) {\n      setEditFrameFocus(this.parent.editableElement, e.selector);\n    }\n\n    if (isSelectAll) {\n      this.parent.nodeSelection.setSelectionText(this.parent.currentDocument, startNode, endNode, 0, endNode.textContent.length);\n    } else {\n      save.restore();\n    }\n\n    if (e.callBack) {\n      e.callBack({\n        requestType: e.subCommand,\n        editorMode: 'HTML',\n        event: e.event,\n        range: this.parent.nodeSelection.getRange(this.parent.currentDocument),\n        elements: this.parent.domNode.blockNodes()\n      });\n    }\n  }\n\n  setSelectionBRConfig() {\n    const startElem = this.parent.editableElement.querySelector('.' + markerClassName.startSelection);\n    const endElem = this.parent.editableElement.querySelector('.' + markerClassName.endSelection);\n\n    if (isNullOrUndefined(endElem)) {\n      this.parent.nodeSelection.setCursorPoint(this.parent.currentDocument, startElem, 0);\n    } else {\n      this.parent.nodeSelection.setSelectionText(this.parent.currentDocument, startElem, endElem, 0, 0);\n    }\n  }\n\n  preFormatMerge() {\n    const preNodes = this.parent.editableElement.querySelectorAll('PRE');\n\n    if (!isNullOrUndefined(preNodes)) {\n      for (let i = 0; i < preNodes.length; i++) {\n        const previousSib = preNodes[i].previousElementSibling;\n\n        if (!isNullOrUndefined(previousSib) && previousSib.tagName === 'PRE') {\n          previousSib.insertAdjacentHTML('beforeend', '<br>' + preNodes[i].innerHTML);\n          detach(preNodes[i]);\n        }\n      }\n    }\n  }\n\n  cleanFormats(element, tagName) {\n    const ignoreAttr = ['display', 'font-size', 'margin-top', 'margin-bottom', 'margin-left', 'margin-right', 'font-weight'];\n    tagName = tagName.toLowerCase();\n\n    for (let i = 0; i < ignoreAttr.length && tagName !== 'p' && tagName !== 'blockquote' && tagName !== 'pre'; i++) {\n      element.style.removeProperty(ignoreAttr[i]);\n    }\n  }\n\n}\n/**\n * Insert a HTML Node or Text\n *\n * @hidden\n * @deprecated\n */\n\n\nlet InsertHtml = /*#__PURE__*/(() => {\n  class InsertHtml {\n    static Insert(docElement, insertNode, editNode, isExternal) {\n      let node;\n\n      if (typeof insertNode === 'string') {\n        const divNode = document.createElement('div');\n        divNode.innerHTML = insertNode;\n        node = isExternal ? divNode : divNode.firstChild;\n      } else {\n        if (isExternal && !(!isNullOrUndefined(insertNode) && !isNullOrUndefined(insertNode.classList) && insertNode.classList.contains('pasteContent'))) {\n          const divNode = document.createElement('div');\n          divNode.appendChild(insertNode);\n          node = divNode;\n        } else {\n          node = insertNode;\n        }\n      }\n\n      const nodeSelection = new NodeSelection();\n      const nodeCutter = new NodeCutter();\n      let range = nodeSelection.getRange(docElement);\n\n      if (range.startContainer === editNode && range.startContainer === range.endContainer && range.startOffset === 0 && range.startOffset === range.endOffset && editNode.textContent.length === 0 && editNode.children[0].tagName === 'P') {\n        nodeSelection.setSelectionText(docElement, range.startContainer.children[0], range.startContainer.children[0], 0, 0);\n        range = nodeSelection.getRange(docElement);\n      }\n\n      const isCursor = range.startOffset === range.endOffset && range.startOffset === 0 && range.startContainer === range.endContainer;\n      const isCollapsed = range.collapsed;\n      const nodes = this.getNodeCollection(range, nodeSelection, node);\n      const closestParentNode = node.nodeName.toLowerCase() === 'table' ? this.closestEle(nodes[0].parentNode, editNode) : nodes[0];\n\n      if (isExternal || !isNullOrUndefined(node) && !isNullOrUndefined(node.classList) && node.classList.contains('pasteContent')) {\n        this.pasteInsertHTML(nodes, node, range, nodeSelection, nodeCutter, docElement, isCollapsed, closestParentNode, editNode);\n        return;\n      }\n\n      if (editNode !== range.startContainer && (!isCollapsed && !(closestParentNode.nodeType === Node.ELEMENT_NODE && TABLE_BLOCK_TAGS.indexOf(closestParentNode.tagName.toLocaleLowerCase()) !== -1) || node.nodeName.toLowerCase() === 'table' && closestParentNode && TABLE_BLOCK_TAGS.indexOf(closestParentNode.tagName.toLocaleLowerCase()) === -1)) {\n        const preNode = nodeCutter.GetSpliceNode(range, closestParentNode);\n        const sibNode = preNode.previousSibling;\n        let parentNode = preNode.parentNode;\n\n        if (nodes.length === 1 || node.nodeName.toLowerCase() === 'table' && preNode.childElementCount === 0) {\n          nodeSelection.setSelectionContents(docElement, preNode);\n          range = nodeSelection.getRange(docElement);\n        } else {\n          let lasNode = nodeCutter.GetSpliceNode(range, nodes[nodes.length - 1].parentElement);\n          lasNode = isNullOrUndefined(lasNode) ? preNode : lasNode;\n          nodeSelection.setSelectionText(docElement, preNode, lasNode, 0, lasNode.nodeType === 3 ? lasNode.textContent.length : lasNode.childNodes.length);\n          range = nodeSelection.getRange(docElement);\n        }\n\n        range.extractContents();\n\n        if (insertNode.tagName === 'TABLE') {\n          this.removeEmptyElements(editNode);\n        }\n\n        for (let index = 0; index < nodes.length; index++) {\n          if (nodes[index].nodeType !== 3 && nodes[index].parentNode != null) {\n            if (nodes[index].nodeName === 'IMG') {\n              continue;\n            }\n\n            nodes[index].parentNode.removeChild(nodes[index]);\n          }\n        }\n\n        if (sibNode) {\n          InsertMethods.AppendBefore(node, sibNode, true);\n        } else {\n          let previousNode = null;\n\n          while (parentNode !== editNode && parentNode.firstChild && parentNode.textContent.trim() === '') {\n            const parentNode1 = parentNode.parentNode;\n            previousNode = parentNode;\n            parentNode = parentNode1;\n          }\n\n          if (previousNode !== null) {\n            parentNode = previousNode;\n          }\n\n          if (parentNode.firstChild && (parentNode !== editNode || node.nodeName === 'TABLE' && isCursor && parentNode === range.startContainer && parentNode === range.endContainer)) {\n            if (parentNode.textContent.trim() === '' && parentNode !== editNode) {\n              InsertMethods.AppendBefore(node, parentNode, false);\n              detach(parentNode);\n            } else {\n              InsertMethods.AppendBefore(node, parentNode.firstChild, false);\n            }\n          } else {\n            parentNode.appendChild(node);\n          }\n        }\n\n        if (node.nodeName === 'IMG') {\n          this.imageFocus(node, nodeSelection, docElement);\n        } else if (node.nodeType !== 3) {\n          nodeSelection.setSelectionText(docElement, node, node, 0, node.childNodes.length);\n        } else {\n          nodeSelection.setSelectionText(docElement, node, node, 0, node.textContent.length);\n        }\n      } else {\n        range.deleteContents();\n\n        if (isCursor && range.startContainer.textContent === '' && range.startContainer.nodeName !== 'BR') {\n          range.startContainer.innerHTML = '';\n        }\n\n        if (Browser.isIE) {\n          const frag = docElement.createDocumentFragment();\n          frag.appendChild(node);\n          range.insertNode(frag);\n        } else if (range.startContainer.nodeType === 1 && range.startContainer.nodeName.toLowerCase() === 'hr' && range.endContainer.nodeName.toLowerCase() === 'hr') {\n          const paraElem = range.startContainer.nextElementSibling;\n\n          if (paraElem) {\n            if (paraElem.querySelector('br')) {\n              detach(paraElem.querySelector('br'));\n            }\n\n            paraElem.appendChild(node);\n          }\n        } else {\n          if (range.startContainer.nodeName === 'BR') {\n            range.startContainer.parentElement.insertBefore(node, range.startContainer);\n          } else {\n            range.insertNode(node);\n          }\n        }\n\n        if (node.nodeType !== 3 && node.childNodes.length > 0) {\n          nodeSelection.setSelectionText(docElement, node, node, 1, 1);\n        } else if (node.nodeName === 'IMG') {\n          this.imageFocus(node, nodeSelection, docElement);\n        } else if (node.nodeType !== 3) {\n          nodeSelection.setSelectionContents(docElement, node);\n        } else {\n          nodeSelection.setSelectionText(docElement, node, node, node.textContent.length, node.textContent.length);\n        }\n      }\n    }\n\n    static pasteInsertHTML(nodes, node, range, nodeSelection, nodeCutter, docElement, isCollapsed, closestParentNode, editNode) {\n      const isCursor = range.startOffset === range.endOffset && range.startContainer === range.endContainer;\n\n      if (isCursor && range.startContainer === editNode && editNode.textContent === '') {\n        const currentBlockNode = this.getImmediateBlockNode(nodes[nodes.length - 1], editNode);\n        nodeSelection.setSelectionText(docElement, currentBlockNode, currentBlockNode, 0, 0);\n        range = nodeSelection.getRange(docElement);\n      }\n\n      let lasNode;\n      let sibNode;\n      let isSingleNode;\n      let preNode;\n\n      if (editNode !== range.startContainer && (!isCollapsed && !(closestParentNode.nodeType === Node.ELEMENT_NODE && TABLE_BLOCK_TAGS.indexOf(closestParentNode.tagName.toLocaleLowerCase()) !== -1) || node.nodeName.toLowerCase() === 'table' && closestParentNode && TABLE_BLOCK_TAGS.indexOf(closestParentNode.tagName.toLocaleLowerCase()) === -1)) {\n        preNode = nodeCutter.GetSpliceNode(range, closestParentNode);\n        sibNode = isNullOrUndefined(preNode.previousSibling) ? preNode.parentNode.previousSibling : preNode.previousSibling;\n\n        if (nodes.length === 1) {\n          nodeSelection.setSelectionContents(docElement, preNode);\n          range = nodeSelection.getRange(docElement);\n          isSingleNode = true;\n        } else {\n          lasNode = nodeCutter.GetSpliceNode(range, nodes[nodes.length - 1].parentElement);\n          lasNode = isNullOrUndefined(lasNode) ? preNode : lasNode;\n          nodeSelection.setSelectionText(docElement, preNode, lasNode, 0, lasNode.nodeType === 3 ? lasNode.textContent.length : lasNode.childNodes.length);\n          range = nodeSelection.getRange(docElement);\n          isSingleNode = false;\n        }\n      }\n\n      let containsBlockNode = false;\n      this.removingComments(node);\n      const allChildNodes = node.childNodes;\n\n      for (let i = 0; i < allChildNodes.length; i++) {\n        if (BLOCK_TAGS.indexOf(allChildNodes[i].nodeName.toLocaleLowerCase()) >= 0) {\n          containsBlockNode = true;\n          break;\n        }\n      }\n\n      let lastSelectionNode;\n      const fragment = document.createDocumentFragment();\n\n      if (!containsBlockNode) {\n        if (!isCursor) {\n          while (node.firstChild) {\n            lastSelectionNode = node.firstChild;\n            fragment.appendChild(node.firstChild);\n          }\n\n          if (isSingleNode) {\n            preNode.parentNode.replaceChild(fragment, preNode);\n          } else {\n            range.deleteContents();\n            detach(lasNode); // eslint-disable-next-line\n\n            !isNullOrUndefined(sibNode) ? sibNode.parentNode.appendChild(fragment) : editNode.appendChild(fragment);\n          }\n        } else {\n          const tempSpan = createElement('span', {\n            className: 'tempSpan'\n          });\n          const nearestAnchor = closest(range.startContainer.parentElement, 'a');\n\n          if (range.startContainer.nodeType === 3 && nearestAnchor) {\n            const immediateBlockNode = this.getImmediateBlockNode(range.startContainer, editNode);\n\n            if (immediateBlockNode.querySelectorAll('br').length > 0) {\n              detach(immediateBlockNode.querySelector('br'));\n            }\n\n            const rangeElement = closest(nearestAnchor, 'span');\n            rangeElement.appendChild(tempSpan);\n          } else {\n            range.insertNode(tempSpan);\n          }\n\n          while (node.firstChild) {\n            lastSelectionNode = node.firstChild;\n            fragment.appendChild(node.firstChild);\n          }\n\n          tempSpan.parentNode.replaceChild(fragment, tempSpan);\n        }\n      } else {\n        this.insertTempNode(range, node, nodes, nodeCutter, editNode);\n        let isFirstTextNode = true;\n        let isPreviousInlineElem;\n        let paraElm;\n        let previousParent;\n        range.deleteContents();\n\n        while (node.firstChild) {\n          if (node.firstChild.nodeName === '#text' && node.firstChild.textContent.trim() === '') {\n            detach(node.firstChild);\n            continue;\n          }\n\n          if (node.firstChild.nodeName === '#text' && isFirstTextNode || this.inlineNode.indexOf(node.firstChild.nodeName.toLocaleLowerCase()) >= 0 && isFirstTextNode) {\n            lastSelectionNode = node.firstChild;\n\n            if (isNullOrUndefined(node.previousElementSibling)) {\n              const firstParaElm = createElement('p');\n              node.parentElement.insertBefore(firstParaElm, node);\n            }\n\n            node.previousElementSibling.appendChild(node.firstChild);\n          } else {\n            lastSelectionNode = node.firstChild;\n\n            if (node.firstChild.nodeName === '#text' || this.inlineNode.indexOf(node.firstChild.nodeName.toLocaleLowerCase()) >= 0) {\n              if (!isPreviousInlineElem) {\n                paraElm = createElement('p');\n                paraElm.appendChild(node.firstChild);\n                fragment.appendChild(paraElm);\n              } else {\n                previousParent.appendChild(node.firstChild);\n                fragment.appendChild(previousParent);\n              }\n\n              previousParent = paraElm;\n              isPreviousInlineElem = true;\n            } else {\n              fragment.appendChild(node.firstChild);\n              isPreviousInlineElem = false;\n            }\n\n            isFirstTextNode = false;\n          }\n        }\n\n        node.parentNode.replaceChild(fragment, node);\n      }\n\n      if (lastSelectionNode.nodeName === '#text') {\n        this.placeCursorEnd(lastSelectionNode, node, nodeSelection, docElement, editNode);\n      } else {\n        this.cursorPos(lastSelectionNode, node, nodeSelection, docElement, editNode);\n      }\n    }\n\n    static placeCursorEnd(lastSelectionNode, node, nodeSelection, docElement, editNode) {\n      lastSelectionNode = lastSelectionNode.nodeName === 'BR' ? isNullOrUndefined(lastSelectionNode.previousSibling) ? lastSelectionNode.parentNode : lastSelectionNode.previousSibling : lastSelectionNode;\n\n      while (!isNullOrUndefined(lastSelectionNode) && lastSelectionNode.nodeName !== '#text' && lastSelectionNode.nodeName !== 'IMG' && lastSelectionNode.nodeName !== 'BR' && lastSelectionNode.nodeName !== 'HR') {\n        lastSelectionNode = lastSelectionNode.lastChild;\n      }\n\n      lastSelectionNode = isNullOrUndefined(lastSelectionNode) ? node : lastSelectionNode;\n\n      if (lastSelectionNode.nodeName === 'IMG') {\n        this.imageFocus(lastSelectionNode, nodeSelection, docElement);\n      } else {\n        nodeSelection.setSelectionText(docElement, lastSelectionNode, lastSelectionNode, lastSelectionNode.textContent.length, lastSelectionNode.textContent.length);\n      }\n\n      this.removeEmptyElements(editNode);\n    }\n\n    static getNodeCollection(range, nodeSelection, node) {\n      let nodes = [];\n\n      if (range.startOffset === range.endOffset && range.startContainer === range.endContainer && (range.startContainer.nodeName === 'TD' || range.startContainer.nodeType !== 3 && node.classList && node.classList.contains('pasteContent'))) {\n        nodes.push(range.startContainer.childNodes[range.endOffset]);\n      } else {\n        nodes = nodeSelection.getInsertNodeCollection(range);\n      }\n\n      return nodes;\n    }\n\n    static insertTempNode(range, node, nodes, nodeCutter, editNode) {\n      if (range.startContainer === editNode && !isNullOrUndefined(range.startContainer.childNodes[range.endOffset - 1]) && range.startContainer.childNodes[range.endOffset - 1].nodeName === 'TABLE') {\n        if (isNullOrUndefined(range.startContainer.childNodes[range.endOffset - 1].nextSibling)) {\n          range.startContainer.appendChild(node);\n        } else {\n          range.startContainer.insertBefore(node, range.startContainer.childNodes[range.endOffset - 1].nextSibling);\n        }\n      } else if (range.startContainer === editNode && !isNullOrUndefined(range.startContainer.childNodes[range.endOffset]) && range.startContainer.childNodes[range.endOffset].nodeName === 'TABLE') {\n        range.startContainer.insertBefore(node, range.startContainer.childNodes[range.endOffset]);\n      } else if (range.startContainer === range.endContainer && range.startContainer.nodeType !== 3 && node.firstChild.nodeName === 'HR') {\n        if (range.startContainer.classList.contains('e-content') || range.startContainer.nodeName === 'BODY') {\n          range.startContainer.appendChild(node);\n        } else {\n          range.startContainer.parentNode.insertBefore(node, range.startContainer);\n        }\n      } else {\n        let blockNode = this.getImmediateBlockNode(nodes[nodes.length - 1], editNode);\n\n        if ((isNullOrUndefined(blockNode) || isNullOrUndefined(blockNode.parentElement)) && range.endContainer.nodeType !== 3) {\n          blockNode = range.endContainer;\n          range.setEnd(blockNode, range.endContainer.textContent.length);\n        }\n\n        if (blockNode.nodeName === 'BODY' && range.startContainer === range.endContainer && range.startContainer.nodeType === 1) {\n          blockNode = range.startContainer;\n        }\n\n        if (blockNode.closest('LI') && node && node.firstElementChild && (node.firstElementChild.tagName === 'OL' || node.firstElementChild.tagName === 'UL')) {\n          let liNode;\n\n          while (node.firstElementChild.lastElementChild && node.firstElementChild.lastElementChild.tagName === 'LI') {\n            liNode = node.firstElementChild.lastElementChild;\n            liNode.style.removeProperty('margin-left');\n            liNode.style.removeProperty('margin-top');\n            liNode.style.removeProperty('margin-bottom');\n            node.firstElementChild.insertAdjacentElement('afterend', liNode);\n          }\n        }\n\n        if (blockNode.nodeName === 'TD' || blockNode.nodeName === 'TH') {\n          const tempSpan = createElement('span', {\n            className: 'tempSpan'\n          });\n          range.insertNode(tempSpan);\n          tempSpan.parentNode.replaceChild(node, tempSpan);\n        } else {\n          let currentNode = nodes[nodes.length - 1];\n          let splitedElm;\n\n          if ((currentNode.nodeName === 'BR' || currentNode.nodeName === 'HR') && !isNullOrUndefined(currentNode.parentElement) && currentNode.parentElement.textContent.trim().length === 0 && !node.classList.contains('pasteContent')) {\n            splitedElm = currentNode;\n          } else {\n            splitedElm = nodeCutter.GetSpliceNode(range, blockNode);\n          }\n\n          splitedElm.parentNode.replaceChild(node, splitedElm);\n        }\n      }\n    }\n\n    static cursorPos(lastSelectionNode, node, nodeSelection, docElement, editNode) {\n      lastSelectionNode.classList.add('lastNode');\n      editNode.innerHTML = updateTextNode$1(editNode.innerHTML);\n      lastSelectionNode = editNode.querySelector('.lastNode');\n\n      if (!isNullOrUndefined(lastSelectionNode)) {\n        this.placeCursorEnd(lastSelectionNode, node, nodeSelection, docElement, editNode);\n        lastSelectionNode.classList.remove('lastNode');\n\n        if (lastSelectionNode.classList.length === 0) {\n          lastSelectionNode.removeAttribute('class');\n        }\n      }\n    }\n\n    static imageFocus(node, nodeSelection, docElement) {\n      const focusNode = document.createTextNode(' ');\n      node.parentNode.insertBefore(focusNode, node.nextSibling);\n      nodeSelection.setSelectionText(docElement, node.nextSibling, node.nextSibling, 0, 0);\n    } // eslint-disable-next-line\n\n\n    static getImmediateBlockNode(node, editNode) {\n      do {\n        node = node.parentNode;\n      } while (node && BLOCK_TAGS.indexOf(node.nodeName.toLocaleLowerCase()) < 0);\n\n      return node;\n    }\n\n    static removingComments(elm) {\n      let innerElement = elm.innerHTML;\n      innerElement = innerElement.replace(/<!--[\\s\\S]*?-->/g, '');\n      elm.innerHTML = innerElement;\n    }\n\n    static findDetachEmptyElem(element) {\n      let removableElement;\n\n      if (!isNullOrUndefined(element.parentElement)) {\n        if (element.parentElement.textContent.trim() === '' && element.parentElement.contentEditable !== 'true') {\n          removableElement = this.findDetachEmptyElem(element.parentElement);\n        } else {\n          removableElement = element;\n        }\n      } else {\n        removableElement = null;\n      }\n\n      return removableElement;\n    }\n\n    static removeEmptyElements(element) {\n      const emptyElements = element.querySelectorAll(':empty');\n\n      for (let i = 0; i < emptyElements.length; i++) {\n        if (emptyElements[i].tagName !== 'IMG' && emptyElements[i].tagName !== 'BR' && emptyElements[i].tagName !== 'IFRAME' && emptyElements[i].tagName !== 'TD' && emptyElements[i].tagName !== 'SOURCE' && emptyElements[i].tagName !== 'HR') {\n          const detachableElement = this.findDetachEmptyElem(emptyElements[i]);\n\n          if (!isNullOrUndefined(detachableElement)) {\n            detach(detachableElement);\n          }\n        }\n      }\n    }\n\n    static closestEle(element, editNode) {\n      let el = element;\n\n      while (el && el.nodeType === 1) {\n        if (el.parentNode === editNode || !isNullOrUndefined(el.parentNode.tagName) && IGNORE_BLOCK_TAGS.indexOf(el.parentNode.tagName.toLocaleLowerCase()) !== -1) {\n          return el;\n        }\n\n        el = el.parentNode;\n      }\n\n      return null;\n    }\n\n  }\n\n  /**\n   * Insert method\n   *\n   * @hidden\n   * @deprecated\n   */\n  InsertHtml.inlineNode = ['a', 'abbr', 'acronym', 'audio', 'b', 'bdi', 'bdo', 'big', 'br', 'button', 'canvas', 'cite', 'code', 'data', 'datalist', 'del', 'dfn', 'em', 'embed', 'font', 'i', 'iframe', 'img', 'input', 'ins', 'kbd', 'label', 'map', 'mark', 'meter', 'noscript', 'object', 'output', 'picture', 'progress', 'q', 'ruby', 's', 'samp', 'script', 'select', 'slot', 'small', 'span', 'strong', 'sub', 'sup', 'svg', 'template', 'textarea', 'time', 'u', 'tt', 'var', 'video', 'wbr'];\n  /**\n   * Link internal component\n   *\n   * @hidden\n   * @deprecated\n   */\n\n  return InsertHtml;\n})();\n\nclass LinkCommand {\n  /**\n   * Constructor for creating the Formats plugin\n   *\n   * @param {EditorManager} parent - specifies the editor manager\n   * @hidden\n   * @deprecated\n   */\n  constructor(parent) {\n    this.parent = parent;\n    this.addEventListener();\n  }\n\n  addEventListener() {\n    this.parent.observer.on(LINK, this.linkCommand, this);\n  }\n\n  linkCommand(e) {\n    switch (e.value.toString().toLocaleLowerCase()) {\n      case 'createlink':\n      case 'editlink':\n        this.createLink(e);\n        break;\n\n      case 'openlink':\n        this.openLink(e);\n        break;\n\n      case 'removelink':\n        this.removeLink(e);\n        break;\n    }\n  }\n\n  createLink(e) {\n    let closestAnchor = !isNullOrUndefined(e.item.selectParent) && e.item.selectParent.length > 0 && closest(e.item.selectParent[0], 'a');\n    closestAnchor = !isNullOrUndefined(closestAnchor) ? closestAnchor : !isNullOrUndefined(e.item.selectParent) && e.item.selectParent.length > 0 ? e.item.selectParent[0] : null;\n\n    if (!isNullOrUndefined(closestAnchor) && closestAnchor.tagName === 'A') {\n      const anchorEle = closestAnchor;\n      let linkText = '';\n\n      if (!isNullOrUndefined(e.item.url)) {\n        anchorEle.setAttribute('href', e.item.url);\n      }\n\n      if (!isNullOrUndefined(e.item.title)) {\n        anchorEle.setAttribute('title', e.item.title);\n      }\n\n      if (!isNullOrUndefined(e.item.text) && e.item.text !== '') {\n        linkText = anchorEle.innerText;\n        anchorEle.innerText = e.item.text;\n      }\n\n      if (!isNullOrUndefined(e.item.target)) {\n        anchorEle.setAttribute('target', e.item.target);\n      } else {\n        anchorEle.removeAttribute('target');\n      }\n\n      if (linkText === e.item.text) {\n        e.item.selection.setSelectionText(this.parent.currentDocument, anchorEle, anchorEle, 1, 1);\n        e.item.selection.restore();\n      } else {\n        const startIndex = e.item.action === 'Paste' ? anchorEle.childNodes[0].textContent.length : 0;\n        e.item.selection.setSelectionText(this.parent.currentDocument, anchorEle.childNodes[0], anchorEle.childNodes[0], startIndex, anchorEle.childNodes[0].textContent.length);\n      }\n    } else {\n      const domSelection = new NodeSelection();\n      const range = domSelection.getRange(this.parent.currentDocument);\n      const text = isNullOrUndefined(e.item.text) ? true : e.item.text.replace(/ /g, '').localeCompare(range.toString().replace(/\\n/g, ' ').replace(/ /g, '')) < 0;\n\n      if (e.event && e.event.type === 'keydown' && (e.event.keyCode === 32 || e.event.keyCode === 13) || e.item.action === 'Paste' || range.collapsed || text) {\n        const anchor = this.createAchorNode(e);\n        anchor.innerText = e.item.text === '' ? e.item.url : e.item.text;\n        e.item.selection.restore();\n        InsertHtml.Insert(this.parent.currentDocument, anchor, this.parent.editableElement);\n\n        if (e.event && e.event.type === 'keydown' && (e.event.keyCode === 32 || e.event.keyCode === 13)) {\n          const startContainer = e.item.selection.range.startContainer;\n          startContainer.textContent = this.removeText(startContainer.textContent, e.item.text);\n        } else {\n          const startIndex = e.item.action === 'Paste' ? anchor.childNodes[0].textContent.length : 0;\n          e.item.selection.setSelectionText(this.parent.currentDocument, anchor.childNodes[0], anchor.childNodes[0], startIndex, anchor.childNodes[0].textContent.length);\n        }\n      } else {\n        this.createLinkNode(e);\n      }\n    }\n\n    if (e.callBack) {\n      e.callBack({\n        requestType: 'Links',\n        editorMode: 'HTML',\n        event: e.event,\n        range: this.parent.nodeSelection.getRange(this.parent.currentDocument),\n        elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)\n      });\n    }\n  }\n\n  createLinkNode(e) {\n    const domSelection = new NodeSelection();\n    const nodeCutter = new NodeCutter();\n    const range = domSelection.getRange(this.parent.currentDocument);\n    const nodes = this.getSelectionNodes(domSelection.getNodeCollection(range));\n    const save = domSelection.save(range, this.parent.currentDocument);\n    const txtArray = [];\n    const inlineNodes = [];\n    let currentNode;\n    const removeNodes = [];\n    const anchorNodes = [];\n    const finalinlineNodes = [];\n    let cloneNode;\n\n    for (let index = 0; index < nodes.length; index++) {\n      nodes[index] = nodeCutter.GetSpliceNode(range, nodes[index]);\n      txtArray[index] = nodes[index];\n    }\n\n    for (let i = 0; i < txtArray.length; i++) {\n      let check = true;\n      currentNode = txtArray[i];\n\n      while (check === true) {\n        if (currentNode.parentNode.nodeName === 'A') {\n          const anchorEle = currentNode.parentNode;\n          currentNode.parentNode.parentNode.insertBefore(anchorEle.firstChild, anchorEle);\n          currentNode.parentNode.removeChild(anchorEle);\n        }\n\n        if (this.isBlockNode(currentNode.parentNode) || txtArray.length === 0 || i === 0 || i === txtArray.length - 1 || range.startContainer.nodeType === 3) {\n          inlineNodes[i] = currentNode;\n          check = false;\n        } else {\n          currentNode = currentNode.parentNode;\n        }\n      }\n    }\n\n    for (let i = 0, j = 0; i < inlineNodes.length; i++) {\n      if (i === 0) {\n        finalinlineNodes[j] = inlineNodes[i];\n      }\n\n      if (inlineNodes.length > 1 && i < inlineNodes.length - 1) {\n        if (inlineNodes[i].parentElement === inlineNodes[i + 1].parentElement && inlineNodes[i] === inlineNodes[i + 1]) {\n          continue;\n        } else {\n          finalinlineNodes[j + 1] = inlineNodes[i + 1];\n          j++;\n        }\n      }\n    }\n\n    let j = 0;\n    anchorNodes[j] = this.createAchorNode(e);\n\n    for (let i = 0; i < finalinlineNodes.length; i++) {\n      if (i === 0) {\n        cloneNode = finalinlineNodes[i].cloneNode(true);\n        anchorNodes[i].appendChild(cloneNode);\n      }\n\n      if (i < finalinlineNodes.length - 1) {\n        if (finalinlineNodes[i].parentNode === finalinlineNodes[i + 1].parentNode) {\n          const cln = finalinlineNodes[i + 1].cloneNode(true);\n          anchorNodes[j].appendChild(cln);\n        } else {\n          j = j + 1;\n          anchorNodes[j] = this.createAchorNode(e);\n          cloneNode = finalinlineNodes[i + 1].cloneNode(true);\n          anchorNodes[j].appendChild(cloneNode);\n        }\n      }\n    }\n\n    this.parent.nodeSelection.setRange(document, save.range);\n\n    for (let i = 0, j = 0, k = 0; i <= finalinlineNodes.length; i++) {\n      if (i === 0) {\n        finalinlineNodes[i].parentNode.insertBefore(anchorNodes[j], finalinlineNodes[i].nextSibling);\n\n        if (this.parent.domNode.blockNodes().length === 1) {\n          this.parent.nodeSelection.setSelectionNode(this.parent.currentDocument, anchorNodes[j]);\n        }\n\n        removeNodes[k] = finalinlineNodes[i];\n        k++;\n      }\n\n      if (i < finalinlineNodes.length - 1) {\n        if (finalinlineNodes[i].parentNode === finalinlineNodes[i + 1].parentNode) {\n          removeNodes[k] = finalinlineNodes[i + 1];\n          k++;\n        } else {\n          j = j + 1;\n          finalinlineNodes[i + 1].parentNode.insertBefore(anchorNodes[j], finalinlineNodes[i + 1]);\n          removeNodes[k] = finalinlineNodes[i + 1];\n          k++;\n        }\n      }\n    }\n\n    for (let i = 0; i < removeNodes.length; i++) {\n      if (removeNodes[i].parentNode) {\n        removeNodes[i].parentNode.removeChild(removeNodes[i]);\n      }\n    }\n  }\n\n  createAchorNode(e) {\n    const anchorEle = createElement('a', {\n      className: 'e-rte-anchor',\n      attrs: {\n        href: e.item.url,\n        title: isNullOrUndefined(e.item.title) || e.item.title === '' ? e.item.url : e.item.title\n      }\n    });\n\n    if (!isNullOrUndefined(e.item.target)) {\n      anchorEle.setAttribute('target', e.item.target);\n    }\n\n    return anchorEle;\n  }\n\n  getSelectionNodes(nodeCollection) {\n    nodeCollection = nodeCollection.reverse();\n\n    for (let index = 0; index < nodeCollection.length; index++) {\n      if (nodeCollection[index].nodeType !== 3 || nodeCollection[index].textContent.trim() === '') {\n        if (nodeCollection[index].nodeName !== 'IMG') {\n          nodeCollection.splice(index, 1);\n          index--;\n        }\n      }\n    }\n\n    return nodeCollection.reverse();\n  }\n\n  isBlockNode(element) {\n    return !!element && element.nodeType === Node.ELEMENT_NODE && BLOCK_TAGS.indexOf(element.tagName.toLowerCase()) >= 0;\n  }\n\n  removeText(text, val) {\n    const arr = text.split(' ');\n\n    for (let i = 0; i < arr.length; i++) {\n      if (arr[i] === val) {\n        arr.splice(i, 1);\n        i--;\n      }\n    }\n\n    return arr.join(' ') + ' ';\n  }\n\n  openLink(e) {\n    document.defaultView.open(e.item.url, e.item.target);\n    this.callBack(e);\n  }\n\n  removeLink(e) {\n    const blockNodes = this.parent.domNode.blockNodes();\n\n    if (blockNodes.length < 2) {\n      this.parent.domNode.setMarker(e.item.selection);\n      const closestAnchor = closest(e.item.selectParent[0], 'a');\n      const selectParent = closestAnchor ? closestAnchor : e.item.selectParent[0];\n      const parent = selectParent.parentNode;\n      const child = [];\n\n      for (; selectParent.firstChild; null) {\n        child.push(parent.insertBefore(selectParent.firstChild, selectParent));\n      }\n\n      parent.removeChild(selectParent);\n\n      if (child && child.length === 1) {\n        e.item.selection.startContainer = e.item.selection.getNodeArray(child[child.length - 1], true);\n        e.item.selection.endContainer = e.item.selection.startContainer;\n      }\n\n      e.item.selection = this.parent.domNode.saveMarker(e.item.selection);\n    } else {\n      for (let i = 0; i < blockNodes.length; i++) {\n        const linkNode = blockNodes[i].querySelectorAll('a');\n\n        for (let j = 0; j < linkNode.length; j++) {\n          if (document.getSelection().containsNode(linkNode[j], true)) {\n            linkNode[j].outerHTML = linkNode[j].innerHTML;\n          }\n        }\n      }\n    }\n\n    e.item.selection.restore();\n    this.callBack(e);\n  }\n\n  callBack(e) {\n    if (e.callBack) {\n      e.callBack({\n        requestType: e.item.subCommand,\n        editorMode: 'HTML',\n        event: e.event,\n        range: this.parent.nodeSelection.getRange(this.parent.currentDocument),\n        elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)\n      });\n    }\n  }\n\n}\n/**\n * Formats internal component\n *\n * @hidden\n * @deprecated\n */\n\n\nclass Alignments {\n  /**\n   * Constructor for creating the Formats plugin\n   *\n   * @param {EditorManager} parent - specifies the parent element.\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n  constructor(parent) {\n    this.alignments = {\n      'JustifyLeft': 'left',\n      'JustifyCenter': 'center',\n      'JustifyRight': 'right',\n      'JustifyFull': 'justify'\n    };\n    this.parent = parent;\n    this.addEventListener();\n  }\n\n  addEventListener() {\n    this.parent.observer.on(ALIGNMENT_TYPE, this.applyAlignment, this);\n    this.parent.observer.on(KEY_DOWN_HANDLER, this.onKeyDown, this);\n  }\n\n  onKeyDown(e) {\n    switch (e.event.action) {\n      case 'justify-center':\n        this.applyAlignment({\n          subCommand: 'JustifyCenter',\n          callBack: e.callBack\n        });\n        e.event.preventDefault();\n        break;\n\n      case 'justify-full':\n        this.applyAlignment({\n          subCommand: 'JustifyFull',\n          callBack: e.callBack\n        });\n        e.event.preventDefault();\n        break;\n\n      case 'justify-left':\n        this.applyAlignment({\n          subCommand: 'JustifyLeft',\n          callBack: e.callBack\n        });\n        e.event.preventDefault();\n        break;\n\n      case 'justify-right':\n        this.applyAlignment({\n          subCommand: 'JustifyRight',\n          callBack: e.callBack\n        });\n        e.event.preventDefault();\n        break;\n    }\n  }\n\n  getTableNode(range) {\n    const startNode = range.startContainer.nodeType === Node.ELEMENT_NODE ? range.startContainer : range.startContainer.parentNode;\n    const cellNode = closest(startNode, 'td,th');\n    return [cellNode];\n  }\n\n  applyAlignment(e) {\n    const isTableAlign = e.value === 'Table' ? true : false;\n    const range = this.parent.nodeSelection.getRange(this.parent.currentDocument);\n    let save = this.parent.nodeSelection.save(range, this.parent.currentDocument);\n\n    if (!isTableAlign) {\n      this.parent.domNode.setMarker(save);\n      const alignmentNodes = this.parent.domNode.blockNodes();\n\n      for (let i = 0; i < alignmentNodes.length; i++) {\n        const parentNode = alignmentNodes[i];\n        setStyleAttribute(parentNode, {\n          'text-align': this.alignments[e.subCommand]\n        });\n      }\n\n      const imageTags = this.parent.domNode.getImageTagInSelection();\n\n      for (let i = 0; i < imageTags.length; i++) {\n        const elementNode = [];\n        elementNode.push(imageTags[i]);\n        this.parent.imgObj.imageCommand({\n          item: {\n            selectNode: elementNode\n          },\n          subCommand: e.subCommand,\n          value: e.subCommand,\n          callBack: e.callBack,\n          selector: e.selector\n        });\n      }\n\n      this.parent.editableElement.focus();\n      save = this.parent.domNode.saveMarker(save);\n\n      if (isIDevice$1()) {\n        setEditFrameFocus(this.parent.editableElement, e.selector);\n      }\n\n      save.restore();\n    } else {\n      setStyleAttribute(this.getTableNode(range)[0], {\n        'text-align': this.alignments[e.subCommand]\n      });\n    }\n\n    if (e.callBack) {\n      e.callBack({\n        requestType: e.subCommand,\n        editorMode: 'HTML',\n        event: e.event,\n        range: this.parent.nodeSelection.getRange(this.parent.currentDocument),\n        elements: isTableAlign ? this.getTableNode(range) : this.parent.domNode.blockNodes()\n      });\n    }\n  }\n\n}\n/**\n * Indents internal component\n *\n * @hidden\n * @deprecated\n */\n\n\nclass Indents {\n  /**\n   * Constructor for creating the Formats plugin\n   *\n   * @param {EditorManager} parent - specifies the parent element\n   * @hidden\n   * @deprecated\n   */\n  constructor(parent) {\n    this.indentValue = 20;\n    this.parent = parent;\n    this.addEventListener();\n  }\n\n  addEventListener() {\n    this.parent.observer.on(INDENT_TYPE, this.applyIndents, this);\n    this.parent.observer.on(KEY_DOWN_HANDLER, this.onKeyDown, this);\n  }\n\n  onKeyDown(e) {\n    switch (e.event.action) {\n      case 'indents':\n        this.applyIndents({\n          subCommand: 'Indent',\n          callBack: e.callBack\n        });\n        e.event.preventDefault();\n        break;\n\n      case 'outdents':\n        this.applyIndents({\n          subCommand: 'Outdent',\n          callBack: e.callBack\n        });\n        e.event.preventDefault();\n        break;\n    }\n  }\n\n  applyIndents(e) {\n    const editEle = this.parent.editableElement;\n    const isRtl = editEle.classList.contains('e-rtl');\n    const range = this.parent.nodeSelection.getRange(this.parent.currentDocument);\n    let save = this.parent.nodeSelection.save(range, this.parent.currentDocument);\n    this.parent.domNode.setMarker(save);\n    const indentsNodes = this.parent.domNode.blockNodes();\n    const parentNodes = indentsNodes.slice();\n    const listsNodes = [];\n\n    for (let i = 0; i < parentNodes.length; i++) {\n      if (parentNodes[i].tagName !== 'LI' && 'LI' === parentNodes[i].parentNode.tagName) {\n        indentsNodes.splice(indentsNodes.indexOf(parentNodes[i]), 1);\n        listsNodes.push(parentNodes[i].parentNode);\n      } else if (parentNodes[i].tagName === 'LI') {\n        indentsNodes.splice(indentsNodes.indexOf(parentNodes[i]), 1);\n        listsNodes.push(parentNodes[i]);\n      }\n    }\n\n    if (listsNodes.length > 0) {\n      this.parent.observer.notify(KEY_DOWN_HANDLER, {\n        event: {\n          preventDefault: () => {\n            return;\n          },\n          stopPropagation: () => {\n            return;\n          },\n          shiftKey: e.subCommand === 'Indent' ? false : true,\n          which: 9,\n          action: 'indent'\n        },\n        ignoreDefault: true\n      });\n    }\n\n    for (let i = 0; i < indentsNodes.length; i++) {\n      const parentNode = indentsNodes[i];\n      const marginLeftOrRight = isRtl ? parentNode.style.marginRight : parentNode.style.marginLeft;\n      let indentsValue;\n\n      if (e.subCommand === 'Indent') {\n        /* eslint-disable */\n        indentsValue = marginLeftOrRight === '' ? this.indentValue + 'px' : parseInt(marginLeftOrRight, null) + this.indentValue + 'px';\n        isRtl ? parentNode.style.marginRight = indentsValue : parentNode.style.marginLeft = indentsValue;\n      } else {\n        indentsValue = marginLeftOrRight === '' || marginLeftOrRight === '0px' ? '' : parseInt(marginLeftOrRight, null) - this.indentValue + 'px';\n        isRtl ? parentNode.style.marginRight = indentsValue : parentNode.style.marginLeft = indentsValue;\n        /* eslint-enable */\n      }\n    }\n\n    editEle.focus();\n\n    if (isIDevice$1()) {\n      setEditFrameFocus(editEle, e.selector);\n    }\n\n    save = this.parent.domNode.saveMarker(save);\n    save.restore();\n\n    if (e.callBack) {\n      e.callBack({\n        requestType: e.subCommand,\n        editorMode: 'HTML',\n        event: e.event,\n        range: this.parent.nodeSelection.getRange(this.parent.currentDocument),\n        elements: this.parent.domNode.blockNodes()\n      });\n    }\n  }\n\n}\n/**\n * Rich Text Editor classes defined here.\n */\n\n/**\n * @hidden\n * @deprecated\n */\n\n\nconst CLASS_IMAGE_RIGHT = 'e-imgright';\nconst CLASS_IMAGE_LEFT = 'e-imgleft';\nconst CLASS_IMAGE_CENTER = 'e-imgcenter';\nconst CLASS_IMAGE_BREAK = 'e-imgbreak';\nconst CLASS_CAPTION = 'e-img-caption';\nconst CLASS_RTE_CAPTION = 'e-rte-img-caption';\nconst CLASS_CAPTION_INLINE = 'e-caption-inline';\nconst CLASS_IMAGE_INLINE = 'e-imginline';\n/**\n * Link internal component\n *\n * @hidden\n * @deprecated\n */\n\nclass ImageCommand {\n  /**\n   * Constructor for creating the Formats plugin\n   *\n   * @param {EditorManager} parent - specifies the parent element\n   * @hidden\n   * @deprecated\n   */\n  constructor(parent) {\n    this.parent = parent;\n    this.addEventListener();\n  }\n\n  addEventListener() {\n    this.parent.observer.on(IMAGE, this.imageCommand, this);\n  }\n  /**\n   * imageCommand method\n   *\n   * @param {IHtmlItem} e - specifies the element\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  imageCommand(e) {\n    switch (e.value.toString().toLowerCase()) {\n      case 'image':\n      case 'replace':\n        this.createImage(e);\n        break;\n\n      case 'insertlink':\n        this.insertImageLink(e);\n        break;\n\n      case 'openimagelink':\n        this.openImageLink(e);\n        break;\n\n      case 'editimagelink':\n        this.editImageLink(e);\n        break;\n\n      case 'removeimagelink':\n        this.removeImageLink(e);\n        break;\n\n      case 'remove':\n        this.removeImage(e);\n        break;\n\n      case 'alttext':\n        this.insertAltTextImage(e);\n        break;\n\n      case 'dimension':\n        this.imageDimension(e);\n        break;\n\n      case 'caption':\n        this.imageCaption(e);\n        break;\n\n      case 'justifyleft':\n        this.imageJustifyLeft(e);\n        break;\n\n      case 'justifycenter':\n        this.imageJustifyCenter(e);\n        break;\n\n      case 'justifyright':\n        this.imageJustifyRight(e);\n        break;\n\n      case 'inline':\n        this.imageInline(e);\n        break;\n\n      case 'break':\n        this.imageBreak(e);\n        break;\n    }\n  }\n\n  createImage(e) {\n    let isReplaced = false;\n    e.item.url = isNullOrUndefined(e.item.url) || e.item.url === 'undefined' ? e.item.src : e.item.url;\n\n    if (!isNullOrUndefined(e.item.selectParent) && e.item.selectParent[0].tagName === 'IMG') {\n      const imgEle = e.item.selectParent[0];\n      this.setStyle(imgEle, e);\n      isReplaced = true;\n    } else {\n      const imgElement = createElement('img');\n      this.setStyle(imgElement, e);\n\n      if (!isNullOrUndefined(e.item.selection)) {\n        e.item.selection.restore();\n      }\n\n      if (!isNullOrUndefined(e.selector) && e.selector === 'pasteCleanupModule') {\n        e.callBack({\n          requestType: 'Images',\n          editorMode: 'HTML',\n          event: e.event,\n          range: this.parent.nodeSelection.getRange(this.parent.currentDocument),\n          elements: [imgElement]\n        });\n      } else {\n        InsertHtml.Insert(this.parent.currentDocument, imgElement, this.parent.editableElement);\n      }\n    }\n\n    if (e.callBack && (isNullOrUndefined(e.selector) || !isNullOrUndefined(e.selector) && e.selector !== 'pasteCleanupModule')) {\n      const selectedNode = this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)[0];\n      const imgElm = e.value === 'Replace' || isReplaced ? e.item.selectParent[0] : Browser.isIE ? selectedNode.previousSibling : selectedNode.previousElementSibling;\n      imgElm.addEventListener('load', () => {\n        if (e.value !== 'Replace' || !isReplaced) {\n          e.callBack({\n            requestType: 'Images',\n            editorMode: 'HTML',\n            event: e.event,\n            range: this.parent.nodeSelection.getRange(this.parent.currentDocument),\n            elements: [imgElm]\n          });\n        }\n      });\n    }\n  }\n\n  setStyle(imgElement, e) {\n    if (!isNullOrUndefined(e.item.url)) {\n      imgElement.setAttribute('src', e.item.url);\n    }\n\n    imgElement.setAttribute('class', 'e-rte-image' + (isNullOrUndefined(e.item.cssClass) ? '' : ' ' + e.item.cssClass));\n\n    if (!isNullOrUndefined(e.item.altText)) {\n      imgElement.setAttribute('alt', e.item.altText);\n    }\n\n    if (!isNullOrUndefined(e.item.width) && !isNullOrUndefined(e.item.width.width)) {\n      imgElement.setAttribute('width', this.calculateStyleValue(e.item.width.width));\n    }\n\n    if (!isNullOrUndefined(e.item.height) && !isNullOrUndefined(e.item.height.height)) {\n      imgElement.setAttribute('height', this.calculateStyleValue(e.item.height.height));\n    }\n\n    if (!isNullOrUndefined(e.item.width) && !isNullOrUndefined(e.item.width.minWidth)) {\n      imgElement.style.minWidth = this.calculateStyleValue(e.item.width.minWidth);\n    }\n\n    if (!isNullOrUndefined(e.item.width) && !isNullOrUndefined(e.item.width.maxWidth)) {\n      imgElement.style.maxWidth = this.calculateStyleValue(e.item.width.maxWidth);\n    }\n\n    if (!isNullOrUndefined(e.item.height) && !isNullOrUndefined(e.item.height.minHeight)) {\n      imgElement.style.minHeight = this.calculateStyleValue(e.item.height.minHeight);\n    }\n\n    if (!isNullOrUndefined(e.item.height) && !isNullOrUndefined(e.item.height.maxHeight)) {\n      imgElement.style.maxHeight = this.calculateStyleValue(e.item.height.maxHeight);\n    }\n  }\n\n  calculateStyleValue(value) {\n    let styleValue;\n\n    if (typeof value === 'string') {\n      if (value.indexOf('px') || value.indexOf('%') || value.indexOf('auto')) {\n        styleValue = value;\n      } else {\n        styleValue = value + 'px';\n      }\n    } else {\n      styleValue = value + 'px';\n    }\n\n    return styleValue;\n  }\n\n  insertImageLink(e) {\n    const anchor = createElement('a', {\n      attrs: {\n        href: e.item.url\n      }\n    });\n\n    if (e.item.selectNode[0].parentElement.classList.contains('e-img-wrap')) {\n      e.item.selection.restore();\n      anchor.setAttribute('contenteditable', 'true');\n    }\n\n    anchor.appendChild(e.item.selectNode[0]);\n\n    if (!isNullOrUndefined(e.item.target)) {\n      anchor.setAttribute('target', e.item.target);\n    }\n\n    InsertHtml.Insert(this.parent.currentDocument, anchor, this.parent.editableElement);\n    this.callBack(e);\n  }\n\n  openImageLink(e) {\n    document.defaultView.open(e.item.url, e.item.target);\n    this.callBack(e);\n  }\n\n  removeImageLink(e) {\n    const selectParent = e.item.selectParent[0];\n\n    if (selectParent.classList.contains('e-img-caption')) {\n      const capImgWrap = select('.e-img-wrap', selectParent);\n      const textEle = select('.e-img-inner', selectParent);\n      const newTextEle = textEle.cloneNode(true);\n      detach(select('a', selectParent));\n      detach(textEle);\n      capImgWrap.appendChild(e.item.insertElement);\n      capImgWrap.appendChild(newTextEle);\n    } else {\n      detach(selectParent);\n\n      if (Browser.isIE) {\n        e.item.selection.restore();\n      }\n\n      InsertHtml.Insert(this.parent.currentDocument, e.item.insertElement, this.parent.editableElement);\n    }\n\n    this.callBack(e);\n  }\n\n  editImageLink(e) {\n    e.item.selectNode[0].parentElement.href = e.item.url;\n\n    if (isNullOrUndefined(e.item.target)) {\n      e.item.selectNode[0].parentElement.removeAttribute('target');\n    } else {\n      e.item.selectNode[0].parentElement.target = e.item.target;\n    }\n\n    this.callBack(e);\n  }\n\n  removeImage(e) {\n    if (closest(e.item.selectNode[0], 'a')) {\n      if (e.item.selectNode[0].parentElement.nodeName === 'A' && !isNullOrUndefined(e.item.selectNode[0].parentElement.innerText)) {\n        detach(e.item.selectNode[0]);\n      } else {\n        detach(closest(e.item.selectNode[0], 'a'));\n      }\n    } else if (!isNullOrUndefined(closest(e.item.selectNode[0], '.' + CLASS_CAPTION))) {\n      detach(closest(e.item.selectNode[0], '.' + CLASS_CAPTION));\n    } else {\n      detach(e.item.selectNode[0]);\n    }\n\n    this.callBack(e);\n  }\n\n  insertAltTextImage(e) {\n    e.item.selectNode[0].setAttribute('alt', e.item.altText);\n    this.callBack(e);\n  }\n\n  imageDimension(e) {\n    const selectNode = e.item.selectNode[0];\n    selectNode.style.height = '';\n    selectNode.style.width = '';\n\n    if (e.item.width !== 'auto') {\n      selectNode.style.width = formatUnit(e.item.width);\n    } else {\n      selectNode.removeAttribute('width');\n    }\n\n    if (e.item.height !== 'auto') {\n      selectNode.style.height = formatUnit(e.item.height);\n    } else {\n      selectNode.removeAttribute('height');\n    }\n\n    this.callBack(e);\n  }\n\n  imageCaption(e) {\n    InsertHtml.Insert(this.parent.currentDocument, e.item.insertElement, this.parent.editableElement);\n    this.callBack(e);\n  }\n\n  imageJustifyLeft(e) {\n    const selectNode = e.item.selectNode[0];\n\n    if (!isNullOrUndefined(selectNode)) {\n      selectNode.removeAttribute('class');\n      addClass([selectNode], 'e-rte-image');\n\n      if (!isNullOrUndefined(closest(selectNode, '.' + CLASS_CAPTION))) {\n        removeClass([closest(selectNode, '.' + CLASS_CAPTION)], CLASS_IMAGE_RIGHT);\n        addClass([closest(selectNode, '.' + CLASS_CAPTION)], CLASS_IMAGE_LEFT);\n      }\n\n      if (selectNode.parentElement.nodeName === 'A') {\n        removeClass([selectNode.parentElement], CLASS_IMAGE_RIGHT);\n        addClass([selectNode.parentElement], CLASS_IMAGE_LEFT);\n        addClass([selectNode], CLASS_IMAGE_LEFT);\n      } else {\n        addClass([selectNode], CLASS_IMAGE_LEFT);\n      }\n\n      this.callBack(e);\n    }\n  }\n\n  imageJustifyCenter(e) {\n    const selectNode = e.item.selectNode[0];\n\n    if (!isNullOrUndefined(selectNode)) {\n      selectNode.removeAttribute('class');\n      addClass([selectNode], 'e-rte-image');\n\n      if (!isNullOrUndefined(closest(selectNode, '.' + CLASS_CAPTION))) {\n        removeClass([closest(selectNode, '.' + CLASS_CAPTION)], CLASS_IMAGE_LEFT);\n        removeClass([closest(selectNode, '.' + CLASS_CAPTION)], CLASS_IMAGE_RIGHT);\n        addClass([closest(selectNode, '.' + CLASS_CAPTION)], CLASS_IMAGE_CENTER);\n      }\n\n      if (selectNode.parentElement.nodeName === 'A') {\n        removeClass([selectNode.parentElement], CLASS_IMAGE_LEFT);\n        removeClass([selectNode.parentElement], CLASS_IMAGE_RIGHT);\n        addClass([selectNode.parentElement], CLASS_IMAGE_CENTER);\n        addClass([selectNode], CLASS_IMAGE_CENTER);\n      } else {\n        addClass([selectNode], CLASS_IMAGE_CENTER);\n      }\n\n      this.callBack(e);\n    }\n  }\n\n  imageJustifyRight(e) {\n    const selectNode = e.item.selectNode[0];\n\n    if (!isNullOrUndefined(selectNode)) {\n      selectNode.removeAttribute('class');\n      addClass([selectNode], 'e-rte-image');\n\n      if (!isNullOrUndefined(closest(selectNode, '.' + CLASS_CAPTION))) {\n        removeClass([closest(selectNode, '.' + CLASS_CAPTION)], CLASS_IMAGE_LEFT);\n        addClass([closest(selectNode, '.' + CLASS_CAPTION)], CLASS_IMAGE_RIGHT);\n      }\n\n      if (selectNode.parentElement.nodeName === 'A') {\n        removeClass([selectNode.parentElement], CLASS_IMAGE_LEFT);\n        addClass([selectNode.parentElement], CLASS_IMAGE_RIGHT);\n        addClass([selectNode], CLASS_IMAGE_RIGHT);\n      } else {\n        addClass([selectNode], CLASS_IMAGE_RIGHT);\n      }\n\n      this.callBack(e);\n    }\n  }\n\n  imageInline(e) {\n    const selectNode = e.item.selectNode[0];\n    selectNode.removeAttribute('class');\n    addClass([selectNode], 'e-rte-image');\n    addClass([selectNode], CLASS_IMAGE_INLINE);\n\n    if (!isNullOrUndefined(closest(selectNode, '.' + CLASS_CAPTION))) {\n      removeClass([closest(selectNode, '.' + CLASS_CAPTION)], CLASS_IMAGE_BREAK);\n      removeClass([closest(selectNode, '.' + CLASS_CAPTION)], CLASS_IMAGE_CENTER);\n      removeClass([closest(selectNode, '.' + CLASS_CAPTION)], CLASS_IMAGE_LEFT);\n      removeClass([closest(selectNode, '.' + CLASS_CAPTION)], CLASS_IMAGE_RIGHT);\n      addClass([closest(selectNode, '.' + CLASS_CAPTION)], CLASS_CAPTION_INLINE);\n    }\n\n    this.callBack(e);\n  }\n\n  imageBreak(e) {\n    const selectNode = e.item.selectNode[0];\n    selectNode.removeAttribute('class');\n    addClass([selectNode], CLASS_IMAGE_BREAK);\n    addClass([selectNode], 'e-rte-image');\n\n    if (!isNullOrUndefined(closest(selectNode, '.' + CLASS_CAPTION))) {\n      removeClass([closest(selectNode, '.' + CLASS_CAPTION)], CLASS_CAPTION_INLINE);\n      removeClass([closest(selectNode, '.' + CLASS_CAPTION)], CLASS_IMAGE_CENTER);\n      removeClass([closest(selectNode, '.' + CLASS_CAPTION)], CLASS_IMAGE_LEFT);\n      removeClass([closest(selectNode, '.' + CLASS_CAPTION)], CLASS_IMAGE_RIGHT);\n      addClass([closest(selectNode, '.' + CLASS_CAPTION)], CLASS_IMAGE_BREAK);\n    }\n\n    this.callBack(e);\n  }\n\n  callBack(e) {\n    if (e.callBack) {\n      e.callBack({\n        requestType: e.item.subCommand,\n        editorMode: 'HTML',\n        event: e.event,\n        range: this.parent.nodeSelection.getRange(this.parent.currentDocument),\n        elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)\n      });\n    }\n  }\n\n}\n/**\n * Link internal component\n *\n * @hidden\n * @deprecated\n */\n\n\nclass TableCommand {\n  /**\n   * Constructor for creating the Formats plugin\n   *\n   * @param {EditorManager} parent - specifies the parent element\n   * @hidden\n   * @deprecated\n   */\n  constructor(parent) {\n    this.parent = parent;\n    this.addEventListener();\n  }\n\n  addEventListener() {\n    this.parent.observer.on(TABLE, this.createTable, this);\n    this.parent.observer.on(INSERT_ROW, this.insertRow, this);\n    this.parent.observer.on(INSERT_COLUMN, this.insertColumn, this);\n    this.parent.observer.on(DELETEROW, this.deleteRow, this);\n    this.parent.observer.on(DELETECOLUMN, this.deleteColumn, this);\n    this.parent.observer.on(REMOVETABLE, this.removeTable, this);\n    this.parent.observer.on(TABLEHEADER, this.tableHeader, this);\n    this.parent.observer.on(TABLE_VERTICAL_ALIGN, this.tableVerticalAlign, this);\n    this.parent.observer.on(TABLE_MERGE, this.cellMerge, this);\n    this.parent.observer.on(TABLE_HORIZONTAL_SPLIT, this.HorizontalSplit, this);\n    this.parent.observer.on(TABLE_VERTICAL_SPLIT, this.VerticalSplit, this);\n    this.parent.observer.on(TABLE_MOVE, this.tableMove, this);\n  }\n\n  createTable(e) {\n    const table = createElement('table', {\n      className: 'e-rte-table'\n    });\n    const tblBody = createElement('tbody');\n\n    if (!isNullOrUndefined(e.item.width.width)) {\n      table.style.width = this.calculateStyleValue(e.item.width.width);\n    }\n\n    if (!isNullOrUndefined(e.item.width.minWidth)) {\n      table.style.minWidth = this.calculateStyleValue(e.item.width.minWidth);\n    }\n\n    if (!isNullOrUndefined(e.item.width.maxWidth)) {\n      table.style.maxWidth = this.calculateStyleValue(e.item.width.maxWidth);\n    }\n\n    const tdWid = parseInt(e.item.width.width, 10) > 100 ? 100 / e.item.columns : parseInt(e.item.width.width, 10) / e.item.columns;\n\n    for (let i = 0; i < e.item.rows; i++) {\n      const row = createElement('tr');\n\n      for (let j = 0; j < e.item.columns; j++) {\n        const cell = createElement('td');\n        cell.appendChild(createElement('br'));\n        cell.style.width = tdWid + '%';\n        row.appendChild(cell);\n      }\n\n      tblBody.appendChild(row);\n    }\n\n    table.appendChild(tblBody);\n    e.item.selection.restore();\n    InsertHtml.Insert(this.parent.currentDocument, table, this.parent.editableElement);\n    this.removeEmptyNode();\n    e.item.selection.setSelectionText(this.parent.currentDocument, table.querySelector('td'), table.querySelector('td'), 0, 0);\n\n    if (table.nextElementSibling === null) {\n      let insertElem;\n\n      if (e.enterAction === 'DIV') {\n        insertElem = createElement('div');\n        insertElem.appendChild(createElement('br'));\n      } else if (e.enterAction === 'BR') {\n        insertElem = createElement('br');\n      } else {\n        insertElem = createElement('p');\n        insertElem.appendChild(createElement('br'));\n      }\n\n      this.insertAfter(insertElem, table);\n    }\n\n    table.querySelector('td').classList.add('e-cell-select');\n\n    if (e.callBack) {\n      e.callBack({\n        requestType: 'Table',\n        editorMode: 'HTML',\n        event: e.event,\n        range: this.parent.nodeSelection.getRange(this.parent.currentDocument),\n        elements: [table]\n      });\n    }\n\n    return table;\n  }\n\n  calculateStyleValue(value) {\n    let styleValue;\n\n    if (typeof value === 'string') {\n      if (value.indexOf('px') || value.indexOf('%') || value.indexOf('auto')) {\n        styleValue = value;\n      } else {\n        styleValue = value + 'px';\n      }\n    } else {\n      styleValue = value + 'px';\n    }\n\n    return styleValue;\n  }\n\n  removeEmptyNode() {\n    const emptyUl = this.parent.editableElement.querySelectorAll('ul:empty, ol:empty');\n\n    for (let i = 0; i < emptyUl.length; i++) {\n      detach(emptyUl[i]);\n    }\n\n    let emptyLiChild = this.parent.editableElement.querySelectorAll('li *:empty');\n\n    for (let i = 0; i < emptyLiChild.length; i++) {\n      detach(emptyLiChild[i]);\n\n      if (emptyLiChild.length === i + 1) {\n        emptyLiChild = this.parent.editableElement.querySelectorAll('li *:empty');\n        i = -1;\n      }\n    }\n\n    const emptyLi = this.parent.editableElement.querySelectorAll('li:empty');\n\n    for (let i = 0; i < emptyLi.length; i++) {\n      detach(emptyLi[i]);\n    }\n  }\n\n  insertAfter(newNode, referenceNode) {\n    referenceNode.parentNode.insertBefore(newNode, referenceNode.nextSibling);\n  }\n\n  getSelectedCellMinMaxIndex(e) {\n    const selectedCells = this.curTable.querySelectorAll('.e-cell-select');\n    let a = 0;\n    let minI = e.length;\n    let maxI = 0;\n    let minJ = e[0].length;\n    let maxJ = 0; //eslint-disable-next-line\n\n    for (; a < selectedCells.length; a++) {\n      const selectedCellIndex = this.getCorrespondingIndex(selectedCells[a], e);\n      const minMaxIndex = this.FindIndex(selectedCellIndex[0], selectedCellIndex[1], e); //eslint-disable-next-line\n\n      minI = Math.min(selectedCellIndex[0], minI), maxI = Math.max(minMaxIndex[0], maxI), minJ = Math.min(selectedCellIndex[1], minJ), maxJ = Math.max(minMaxIndex[1], maxJ);\n    }\n\n    return {\n      startRow: minI,\n      endRow: maxI,\n      startColumn: minJ,\n      endColumn: maxJ\n    };\n  }\n\n  insertRow(e) {\n    const isBelow = e.item.subCommand === 'InsertRowBefore' ? false : true;\n    let selectedCell = e.item.selection.range.startContainer;\n\n    if (!(selectedCell.nodeName === 'TH' || selectedCell.nodeName === 'TD')) {\n      selectedCell = closest(selectedCell.parentElement, 'td,th');\n    }\n\n    if (selectedCell.nodeName.toLowerCase() === 'th' && e.item.subCommand === 'InsertRowBefore') {\n      return;\n    }\n\n    this.curTable = closest(this.parent.nodeSelection.range.startContainer.parentElement, 'table');\n\n    if (this.curTable.querySelectorAll('.e-cell-select').length === 0) {\n      const lastRow = this.curTable.rows[this.curTable.rows.length - 1];\n      const cloneRow = lastRow.cloneNode(true);\n      cloneRow.removeAttribute('rowspan');\n      this.insertAfter(cloneRow, lastRow);\n    } else {\n      const allCells = this.getCorrespondingColumns();\n      const minMaxIndex = this.getSelectedCellMinMaxIndex(allCells);\n      const minVal = isBelow ? minMaxIndex.endRow : minMaxIndex.startRow;\n      const newRow = createElement('tr');\n      const isHeaderSelect = this.curTable.querySelectorAll('th.e-cell-select').length > 0;\n\n      for (let i = 0; i < allCells[minVal].length; i++) {\n        if (isBelow && minVal < allCells.length - 1 && allCells[minVal][i] === allCells[minVal + 1][i] || !isBelow && 0 < minVal && allCells[minVal][i] === allCells[minVal - 1][i]) {\n          if (0 === i || 0 < i && allCells[minVal][i] !== allCells[minVal][i - 1]) {\n            allCells[minVal][i].setAttribute('rowspan', (parseInt(allCells[minVal][i].getAttribute('rowspan'), 10) + 1).toString());\n          }\n        } else {\n          const tdElement = createElement('td');\n          tdElement.appendChild(createElement('br'));\n          newRow.appendChild(tdElement);\n          tdElement.setAttribute('style', allCells[isHeaderSelect && isBelow ? minVal + 1 : minVal][i].getAttribute('style'));\n        }\n      } // eslint-disable-next-line\n\n\n      let selectedRow;\n\n      if (isHeaderSelect && isBelow) {\n        selectedRow = this.curTable.querySelector('tbody').childNodes[0];\n      } else {\n        selectedRow = this.curTable.rows[minVal];\n      } // eslint-disable-next-line\n\n\n      e.item.subCommand === 'InsertRowBefore' ? selectedRow.parentElement.insertBefore(newRow, selectedRow) : isHeaderSelect ? selectedRow.parentElement.insertBefore(newRow, selectedRow) : this.insertAfter(newRow, selectedRow);\n    }\n\n    e.item.selection.setSelectionText(this.parent.currentDocument, e.item.selection.range.startContainer, e.item.selection.range.startContainer, 0, 0);\n\n    if (e.callBack) {\n      e.callBack({\n        requestType: e.item.subCommand,\n        editorMode: 'HTML',\n        event: e.event,\n        range: this.parent.nodeSelection.getRange(this.parent.currentDocument),\n        elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)\n      });\n    }\n  }\n\n  insertColumn(e) {\n    let selectedCell = e.item.selection.range.startContainer;\n\n    if (!(selectedCell.nodeName === 'TH' || selectedCell.nodeName === 'TD')) {\n      selectedCell = closest(selectedCell.parentElement, 'td,th');\n    }\n\n    const curRow = closest(selectedCell, 'tr');\n    let curCell;\n    const allRows = closest(curRow, 'table').rows;\n    const colIndex = Array.prototype.slice.call(curRow.querySelectorAll(':scope > td, :scope > th')).indexOf(selectedCell);\n    const previousWidth = parseInt(e.item.width, 10) / curRow.querySelectorAll(':scope > td, :scope > th').length;\n    const currentWidth = parseInt(e.item.width, 10) / (curRow.querySelectorAll(':scope > td, :scope > th').length + 1);\n    const currentTabElm = closest(curRow, 'table');\n    const thTdElm = closest(curRow, 'table').querySelectorAll('th,td');\n\n    for (let i = 0; i < thTdElm.length; i++) {\n      thTdElm[i].dataset.oldWidth = thTdElm[i].offsetWidth / currentTabElm.offsetWidth * 100 + '%';\n    }\n\n    for (let i = 0; i < allRows.length; i++) {\n      curCell = allRows[i].querySelectorAll(':scope > td, :scope > th')[colIndex];\n      const colTemplate = curCell.cloneNode(true);\n      colTemplate.innerHTML = '';\n      colTemplate.appendChild(createElement('br'));\n      colTemplate.removeAttribute('class');\n      colTemplate.removeAttribute('colspan');\n      colTemplate.removeAttribute('rowspan'); // eslint-disable-next-line\n\n      e.item.subCommand === 'InsertColumnLeft' ? curCell.parentElement.insertBefore(colTemplate, curCell) : this.insertAfter(colTemplate, curCell);\n      colTemplate.style.width = currentWidth.toFixed(4) + '%';\n      delete colTemplate.dataset.oldWidth;\n    }\n\n    for (let i = 0; i < thTdElm.length; i++) {\n      thTdElm[i].style.width = (Number(thTdElm[i].dataset.oldWidth.split('%')[0]) * currentWidth / previousWidth).toFixed(4) + '%';\n      delete thTdElm[i].dataset.oldWidth;\n    }\n\n    e.item.selection.setSelectionText(this.parent.currentDocument, selectedCell, selectedCell, 0, 0);\n\n    if (e.callBack) {\n      e.callBack({\n        requestType: e.item.subCommand,\n        editorMode: 'HTML',\n        event: e.event,\n        range: this.parent.nodeSelection.getRange(this.parent.currentDocument),\n        elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)\n      });\n    }\n  }\n\n  deleteColumn(e) {\n    let selectedCell = e.item.selection.range.startContainer;\n\n    if (selectedCell.nodeType === 3) {\n      selectedCell = closest(selectedCell.parentElement, 'td,th');\n    }\n\n    const tBodyHeadEle = closest(selectedCell, selectedCell.tagName === 'TH' ? 'thead' : 'tbody');\n    const rowIndex = tBodyHeadEle && Array.prototype.indexOf.call(tBodyHeadEle.childNodes, selectedCell.parentNode);\n    this.curTable = closest(selectedCell, 'table');\n    const curRow = closest(selectedCell, 'tr');\n\n    if (curRow.querySelectorAll('th,td').length === 1) {\n      e.item.selection.restore();\n      detach(closest(selectedCell.parentElement, 'table'));\n    } else {\n      let deleteIndex;\n      const allCells = this.getCorrespondingColumns(); //eslint-disable-next-line\n\n      const selectedMinMaxIndex = this.getSelectedCellMinMaxIndex(allCells);\n      const minCol = selectedMinMaxIndex.startColumn;\n      const maxCol = selectedMinMaxIndex.endColumn;\n\n      for (let i = 0; i < allCells.length; i++) {\n        const currentRow = allCells[i];\n\n        for (let j = 0; j < currentRow.length; j++) {\n          const currentCell = currentRow[j]; //eslint-disable-next-line\n\n          const currentCellIndex = this.getCorrespondingIndex(currentCell, allCells);\n          const colSpanVal = parseInt(currentCell.getAttribute('colspan'), 10) || 1;\n\n          if (currentCellIndex[1] + (colSpanVal - 1) >= minCol && currentCellIndex[1] <= maxCol) {\n            if (colSpanVal > 1) {\n              currentCell.setAttribute('colspan', (colSpanVal - 1).toString());\n            } else {\n              detach(currentCell);\n              deleteIndex = j;\n\n              if (Browser.isIE) {\n                e.item.selection.setSelectionText(this.parent.currentDocument, this.curTable.querySelector('td'), this.curTable.querySelector('td'), 0, 0);\n                this.curTable.querySelector('td, th').classList.add('e-cell-select');\n              }\n            }\n          }\n        }\n      }\n\n      if (deleteIndex > -1) {\n        const rowHeadEle = tBodyHeadEle.children[rowIndex];\n        const nextFocusCell = rowHeadEle && rowHeadEle.children[deleteIndex <= rowHeadEle.children.length - 1 ? deleteIndex : deleteIndex - 1];\n\n        if (nextFocusCell) {\n          e.item.selection.setSelectionText(this.parent.currentDocument, nextFocusCell, nextFocusCell, 0, 0);\n          nextFocusCell.classList.add('e-cell-select');\n        }\n      }\n    }\n\n    if (e.callBack) {\n      const sContainer = this.parent.nodeSelection.getRange(this.parent.currentDocument).startContainer;\n\n      if (sContainer.nodeName !== 'TD') {\n        const startChildLength = this.parent.nodeSelection.getRange(this.parent.currentDocument).startOffset;\n        const focusNode = sContainer.children[startChildLength];\n\n        if (focusNode) {\n          this.parent.nodeSelection.setCursorPoint(this.parent.currentDocument, focusNode, 0);\n        }\n      }\n\n      e.callBack({\n        requestType: e.item.subCommand,\n        editorMode: 'HTML',\n        event: e.event,\n        range: this.parent.nodeSelection.getRange(this.parent.currentDocument),\n        elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)\n      });\n    }\n  }\n\n  deleteRow(e) {\n    let selectedCell = e.item.selection.range.startContainer;\n\n    if (selectedCell.nodeType === 3) {\n      selectedCell = closest(selectedCell.parentElement, 'td,th');\n    }\n\n    const colIndex = Array.prototype.indexOf.call(selectedCell.parentNode.childNodes, selectedCell);\n    this.curTable = closest(selectedCell, 'table');\n    let currentRow;\n    const allCells = this.getCorrespondingColumns();\n    const minMaxIndex = this.getSelectedCellMinMaxIndex(allCells);\n    let maxI;\n    let j;\n\n    if (this.curTable.rows.length === 1) {\n      e.item.selection.restore();\n      detach(closest(selectedCell.parentElement, 'table'));\n    } else {\n      for (maxI = minMaxIndex.endRow; maxI >= minMaxIndex.startRow; maxI--) {\n        currentRow = this.curTable.rows[maxI];\n\n        for (j = 0; j < allCells[maxI].length; j++) {\n          if (j === 0 || allCells[maxI][j] !== allCells[maxI][j - 1]) {\n            if (1 < parseInt(allCells[maxI][j].getAttribute('rowspan'), 10)) {\n              const rowSpanVal = parseInt(allCells[maxI][j].getAttribute('rowspan'), 10) - 1; //eslint-disable-next-line\n\n              1 === rowSpanVal ? allCells[maxI][j].removeAttribute('rowspan') : allCells[maxI][j].setAttribute('rowspan', rowSpanVal.toString());\n            }\n          }\n\n          if (maxI < allCells.length - 1 && allCells[maxI][j] === allCells[maxI + 1][j] && (0 === maxI || allCells[maxI][j] !== allCells[maxI - 1][j])) {\n            const element = allCells[maxI][j];\n            let index;\n\n            for (index = j; 0 < index && allCells[maxI][index] === allCells[maxI][index - 1]; index--) {\n              if (index === 0) {\n                this.curTable.rows[maxI + 1].prepend(element);\n              } else {\n                allCells[maxI + 1][index - 1].insertAdjacentElement('afterend', element);\n              }\n            }\n          }\n        }\n\n        const deleteIndex = currentRow.rowIndex;\n        this.curTable.deleteRow(deleteIndex);\n        const focusTrEle = !isNullOrUndefined(this.curTable.rows[deleteIndex]) ? this.curTable.querySelectorAll('tbody tr')[deleteIndex] : this.curTable.querySelectorAll('tbody tr')[deleteIndex - 1];\n        const nextFocusCell = focusTrEle && focusTrEle.querySelectorAll('td')[colIndex];\n\n        if (nextFocusCell) {\n          e.item.selection.setSelectionText(this.parent.currentDocument, nextFocusCell, nextFocusCell, 0, 0);\n          nextFocusCell.classList.add('e-cell-select');\n        } else {\n          e.item.selection.setSelectionText(this.parent.currentDocument, this.curTable.querySelector('td'), this.curTable.querySelector('td'), 0, 0);\n          this.curTable.querySelector('td, th').classList.add('e-cell-select');\n        }\n      }\n    }\n\n    if (e.callBack) {\n      e.callBack({\n        requestType: e.item.subCommand,\n        editorMode: 'HTML',\n        event: e.event,\n        range: this.parent.nodeSelection.getRange(this.parent.currentDocument),\n        elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)\n      });\n    }\n  }\n\n  removeTable(e) {\n    let selectedCell = e.item.selection.range.startContainer;\n    selectedCell = selectedCell.nodeType === 3 ? selectedCell.parentNode : selectedCell;\n    const selectedTable = closest(selectedCell.parentElement, 'table');\n\n    if (selectedTable) {\n      e.item.selection.restore();\n      detach(selectedTable);\n    }\n\n    if (e.callBack) {\n      e.callBack({\n        requestType: e.item.subCommand,\n        editorMode: 'HTML',\n        event: e.event,\n        range: this.parent.nodeSelection.getRange(this.parent.currentDocument),\n        elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)\n      });\n    }\n  }\n\n  tableHeader(e) {\n    let headerExit = false;\n    let selectedCell = e.item.selection.range.startContainer;\n    selectedCell = selectedCell.nodeType === 3 ? selectedCell.parentNode : selectedCell;\n    const table = closest(selectedCell.parentElement, 'table');\n    [].slice.call(table.childNodes).forEach(el => {\n      if (el.nodeName === 'THEAD') {\n        headerExit = true;\n      }\n    });\n\n    if (table && !headerExit) {\n      const cellCount = table.querySelector('tr').childElementCount;\n      let colSpanCount = 0;\n\n      for (let i = 0; i < cellCount; i++) {\n        colSpanCount = colSpanCount + (parseInt(table.querySelector('tr').children[i].getAttribute('colspan'), 10) || 1);\n      }\n\n      const header = table.createTHead();\n      const row = header.insertRow(0);\n\n      for (let j = 0; j < colSpanCount; j++) {\n        const th = createElement('th');\n        th.appendChild(createElement('br'));\n        row.appendChild(th);\n      }\n    } else {\n      table.deleteTHead();\n    }\n\n    if (e.callBack) {\n      e.callBack({\n        requestType: e.item.subCommand,\n        editorMode: 'HTML',\n        event: e.event,\n        range: this.parent.nodeSelection.getRange(this.parent.currentDocument),\n        elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)\n      });\n    }\n  }\n\n  tableVerticalAlign(e) {\n    if (e.item.subCommand === 'AlignTop') {\n      e.item.tableCell.style.verticalAlign = 'top';\n    } else if (e.item.subCommand === 'AlignMiddle') {\n      e.item.tableCell.style.verticalAlign = 'middle';\n    } else {\n      e.item.tableCell.style.verticalAlign = 'bottom';\n    }\n\n    if (e.callBack) {\n      e.callBack({\n        requestType: e.item.subCommand,\n        editorMode: 'HTML',\n        event: e.event,\n        range: this.parent.nodeSelection.getRange(this.parent.currentDocument),\n        elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)\n      });\n    }\n  }\n\n  cellMerge(e) {\n    if (isNullOrUndefined(this.curTable)) {\n      this.curTable = closest(this.parent.nodeSelection.range.startContainer.parentElement, 'table');\n    }\n\n    const selectedCells = this.curTable.querySelectorAll('.e-cell-select');\n\n    if (selectedCells.length < 2) {\n      return;\n    }\n\n    this.mergeCellContent();\n    const minMaxIndexes = this.getSelectedMinMaxIndexes(this.getCorrespondingColumns());\n    const firstCell = selectedCells[0];\n    const rowSelectedCells = firstCell.parentElement.querySelectorAll('.e-cell-select');\n\n    if (minMaxIndexes.startColumn < minMaxIndexes.endColumn) {\n      firstCell.setAttribute('colspan', (minMaxIndexes.endColumn - minMaxIndexes.startColumn + 1).toString());\n    }\n\n    if (minMaxIndexes.startRow < minMaxIndexes.endRow) {\n      firstCell.setAttribute('rowspan', (minMaxIndexes.endRow - minMaxIndexes.startRow + 1).toString());\n    }\n\n    let totalWidth = 0;\n\n    for (let j = rowSelectedCells.length - 1; j >= 0; j--) {\n      totalWidth = totalWidth + parseFloat(rowSelectedCells[j].style.width);\n    }\n\n    firstCell.style.width = totalWidth + '%';\n\n    for (let i = 1; i <= selectedCells.length - 1; i++) {\n      detach(selectedCells[i]);\n    }\n\n    for (let i = 0; i < this.curTable.rows.length; i++) {\n      if (this.curTable.rows[i].innerHTML === '') {\n        detach(this.curTable.rows[i]);\n      }\n    }\n\n    this.updateRowSpanStyle(minMaxIndexes.startRow, minMaxIndexes.endRow, this.getCorrespondingColumns());\n    this.updateColSpanStyle(minMaxIndexes.startColumn, minMaxIndexes.endColumn, this.getCorrespondingColumns());\n    e.item.selection.setSelectionText(this.parent.currentDocument, e.item.selection.range.startContainer, e.item.selection.range.startContainer, 0, 0);\n\n    if (this.parent.nodeSelection.range) {\n      this.parent.nodeSelection.setCursorPoint(this.parent.currentDocument, // eslint-disable-next-line\n      this.parent.nodeSelection.range.endContainer, 0);\n    }\n\n    if (e.callBack) {\n      e.callBack({\n        requestType: e.item.subCommand,\n        editorMode: 'HTML',\n        event: e.event,\n        range: this.parent.nodeSelection.getRange(this.parent.currentDocument),\n        elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)\n      });\n    }\n  }\n\n  updateColSpanStyle(min, max, elements) {\n    let colValue;\n    let colIndex;\n    let colMin;\n    let index = 0;\n    let attrValue;\n    let count = 0;\n    const eleArray = elements; //eslint-disable-next-line\n\n    if (min < (max = Math.min(max, eleArray[0].length - 1))) {\n      for (colIndex === min; colIndex <= max; colIndex++) {\n        // eslint-disable-next-line\n        if (!(min < colIndex && eleArray[0][colIndex] === eleArray[0][colIndex - 1]) && 1 < (index = Math.min(parseInt(eleArray[0][colIndex].getAttribute('colspan'), 10) || 1, max - min + 1)) && eleArray[0][colIndex] === eleArray[0][colIndex + 1]) {\n          for (count = index - 1, colValue = 1; colValue < eleArray.length; colValue++) {\n            if (eleArray[colValue][colIndex] !== eleArray[colValue - 1][colIndex]) {\n              /* eslint-disable */\n              for (colMin = colIndex; colMin < colIndex + index; colMin++) {\n                if (1 < (attrValue = parseInt(eleArray[colValue][colMin].getAttribute('colspan'), 10) || 1) && eleArray[colValue][colMin] === eleArray[colValue][colMin + 1]) {\n                  colMin += count = Math.min(count, attrValue - 1);\n                } else if (!(count = Math.max(0, count - 1))) {\n                  break;\n                }\n                /* eslint-enable */\n\n              }\n            }\n\n            if (!count) {\n              break;\n            }\n          }\n        }\n      }\n\n      if (count) {\n        this.updateCellAttribute(eleArray, count, 'colspan', 0, eleArray.length - 1, min, max);\n      }\n    }\n  }\n\n  updateRowSpanStyle(min, max, ele) {\n    let rowValue;\n    let colIndex;\n    let rowMin;\n    let index = 0;\n    let attrValue;\n    let count = 0;\n    const eleArray = ele; // eslint-disable-next-line\n\n    if (min < (max = Math.min(max, eleArray.length - 1))) {\n      for (rowValue = min; rowValue <= max; rowValue++) {\n        // eslint-disable-next-line\n        if (!(min < rowValue && eleArray[rowValue][0] === eleArray[rowValue - 1][0]) && 1 < (index = Math.min(parseInt(eleArray[rowValue][0].getAttribute('rowspan'), 10) || 1, max - min + 1)) && eleArray[rowValue][0] === eleArray[rowValue + 1][0]) {\n          for (count = index - 1, colIndex = 1; colIndex < eleArray[0].length; colIndex++) {\n            if (eleArray[rowValue][colIndex] !== eleArray[rowValue][colIndex - 1]) {\n              for (rowMin = rowValue; rowMin < rowValue + index; rowMin++) {\n                // eslint-disable-next-line\n                if (1 < (attrValue = parseInt(eleArray[rowMin][colIndex].getAttribute('rowspan'), 10) || 1) && eleArray[rowMin][colIndex] === eleArray[rowMin + 1][colIndex]) {\n                  rowMin += count = Math.min(count, attrValue - 1);\n                } // eslint-disable-next-line\n                else if (!(count = Math.max(0, count - 1))) {\n                  break;\n                }\n              }\n\n              if (!count) {\n                break;\n              }\n            }\n          }\n        }\n      }\n\n      if (count) {\n        this.updateCellAttribute(eleArray, count, 'rowspan', min, max, 0, eleArray[0].length - 1);\n      }\n    }\n  }\n\n  updateCellAttribute(elements, index, attr, min, max, firstIndex, length) {\n    let rowIndex;\n    let colIndex;\n    let spanCount;\n\n    for (rowIndex = min; rowIndex <= max; rowIndex++) {\n      for (colIndex = firstIndex; colIndex <= length; colIndex++) {\n        // eslint-disable-next-line\n        min < rowIndex && elements[rowIndex][colIndex] === elements[rowIndex - 1][colIndex] || firstIndex < colIndex && elements[rowIndex][colIndex] === elements[rowIndex][colIndex - 1] || 1 < (spanCount = parseInt(elements[rowIndex][colIndex].getAttribute(attr), 10) || 1) && (1 < spanCount - index ? elements[rowIndex][colIndex].setAttribute(attr, (spanCount - index).toString()) : elements[rowIndex][colIndex].removeAttribute(attr));\n      }\n    }\n  }\n\n  mergeCellContent() {\n    const selectedCells = this.curTable.querySelectorAll('.e-cell-select');\n    let innerHtml = selectedCells[0].innerHTML;\n\n    for (let i = 1; i < selectedCells.length - 1; i++) {\n      if ('<br>' !== selectedCells[i].innerHTML) {\n        innerHtml = innerHtml + selectedCells[i].innerHTML;\n      }\n    }\n\n    selectedCells[0].innerHTML = innerHtml;\n  }\n\n  getSelectedMinMaxIndexes(correspondingCells) {\n    const selectedCells = this.curTable.querySelectorAll('.e-cell-select');\n\n    if (0 < selectedCells.length) {\n      let minRow = correspondingCells.length;\n      let maxRow = 0;\n      let minCol = correspondingCells[0].length;\n      let maxCol = 0;\n\n      for (let i = 0; i < selectedCells.length; i++) {\n        const currentRowCol = this.getCorrespondingIndex(selectedCells[i], correspondingCells);\n        const targetRowCol = this.FindIndex(currentRowCol[0], currentRowCol[1], correspondingCells);\n        minRow = Math.min(currentRowCol[0], minRow);\n        maxRow = Math.max(targetRowCol[0], maxRow);\n        minCol = Math.min(currentRowCol[1], minCol);\n        maxCol = Math.max(targetRowCol[1], maxCol);\n      }\n\n      return {\n        startRow: minRow,\n        endRow: maxRow,\n        startColumn: minCol,\n        endColumn: maxCol\n      };\n    }\n\n    return null;\n  }\n\n  HorizontalSplit(e) {\n    const selectedCell = e.item.selection.range.startContainer;\n    this.curTable = closest(selectedCell.parentElement, 'table');\n\n    if (this.curTable.querySelectorAll('.e-cell-select').length > 1) {\n      return;\n    }\n\n    this.activeCell = this.curTable.querySelector('.e-cell-select');\n    const newCell = this.activeCell.cloneNode(true);\n    newCell.removeAttribute('class');\n    newCell.innerHTML = '</br>';\n    const activeCellIndex = this.getCorrespondingIndex(this.activeCell, this.getCorrespondingColumns());\n    const correspondingCells = this.getCorrespondingColumns();\n    const activeCellRowSpan = this.activeCell.getAttribute('rowspan') ? parseInt(this.activeCell.getAttribute('rowspan'), 10) : 1;\n\n    if (activeCellRowSpan > 1) {\n      const avgCount = Math.ceil(activeCellRowSpan / 2); // eslint-disable-next-line\n\n      1 < avgCount ? this.activeCell.setAttribute('rowspan', avgCount.toString()) : this.activeCell.removeAttribute('rowspan'); // eslint-disable-next-line\n\n      1 < activeCellRowSpan - avgCount ? newCell.setAttribute('rowspan', (activeCellRowSpan - avgCount).toString()) : newCell.removeAttribute('rowspan');\n      let avgRowIndex;\n      let colIndex;\n\n      for (avgRowIndex = activeCellIndex[0] + Math.ceil(activeCellRowSpan / 2), colIndex = 0 === activeCellIndex[1] ? activeCellIndex[1] : activeCellIndex[1] - 1; 0 <= colIndex && (correspondingCells[avgRowIndex][colIndex] === correspondingCells[avgRowIndex][colIndex - 1] || 0 < avgRowIndex && correspondingCells[avgRowIndex][colIndex] === correspondingCells[avgRowIndex - 1][colIndex]);) {\n        colIndex--;\n      }\n\n      if (colIndex === -1) {\n        // eslint-disable-next-line\n        this.curTable.rows[avgRowIndex].firstChild ? this.curTable.rows[avgRowIndex].prepend(newCell) : this.curTable.appendChild(newCell);\n      } else {\n        correspondingCells[avgRowIndex][colIndex].insertAdjacentElement('afterend', newCell);\n      }\n    } else {\n      const newTrEle = createElement('tr');\n      newTrEle.appendChild(newCell);\n      const selectedRow = correspondingCells[activeCellIndex[0]];\n\n      for (let j = 0; j <= selectedRow.length - 1; j++) {\n        if (selectedRow[j] !== selectedRow[j - 1] && selectedRow[j] !== this.activeCell) {\n          selectedRow[j].setAttribute('rowspan', ((parseInt(selectedRow[j].getAttribute('rowspan'), 10) ? parseInt(selectedRow[j].getAttribute('rowspan'), 10) : 1) + 1).toString());\n        }\n      }\n\n      this.activeCell.parentNode.insertAdjacentElement('afterend', newTrEle);\n    }\n\n    if (e.callBack) {\n      e.callBack({\n        requestType: e.item.subCommand,\n        editorMode: 'HTML',\n        event: e.event,\n        range: this.parent.nodeSelection.getRange(this.parent.currentDocument),\n        elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)\n      });\n    }\n  }\n\n  VerticalSplit(e) {\n    const selectedCell = e.item.selection.range.startContainer;\n    this.curTable = closest(selectedCell.parentElement, 'table');\n\n    if (this.curTable.querySelectorAll('.e-cell-select').length > 1) {\n      return;\n    }\n\n    this.activeCell = this.curTable.querySelector('.e-cell-select');\n    const allRows = this.curTable.rows;\n    const newCell = this.activeCell.cloneNode(true);\n    newCell.removeAttribute('class');\n    newCell.innerHTML = '</br>';\n    let avgWidth = parseFloat(this.activeCell.style.width) / 2;\n\n    if (this.activeCell.tagName === 'TH' && isNaN(avgWidth)) {\n      const cellCount = this.curTable.querySelector('tr').childElementCount;\n      let colSpanCount = 0;\n\n      for (let i = 0; i < cellCount; i++) {\n        colSpanCount = colSpanCount + (parseInt(this.curTable.querySelector('tr').children[i].getAttribute('colspan'), 10) || 1);\n      }\n\n      avgWidth = parseFloat((this.activeCell.offsetWidth / 2 / this.curTable.offsetWidth * 100).toFixed(1));\n    }\n\n    const activeCellIndex = this.getCorrespondingIndex(this.activeCell, this.getCorrespondingColumns());\n    const correspondingColumns = this.getCorrespondingColumns();\n    const activeCellcolSpan = parseInt(this.activeCell.getAttribute('colspan'), 10);\n\n    if (activeCellcolSpan > 1) {\n      // eslint-disable-next-line\n      1 < Math.ceil(activeCellcolSpan / 2) ? this.activeCell.setAttribute('colspan', (activeCellcolSpan / 2).toString()) : this.activeCell.removeAttribute('colspan'); // eslint-disable-next-line\n\n      1 < activeCellcolSpan - activeCellcolSpan / 2 ? newCell.setAttribute('colspan', // eslint-disable-next-line\n      (activeCellcolSpan - activeCellcolSpan / 2).toString()) : newCell.removeAttribute('colspan');\n    } else {\n      for (let i = 0; i <= allRows.length - 1; i++) {\n        if (0 === i || correspondingColumns[i][activeCellIndex[1]] !== correspondingColumns[i - 1][activeCellIndex[1]]) {\n          const currentCell = correspondingColumns[i][activeCellIndex[1]];\n\n          if (currentCell !== this.activeCell) {\n            currentCell.setAttribute('colspan', ((parseInt(currentCell.getAttribute('colspan'), 10) ? parseInt(currentCell.getAttribute('colspan'), 10) : 1) + 1).toString());\n          }\n        }\n      }\n    }\n\n    this.activeCell.style.width = avgWidth + '%';\n    newCell.style.width = avgWidth + '%';\n    this.activeCell.parentNode.insertBefore(newCell, this.activeCell.nextSibling);\n\n    if (e.callBack) {\n      e.callBack({\n        requestType: e.item.subCommand,\n        editorMode: 'HTML',\n        event: e.event,\n        range: this.parent.nodeSelection.getRange(this.parent.currentDocument),\n        elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)\n      });\n    }\n  }\n\n  getCorrespondingColumns() {\n    const elementArray = []; // eslint-disable-next-line\n\n    let _this = this;\n\n    const colspan = 0;\n    const allRows = _this.curTable.rows;\n\n    for (let i = 0; i <= allRows.length - 1; i++) {\n      const ele = allRows[i];\n      let index = 0;\n\n      for (let j = 0; j <= ele.children.length - 1; j++) {\n        /* eslint-disable */\n        const colEle = ele.children[j];\n\n        for (let ele = colEle, colspan = parseInt(ele.getAttribute('colspan'), 10) || 1, rowSpan = parseInt(ele.getAttribute('rowspan'), 10) || 1, rowIndex = i; rowIndex < i + rowSpan; rowIndex++) {\n          for (let colIndex = index; colIndex < index + colspan; colIndex++) {\n            elementArray[rowIndex] || (elementArray[rowIndex] = []);\n            elementArray[rowIndex][colIndex] ? index++ : elementArray[rowIndex][colIndex] = colEle;\n          }\n        }\n\n        index += colspan;\n      }\n      /* eslint-enable */\n\n    }\n\n    return elementArray;\n  } // eslint-disable-next-line\n\n\n  FindIndex(rowIndex, columnIndex, cells) {\n    let nextIndex;\n    let nextCol;\n\n    for (nextIndex = rowIndex + 1, nextCol = columnIndex + 1; nextIndex < cells.length;) {\n      if (cells[nextIndex][columnIndex] !== cells[rowIndex][columnIndex]) {\n        nextIndex--;\n        break;\n      }\n\n      nextIndex++;\n    }\n\n    for (nextIndex === cells.length && nextIndex--; nextCol < cells[rowIndex].length;) {\n      if (cells[rowIndex][nextCol] !== cells[rowIndex][columnIndex]) {\n        nextCol--;\n        break;\n      }\n\n      nextCol++;\n    }\n\n    return nextCol === cells[rowIndex].length && nextCol--, [nextIndex, nextCol];\n  }\n\n  getCorrespondingIndex(cell, allCells) {\n    //let value: RowCol = new RowCol();\n    for (let i = 0; i < allCells.length; i++) {\n      for (let j = 0; j < allCells[i].length; j++) {\n        if (allCells[i][j] === cell) {\n          return [i, j];\n        }\n      }\n    }\n\n    return [];\n  }\n\n  highlightCells(minRow, maxRow, minCol, maxCol, eleArray) {\n    let j;\n    let k;\n    let startCell;\n    let endCell;\n    let minRowIndex = minRow;\n    let maxRowIndex = maxRow;\n    let minColIndex = minCol;\n    let maxColIndex = maxCol;\n    let minMaxValues = new MinMax();\n\n    for (j = minRowIndex; j <= maxRowIndex; j++) {\n      /* eslint-disable */\n      if ((1 < (parseInt(eleArray[j][minColIndex].getAttribute('rowspan'), 10) || 1) || 1 < (parseInt(eleArray[j][minColIndex].getAttribute('colspan'), 10) || 1)) && (endCell = this.FindIndex((startCell = this.getCorrespondingIndex(eleArray[j][minColIndex], eleArray))[0], startCell[1], eleArray))) {\n        minRowIndex = Math.min(startCell[0], minRowIndex);\n        maxRowIndex = Math.max(endCell[0], maxRowIndex);\n        minColIndex = Math.min(startCell[1], minColIndex);\n        maxColIndex = Math.max(endCell[1], maxColIndex);\n      } else if ((1 < (parseInt(eleArray[j][maxColIndex].getAttribute('rowspan'), 10) || 1) || 1 < (parseInt(eleArray[j][maxColIndex].getAttribute('colspan'), 10) || 1)) && (endCell = this.FindIndex((startCell = this.getCorrespondingIndex(eleArray[j][maxColIndex], eleArray))[0], startCell[1], eleArray))) {\n        minRowIndex = Math.min(startCell[0], minRowIndex);\n        maxRowIndex = Math.max(endCell[0], maxRowIndex);\n        minColIndex = Math.min(startCell[1], minColIndex);\n        maxColIndex = Math.max(endCell[1], maxColIndex);\n      }\n\n      for (k = minColIndex; k <= maxColIndex; k++) {\n        if ((1 < (parseInt(eleArray[minRowIndex][k].getAttribute('rowspan'), 10) || 1) || 1 < (parseInt(eleArray[minRowIndex][k].getAttribute('colspan'), 10) || 1)) && (endCell = this.FindIndex((startCell = this.getCorrespondingIndex(eleArray[minRowIndex][k], eleArray))[0], startCell[1], eleArray))) {\n          minRowIndex = Math.min(startCell[0], minRowIndex);\n          maxRowIndex = Math.max(endCell[0], maxRowIndex);\n          minColIndex = Math.min(startCell[1], minColIndex);\n          maxColIndex = Math.max(endCell[1], maxColIndex);\n        } else if ((1 < (parseInt(eleArray[maxRowIndex][k].getAttribute('rowspan'), 10) || 1) || 1 < (parseInt(eleArray[maxRowIndex][k].getAttribute('colspan'), 10) || 1)) && (endCell = this.FindIndex((startCell = this.getCorrespondingIndex(eleArray[maxRowIndex][k], eleArray))[0], startCell[1], eleArray))) {\n          minRowIndex = Math.min(startCell[0], minRowIndex);\n          maxRowIndex = Math.max(endCell[0], maxRowIndex);\n          minColIndex = Math.min(startCell[1], minColIndex);\n          maxColIndex = Math.max(endCell[1], maxColIndex);\n        }\n      }\n\n      minMaxValues = minRowIndex === minRow && maxRowIndex === maxRow && minColIndex === minCol && maxColIndex === maxCol ? {\n        startRow: minRow,\n        endRow: maxRow,\n        startColumn: minCol,\n        endColumn: maxCol\n      } : this.highlightCells(minRowIndex, maxRowIndex, minColIndex, maxColIndex, eleArray);\n    }\n\n    return minMaxValues;\n    /* eslint-enable */\n  }\n\n  tableMove(e) {\n    this.activeCell = e.selectNode[0];\n    const target = e.event.target;\n    const activeCellTag = this.activeCell.tagName;\n    const targetCellTag = target.tagName;\n    this.curTable = closest(target, 'table');\n\n    if (this.curTable.querySelectorAll('.e-cell-select').length > 1) {\n      this.parent.nodeSelection.Clear(this.parent.currentDocument);\n    }\n\n    if (target.tagName !== 'TD' && target.tagName !== 'TH' && activeCellTag !== targetCellTag) {\n      return;\n    }\n\n    const activeRowIndex = Array.prototype.slice.call(this.activeCell.parentElement.parentElement.children).indexOf(this.activeCell.parentElement);\n    const activeColumnIndex = Array.prototype.slice.call(this.activeCell.parentElement.children).indexOf(this.activeCell);\n    const targetRowIndex = Array.prototype.slice.call(target.parentElement.parentElement.children).indexOf(target.parentElement);\n    const targetColumnIndex = Array.prototype.slice.call(target.parentElement.children).indexOf(target);\n    const activeCellList = this.curTable.querySelectorAll('.e-cell-select');\n\n    for (let i = activeCellList.length - 1; i >= 0; i--) {\n      if (this.activeCell !== activeCellList[i]) {\n        activeCellList[i].classList.remove('e-cell-select');\n      }\n    }\n\n    if (activeRowIndex === targetRowIndex && activeColumnIndex === targetColumnIndex) {\n      return;\n    }\n\n    const correspondingCells = this.getCorrespondingColumns();\n    const activeIndexes = this.getCorrespondingIndex(this.activeCell, correspondingCells);\n    const targetIndexes = this.getCorrespondingIndex(target, correspondingCells);\n    const minMaxIndexes = this.highlightCells(Math.min(activeIndexes[0], targetIndexes[0]), Math.max(activeIndexes[0],\n    /* eslint-disable */\n    targetIndexes[0]), Math.min(activeIndexes[1], targetIndexes[1]), Math.max(activeIndexes[1], targetIndexes[1]), correspondingCells);\n\n    for (let rowIndex = minMaxIndexes.startRow; rowIndex <= minMaxIndexes.endRow; rowIndex++) {\n      for (let colIndex = minMaxIndexes.startColumn; colIndex <= minMaxIndexes.endColumn; colIndex++) {\n        correspondingCells[rowIndex][colIndex].classList.add('e-cell-select');\n      }\n    }\n\n    if (this.parent.nodeSelection.range) {\n      this.parent.nodeSelection.setSelectionText(this.parent.currentDocument, this.parent.nodeSelection.range.endContainer, this.parent.nodeSelection.range.endContainer, 0, 0);\n      this.parent.nodeSelection.setCursorPoint(this.parent.currentDocument, this.parent.nodeSelection.range.endContainer, 0);\n    }\n  }\n\n}\n\nclass MinMax {}\n/**\n * Is formatted or not.\n *\n * @hidden\n * @deprecated\n */\n\n\nlet IsFormatted = /*#__PURE__*/(() => {\n  class IsFormatted {\n    /**\n     * getFormattedNode method\n     *\n     * @param {Node} node - specifies the node.\n     * @param {string} format - specifies the string value.\n     * @param {Node} endNode - specifies the end node\n     * @returns {Node} - returns the node\n     * @hidden\n     * @deprecated\n     */\n    getFormattedNode(node, format, endNode) {\n      const parentNode = this.getFormatParent(node, format, endNode);\n\n      if (parentNode !== null && parentNode !== endNode) {\n        return parentNode;\n      }\n\n      return null;\n    }\n\n    getFormatParent(node, format, endNode) {\n      do {\n        node = node.parentNode;\n      } while (node && node !== endNode && !this.isFormattedNode(node, format));\n\n      return node;\n    }\n\n    isFormattedNode(node, format) {\n      switch (format) {\n        case 'bold':\n          return IsFormatted.isBold(node);\n\n        case 'italic':\n          return IsFormatted.isItalic(node);\n\n        case 'underline':\n          return IsFormatted.isUnderline(node);\n\n        case 'strikethrough':\n          return IsFormatted.isStrikethrough(node);\n\n        case 'superscript':\n          return IsFormatted.isSuperscript(node);\n\n        case 'subscript':\n          return IsFormatted.isSubscript(node);\n\n        case 'fontcolor':\n          return this.isFontColor(node);\n\n        case 'fontname':\n          return this.isFontName(node);\n\n        case 'fontsize':\n          return this.isFontSize(node);\n\n        case 'backgroundcolor':\n          return this.isBackgroundColor(node);\n\n        default:\n          return false;\n      }\n    }\n    /**\n     * isBold method\n     *\n     * @param {Node} node - specifies the node value\n     * @returns {boolean} - returns the boolean value\n     * @hidden\n     * @deprecated\n     */\n\n\n    static isBold(node) {\n      const validTags = ['strong', 'b'];\n\n      if (validTags.indexOf(node.nodeName.toLowerCase()) !== -1) {\n        return true;\n      } else if (this.inlineTags.indexOf(node.nodeName.toLowerCase()) !== -1 && node.style && node.style.fontWeight === 'bold') {\n        return true;\n      } else {\n        return false;\n      }\n    }\n    /**\n     * isItalic method\n     *\n     * @param {Node} node - specifies the node value\n     * @returns {boolean} - returns the boolean value\n     * @hidden\n     * @deprecated\n     */\n\n\n    static isItalic(node) {\n      const validTags = ['em', 'i'];\n\n      if (validTags.indexOf(node.nodeName.toLowerCase()) !== -1) {\n        return true;\n      } else if (this.inlineTags.indexOf(node.nodeName.toLowerCase()) !== -1 && node.style && node.style.fontStyle === 'italic') {\n        return true;\n      } else {\n        return false;\n      }\n    }\n    /**\n     * isUnderline method\n     *\n     * @param {Node} node - specifies the node value\n     * @returns {boolean} - returns the boolean value\n     * @hidden\n     * @deprecated\n     */\n\n\n    static isUnderline(node) {\n      const validTags = ['u'];\n\n      if (validTags.indexOf(node.nodeName.toLowerCase()) !== -1) {\n        return true;\n      } else if (this.inlineTags.indexOf(node.nodeName.toLowerCase()) !== -1 && node.style && node.style.textDecoration === 'underline') {\n        return true;\n      } else {\n        return false;\n      }\n    }\n    /**\n     * isStrikethrough method\n     *\n     * @param {Node} node - specifies the node value\n     * @returns {boolean} - returns the boolean value\n     * @hidden\n     * @deprecated\n     */\n\n\n    static isStrikethrough(node) {\n      const validTags = ['del', 'strike'];\n\n      if (validTags.indexOf(node.nodeName.toLowerCase()) !== -1) {\n        return true;\n      } else if (this.inlineTags.indexOf(node.nodeName.toLowerCase()) !== -1 && node.style && node.style.textDecoration === 'line-through') {\n        return true;\n      } else {\n        return false;\n      }\n    }\n    /**\n     * isSuperscript method\n     *\n     * @param {Node} node - specifies the node value\n     * @returns {boolean} - returns the boolean value\n     * @hidden\n     * @deprecated\n     */\n\n\n    static isSuperscript(node) {\n      const validTags = ['sup'];\n\n      if (validTags.indexOf(node.nodeName.toLowerCase()) !== -1) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n    /**\n     * isSubscript method\n     *\n     * @param {Node} node - specifies the node value\n     * @returns {boolean} - returns the boolean value\n     * @hidden\n     * @deprecated\n     */\n\n\n    static isSubscript(node) {\n      const validTags = ['sub'];\n\n      if (validTags.indexOf(node.nodeName.toLowerCase()) !== -1) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n    isFontColor(node) {\n      const color = node.style && node.style.color;\n\n      if (IsFormatted.inlineTags.indexOf(node.nodeName.toLowerCase()) !== -1 && color !== null && color !== '' && color !== undefined) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n    isBackgroundColor(node) {\n      const backColor = node.style && node.style.backgroundColor;\n\n      if (IsFormatted.inlineTags.indexOf(node.nodeName.toLowerCase()) !== -1 && backColor !== null && backColor !== '' && backColor !== undefined) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n    isFontSize(node) {\n      const size = node.style && node.style.fontSize;\n\n      if (IsFormatted.inlineTags.indexOf(node.nodeName.toLowerCase()) !== -1 && size !== null && size !== '' && size !== undefined) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n    isFontName(node) {\n      const name = node.style && node.style.fontFamily;\n\n      if (IsFormatted.inlineTags.indexOf(node.nodeName.toLowerCase()) !== -1 && name !== null && name !== '' && name !== undefined) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n  }\n\n  // Get Formatted Node\n  IsFormatted.inlineTags = ['a', 'abbr', 'acronym', 'b', 'bdo', 'big', 'cite', 'code', 'dfn', 'em', 'i', 'kbd', 'label', 'q', 'samp', 'small', 'span', 'strong', 'sub', 'sup', 'tt', 'u', 'var', 'del'];\n  /**\n   * `Selection` module is used to handle RTE Selections.\n   */\n\n  return IsFormatted;\n})();\nlet SelectionCommands = /*#__PURE__*/(() => {\n  class SelectionCommands {\n    /**\n     * applyFormat method\n     *\n     * @param {Document} docElement - specifies the document\n     * @param {string} format - specifies the string value\n     * @param {Node} endNode - specifies the end node\n     * @param {string} enterAction - specifies the enter key action\n     * @param {string} value - specifies the string value\n     * @param {string} selector - specifies the string\n     * @returns {void}\n     * @hidden\n     * @deprecated\n     */\n    static applyFormat(docElement, format, endNode, enterAction, value, selector) {\n      this.enterAction = enterAction;\n      const validFormats = ['bold', 'italic', 'underline', 'strikethrough', 'superscript', 'subscript', 'uppercase', 'lowercase', 'fontcolor', 'fontname', 'fontsize', 'backgroundcolor'];\n\n      if (validFormats.indexOf(format) > -1) {\n        if (format === 'backgroundcolor' && value === '') {\n          value = 'transparent';\n        }\n\n        let domSelection = new NodeSelection();\n        const domNode = new DOMNode(endNode, docElement);\n        const nodeCutter = new NodeCutter();\n        const isFormatted = new IsFormatted();\n        let range = domSelection.getRange(docElement);\n        const save = domSelection.save(range, docElement);\n        const nodes = range.collapsed ? domSelection.getSelectionNodeCollection(range) : domSelection.getSelectionNodeCollectionBr(range);\n        let isCollapsed = false;\n        let isFormat = false;\n        let isCursor = false;\n        let preventRestore = false;\n        const isFontStyle = ['fontcolor', 'fontname', 'fontsize', 'backgroundcolor'].indexOf(format) > -1;\n\n        if (range.collapsed) {\n          if (nodes.length > 0) {\n            isCollapsed = true;\n            range = nodeCutter.GetCursorRange(docElement, range, nodes[0]);\n          } else if (range.startContainer.nodeType === 3 && range.startContainer.parentElement.childElementCount > 0 && range.startOffset > 0 && range.startContainer.parentElement.firstElementChild.tagName.toLowerCase() !== 'br') {\n            isCollapsed = true;\n            range = nodeCutter.GetCursorRange(docElement, range, range.startContainer);\n            nodes.push(range.startContainer);\n          } else {\n            const cursorNode = this.insertCursorNode(docElement, domSelection, range, isFormatted, nodeCutter, format, value, endNode);\n            domSelection.endContainer = domSelection.startContainer = domSelection.getNodeArray(cursorNode, true);\n            const childNodes = cursorNode.nodeName === 'BR' && cursorNode.parentNode.childNodes;\n\n            if (!isNullOrUndefined(childNodes) && childNodes.length === 1 && childNodes[0].nodeName === 'BR' && nodes.length === 0) {\n              domSelection.setSelectionText(docElement, range.startContainer, range.endContainer, 0, 0);\n              preventRestore = true;\n            } else {\n              domSelection.endOffset = domSelection.startOffset = 1;\n            }\n\n            if (cursorNode.nodeName === 'BR' && cursorNode.parentNode.textContent.length === 0) {\n              preventRestore = true;\n            }\n          }\n        }\n\n        isCursor = range.collapsed;\n        let isSubSup = false;\n\n        for (let index = 0; index < nodes.length; index++) {\n          let formatNode = isFormatted.getFormattedNode(nodes[index], format, endNode);\n\n          if (formatNode === null) {\n            if (format === 'subscript') {\n              formatNode = isFormatted.getFormattedNode(nodes[index], 'superscript', endNode);\n              isSubSup = formatNode === null ? false : true;\n            } else if (format === 'superscript') {\n              formatNode = isFormatted.getFormattedNode(nodes[index], 'subscript', endNode);\n              isSubSup = formatNode === null ? false : true;\n            }\n          }\n\n          if (index === 0 && formatNode === null) {\n            isFormat = true;\n          }\n\n          if (formatNode !== null && (!isFormat || isFontStyle)) {\n            nodes[index] = this.removeFormat(nodes, index, formatNode, isCursor, isFormat, isFontStyle, range, nodeCutter, format, value, domSelection, endNode, domNode);\n          } else {\n            nodes[index] = this.insertFormat(docElement, nodes, index, formatNode, isCursor, isFormat, isFontStyle, range, nodeCutter, format, value);\n          }\n\n          domSelection = this.applySelection(nodes, domSelection, nodeCutter, index, isCollapsed);\n        }\n\n        if (isIDevice$1()) {\n          setEditFrameFocus(endNode, selector);\n        }\n\n        if (!preventRestore) {\n          save.restore();\n        }\n\n        if (isSubSup) {\n          this.applyFormat(docElement, format, endNode, enterAction);\n        }\n      }\n    }\n\n    static insertCursorNode(docElement, domSelection, range, isFormatted, nodeCutter, format, value, endNode) {\n      const cursorNodes = domSelection.getNodeCollection(range);\n      const cursorFormat = cursorNodes.length > 0 ? cursorNodes.length > 1 && range.startContainer === range.endContainer ? this.getCursorFormat(isFormatted, cursorNodes, format, endNode) : isFormatted.getFormattedNode(cursorNodes[0], format, endNode) : null;\n      let cursorNode = null;\n\n      if (cursorFormat) {\n        cursorNode = cursorNodes[0];\n\n        if (cursorFormat.firstChild.textContent.charCodeAt(0) === 8203) {\n          const regEx = new RegExp(String.fromCharCode(8203), 'g');\n          let emptySpaceNode;\n\n          if (cursorFormat.firstChild === cursorNode) {\n            cursorNode.textContent = cursorNode.textContent.replace(regEx, '');\n            emptySpaceNode = cursorNode;\n          } else {\n            cursorFormat.firstChild.textContent = cursorFormat.firstChild.textContent.replace(regEx, '');\n            emptySpaceNode = cursorFormat.firstChild;\n          }\n\n          let pointer;\n\n          if (emptySpaceNode.textContent.length === 0) {\n            if (!isNullOrUndefined(emptySpaceNode.previousSibling)) {\n              cursorNode = emptySpaceNode.previousSibling;\n              pointer = emptySpaceNode.textContent.length - 1;\n              domSelection.setCursorPoint(docElement, emptySpaceNode, pointer);\n            } else if (!isNullOrUndefined(emptySpaceNode.parentElement) && emptySpaceNode.parentElement.textContent.length === 0) {\n              let brElem = document.createElement('BR');\n              emptySpaceNode.parentElement.appendChild(brElem);\n              detach(emptySpaceNode);\n              cursorNode = brElem;\n              domSelection.setCursorPoint(docElement, cursorNode.parentElement, 0);\n            }\n          }\n        }\n\n        if (['fontcolor', 'fontname', 'fontsize', 'backgroundcolor'].indexOf(format) > -1) {\n          if (format === 'fontcolor') {\n            cursorFormat.style.color = value;\n          } else if (format === 'fontname') {\n            cursorFormat.style.fontFamily = value;\n          } else if (format === 'fontsize') {\n            cursorFormat.style.fontSize = value;\n          } else {\n            cursorFormat.style.backgroundColor = value;\n          }\n\n          cursorNode = cursorFormat;\n        } else {\n          InsertMethods.unwrap(cursorFormat);\n        }\n      } else {\n        if (cursorNodes.length > 1 && range.startOffset > 0 && cursorNodes[0].firstElementChild && cursorNodes[0].firstElementChild.tagName.toLowerCase() === 'br') {\n          cursorNodes[0].innerHTML = '';\n        }\n\n        if (cursorNodes.length === 1 && range.startOffset === 0 && (cursorNodes[0].nodeName === 'BR' || cursorNodes[0].nextSibling.nodeName === 'BR')) {\n          detach(cursorNodes[0].nodeName === '#text' ? cursorNodes[0].nextSibling : cursorNodes[0]);\n        }\n\n        cursorNode = this.getInsertNode(docElement, range, format, value).firstChild;\n      }\n\n      return cursorNode;\n    }\n\n    static getCursorFormat(isFormatted, cursorNodes, format, endNode) {\n      let currentNode;\n\n      for (let index = 0; index < cursorNodes.length; index++) {\n        currentNode = cursorNodes[index].lastElementChild ? cursorNodes[index].lastElementChild : cursorNodes[index];\n      }\n\n      return isFormatted.getFormattedNode(currentNode, format, endNode);\n    }\n\n    static removeFormat(nodes, index, formatNode, isCursor, isFormat, isFontStyle, range, nodeCutter, format, value, domSelection, endNode, domNode) {\n      let splitNode = null;\n\n      if (!(range.startContainer === range.endContainer && range.startOffset === 0 && range.endOffset === range.startContainer.length)) {\n        const nodeIndex = [];\n        let cloneNode = nodes[index];\n\n        do {\n          nodeIndex.push(domSelection.getIndex(cloneNode));\n          cloneNode = cloneNode.parentNode;\n        } while (cloneNode && cloneNode !== formatNode);\n\n        if (nodes[index].nodeName !== 'BR') {\n          cloneNode = splitNode = isCursor && formatNode.textContent.length - 1 === range.startOffset ? nodeCutter.SplitNode(range, formatNode, true) : nodeCutter.GetSpliceNode(range, formatNode);\n        }\n\n        if (!isCursor) {\n          while (cloneNode && cloneNode.childNodes.length > 0 && nodeIndex.length - 1 >= 0 && cloneNode.childNodes.length > nodeIndex[nodeIndex.length - 1]) {\n            cloneNode = cloneNode.childNodes[nodeIndex[nodeIndex.length - 1]];\n            nodeIndex.pop();\n          }\n\n          if (nodes[index].nodeName !== 'BR') {\n            if (cloneNode.nodeType === 3 && !(isCursor && cloneNode.nodeValue === '')) {\n              nodes[index] = cloneNode;\n            } else {\n              const divNode = document.createElement('div');\n              divNode.innerHTML = '&#8203;';\n\n              if (cloneNode.nodeType !== 3) {\n                cloneNode.insertBefore(divNode.firstChild, cloneNode.firstChild);\n                nodes[index] = cloneNode.firstChild;\n              } else {\n                cloneNode.parentNode.insertBefore(divNode.firstChild, cloneNode);\n                nodes[index] = cloneNode.previousSibling;\n                cloneNode.parentNode.removeChild(cloneNode);\n              }\n            }\n          }\n        } else {\n          let lastNode = splitNode;\n\n          for (; lastNode.firstChild !== null && lastNode.firstChild.nodeType !== 3; null) {\n            lastNode = lastNode.firstChild;\n          }\n\n          lastNode.innerHTML = '&#8203;';\n          nodes[index] = lastNode.firstChild;\n        }\n      }\n\n      let fontStyle;\n\n      if (format === 'backgroundcolor') {\n        fontStyle = formatNode.style.fontSize;\n      }\n\n      let bgStyle;\n\n      if (format === 'fontsize') {\n        const bg = closest(nodes[index].parentElement, 'span[style*=' + 'background-color' + ']');\n\n        if (!isNullOrUndefined(bg)) {\n          bgStyle = bg.style.backgroundColor;\n        }\n      }\n\n      const formatNodeStyles = formatNode.getAttribute('style');\n      const formatNodeTagName = formatNode.tagName;\n      const child = InsertMethods.unwrap(formatNode);\n\n      if (child[0] && !isFontStyle) {\n        let nodeTraverse = child[index] ? child[index] : child[0];\n        const textNode = nodeTraverse;\n\n        for (; nodeTraverse && nodeTraverse.parentElement && nodeTraverse.parentElement !== endNode; // eslint-disable-next-line\n        nodeTraverse = nodeTraverse) {\n          if (nodeTraverse.parentElement && nodeTraverse.parentElement.tagName.toLocaleLowerCase() === formatNode.tagName.toLocaleLowerCase() && (nodeTraverse.parentElement.childElementCount > 1 || range.startOffset > 1)) {\n            if (textNode.parentElement && textNode.parentElement.tagName.toLocaleLowerCase() === formatNode.tagName.toLocaleLowerCase()) {\n              if (range.startOffset === range.endOffset && textNode.nodeType !== 1 && !isNullOrUndefined(textNode.textContent) && textNode.parentElement.childElementCount > 1) {\n                range.setStart(textNode, 0);\n                range.setEnd(textNode, textNode.textContent.length);\n                nodeCutter.SplitNode(range, textNode.parentElement, false);\n              }\n            }\n\n            if (nodeTraverse.parentElement.tagName.toLocaleLowerCase() === 'span') {\n              if (formatNode.style.textDecoration === 'underline' && nodeTraverse.parentElement.style.textDecoration !== 'underline') {\n                nodeTraverse = nodeTraverse.parentElement;\n                continue;\n              }\n            }\n\n            InsertMethods.unwrap(nodeTraverse.parentElement);\n            nodeTraverse = !isNullOrUndefined(nodeTraverse.parentElement) && !domNode.isBlockNode(nodeTraverse.parentElement) ? textNode : nodeTraverse.parentElement;\n          } else {\n            nodeTraverse = nodeTraverse.parentElement;\n          }\n        }\n      }\n\n      if (child.length > 0 && isFontStyle) {\n        for (let num = 0; num < child.length; num++) {\n          if (child[num].nodeType !== 3 || child[num].textContent && child[num].textContent.trim().length > 0) {\n            child[num] = InsertMethods.Wrap(child[num], this.GetFormatNode(format, value, formatNodeTagName, formatNodeStyles));\n\n            if (num === 0) {\n              range.setStartBefore(child[num]);\n            } else if (num === child.length - 1) {\n              range.setEndAfter(child[num]);\n            }\n          }\n        }\n\n        const currentNodeElem = nodes[index].parentElement;\n\n        if (!isNullOrUndefined(fontStyle) && fontStyle !== '') {\n          currentNodeElem.style.fontSize = fontStyle;\n        }\n\n        if (!isNullOrUndefined(bgStyle) && bgStyle !== '') {\n          currentNodeElem.style.backgroundColor = bgStyle;\n        }\n\n        if (format === 'backgroundcolor' && !isNullOrUndefined(fontStyle) && fontStyle !== '' && currentNodeElem.parentElement.innerHTML === currentNodeElem.outerHTML) {\n          const curParentElem = currentNodeElem.parentElement;\n          curParentElem.parentElement.insertBefore(currentNodeElem, curParentElem);\n          detach(curParentElem);\n        }\n\n        if (format === 'fontsize' || format === 'fontcolor') {\n          let liElement = nodes[index].parentElement;\n          let parentElement = nodes[index].parentElement;\n\n          while (!isNullOrUndefined(parentElement) && parentElement.tagName.toLowerCase() !== 'li') {\n            parentElement = parentElement.parentElement;\n            liElement = parentElement;\n          }\n\n          if (!isNullOrUndefined(liElement) && liElement.tagName.toLowerCase() === 'li' && liElement.textContent.trim() === nodes[index].textContent.trim()) {\n            if (format === 'fontsize') {\n              liElement.style.fontSize = value;\n            } else {\n              liElement.style.color = value;\n              liElement.style.textDecoration = 'inherit';\n            }\n          }\n        }\n      }\n\n      return nodes[index];\n    }\n\n    static insertFormat(docElement, nodes, index, formatNode, isCursor, isFormat, isFontStyle, range, nodeCutter, format, value) {\n      if (!isCursor) {\n        if (formatNode === null && isFormat || isFontStyle) {\n          if (nodes[index].nodeName !== 'BR') {\n            nodes[index] = nodeCutter.GetSpliceNode(range, nodes[index]);\n            nodes[index].textContent = nodeCutter.TrimLineBreak(nodes[index].textContent);\n          }\n\n          if (format === 'uppercase' || format === 'lowercase') {\n            nodes[index].textContent = format === 'uppercase' ? nodes[index].textContent.toLocaleUpperCase() : nodes[index].textContent.toLocaleLowerCase();\n          } else if (!(isFontStyle === true && value === '')) {\n            const element = this.GetFormatNode(format, value);\n\n            if (format === 'fontsize' || format === 'fontcolor') {\n              let liElement = nodes[index].parentElement;\n              let parentElement = nodes[index].parentElement;\n\n              while (!isNullOrUndefined(parentElement) && parentElement.tagName.toLowerCase() !== 'li') {\n                parentElement = parentElement.parentElement;\n                liElement = parentElement;\n              }\n\n              if (!isNullOrUndefined(liElement) && liElement.tagName.toLowerCase() === 'li' && liElement.textContent.trim() === nodes[index].textContent.trim()) {\n                if (format === 'fontsize') {\n                  liElement.style.fontSize = value;\n                } else {\n                  liElement.style.color = value;\n                  liElement.style.textDecoration = 'inherit';\n                }\n              }\n\n              nodes[index] = this.applyStyles(nodes, index, element);\n\n              if (format === 'fontsize') {\n                const bg = closest(nodes[index].parentElement, 'span[style*=' + 'background-color' + ']');\n\n                if (!isNullOrUndefined(bg)) {\n                  nodes[index].parentElement.style.backgroundColor = bg.style.backgroundColor;\n                }\n              }\n            } else {\n              nodes[index] = this.applyStyles(nodes, index, element);\n            }\n          }\n        } else {\n          nodes[index] = nodeCutter.GetSpliceNode(range, nodes[index]);\n        }\n      } else {\n        if (format !== 'uppercase' && format !== 'lowercase') {\n          const element = this.getInsertNode(docElement, range, format, value);\n          nodes[index] = element.firstChild;\n          nodeCutter.position = 1;\n        } else {\n          nodeCutter.position = range.startOffset;\n        }\n      }\n\n      return nodes[index];\n    }\n\n    static applyStyles(nodes, index, element) {\n      if (!(nodes[index].nodeName === 'BR' && this.enterAction === 'BR')) {\n        nodes[index] = index === nodes.length - 1 || nodes[index].nodeName === 'BR' ? InsertMethods.Wrap(nodes[index], element) : InsertMethods.WrapBefore(nodes[index], element, true);\n        nodes[index] = this.getChildNode(nodes[index], element);\n      }\n\n      return nodes[index];\n    }\n\n    static getInsertNode(docElement, range, format, value) {\n      const element = this.GetFormatNode(format, value);\n      element.innerHTML = '&#8203;';\n\n      if (Browser.isIE) {\n        const frag = docElement.createDocumentFragment();\n        frag.appendChild(element);\n        range.insertNode(frag);\n      } else {\n        range.insertNode(element);\n      }\n\n      return element;\n    }\n\n    static getChildNode(node, element) {\n      if (node === undefined || node === null) {\n        element.innerHTML = '&#8203;';\n        node = element.firstChild;\n      }\n\n      return node;\n    }\n\n    static applySelection(nodes, domSelection, nodeCutter, index, isCollapsed) {\n      if (nodes.length === 1 && !isCollapsed) {\n        domSelection.startContainer = domSelection.getNodeArray(nodes[index], true);\n        domSelection.endContainer = domSelection.startContainer;\n        domSelection.startOffset = 0;\n        domSelection.endOffset = nodes[index].textContent.length;\n      } else if (nodes.length === 1 && isCollapsed) {\n        domSelection.startContainer = domSelection.getNodeArray(nodes[index], true);\n        domSelection.endContainer = domSelection.startContainer;\n        domSelection.startOffset = nodeCutter.position;\n        domSelection.endOffset = nodeCutter.position;\n      } else if (index === 0) {\n        domSelection.startContainer = domSelection.getNodeArray(nodes[index], true);\n        domSelection.startOffset = 0;\n      } else if (index === nodes.length - 1) {\n        domSelection.endContainer = domSelection.getNodeArray(nodes[index], false);\n        domSelection.endOffset = nodes[index].textContent.length;\n      }\n\n      return domSelection;\n    }\n\n    static GetFormatNode(format, value, tagName, styles) {\n      let node;\n\n      switch (format) {\n        case 'bold':\n          return document.createElement('strong');\n\n        case 'italic':\n          return document.createElement('em');\n\n        case 'underline':\n          node = document.createElement('span');\n          this.updateStyles(node, tagName, styles);\n          node.style.textDecoration = 'underline';\n          return node;\n\n        case 'strikethrough':\n          node = document.createElement('span');\n          this.updateStyles(node, tagName, styles);\n          node.style.textDecoration = 'line-through';\n          return node;\n\n        case 'superscript':\n          return document.createElement('sup');\n\n        case 'subscript':\n          return document.createElement('sub');\n\n        case 'fontcolor':\n          node = document.createElement('span');\n          this.updateStyles(node, tagName, styles);\n          node.style.color = value;\n          node.style.textDecoration = 'inherit';\n          return node;\n\n        case 'fontname':\n          node = document.createElement('span');\n          this.updateStyles(node, tagName, styles);\n          node.style.fontFamily = value;\n          return node;\n\n        case 'fontsize':\n          node = document.createElement('span');\n          this.updateStyles(node, tagName, styles);\n          node.style.fontSize = value;\n          return node;\n\n        default:\n          node = document.createElement('span');\n          this.updateStyles(node, tagName, styles);\n          node.style.backgroundColor = value;\n          return node;\n      }\n    }\n\n    static updateStyles(ele, tag, styles) {\n      if (styles !== null && tag === 'SPAN') {\n        ele.setAttribute('style', styles);\n      }\n    }\n\n  }\n\n  SelectionCommands.enterAction = 'P';\n  /**\n   * Selection EXEC internal component\n   *\n   * @hidden\n   * @deprecated\n   */\n\n  return SelectionCommands;\n})();\n\nclass SelectionBasedExec {\n  /**\n   * Constructor for creating the Formats plugin\n   *\n   * @param {EditorManager} parent - specifies the parent element\n   * @hidden\n   * @deprecated\n   */\n  constructor(parent) {\n    this.parent = parent;\n    this.addEventListener();\n  }\n\n  addEventListener() {\n    this.parent.observer.on(SELECTION_TYPE, this.applySelection, this);\n    this.parent.observer.on(KEY_DOWN_HANDLER, this.keyDownHandler, this);\n  }\n\n  keyDownHandler(e) {\n    const validFormats = ['bold', 'italic', 'underline', 'strikethrough', 'superscript', 'subscript', 'uppercase', 'lowercase'];\n\n    if (e.event.ctrlKey && validFormats.indexOf(e.event.action) > -1) {\n      e.event.preventDefault();\n      SelectionCommands.applyFormat(this.parent.currentDocument, e.event.action, this.parent.editableElement, e.enterAction);\n      this.callBack(e, e.event.action);\n    }\n  }\n\n  applySelection(e) {\n    SelectionCommands.applyFormat(this.parent.currentDocument, e.subCommand.toLocaleLowerCase(), this.parent.editableElement, e.enterAction, e.value, e.selector);\n    this.callBack(e, e.subCommand);\n  }\n\n  callBack(event, action) {\n    if (event.callBack) {\n      event.callBack({\n        requestType: action,\n        event: event.event,\n        editorMode: 'HTML',\n        range: this.parent.nodeSelection.getRange(this.parent.currentDocument),\n        elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)\n      });\n    }\n  }\n\n}\n/**\n * Selection EXEC internal component\n *\n * @hidden\n * @deprecated\n */\n\n\nclass InsertHtmlExec {\n  /**\n   * Constructor for creating the Formats plugin\n   *\n   * @param {EditorManager} parent - sepcifies the parent element\n   * @hidden\n   * @deprecated\n   */\n  constructor(parent) {\n    this.parent = parent;\n    this.addEventListener();\n  }\n\n  addEventListener() {\n    this.parent.observer.on(INSERTHTML_TYPE, this.applyHtml, this);\n  }\n\n  applyHtml(e) {\n    InsertHtml.Insert(this.parent.currentDocument, e.value, this.parent.editableElement, true);\n\n    if (e.subCommand === 'pasteCleanup') {\n      const pastedElements = this.parent.editableElement.querySelectorAll('.pasteContent_RTE');\n      const allPastedElements = [].slice.call(pastedElements);\n      const imgElements = this.parent.editableElement.querySelectorAll('.pasteContent_Img');\n      const allImgElm = [].slice.call(imgElements);\n      e.callBack({\n        requestType: e.subCommand,\n        editorMode: 'HTML',\n        elements: allPastedElements,\n        imgElem: allImgElm\n      });\n    } else {\n      if (e.callBack) {\n        e.callBack({\n          requestType: e.subCommand,\n          editorMode: 'HTML',\n          event: e.event,\n          range: this.parent.nodeSelection.getRange(this.parent.currentDocument),\n          elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)\n        });\n      }\n    }\n  }\n\n}\n/**\n * `Clear Format` module is used to handle Clear Format.\n */\n\n\nlet ClearFormat$1 = /*#__PURE__*/(() => {\n  class ClearFormat$1 {\n    /**\n     * clear method\n     *\n     * @param {Document} docElement - specifies the document element.\n     * @param {Node} endNode - specifies the end node\n     * @param {string} enterAction - specifies the enter key action\n     * @param {string} selector - specifies the string value\n     * @returns {void}\n     * @hidden\n     * @deprecated\n     */\n    static clear(docElement, endNode, enterAction, selector) {\n      this.domNode = new DOMNode(endNode, docElement);\n      this.defaultTag = enterAction === 'P' ? this.defaultTag : 'div';\n      const nodeSelection = new NodeSelection();\n      const nodeCutter = new NodeCutter();\n      let range = nodeSelection.getRange(docElement);\n      const isCollapsed = range.collapsed;\n      const nodes = nodeSelection.getInsertNodeCollection(range);\n      const save = nodeSelection.save(range, docElement);\n\n      if (!isCollapsed) {\n        let preNode;\n\n        if (nodes[0].nodeName === 'BR' && closest(nodes[0], 'table')) {\n          preNode = nodeCutter.GetSpliceNode(range, closest(nodes[0], 'table'));\n        } else {\n          preNode = nodeCutter.GetSpliceNode(range, nodes[nodes.length > 1 && nodes[0].nodeName === 'IMG' ? 1 : 0]);\n        }\n\n        if (nodes.length === 1) {\n          nodeSelection.setSelectionContents(docElement, preNode);\n          range = nodeSelection.getRange(docElement);\n        } else {\n          let i = 1;\n          let lastText = nodes[nodes.length - i];\n\n          while (nodes.length <= i && nodes[nodes.length - i].nodeName === 'BR') {\n            i++;\n            lastText = nodes[nodes.length - i];\n          }\n\n          const lasNode = nodeCutter.GetSpliceNode(range, lastText);\n          nodeSelection.setSelectionText(docElement, preNode, lasNode, 0, lasNode.nodeType === 3 ? lasNode.textContent.length : lasNode.childNodes.length);\n          range = nodeSelection.getRange(docElement);\n        }\n\n        let exactNodes = nodeSelection.getNodeCollection(range);\n        const cloneSelectNodes = exactNodes.slice();\n        this.clearInlines(nodeSelection.getSelectionNodes(cloneSelectNodes), cloneSelectNodes, nodeSelection.getRange(docElement), nodeCutter, endNode);\n        this.reSelection(docElement, save, exactNodes);\n        range = nodeSelection.getRange(docElement);\n        exactNodes = nodeSelection.getNodeCollection(range);\n        const cloneParentNodes = exactNodes.slice();\n        this.clearBlocks(docElement, cloneParentNodes, endNode, nodeCutter, nodeSelection);\n\n        if (isIDevice$1()) {\n          setEditFrameFocus(endNode, selector);\n        }\n\n        this.reSelection(docElement, save, exactNodes);\n      }\n    }\n\n    static reSelection(docElement, save, exactNodes) {\n      const selectionNodes = save.getInsertNodes(exactNodes);\n      save.startContainer = save.getNodeArray(selectionNodes[0], true, docElement);\n      save.startOffset = 0;\n      save.endContainer = save.getNodeArray(selectionNodes[selectionNodes.length - 1], false, docElement);\n      const endIndexNode = selectionNodes[selectionNodes.length - 1];\n      save.endOffset = endIndexNode.nodeType === 3 ? endIndexNode.textContent.length : endIndexNode.childNodes.length;\n      save.restore();\n    }\n\n    static clearBlocks(docElement, nodes, endNode, nodeCutter, nodeSelection) {\n      let parentNodes = [];\n\n      for (let index = 0; index < nodes.length; index++) {\n        if (this.BLOCK_TAGS.indexOf(nodes[index].nodeName.toLocaleLowerCase()) > -1 && parentNodes.indexOf(nodes[index]) === -1) {\n          parentNodes.push(nodes[index]);\n        } else if (this.BLOCK_TAGS.indexOf(nodes[index].parentNode.nodeName.toLocaleLowerCase()) > -1 && parentNodes.indexOf(nodes[index].parentNode) === -1 && endNode !== nodes[index].parentNode) {\n          parentNodes.push(nodes[index].parentNode);\n        }\n      }\n\n      parentNodes = this.spliceParent(parentNodes, nodes)[0];\n      parentNodes = this.removeParent(parentNodes);\n      this.unWrap(docElement, parentNodes, nodeCutter, nodeSelection);\n    }\n\n    static spliceParent(parentNodes, nodes) {\n      for (let index1 = 0; index1 < parentNodes.length; index1++) {\n        const len = parentNodes[index1].childNodes.length;\n\n        for (let index2 = 0; index2 < len; index2++) {\n          if (nodes.indexOf(parentNodes[index1].childNodes[index2]) > 0 && parentNodes[index1].childNodes[index2].childNodes.length > 0) {\n            nodes = this.spliceParent([parentNodes[index1].childNodes[index2]], nodes)[1];\n          }\n\n          if (nodes.indexOf(parentNodes[index1].childNodes[index2]) <= -1 && parentNodes[index1].childNodes[index2].textContent.trim() !== '') {\n            for (let index3 = 0; index3 < len; index3++) {\n              if (nodes.indexOf(parentNodes[index1].childNodes[index3]) > -1) {\n                nodes.splice(nodes.indexOf(parentNodes[index1].childNodes[index3]), 1);\n              }\n            }\n\n            index2 = parentNodes[index1].childNodes.length;\n            const parentIndex = parentNodes.indexOf(parentNodes[index1].parentNode);\n            const nodeIndex = nodes.indexOf(parentNodes[index1].parentNode);\n\n            if (parentIndex > -1) {\n              parentNodes.splice(parentIndex, 1);\n            }\n\n            if (nodeIndex > -1) {\n              nodes.splice(nodeIndex, 1);\n            }\n\n            const elementIndex = nodes.indexOf(parentNodes[index1]);\n\n            if (elementIndex > -1) {\n              nodes.splice(elementIndex, 1);\n            }\n\n            parentNodes.splice(index1, 1);\n            index1--;\n          }\n        }\n      }\n\n      return [parentNodes, nodes];\n    }\n\n    static removeChild(parentNodes, parentNode) {\n      const count = parentNode.childNodes.length;\n\n      if (count > 0) {\n        for (let index = 0; index < count; index++) {\n          if (parentNodes.indexOf(parentNode.childNodes[index]) > -1) {\n            parentNodes = this.removeChild(parentNodes, parentNode.childNodes[index]);\n            parentNodes.splice(parentNodes.indexOf(parentNode.childNodes[index]), 1);\n          }\n        }\n      }\n\n      return parentNodes;\n    }\n\n    static removeParent(parentNodes) {\n      for (let index = 0; index < parentNodes.length; index++) {\n        if (parentNodes.indexOf(parentNodes[index].parentNode) > -1) {\n          parentNodes = this.removeChild(parentNodes, parentNodes[index]);\n          parentNodes.splice(index, 1);\n          index--;\n        }\n      }\n\n      return parentNodes;\n    }\n\n    static unWrap(docElement, parentNodes, nodeCutter, nodeSelection) {\n      for (let index1 = 0; index1 < parentNodes.length; index1++) {\n        if (this.NONVALID_TAGS.indexOf(parentNodes[index1].nodeName.toLowerCase()) > -1 && parentNodes[index1].parentNode && this.NONVALID_PARENT_TAGS.indexOf(parentNodes[index1].parentNode.nodeName.toLowerCase()) > -1) {\n          nodeSelection.setSelectionText(docElement, parentNodes[index1], parentNodes[index1], 0, parentNodes[index1].childNodes.length);\n          InsertMethods.unwrap(nodeCutter.GetSpliceNode(nodeSelection.getRange(docElement), parentNodes[index1].parentNode));\n        }\n\n        if (parentNodes[index1].nodeName.toLocaleLowerCase() !== 'p') {\n          if (this.NONVALID_PARENT_TAGS.indexOf(parentNodes[index1].nodeName.toLowerCase()) < 0 && parentNodes[index1].parentNode.nodeName.toLocaleLowerCase() !== 'p' && !((parentNodes[index1].nodeName.toLocaleLowerCase() === 'blockquote' || parentNodes[index1].nodeName.toLocaleLowerCase() === 'li') && this.IGNORE_PARENT_TAGS.indexOf(parentNodes[index1].childNodes[0].nodeName.toLocaleLowerCase()) > -1) && !(parentNodes[index1].childNodes.length === 1 && parentNodes[index1].childNodes[0].nodeName.toLocaleLowerCase() === 'p')) {\n            InsertMethods.Wrap(parentNodes[index1], docElement.createElement(this.defaultTag));\n          }\n\n          const childNodes = InsertMethods.unwrap(parentNodes[index1]);\n\n          if (childNodes.length === 1 && childNodes[0].parentNode.nodeName.toLocaleLowerCase() === 'p') {\n            InsertMethods.Wrap(parentNodes[index1], docElement.createElement(this.defaultTag));\n            InsertMethods.unwrap(parentNodes[index1]);\n          }\n\n          for (let index2 = 0; index2 < childNodes.length; index2++) {\n            if (this.NONVALID_TAGS.indexOf(childNodes[index2].nodeName.toLowerCase()) > -1) {\n              this.unWrap(docElement, [childNodes[index2]], nodeCutter, nodeSelection);\n            } else if (this.BLOCK_TAGS.indexOf(childNodes[index2].nodeName.toLocaleLowerCase()) > -1 && childNodes[index2].nodeName.toLocaleLowerCase() !== 'p') {\n              const blockNodes = this.removeParent([childNodes[index2]]);\n              this.unWrap(docElement, blockNodes, nodeCutter, nodeSelection);\n            } else if (this.BLOCK_TAGS.indexOf(childNodes[index2].nodeName.toLocaleLowerCase()) > -1 && childNodes[index2].parentNode.nodeName.toLocaleLowerCase() === childNodes[index2].nodeName.toLocaleLowerCase()) {\n              InsertMethods.unwrap(childNodes[index2]);\n            } else if (this.BLOCK_TAGS.indexOf(childNodes[index2].nodeName.toLocaleLowerCase()) > -1 && childNodes[index2].nodeName.toLocaleLowerCase() === 'p') {\n              InsertMethods.Wrap(childNodes[index2], docElement.createElement(this.defaultTag));\n              InsertMethods.unwrap(childNodes[index2]);\n            }\n          }\n        } else {\n          InsertMethods.Wrap(parentNodes[index1], docElement.createElement(this.defaultTag));\n          InsertMethods.unwrap(parentNodes[index1]);\n        }\n      }\n    }\n\n    static clearInlines(textNodes, nodes, range, nodeCutter, // eslint-disable-next-line\n    endNode) {\n      for (let index = 0; index < textNodes.length; index++) {\n        let currentInlineNode = textNodes[index];\n        let currentNode;\n\n        while (!this.domNode.isBlockNode(currentInlineNode)) {\n          currentNode = currentInlineNode;\n          currentInlineNode = currentInlineNode.parentElement;\n        }\n\n        if (currentNode && IsFormatted.inlineTags.indexOf(currentNode.nodeName.toLocaleLowerCase()) > -1) {\n          nodeCutter.GetSpliceNode(range, currentNode);\n          this.removeInlineParent(currentNode);\n        }\n      }\n    }\n\n    static removeInlineParent(textNodes) {\n      const nodes = InsertMethods.unwrap(textNodes);\n\n      for (let index = 0; index < nodes.length; index++) {\n        if (nodes[index].parentNode.childNodes.length === 1 && IsFormatted.inlineTags.indexOf(nodes[index].parentNode.nodeName.toLocaleLowerCase()) > -1) {\n          this.removeInlineParent(nodes[index].parentNode);\n        } else if (IsFormatted.inlineTags.indexOf(nodes[index].nodeName.toLocaleLowerCase()) > -1) {\n          this.removeInlineParent(nodes[index]);\n        }\n      }\n    }\n\n  }\n\n  ClearFormat$1.BLOCK_TAGS = ['address', 'article', 'aside', 'blockquote', 'details', 'dd', 'div', 'dl', 'dt', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'hgroup', 'li', 'main', 'nav', 'noscript', 'ol', 'p', 'pre', 'section', 'ul'];\n  ClearFormat$1.NONVALID_PARENT_TAGS = ['thead', 'tbody', 'ul', 'ol', 'table', 'tfoot', 'tr'];\n  ClearFormat$1.IGNORE_PARENT_TAGS = ['ul', 'ol', 'table'];\n  ClearFormat$1.NONVALID_TAGS = ['thead', 'tbody', 'figcaption', 'td', 'tr', 'th', 'tfoot', 'figcaption', 'li'];\n  ClearFormat$1.defaultTag = 'p';\n  /**\n   * Clear Format EXEC internal component\n   *\n   * @hidden\n   * @deprecated\n   */\n\n  return ClearFormat$1;\n})();\n\nclass ClearFormatExec {\n  /**\n   * Constructor for creating the Formats plugin\n   *\n   * @param {EditorManager} parent - specifies the parent element.\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n  constructor(parent) {\n    this.parent = parent;\n    this.addEventListener();\n  }\n\n  addEventListener() {\n    this.parent.observer.on(CLEAR_TYPE, this.applyClear, this);\n    this.parent.observer.on(KEY_DOWN_HANDLER, this.onKeyDown, this);\n  }\n\n  onKeyDown(e) {\n    switch (e.event.action) {\n      case 'clear-format':\n        this.applyClear({\n          subCommand: 'ClearFormat',\n          callBack: e.callBack,\n          enterAction: e.enterAction\n        });\n        e.event.preventDefault();\n        break;\n    }\n  }\n\n  applyClear(e) {\n    if (e.subCommand === 'ClearFormat') {\n      ClearFormat$1.clear(this.parent.currentDocument, this.parent.editableElement, e.enterAction, e.selector);\n\n      if (e.callBack) {\n        e.callBack({\n          requestType: e.subCommand,\n          event: e.event,\n          editorMode: 'HTML',\n          range: this.parent.nodeSelection.getRange(this.parent.currentDocument),\n          elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)\n        });\n      }\n    }\n  }\n\n}\n/**\n * `Undo` module is used to handle undo actions.\n */\n\n\nclass UndoRedoManager {\n  constructor(parent, options) {\n    this.undoRedoStack = [];\n    this.parent = parent;\n    this.undoRedoSteps = !isNullOrUndefined(options) ? options.undoRedoSteps : 30;\n    this.undoRedoTimer = !isNullOrUndefined(options) ? options.undoRedoTimer : 300;\n    this.addEventListener();\n  }\n\n  addEventListener() {\n    const debounceListener = debounce(this.keyUp, this.undoRedoTimer);\n    this.parent.observer.on(KEY_UP_HANDLER, debounceListener, this);\n    this.parent.observer.on(KEY_DOWN_HANDLER, this.keyDown, this);\n    this.parent.observer.on(ACTION, this.onAction, this);\n    this.parent.observer.on(MODEL_CHANGED_PLUGIN, this.onPropertyChanged, this);\n  }\n\n  onPropertyChanged(props) {\n    for (const prop of Object.keys(props.newProp)) {\n      switch (prop) {\n        case 'undoRedoSteps':\n          this.undoRedoSteps = props.newProp.undoRedoSteps;\n          break;\n\n        case 'undoRedoTimer':\n          this.undoRedoTimer = props.newProp.undoRedoTimer;\n          break;\n      }\n    }\n  }\n\n  removeEventListener() {\n    this.parent.observer.off(KEY_UP_HANDLER, this.keyUp);\n    this.parent.observer.off(KEY_DOWN_HANDLER, this.keyDown);\n    this.parent.observer.off(ACTION, this.onAction);\n  }\n  /**\n   * onAction method\n   *\n   * @param {IHtmlSubCommands} e - specifies the sub command\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  onAction(e) {\n    if (e.subCommand === 'Undo') {\n      this.undo(e);\n    } else {\n      this.redo(e);\n    }\n  }\n  /**\n   * Destroys the ToolBar.\n   *\n   * @function destroy\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  destroy() {\n    this.removeEventListener();\n  }\n\n  keyDown(e) {\n    const event = e.event; // eslint-disable-next-line\n\n    const proxy = this;\n\n    switch (event.action) {\n      case 'undo':\n        event.preventDefault();\n        proxy.undo(e);\n        break;\n\n      case 'redo':\n        event.preventDefault();\n        proxy.redo(e);\n        break;\n    }\n  }\n\n  keyUp(e) {\n    if (e.event.keyCode !== 17 && !e.event.ctrlKey) {\n      this.saveData(e);\n    }\n  }\n  /**\n   * RTE collection stored html format.\n   *\n   * @function saveData\n   * @param {KeyboardEvent} e - specifies the keyboard event\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  saveData(e) {\n    let range = new NodeSelection().getRange(this.parent.currentDocument);\n    let currentContainer = range.startContainer;\n\n    for (let i = currentContainer.childNodes.length - 1; i >= 0; i--) {\n      if (!isNullOrUndefined(currentContainer.childNodes[i]) && currentContainer.childNodes[i].nodeName === '#text' && currentContainer.childNodes[i].textContent.length === 0 && currentContainer.childNodes[i].nodeName !== 'IMG' && currentContainer.childNodes[i].nodeName !== 'BR' && currentContainer.childNodes[i].nodeName && 'HR') {\n        detach(currentContainer.childNodes[i]);\n      }\n    }\n\n    range = new NodeSelection().getRange(this.parent.currentDocument);\n    const save = new NodeSelection().save(range, this.parent.currentDocument);\n    const htmlText = this.parent.editableElement.innerHTML;\n    const changEle = {\n      text: htmlText,\n      range: save\n    };\n\n    if (this.undoRedoStack.length >= this.steps) {\n      this.undoRedoStack = this.undoRedoStack.slice(0, this.steps + 1);\n    }\n\n    if (this.undoRedoStack.length > 1 && this.undoRedoStack[this.undoRedoStack.length - 1].range.range.collapsed === range.collapsed && this.undoRedoStack[this.undoRedoStack.length - 1].range.startOffset === save.range.startOffset && this.undoRedoStack[this.undoRedoStack.length - 1].range.endOffset === save.range.endOffset && this.undoRedoStack[this.undoRedoStack.length - 1].range.range.startContainer === save.range.startContainer && this.undoRedoStack[this.undoRedoStack.length - 1].text.trim() === changEle.text.trim()) {\n      return;\n    }\n\n    this.undoRedoStack.push(changEle);\n    this.steps = this.undoRedoStack.length - 1;\n\n    if (this.steps > this.undoRedoSteps) {\n      this.undoRedoStack.shift();\n      this.steps--;\n    }\n\n    if (e && e.callBack) {\n      e.callBack();\n    }\n  }\n  /**\n   * Undo the editable text.\n   *\n   * @function undo\n   * @param {IHtmlSubCommands} e - specifies the sub commands\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  undo(e) {\n    if (this.steps > 0) {\n      const range = this.undoRedoStack[this.steps - 1].range;\n      const removedContent = this.undoRedoStack[this.steps - 1].text;\n      this.parent.editableElement.innerHTML = removedContent;\n      this.parent.editableElement.focus();\n\n      if (isIDevice$1()) {\n        setEditFrameFocus(this.parent.editableElement, e.selector);\n      }\n\n      range.restore();\n      this.steps--;\n\n      if (e.callBack) {\n        e.callBack({\n          requestType: 'Undo',\n          editorMode: 'HTML',\n          range: range,\n          elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument),\n          event: e.event\n        });\n      }\n    }\n  }\n  /**\n   * Redo the editable text.\n   *\n   * @param {IHtmlSubCommands} e - specifies the sub commands\n   * @function redo\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  redo(e) {\n    if (this.undoRedoStack[this.steps + 1] != null) {\n      const range = this.undoRedoStack[this.steps + 1].range;\n      this.parent.editableElement.innerHTML = this.undoRedoStack[this.steps + 1].text;\n      this.parent.editableElement.focus();\n\n      if (isIDevice$1()) {\n        setEditFrameFocus(this.parent.editableElement, e.selector);\n      }\n\n      range.restore();\n      this.steps++;\n\n      if (e.callBack) {\n        e.callBack({\n          requestType: 'Redo',\n          editorMode: 'HTML',\n          range: range,\n          elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument),\n          event: e.event\n        });\n      }\n    }\n  }\n  /**\n   * getUndoStatus method\n   *\n   * @returns {boolean} - returns the boolean value\n   * @hidden\n   * @deprecated\n   */\n\n\n  getUndoStatus() {\n    const status = {\n      undo: false,\n      redo: false\n    };\n\n    if (this.steps > 0) {\n      status.undo = true;\n    }\n\n    if (this.undoRedoStack[this.steps + 1] != null) {\n      status.redo = true;\n    }\n\n    return status;\n  }\n\n}\n/**\n * PasteCleanup for MsWord content\n *\n * @hidden\n * @deprecated\n */\n\n\nclass MsWordPaste {\n  constructor(parent) {\n    this.olData = ['decimal', 'lower-alpha', 'lower-roman', 'upper-alpha', 'upper-roman', 'lower-greek'];\n    this.ulData = ['disc', 'square', 'circle', 'disc', 'square', 'circle'];\n    this.ignorableNodes = ['A', 'APPLET', 'B', 'BLOCKQUOTE', 'BR', 'BUTTON', 'CENTER', 'CODE', 'COL', 'COLGROUP', 'DD', 'DEL', 'DFN', 'DIR', 'DIV', 'DL', 'DT', 'EM', 'FIELDSET', 'FONT', 'FORM', 'FRAME', 'FRAMESET', 'H1', 'H2', 'H3', 'H4', 'H5', 'H6', 'HR', 'I', 'IMG', 'IFRAME', 'INPUT', 'INS', 'LABEL', 'LI', 'OL', 'OPTION', 'P', 'PARAM', 'PRE', 'Q', 'S', 'SELECT', 'SPAN', 'STRIKE', 'STRONG', 'SUB', 'SUP', 'TABLE', 'TBODY', 'TD', 'TEXTAREA', 'TFOOT', 'TH', 'THEAD', 'TITLE', 'TR', 'TT', 'U', 'UL'];\n    this.blockNode = ['div', 'p', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'address', 'blockquote', 'button', 'center', 'dd', 'dir', 'dl', 'dt', 'fieldset', 'frameset', 'hr', 'iframe', 'isindex', 'li', 'map', 'menu', 'noframes', 'noscript', 'object', 'ol', 'pre', 'table', 'tbody', 'td', 'tfoot', 'th', 'thead', 'tr', 'ul', 'header', 'article', 'nav', 'footer', 'section', 'aside', 'main', 'figure', 'figcaption'];\n    this.borderStyle = ['border-top', 'border-right', 'border-bottom', 'border-left'];\n    this.removableElements = ['o:p', 'style'];\n    this.listContents = [];\n    this.parent = parent;\n    this.addEventListener();\n  }\n\n  addEventListener() {\n    this.parent.observer.on(MS_WORD_CLEANUP_PLUGIN, this.wordCleanup, this);\n  }\n\n  wordCleanup(e) {\n    const wordPasteStyleConfig = !isNullOrUndefined(e.allowedStylePropertiesArray) ? e.allowedStylePropertiesArray : [];\n    let listNodes = [];\n    let tempHTMLContent = e.args.clipboardData.getData('text/HTML');\n    const rtfData = e.args.clipboardData.getData('text/rtf');\n    const elm = createElement('p');\n    elm.setAttribute('id', 'MSWord-Content');\n    elm.innerHTML = tempHTMLContent;\n    const patern = /class='?Mso|style='[^ ]*\\bmso-/i;\n    const patern2 = /class=\"?Mso|style=\"[^ ]*\\bmso-/i;\n    const patern3 = /(class=\"?Mso|class='?Mso|class=\"?Xl|class='?Xl|class=Xl|style=\"[^\"]*\\bmso-|style='[^']*\\bmso-|w:WordDocument)/gi;\n    const pattern4 = /style='mso-width-source:/i;\n\n    if (patern.test(tempHTMLContent) || patern2.test(tempHTMLContent) || patern3.test(tempHTMLContent) || pattern4.test(tempHTMLContent)) {\n      this.imageConversion(elm, rtfData);\n      tempHTMLContent = tempHTMLContent.replace(/<img[^>]+>/i, '');\n      this.addListClass(elm);\n      listNodes = this.cleanUp(elm, listNodes);\n\n      if (!isNullOrUndefined(listNodes[0]) && listNodes[0].parentElement.tagName !== 'UL' && listNodes[0].parentElement.tagName !== 'OL') {\n        this.listConverter(listNodes);\n      }\n\n      this.styleCorrection(elm, wordPasteStyleConfig);\n      this.removingComments(elm);\n      this.removeUnwantedElements(elm);\n      this.removeEmptyElements(elm);\n      this.breakLineAddition(elm);\n      this.removeClassName(elm);\n\n      if (pattern4.test(tempHTMLContent)) {\n        this.addTableBorderClass(elm);\n      }\n\n      e.callBack(elm.innerHTML);\n    } else {\n      e.callBack(elm.innerHTML);\n    }\n  }\n\n  addListClass(elm) {\n    const allNodes = elm.querySelectorAll('*');\n\n    for (let index = 0; index < allNodes.length; index++) {\n      if (!isNullOrUndefined(allNodes[index].getAttribute('style')) && allNodes[index].getAttribute('style').replace(/ /g, '').replace('\\n', '').indexOf('mso-list:l') >= 0 && allNodes[index].className.toLowerCase().indexOf('msolistparagraph') === -1 && allNodes[index].tagName.charAt(0) !== 'H') {\n        allNodes[index].classList.add('msolistparagraph');\n      }\n    }\n  }\n\n  addTableBorderClass(elm) {\n    const allTableElm = elm.querySelectorAll('table');\n    let hasTableBorder = false;\n\n    for (let i = 0; i < allTableElm.length; i++) {\n      for (let j = 0; j < this.borderStyle.length; j++) {\n        if (allTableElm[i].innerHTML.indexOf(this.borderStyle[j]) >= 0) {\n          hasTableBorder = true;\n          break;\n        }\n      }\n\n      if (hasTableBorder) {\n        allTableElm[i].classList.add('e-rte-table-border');\n        hasTableBorder = false;\n      }\n    }\n  }\n\n  imageConversion(elm, rtfData) {\n    this.checkVShape(elm);\n    const imgElem = elm.querySelectorAll('img');\n    const imgSrc = [];\n    const base64Src = [];\n    const imgName = []; // eslint-disable-next-line\n\n    const linkRegex = new RegExp(/([^\\S]|^)(((https?\\:\\/\\/)|(www\\.))(\\S+))/gi);\n\n    if (imgElem.length > 0) {\n      for (let i = 0; i < imgElem.length; i++) {\n        imgSrc.push(imgElem[i].getAttribute('src'));\n        imgName.push(imgElem[i].getAttribute('src').split('/')[imgElem[i].getAttribute('src').split('/').length - 1].split('.')[0]);\n      }\n\n      const hexValue = this.hexConversion(rtfData);\n\n      for (let i = 0; i < hexValue.length; i++) {\n        base64Src.push(this.convertToBase64(hexValue[i]));\n      }\n\n      for (let i = 0; i < imgElem.length; i++) {\n        if (imgSrc[i].match(linkRegex)) {\n          imgElem[i].setAttribute('src', imgSrc[i]);\n        } else {\n          imgElem[i].setAttribute('src', base64Src[i]);\n        }\n\n        imgElem[i].setAttribute('id', 'msWordImg-' + imgName[i]);\n      }\n    }\n  }\n\n  checkVShape(elm) {\n    const allNodes = elm.querySelectorAll('*');\n\n    for (let i = 0; i < allNodes.length; i++) {\n      switch (allNodes[i].nodeName) {\n        case 'V:SHAPETYPE':\n          detach(allNodes[i]);\n          break;\n\n        case 'V:SHAPE':\n          if (allNodes[i].firstElementChild.nodeName === 'V:IMAGEDATA') {\n            const src = allNodes[i].firstElementChild.getAttribute('src');\n            const imgElement = createElement('img');\n            imgElement.setAttribute('src', src);\n            allNodes[i].parentElement.insertBefore(imgElement, allNodes[i]);\n            detach(allNodes[i]);\n          }\n\n          break;\n      }\n    }\n  }\n\n  convertToBase64(hexValue) {\n    const byteArr = this.conHexStringToBytes(hexValue.hex);\n    const base64String = this.conBytesToBase64(byteArr);\n    const base64 = hexValue.type ? 'data:' + hexValue.type + ';base64,' + base64String : null;\n    return base64;\n  }\n\n  conBytesToBase64(byteArr) {\n    let base64Str = '';\n    const base64Char = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n    const byteArrLen = byteArr.length;\n\n    for (let i = 0; i < byteArrLen; i += 3) {\n      const array3 = byteArr.slice(i, i + 3);\n      const array3length = array3.length;\n      const array4 = [];\n\n      if (array3length < 3) {\n        for (let j = array3length; j < 3; j++) {\n          array3[j] = 0;\n        }\n      }\n\n      array4[0] = (array3[0] & 0xFC) >> 2;\n      array4[1] = (array3[0] & 0x03) << 4 | array3[1] >> 4;\n      array4[2] = (array3[1] & 0x0F) << 2 | (array3[2] & 0xC0) >> 6;\n      array4[3] = array3[2] & 0x3F;\n\n      for (let j = 0; j < 4; j++) {\n        if (j <= array3length) {\n          base64Str += base64Char.charAt(array4[j]);\n        } else {\n          base64Str += '=';\n        }\n      }\n    }\n\n    return base64Str;\n  }\n\n  conHexStringToBytes(hex) {\n    const byteArr = [];\n    const byteArrLen = hex.length / 2;\n\n    for (let i = 0; i < byteArrLen; i++) {\n      byteArr.push(parseInt(hex.substr(i * 2, 2), 16));\n    }\n\n    return byteArr;\n  }\n\n  hexConversion(rtfData) {\n    // eslint-disable-next-line\n    const picHead = /\\{\\\\pict[\\s\\S]+?\\\\bliptag\\-?\\d+(\\\\blipupi\\-?\\d+)?(\\{\\\\\\*\\\\blipuid\\s?[\\da-fA-F]+)?[\\s\\}]*?/;\n    const pic = new RegExp('(?:(' + picHead.source + '))([\\\\da-fA-F\\\\s]+)\\\\}', 'g');\n    const fullImg = rtfData.match(pic);\n    let imgType;\n    const result = [];\n\n    if (!isNullOrUndefined(fullImg)) {\n      for (let i = 0; i < fullImg.length; i++) {\n        if (picHead.test(fullImg[i])) {\n          if (fullImg[i].indexOf('\\\\pngblip') !== -1) {\n            imgType = 'image/png';\n          } else if (fullImg[i].indexOf('\\\\jpegblip') !== -1) {\n            imgType = 'image/jpeg';\n          } else {\n            continue;\n          }\n\n          result.push({\n            hex: imgType ? fullImg[i].replace(picHead, '').replace(/[^\\da-fA-F]/g, '') : null,\n            type: imgType\n          });\n        }\n      }\n    }\n\n    return result;\n  }\n\n  removeClassName(elm) {\n    const elmWithClass = elm.querySelectorAll('*[class]');\n\n    for (let i = 0; i < elmWithClass.length; i++) {\n      elmWithClass[i].removeAttribute('class');\n    }\n  }\n\n  breakLineAddition(elm) {\n    const allElements = elm.querySelectorAll('*');\n\n    for (let i = 0; i < allElements.length; i++) {\n      if (allElements[i].children.length === 0 && allElements[i].innerHTML === '&nbsp;' && allElements[i].innerHTML === '&nbsp;' && !allElements[i].closest('li') && !allElements[i].closest('td')) {\n        const detachableElement = this.findDetachElem(allElements[i]);\n        const brElement = createElement('br');\n\n        if (!isNullOrUndefined(detachableElement.parentElement)) {\n          detachableElement.parentElement.insertBefore(brElement, detachableElement);\n          detach(detachableElement);\n        }\n      }\n    }\n  }\n\n  findDetachElem(element) {\n    let removableElement;\n\n    if (!isNullOrUndefined(element.parentElement) && element.parentElement.textContent.trim() === '' && element.parentElement.tagName !== 'TD' && isNullOrUndefined(element.parentElement.querySelector('img'))) {\n      removableElement = this.findDetachElem(element.parentElement);\n    } else {\n      removableElement = element;\n    }\n\n    return removableElement;\n  }\n\n  removeUnwantedElements(elm) {\n    let innerElement = elm.innerHTML;\n\n    for (let i = 0; i < this.removableElements.length; i++) {\n      const regExpStartElem = new RegExp('<' + this.removableElements[i] + '>', 'g');\n      const regExpEndElem = new RegExp('</' + this.removableElements[i] + '>', 'g');\n      innerElement = innerElement.replace(regExpStartElem, '');\n      innerElement = innerElement.replace(regExpEndElem, '');\n    }\n\n    elm.innerHTML = innerElement;\n    elm.querySelectorAll(':empty');\n  }\n\n  findDetachEmptyElem(element) {\n    let removableElement;\n\n    if (!isNullOrUndefined(element.parentElement)) {\n      if (element.parentElement.textContent.trim() === '' && element.parentElement.getAttribute('id') !== 'MSWord-Content' && isNullOrUndefined(element.parentElement.querySelector('img'))) {\n        removableElement = this.findDetachEmptyElem(element.parentElement);\n      } else {\n        removableElement = element;\n      }\n    } else {\n      removableElement = null;\n    }\n\n    return removableElement;\n  }\n\n  removeEmptyElements(element) {\n    const emptyElements = element.querySelectorAll(':empty');\n\n    for (let i = 0; i < emptyElements.length; i++) {\n      if (!isNullOrUndefined(emptyElements[i].closest('td')) && !isNullOrUndefined(emptyElements[i].closest('td').querySelector('.MsoNormal'))) {\n        emptyElements[i].innerHTML = '-';\n      }\n\n      if (emptyElements[i].tagName !== 'IMG' && emptyElements[i].tagName !== 'BR' && emptyElements[i].tagName !== 'IFRAME' && emptyElements[i].tagName !== 'TD' && emptyElements[i].tagName !== 'HR') {\n        const detachableElement = this.findDetachEmptyElem(emptyElements[i]);\n\n        if (!isNullOrUndefined(detachableElement)) {\n          detach(detachableElement);\n        }\n      }\n    }\n  }\n\n  styleCorrection(elm, wordPasteStyleConfig) {\n    const styleElement = elm.querySelectorAll('style');\n\n    if (styleElement.length > 0) {\n      const styles = styleElement[0].innerHTML.match(/[\\S ]+\\s+{[\\s\\S]+?}/gi);\n      const styleClassObject = !isNullOrUndefined(styles) ? this.findStyleObject(styles) : null;\n      const keys = Object.keys(styleClassObject);\n      let values = keys.map(key => {\n        return styleClassObject[key];\n      });\n      values = this.removeUnwantedStyle(values, wordPasteStyleConfig);\n      this.filterStyles(elm, wordPasteStyleConfig);\n      let resultElem;\n      let fromClass = false;\n\n      for (let i = 0; i < keys.length; i++) {\n        if (keys[i].split('.')[0] === '') {\n          resultElem = elm.getElementsByClassName(keys[i].split('.')[1]);\n          fromClass = true;\n        } else if (keys[i].split('.').length === 1 && keys[i].split('.')[0].indexOf('@') >= 0) {\n          continue;\n        } else if (keys[i].split('.').length === 1 && keys[i].split('.')[0].indexOf('@') < 0) {\n          resultElem = elm.getElementsByTagName(keys[i]);\n        } else {\n          resultElem = elm.querySelectorAll(keys[i]);\n        }\n\n        for (let j = 0; j < resultElem.length; j++) {\n          const styleProperty = resultElem[j].getAttribute('style');\n\n          if (!isNullOrUndefined(styleProperty) && styleProperty.trim() !== '') {\n            const valueSplit = values[i].split(';');\n\n            if (!fromClass) {\n              for (let k = 0; k < valueSplit.length; k++) {\n                if (styleProperty.indexOf(valueSplit[k].split(':')[0]) >= 0) {\n                  valueSplit.splice(k, 1);\n                  k--;\n                }\n              }\n            }\n\n            values[i] = valueSplit.join(';') + ';';\n            const changedValue = styleProperty + values[i];\n            resultElem[j].setAttribute('style', changedValue);\n          } else {\n            values[i] = values[i].replace(/text-indent:-(.*?)(?=;|$)/gm, '');\n            resultElem[j].setAttribute('style', values[i]);\n          }\n        }\n\n        fromClass = false;\n      }\n    }\n  }\n\n  filterStyles(elm, wordPasteStyleConfig) {\n    const elmWithStyles = elm.querySelectorAll('*[style]');\n\n    for (let i = 0; i < elmWithStyles.length; i++) {\n      const elemStyleProperty = elmWithStyles[i].getAttribute('style').split(';');\n      let styleValue = '';\n\n      for (let j = 0; j < elemStyleProperty.length; j++) {\n        if (wordPasteStyleConfig.indexOf(elemStyleProperty[j].split(':')[0].trim()) >= 0) {\n          styleValue += elemStyleProperty[j] + ';';\n        }\n      }\n\n      elmWithStyles[i].setAttribute('style', styleValue);\n    }\n  }\n\n  removeUnwantedStyle(values, wordPasteStyleConfig) {\n    for (let i = 0; i < values.length; i++) {\n      const styleValues = values[i].split(';');\n      values[i] = '';\n\n      for (let j = 0; j < styleValues.length; j++) {\n        if (wordPasteStyleConfig.indexOf(styleValues[j].split(':')[0]) >= 0) {\n          values[i] += styleValues[j] + ';';\n        }\n      }\n    }\n\n    return values;\n  }\n\n  findStyleObject(styles) {\n    const styleClassObject = {};\n\n    for (let i = 0; i < styles.length; i++) {\n      const tempStyle = styles[i];\n      let classNameCollection = tempStyle.replace(/([\\S ]+\\s+){[\\s\\S]+?}/gi, '$1');\n      let stylesCollection = tempStyle.replace(/[\\S ]+\\s+{([\\s\\S]+?)}/gi, '$1');\n      classNameCollection = classNameCollection.replace(/^[\\s]|[\\s]$/gm, '');\n      stylesCollection = stylesCollection.replace(/^[\\s]|[\\s]$/gm, '');\n      classNameCollection = classNameCollection.replace(/\\n|\\r|\\n\\r/g, '');\n      stylesCollection = stylesCollection.replace(/\\n|\\r|\\n\\r/g, '');\n\n      for (let classNames = classNameCollection.split(', '), j = 0; j < classNames.length; j++) {\n        styleClassObject[classNames[j]] = stylesCollection;\n      }\n    }\n\n    return styleClassObject;\n  }\n\n  removingComments(elm) {\n    let innerElement = elm.innerHTML;\n    innerElement = innerElement.replace(/<!--[\\s\\S]*?-->/g, '');\n    elm.innerHTML = innerElement;\n  }\n\n  cleanUp(node, listNodes) {\n    // eslint-disable-next-line\n    const tempCleaner = [];\n    let prevflagState;\n    const allNodes = node.querySelectorAll('*');\n\n    for (let index = 0; index < allNodes.length; index++) {\n      if (this.ignorableNodes.indexOf(allNodes[index].nodeName) === -1 || allNodes[index].nodeType === 3 && allNodes[index].textContent.trim() === '') {\n        tempCleaner.push(allNodes[index]);\n        continue;\n      } else if (allNodes[index].className && allNodes[index].className.toLowerCase().indexOf('msolistparagraph') !== -1 && allNodes[index].childElementCount !== 1 && !isNullOrUndefined(allNodes[index].getAttribute('style')) && allNodes[index].getAttribute('style').indexOf('mso-list:') >= 0) {\n        if (allNodes[index].className.indexOf('MsoListParagraphCxSpFirst') >= 0 && listNodes.length > 0 && listNodes[listNodes.length - 1] !== null) {\n          listNodes.push(null);\n        }\n\n        listNodes.push(allNodes[index]);\n      }\n\n      if (prevflagState && this.blockNode.indexOf(allNodes[index].nodeName.toLowerCase()) !== -1 && !(allNodes[index].className && allNodes[index].className.toLowerCase().indexOf('msolistparagraph') !== -1 && !isNullOrUndefined(allNodes[index].getAttribute('style')) && allNodes[index].getAttribute('style').indexOf('mso-list:') >= 0)) {\n        listNodes.push(null);\n      }\n\n      if (this.blockNode.indexOf(allNodes[index].nodeName.toLowerCase()) !== -1) {\n        if (allNodes[index].className && allNodes[index].className.toLowerCase().indexOf('msolistparagraph') !== -1 && !isNullOrUndefined(allNodes[index].getAttribute('style')) && allNodes[index].getAttribute('style').indexOf('mso-list:') >= 0) {\n          prevflagState = true;\n        } else {\n          prevflagState = false;\n        }\n      }\n    }\n\n    if (listNodes.length && listNodes[listNodes.length - 1] !== null) {\n      listNodes.push(null);\n    }\n\n    return listNodes;\n  }\n\n  listConverter(listNodes) {\n    let level;\n    const data = [];\n    let collection = [];\n    let content = '';\n    let stNode;\n    let currentListStyle = '';\n\n    for (let i = 0; i < listNodes.length; i++) {\n      if (listNodes[i] === null) {\n        data.push({\n          content: this.makeConversion(collection),\n          node: listNodes[i - 1]\n        });\n        collection = [];\n        continue;\n      }\n\n      if (listNodes[i].getAttribute('style') && listNodes[i].getAttribute('style').indexOf('mso-outline-level') !== -1) {\n        listNodes[i].setAttribute('style', listNodes[i].getAttribute('style').replace('mso-outline-level', 'mso-outline'));\n      }\n\n      content = listNodes[i].getAttribute('style');\n\n      if (content && content.indexOf('level') !== -1) {\n        // eslint-disable-next-line\n        level = parseInt(content.charAt(content.indexOf('level') + 5), null);\n      } else {\n        level = 1;\n      }\n\n      this.listContents = [];\n      this.getListContent(listNodes[i]);\n      let type;\n\n      if (!isNullOrUndefined(this.listContents[0])) {\n        type = this.listContents[0].trim().length > 1 ? 'ol' : 'ul';\n        const tempNode = [];\n\n        for (let j = 1; j < this.listContents.length; j++) {\n          tempNode.push(this.listContents[j]);\n        }\n\n        let currentClassName;\n\n        if (!isNullOrUndefined(listNodes[i].className)) {\n          currentClassName = listNodes[i].className;\n        }\n\n        if (!isNullOrUndefined(listNodes[i].getAttribute('style'))) {\n          listNodes[i].setAttribute('style', listNodes[i].getAttribute('style').replace('text-align:start;', ''));\n\n          if (listNodes[i].style.textAlign !== '') {\n            listNodes[i].setAttribute('style', 'text-align:' + listNodes[i].style.textAlign);\n            currentListStyle = listNodes[i].getAttribute('style');\n          }\n        }\n\n        collection.push({\n          listType: type,\n          content: tempNode,\n          nestedLevel: level,\n          class: currentClassName,\n          listStyle: currentListStyle\n        });\n      }\n    }\n\n    stNode = listNodes.shift();\n\n    while (stNode) {\n      const elemColl = [];\n\n      for (let temp1 = 0; temp1 < data.length; temp1++) {\n        if (data[temp1].node === stNode) {\n          for (let index = 0; index < data[temp1].content.childNodes.length; index++) {\n            elemColl.push(data[temp1].content.childNodes[index]);\n          }\n\n          for (let index = 0; index < elemColl.length; index++) {\n            stNode.parentElement.insertBefore(elemColl[index], stNode);\n          }\n\n          break;\n        }\n      }\n\n      stNode.remove();\n      stNode = listNodes.shift();\n\n      if (!stNode) {\n        stNode = listNodes.shift();\n      }\n    }\n  }\n\n  makeConversion(collection) {\n    const root = createElement('div');\n    let temp;\n    let pLevel = 1;\n    let prevList;\n    let listCount = 0;\n    let elem;\n\n    for (let index = 0; index < collection.length; index++) {\n      const pElement = createElement('p');\n      pElement.innerHTML = collection[index].content.join(' ');\n\n      if (collection[index].nestedLevel === 1 && listCount === 0 && collection[index].content) {\n        root.appendChild(temp = createElement(collection[index].listType));\n        prevList = createElement('li');\n        prevList.appendChild(pElement);\n        temp.appendChild(prevList);\n        temp.setAttribute('level', collection[index].nestedLevel.toString());\n        temp.style.listStyle = this.getListStyle(collection[index].listType, collection[index].nestedLevel);\n      } else if (collection[index].nestedLevel === pLevel) {\n        if (prevList.parentElement.tagName.toLowerCase() === collection[index].listType) {\n          prevList.parentElement.appendChild(prevList = createElement('li'));\n          prevList.appendChild(pElement);\n        } else {\n          temp = createElement(collection[index].listType);\n          prevList.parentElement.parentElement.appendChild(temp);\n          prevList = createElement('li');\n          prevList.appendChild(pElement);\n          temp.appendChild(prevList);\n          temp.setAttribute('level', collection[index].nestedLevel.toString());\n        }\n      } else if (collection[index].nestedLevel > pLevel) {\n        if (!isNullOrUndefined(prevList)) {\n          for (let j = 0; j < collection[index].nestedLevel - pLevel; j++) {\n            prevList.appendChild(temp = createElement(collection[index].listType));\n            prevList = createElement('li', {\n              styles: 'list-style-type: none;'\n            });\n            temp.appendChild(prevList);\n          }\n\n          prevList.appendChild(pElement);\n          temp.setAttribute('level', collection[index].nestedLevel.toString());\n          temp.style.listStyle = this.getListStyle(collection[index].listType, collection[index].nestedLevel);\n          temp.childNodes[0].style.listStyle = this.getListStyle(collection[index].listType, collection[index].nestedLevel);\n        } else {\n          root.appendChild(temp = createElement(collection[index].listType));\n          prevList = createElement('li');\n          prevList.appendChild(pElement);\n          temp.appendChild(prevList);\n          temp.setAttribute('level', collection[index].nestedLevel.toString());\n          temp.style.listStyle = this.getListStyle(collection[index].listType, collection[index].nestedLevel);\n        }\n      } else if (collection[index].nestedLevel === 1) {\n        if (root.lastChild.tagName.toLowerCase() === collection[index].listType) {\n          temp = root.lastChild;\n        } else {\n          root.appendChild(temp = createElement(collection[index].listType));\n        }\n\n        prevList = createElement('li');\n        prevList.appendChild(pElement);\n        temp.appendChild(prevList);\n        temp.setAttribute('level', collection[index].nestedLevel.toString());\n        temp.style.listStyle = this.getListStyle(collection[index].listType, collection[index].nestedLevel);\n      } else {\n        elem = prevList;\n\n        while (elem.parentElement) {\n          elem = elem.parentElement;\n\n          if (elem.attributes.getNamedItem('level')) {\n            // eslint-disable-next-line\n            if (parseInt(elem.attributes.getNamedItem('level').textContent, null) === collection[index].nestedLevel) {\n              prevList = createElement('li');\n              prevList.appendChild(pElement);\n              elem.appendChild(prevList);\n              break; // eslint-disable-next-line\n            } else if (collection[index].nestedLevel > parseInt(elem.attributes.getNamedItem('level').textContent, null)) {\n              elem.appendChild(temp = createElement(collection[index].listType));\n              prevList = createElement('li');\n              prevList.appendChild(pElement);\n              temp.appendChild(prevList);\n              temp.setAttribute('level', collection[index].nestedLevel.toString());\n              temp.style.listStyle = this.getListStyle(collection[index].listType, collection[index].nestedLevel);\n              break;\n            }\n          }\n\n          continue;\n        }\n      }\n\n      prevList.setAttribute('class', collection[index].class);\n      const currentStyle = prevList.getAttribute('style');\n      prevList.setAttribute('style', (!isNullOrUndefined(currentStyle) ? currentStyle : '') + collection[index].listStyle);\n      pLevel = collection[index].nestedLevel;\n      listCount++;\n    }\n\n    return root;\n  }\n\n  getListStyle(listType, nestedLevel) {\n    nestedLevel = nestedLevel > 0 ? nestedLevel - 1 : nestedLevel;\n\n    if (listType === 'ol') {\n      return nestedLevel < this.olData.length ? this.olData[nestedLevel] : this.olData[0];\n    } else {\n      return nestedLevel < this.ulData.length ? this.ulData[nestedLevel] : this.ulData[0];\n    }\n  }\n\n  getListContent(elem) {\n    let pushContent = '';\n    const firstChild = elem.firstElementChild;\n\n    if (firstChild.textContent.trim() === '' && !isNullOrUndefined(firstChild.firstElementChild) && firstChild.firstElementChild.nodeName === 'IMG') {\n      pushContent = elem.innerHTML.trim();\n      this.listContents.push('');\n      this.listContents.push(pushContent);\n    } else {\n      const styleNodes = ['b', 'em'];\n\n      if (firstChild.childNodes.length > 0 && (firstChild.querySelectorAll('b').length > 0 || firstChild.querySelectorAll('em').length > 0)) {\n        for (let i = 0; i < firstChild.childNodes.length; i++) {\n          const nodeName = firstChild.childNodes[i].nodeName.toLowerCase();\n\n          if (firstChild.childNodes[i].textContent.trim().length > 1 && styleNodes.indexOf(nodeName) !== -1) {\n            pushContent = '<' + nodeName + '>' + firstChild.childNodes[i].textContent + '</' + nodeName + '>';\n            this.listContents.push(pushContent);\n          } else if (firstChild.childNodes[i].textContent.trim().length === 1) {\n            this.listContents.push(firstChild.childNodes[i].textContent.trim());\n          }\n        }\n      } else {\n        pushContent = firstChild.textContent.trim();\n        this.listContents.push(pushContent);\n      }\n    }\n\n    detach(firstChild);\n    this.listContents.push(elem.innerHTML);\n  }\n\n}\n/**\n * Insert a Text Node or Text\n *\n * @hidden\n * @deprecated\n */\n\n\nclass InsertTextExec {\n  /**\n   * Constructor for creating the InsertText plugin\n   *\n   * @param {EditorManager} parent - specifies the parent element\n   * @hidden\n   * @deprecated\n   */\n  constructor(parent) {\n    this.parent = parent;\n    this.addEventListener();\n  }\n\n  addEventListener() {\n    this.parent.observer.on(INSERT_TEXT_TYPE, this.insertText, this);\n  }\n\n  insertText(e) {\n    const node = document.createTextNode(e.value);\n    InsertHtml.Insert(this.parent.currentDocument, node);\n\n    if (e.callBack) {\n      e.callBack({\n        requestType: e.subCommand,\n        editorMode: 'HTML',\n        event: e.event,\n        range: this.parent.nodeSelection.getRange(this.parent.currentDocument),\n        elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)\n      });\n    }\n  }\n\n}\n/**\n * EditorManager internal component\n *\n * @hidden\n * @deprecated\n */\n\n\nclass EditorManager {\n  /**\n   * Constructor for creating the component\n   *\n   * @hidden\n   * @deprecated\n   * @param {ICommandModel} options - specifies the command Model\n   */\n  constructor(options) {\n    this.currentDocument = options.document;\n    this.editableElement = options.editableElement;\n    this.nodeSelection = new NodeSelection();\n    this.nodeCutter = new NodeCutter();\n    this.domNode = new DOMNode(this.editableElement, this.currentDocument);\n    this.observer = new Observer(this);\n    this.listObj = new Lists(this);\n    this.formatObj = new Formats(this);\n    this.alignmentObj = new Alignments(this);\n    this.indentsObj = new Indents(this);\n    this.linkObj = new LinkCommand(this);\n    this.imgObj = new ImageCommand(this);\n    this.selectionObj = new SelectionBasedExec(this);\n    this.inserthtmlObj = new InsertHtmlExec(this);\n    this.insertTextObj = new InsertTextExec(this);\n    this.clearObj = new ClearFormatExec(this);\n    this.tableObj = new TableCommand(this);\n    this.undoRedoManager = new UndoRedoManager(this, options.options);\n    this.msWordPaste = new MsWordPaste(this);\n    this.wireEvents();\n  }\n\n  wireEvents() {\n    this.observer.on(KEY_DOWN, this.editorKeyDown, this);\n    this.observer.on(KEY_UP, this.editorKeyUp, this);\n    this.observer.on(KEY_UP, this.editorKeyUp, this);\n    this.observer.on(MODEL_CHANGED, this.onPropertyChanged, this);\n    this.observer.on(MS_WORD_CLEANUP, this.onWordPaste, this);\n    this.observer.on(ON_BEGIN, this.onBegin, this);\n  }\n\n  onWordPaste(e) {\n    this.observer.notify(MS_WORD_CLEANUP_PLUGIN, e);\n  }\n\n  onPropertyChanged(props) {\n    this.observer.notify(MODEL_CHANGED_PLUGIN, props);\n  }\n\n  editorKeyDown(e) {\n    this.observer.notify(KEY_DOWN_HANDLER, e);\n  }\n\n  editorKeyUp(e) {\n    this.observer.notify(KEY_UP_HANDLER, e);\n  }\n\n  onBegin(e) {\n    this.observer.notify(SPACE_ACTION, e);\n  }\n  /* eslint-disable */\n\n  /**\n   * execCommand\n   *\n   * @param {ExecCommand} command - specifies the execution command\n   * @param {T} value - specifes the value.\n   * @param {Event} event - specifies the call back event\n   * @param {Function} callBack - specifies the function\n   * @param {string} text - specifies the string value\n   * @param {T} exeValue - specifies the values to be executed\n   * @param {string} selector - specifies the selector values\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n  /* eslint-enable */\n\n\n  execCommand(command, value, event, callBack, text, exeValue, selector, enterAction) {\n    switch (command.toLowerCase()) {\n      case 'lists':\n        this.observer.notify(LIST_TYPE, {\n          subCommand: value,\n          event: event,\n          callBack: callBack,\n          selector: selector,\n          item: exeValue,\n          enterAction: enterAction\n        });\n        break;\n\n      case 'formats':\n        this.observer.notify(FORMAT_TYPE, {\n          subCommand: value,\n          event: event,\n          callBack: callBack,\n          selector: selector,\n          exeValue: exeValue,\n          enterAction: enterAction\n        });\n        break;\n\n      case 'alignments':\n        this.observer.notify(ALIGNMENT_TYPE, {\n          subCommand: value,\n          event: event,\n          callBack: callBack,\n          selector: selector,\n          value: exeValue\n        });\n        break;\n\n      case 'indents':\n        this.observer.notify(INDENT_TYPE, {\n          subCommand: value,\n          event: event,\n          callBack: callBack,\n          selector: selector\n        });\n        break;\n\n      case 'links':\n        this.observer.notify(LINK, {\n          command: command,\n          value: value,\n          item: exeValue,\n          event: event,\n          callBack: callBack\n        });\n        break;\n\n      case 'files':\n        this.observer.notify(IMAGE, {\n          command: command,\n          value: 'Image',\n          item: exeValue,\n          event: event,\n          callBack: callBack,\n          selector: selector\n        });\n        break;\n\n      case 'images':\n        this.observer.notify(IMAGE, {\n          command: command,\n          value: value,\n          item: exeValue,\n          event: event,\n          callBack: callBack,\n          selector: selector\n        });\n        break;\n\n      case 'table':\n        switch (value.toString().toLocaleLowerCase()) {\n          case 'createtable':\n            this.observer.notify(TABLE, {\n              item: exeValue,\n              event: event,\n              callBack: callBack,\n              enterAction: enterAction\n            });\n            break;\n\n          case 'insertrowbefore':\n          case 'insertrowafter':\n            this.observer.notify(INSERT_ROW, {\n              item: exeValue,\n              event: event,\n              callBack: callBack\n            });\n            break;\n\n          case 'insertcolumnleft':\n          case 'insertcolumnright':\n            this.observer.notify(INSERT_COLUMN, {\n              item: exeValue,\n              event: event,\n              callBack: callBack\n            });\n            break;\n\n          case 'deleterow':\n            this.observer.notify(DELETEROW, {\n              item: exeValue,\n              event: event,\n              callBack: callBack\n            });\n            break;\n\n          case 'deletecolumn':\n            this.observer.notify(DELETECOLUMN, {\n              item: exeValue,\n              event: event,\n              callBack: callBack\n            });\n            break;\n\n          case 'tableremove':\n            this.observer.notify(REMOVETABLE, {\n              item: exeValue,\n              event: event,\n              callBack: callBack\n            });\n            break;\n\n          case 'tableheader':\n            this.observer.notify(TABLEHEADER, {\n              item: exeValue,\n              event: event,\n              callBack: callBack\n            });\n            break;\n\n          case 'aligntop':\n          case 'alignmiddle':\n          case 'alignbottom':\n            this.observer.notify(TABLE_VERTICAL_ALIGN, {\n              item: exeValue,\n              event: event,\n              callBack: callBack\n            });\n            break;\n\n          case 'merge':\n            this.observer.notify(TABLE_MERGE, {\n              item: exeValue,\n              event: event,\n              callBack: callBack\n            });\n            break;\n\n          case 'horizontalsplit':\n            this.observer.notify(TABLE_HORIZONTAL_SPLIT, {\n              item: exeValue,\n              event: event,\n              callBack: callBack\n            });\n            break;\n\n          case 'verticalsplit':\n            this.observer.notify(TABLE_VERTICAL_SPLIT, {\n              item: exeValue,\n              event: event,\n              callBack: callBack\n            });\n            break;\n        }\n\n        break;\n\n      case 'font':\n      case 'style':\n      case 'effects':\n      case 'casing':\n        this.observer.notify(SELECTION_TYPE, {\n          subCommand: value,\n          event: event,\n          callBack: callBack,\n          value: text,\n          selector: selector,\n          enterAction: enterAction\n        });\n        break;\n\n      case 'inserthtml':\n        this.observer.notify(INSERTHTML_TYPE, {\n          subCommand: value,\n          callBack: callBack,\n          value: text\n        });\n        break;\n\n      case 'inserttext':\n        this.observer.notify(INSERT_TEXT_TYPE, {\n          subCommand: value,\n          callBack: callBack,\n          value: text\n        });\n        break;\n\n      case 'clear':\n        this.observer.notify(CLEAR_TYPE, {\n          subCommand: value,\n          event: event,\n          callBack: callBack,\n          selector: selector,\n          enterAction: enterAction\n        });\n        break;\n\n      case 'actions':\n        this.observer.notify(ACTION, {\n          subCommand: value,\n          event: event,\n          callBack: callBack,\n          selector: selector\n        });\n        break;\n    }\n  }\n\n}\n/**\n * HTML adapter\n *\n * @hidden\n * @deprecated\n */\n\n\nclass HTMLFormatter extends Formatter {\n  constructor(options) {\n    super();\n    this.initialize();\n    extend(this, this, options, true);\n\n    if (this.currentDocument && this.element) {\n      this.updateFormatter(this.element, this.currentDocument, options.options);\n    }\n  }\n\n  initialize() {\n    this.keyConfig = htmlKeyConfig;\n  }\n  /**\n   * Update the formatter of RichTextEditor\n   *\n   * @param  {Element} editElement - specifies the edit element.\n   * @param  {Document} doc - specifies the doucment\n   * @param {number} options - specifies the options\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  updateFormatter(editElement, doc, options) {\n    if (editElement && doc) {\n      this.editorManager = new EditorManager({\n        document: doc,\n        editableElement: editElement,\n        options: options\n      });\n    }\n  }\n\n}\n/**\n * Update Toolbar Status\n *\n * @hidden\n * @deprecated\n */\n\n\nconst statusCollection = getDefaultHtmlTbStatus();\n\nclass ToolbarStatus {\n  /**\n   * get method\n   *\n   * @param {Document} docElement - specifies the document element\n   * @param {Node} targetNode - specifies the target node\n   * @param {string[]} formatNode - specifies the format node\n   * @param {string[]} fontSize - specifies the font size\n   * @param {string[]} fontName - specifies the font name.\n   * @param {Node} documentNode - specifies the document node.\n   * @returns {IToolbarStatus} - returns the toolbar status\n   * @hidden\n   * @deprecated\n   */\n  static get(docElement, targetNode, formatNode, fontSize, fontName, documentNode) {\n    let formatCollection = JSON.parse(JSON.stringify(statusCollection));\n    const nodeCollection = JSON.parse(JSON.stringify(statusCollection));\n    const nodeSelection = new NodeSelection();\n    const nodes = documentNode ? [documentNode] : nodeSelection.getNodeCollection(nodeSelection.getRange(docElement));\n    const nodesLength = nodes.length;\n    let isNodeChanged = false;\n    const range = nodeSelection.getRange(docElement);\n\n    for (let index = 0; index < nodes.length; index++) {\n      while (nodes[index].nodeType === 3 && range.startContainer.nodeType === 3 && nodes[index].parentNode && nodes[index].parentNode.lastElementChild && nodes[index].parentNode.lastElementChild.nodeName !== 'BR' && this.getImmediateBlockNode(nodes[index].parentNode).textContent.replace(/\\u200B/g, '').length === 0 && range.startContainer.textContent.replace(/\\u200B/g, '').length === 0 && nodeSelection.get(docElement).toString().replace(/\\u200B/g, '').length === 0) {\n        nodes[index] = nodes[index].parentNode.lastElementChild.firstChild;\n        isNodeChanged = true;\n      }\n\n      if (isNodeChanged && nodes[index]) {\n        nodeSelection.setCursorPoint(docElement, nodes[index], nodes[index].textContent.length);\n        isNodeChanged = false;\n      }\n\n      if (nodes[index].nodeName !== 'BR' && nodes[index].nodeType !== 3 || nodesLength > 1 && nodes[index].nodeType === 3 && nodes[index].textContent.trim() === '') {\n        nodes.splice(index, 1);\n        index--;\n      }\n    }\n\n    for (let index = 0; index < nodes.length; index++) {\n      formatCollection = this.getFormatParent(docElement, formatCollection, nodes[index], targetNode, formatNode, fontSize, fontName);\n\n      if (index === 0 && formatCollection.bold || !formatCollection.bold) {\n        nodeCollection.bold = formatCollection.bold;\n      }\n\n      if (index === 0 && formatCollection.insertcode || !formatCollection.insertcode) {\n        nodeCollection.insertcode = formatCollection.insertcode;\n      }\n\n      if (index === 0 && formatCollection.italic || !formatCollection.italic) {\n        nodeCollection.italic = formatCollection.italic;\n      }\n\n      if (index === 0 && formatCollection.underline || !formatCollection.underline) {\n        nodeCollection.underline = formatCollection.underline;\n      }\n\n      if (index === 0 && formatCollection.strikethrough || !formatCollection.strikethrough) {\n        nodeCollection.strikethrough = formatCollection.strikethrough;\n      }\n\n      if (index === 0 && formatCollection.superscript || !formatCollection.superscript) {\n        nodeCollection.superscript = formatCollection.superscript;\n      }\n\n      if (index === 0 && formatCollection.subscript || !formatCollection.subscript) {\n        nodeCollection.subscript = formatCollection.subscript;\n      }\n\n      if (index === 0 && formatCollection.fontcolor || !formatCollection.fontcolor) {\n        nodeCollection.fontcolor = formatCollection.fontcolor;\n      }\n\n      if (index === 0 && formatCollection.fontname || !formatCollection.fontname) {\n        nodeCollection.fontname = formatCollection.fontname;\n      }\n\n      if (index === 0 && formatCollection.fontsize || !formatCollection.fontsize) {\n        nodeCollection.fontsize = formatCollection.fontsize;\n      }\n\n      if (index === 0 && formatCollection.backgroundcolor || !formatCollection.backgroundcolor) {\n        nodeCollection.backgroundcolor = formatCollection.backgroundcolor;\n      }\n\n      if (index === 0 && formatCollection.orderedlist || !formatCollection.orderedlist) {\n        nodeCollection.orderedlist = formatCollection.orderedlist;\n      }\n\n      if (index === 0 && formatCollection.unorderedlist || !formatCollection.unorderedlist) {\n        nodeCollection.unorderedlist = formatCollection.unorderedlist;\n      }\n\n      if (index === 0 && formatCollection.alignments || !formatCollection.alignments) {\n        nodeCollection.alignments = formatCollection.alignments;\n      }\n\n      if (index === 0 && formatCollection.formats || !formatCollection.formats) {\n        nodeCollection.formats = formatCollection.formats;\n      }\n\n      if (index === 0 && formatCollection.createlink || !formatCollection.createlink) {\n        nodeCollection.createlink = formatCollection.createlink;\n      }\n\n      if (index === 0 && formatCollection.numberFormatList || !formatCollection.numberFormatList) {\n        nodeCollection.numberFormatList = formatCollection.numberFormatList;\n      }\n\n      if (index === 0 && formatCollection.bulletFormatList || !formatCollection.bulletFormatList) {\n        nodeCollection.bulletFormatList = formatCollection.bulletFormatList;\n      }\n\n      formatCollection = JSON.parse(JSON.stringify(statusCollection));\n    }\n\n    return nodeCollection;\n  }\n\n  static getImmediateBlockNode(node) {\n    do {\n      node = node.parentNode;\n    } while (node && BLOCK_TAGS.indexOf(node.nodeName.toLocaleLowerCase()) < 0);\n\n    return node;\n  }\n\n  static getFormatParent(docElement, formatCollection, node, targetNode, formatNode, fontSize, fontName) {\n    if (targetNode.contains(node) || node.nodeType === 3 && targetNode.nodeType !== 3 && targetNode.contains(node.parentNode)) {\n      do {\n        formatCollection = this.isFormattedNode(docElement, formatCollection, node, formatNode, fontSize, fontName);\n        node = node.parentNode;\n      } while (node && node !== targetNode);\n    }\n\n    return formatCollection;\n  }\n\n  static isFormattedNode(docElement, formatCollection, node, formatNode, fontSize, fontName) {\n    if (!formatCollection.bold) {\n      formatCollection.bold = IsFormatted.isBold(node);\n    }\n\n    if (!formatCollection.italic) {\n      formatCollection.italic = IsFormatted.isItalic(node);\n    }\n\n    if (!formatCollection.underline) {\n      formatCollection.underline = IsFormatted.isUnderline(node);\n    }\n\n    if (!formatCollection.strikethrough) {\n      formatCollection.strikethrough = IsFormatted.isStrikethrough(node);\n    }\n\n    if (!formatCollection.superscript) {\n      formatCollection.superscript = IsFormatted.isSuperscript(node);\n    }\n\n    if (!formatCollection.subscript) {\n      formatCollection.subscript = IsFormatted.isSubscript(node);\n    }\n\n    if (!formatCollection.fontcolor) {\n      formatCollection.fontcolor = this.isFontColor(docElement, node);\n    }\n\n    if (!formatCollection.fontname) {\n      formatCollection.fontname = this.isFontName(docElement, node, fontName);\n    }\n\n    if (!formatCollection.fontsize) {\n      formatCollection.fontsize = this.isFontSize(node, fontSize);\n    }\n\n    if (!formatCollection.backgroundcolor) {\n      formatCollection.backgroundcolor = this.isBackgroundColor(node);\n    }\n\n    if (!formatCollection.orderedlist) {\n      formatCollection.orderedlist = this.isOrderedList(node);\n    }\n\n    if (!formatCollection.unorderedlist) {\n      formatCollection.unorderedlist = this.isUnorderedList(node);\n    }\n\n    if (!formatCollection.alignments) {\n      formatCollection.alignments = this.isAlignment(node);\n    }\n\n    if (!formatCollection.formats) {\n      formatCollection.formats = this.isFormats(node, formatNode);\n\n      if (formatCollection.formats === 'pre') {\n        formatCollection.insertcode = true;\n      }\n    }\n\n    if (!formatCollection.createlink) {\n      formatCollection.createlink = this.isLink(node);\n    }\n\n    if (!formatCollection.numberFormatList) {\n      formatCollection.numberFormatList = this.isNumberFormatList(node);\n    }\n\n    if (!formatCollection.bulletFormatList) {\n      formatCollection.bulletFormatList = this.isBulletFormatList(node);\n    }\n\n    return formatCollection;\n  }\n\n  static isFontColor(docElement, node) {\n    let color = node.style && node.style.color;\n\n    if ((color === null || color === undefined || color === '') && node.nodeType !== 3) {\n      color = this.getComputedStyle(docElement, node, 'color');\n    }\n\n    if (color !== null && color !== '' && color !== undefined) {\n      return color;\n    } else {\n      return null;\n    }\n  }\n\n  static isLink(node) {\n    if (node.nodeName.toLocaleLowerCase() === 'a') {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  static isBackgroundColor(node) {\n    const backColor = node.style && node.style.backgroundColor;\n\n    if (backColor !== null && backColor !== '' && backColor !== undefined) {\n      return backColor;\n    } else {\n      return null;\n    }\n  }\n\n  static isFontSize(node, fontSize) {\n    const size = node.style && node.style.fontSize;\n\n    if (size !== null && size !== '' && size !== undefined && (fontSize === null || fontSize === undefined || fontSize.indexOf(size) > -1)) {\n      return size;\n    } else {\n      return null;\n    }\n  }\n\n  static isFontName(docElement, node, fontName) {\n    let name = node.style && node.style.fontFamily;\n\n    if ((name === null || name === undefined || name === '') && node.nodeType !== 3) {\n      name = this.getComputedStyle(docElement, node, 'font-family');\n    }\n\n    let index = null;\n\n    if (name !== null && name !== '' && name !== undefined && (fontName === null || fontName === undefined || fontName.filter((value, pos) => {\n      const pattern = new RegExp(name, 'i');\n\n      if (value.replace(/\"/g, '').replace(/ /g, '') === name.replace(/\"/g, '').replace(/ /g, '') || value.search(pattern) > -1) {\n        index = pos;\n      }\n    }) && index !== null)) {\n      return index !== null ? fontName[index] : name.replace(/\"/g, '');\n    } else {\n      return null;\n    }\n  }\n\n  static isOrderedList(node) {\n    if (node.nodeName.toLocaleLowerCase() === 'ol') {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  static isUnorderedList(node) {\n    if (node.nodeName.toLocaleLowerCase() === 'ul') {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  static isAlignment(node) {\n    const align = node.style && node.style.textAlign;\n\n    if (align === 'left') {\n      return 'justifyleft';\n    } else if (align === 'center') {\n      return 'justifycenter';\n    } else if (align === 'right') {\n      return 'justifyright';\n    } else if (align === 'justify') {\n      return 'justifyfull';\n    } else {\n      return null;\n    }\n  }\n\n  static isFormats(node, formatNode) {\n    if ((formatNode === undefined || formatNode === null) && BLOCK_TAGS.indexOf(node.nodeName.toLocaleLowerCase()) > -1 || formatNode !== null && formatNode !== undefined && formatNode.indexOf(node.nodeName.toLocaleLowerCase()) > -1) {\n      return node.nodeName.toLocaleLowerCase();\n    } else {\n      return null;\n    }\n  }\n\n  static getComputedStyle(docElement, node, prop) {\n    return docElement.defaultView.getComputedStyle(node, null).getPropertyValue(prop);\n  }\n\n  static isNumberFormatList(node) {\n    const list = node.style && node.style.listStyleType;\n\n    if (list === 'lower-alpha') {\n      return 'Lower Alpha';\n    } else if (list === 'number') {\n      return 'Number';\n    } else if (list === 'upper-alpha') {\n      return 'Upper Alpha';\n    } else if (list === 'lower-roman') {\n      return 'Lower Roman';\n    } else if (list === 'upper-roman') {\n      return 'Upper Roman';\n    } else if (list === 'lower-greek') {\n      return 'Lower Greek';\n    } else if (list === 'none') {\n      return 'None';\n    } else {\n      return null;\n    }\n  }\n\n  static isBulletFormatList(node) {\n    const list = node.style && node.style.listStyleType;\n\n    if (list === 'circle') {\n      return 'Circle';\n    } else if (list === 'square') {\n      return 'Square';\n    } else if (list === 'none') {\n      return 'None';\n    } else if (list === 'disc') {\n      return 'Disc';\n    } else {\n      return null;\n    }\n  }\n\n}\n/**\n * HtmlToolbarStatus module for refresh the toolbar status\n */\n\n\nclass HtmlToolbarStatus {\n  constructor(parent) {\n    this.parent = parent;\n    this.toolbarStatus = this.prevToolbarStatus = getDefaultHtmlTbStatus();\n    this.addEventListener();\n  }\n\n  addEventListener() {\n    this.parent.on(toolbarRefresh, this.onRefreshHandler, this);\n    this.parent.on(destroy, this.removeEventListener, this);\n  }\n\n  removeEventListener() {\n    this.parent.off(toolbarRefresh, this.onRefreshHandler);\n    this.parent.off(destroy, this.removeEventListener);\n  }\n\n  onRefreshHandler(args) {\n    if (this.parent.readonly) {\n      return;\n    }\n\n    const fontsize = [];\n    const fontName = [];\n    const formats = [];\n    this.parent.fontSize.items.forEach(item => {\n      fontsize.push(item.value);\n    });\n    this.parent.fontFamily.items.forEach(item => {\n      fontName.push(item.value);\n    });\n    this.parent.format.types.forEach(item => {\n      formats.push(item.value.toLocaleLowerCase());\n    });\n    this.toolbarStatus = ToolbarStatus.get(this.parent.contentModule.getDocument(), this.parent.contentModule.getEditPanel(), formats, fontsize, fontName, args.documentNode);\n    const tbStatusString = JSON.stringify(this.toolbarStatus);\n    this.parent.notify(toolbarUpdated, this.toolbarStatus);\n\n    if (JSON.stringify(this.prevToolbarStatus) !== tbStatusString) {\n      this.parent.notify(updateTbItemsStatus, {\n        html: JSON.parse(tbStatusString),\n        markdown: null\n      });\n      this.prevToolbarStatus = JSON.parse(tbStatusString);\n    }\n  }\n\n}\n/**\n * Content module is used to render Rich Text Editor content\n *\n * @hidden\n * @deprecated\n */\n\n\nclass ContentRender {\n  /**\n   * Constructor for content renderer module\n   *\n   * @param {IRichTextEditor} parent - specifies the parent element.\n   * @param {ServiceLocator} serviceLocator - specifies the service.\n   * @returns {void}\n   */\n  constructor(parent, serviceLocator) {\n    this.parent = parent;\n    this.serviceLocator = serviceLocator;\n  }\n  /**\n   * The function is used to render Rich Text Editor content div\n   *\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  renderPanel() {\n    const rteObj = this.parent;\n    const div = this.parent.createElement('div', {\n      className: 'e-rte-content',\n      id: this.parent.getID() + 'rte-view'\n    });\n    const rteContent = getEditValue(rteObj.value, rteObj);\n    this.editableElement = this.parent.createElement('div', {\n      className: 'e-content',\n      id: this.parent.getID() + '_rte-edit-view',\n      attrs: {\n        'contenteditable': 'true'\n      },\n      innerHTML: rteContent\n    });\n    div.appendChild(this.editableElement);\n    this.setPanel(div);\n    rteObj.element.appendChild(div);\n  }\n  /**\n   * Get the content div element of RichTextEditor\n   *\n   * @returns {Element} - specifies the element.\n   * @hidden\n   * @deprecated\n   */\n\n\n  getPanel() {\n    return this.contentPanel;\n  }\n  /**\n   * Get the editable element of RichTextEditor\n   *\n   * @returns {Element} - specifies the return element.\n   * @hidden\n   * @deprecated\n   */\n\n\n  getEditPanel() {\n    return this.editableElement;\n  }\n  /**\n   * Returns the text content as string.\n   *\n   * @returns {string} - specifies the string element.\n   */\n\n\n  getText() {\n    return this.getEditPanel().innerText;\n  }\n  /**\n   * Set the content div element of RichTextEditor\n   *\n   * @param {Element} panel - specifies the panel element.\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  setPanel(panel) {\n    this.contentPanel = panel;\n  }\n  /**\n   * Get the document of RichTextEditor\n   *\n   * @returns {Document} - specifies the document.\n   * @hidden\n   * @deprecated\n   */\n\n\n  getDocument() {\n    return this.getEditPanel().ownerDocument;\n  }\n\n}\n\nconst IFRAMEHEADER = `\n<!DOCTYPE html> \n    <html>\n         <head>\n            <meta charset='utf-8' /> \n            <style>\n                @charset \"UTF-8\";\n                body {\n                    font-family: \"Roboto\", sans-serif;\n                    font-size: 14px;\n                }\n                html, body{height: 100%;margin: 0;}\n                body.e-cursor{cursor:default}\n                span.e-selected-node\t{background-color: #939393;color: white;}\n                span.e-selected-node.e-highlight {background-color: #1d9dd8;}\n                body{color:#333;word-wrap:break-word;padding: 8px;box-sizing: border-box;}\n                .e-rte-image {border: 0;cursor: pointer;display:\n                    block;float: none;height: auto;margin: 5px auto;max-width: 100%;position: relative;}\n                .e-img-caption { display: inline-block; float: none; margin: 5px auto; max-width: 100%;position: relative;}\n                .e-img-caption.e-caption-inline {display: inline-block;float: none;\n                    margin: 5px auto;margin-left: 5px;margin-right: 5px;max-width: calc(100% - (2 * 5px));\n                    position: relativetext-align: center;vertical-align: bottom;}\n                .e-img-inner {box-sizing: border-box;display: block;font-size: 16px;font-weight: initial;\n                    margin: auto;opacity: .9;text-align: center;width: 100%;}\n                .e-img-wrap {display: inline-block;margin: auto;padding: 0;text-align: center;width: 100%;}\n                .e-imgleft {float: left;margin: 0 5px 0 0;text-align: left;}\n                .e-imgright {float: right;margin: 0 0 0 5px;text-align: right;}\n                .e-imgcenter {cursor: pointer;display: block;float: none;height: auto;margin: 5px auto;max-width: 100%;position: relative;}\n                .e-control img:not(.e-resize) {border: 2px solid transparent; z-index: 1000}\n                .e-imginline {display: inline-block;float: none;margin-left: 5px;margin-right: 5px;\n                    max-width: calc(100% - (2 * 5px));vertical-align: bottom;}\n                .e-imgbreak {border: 0;cursor: pointer;\n                    display: block;float: none;height: auto;margin: 5px auto;max-width: 100%;position: relative;}\n                .e-rte-image.e-img-focus:not(.e-resize) {border: solid 2px #4a90e2;}\n                img.e-img-focus::selection { background: transparent;color: transparent;}\n                span.e-rte-imageboxmark {  width: 10px; height: 10px; position: absolute; display: block;\n                    background: #4a90e2; border: 1px solid #fff; z-index: 1000;}\n                .e-mob-rte.e-mob-span span.e-rte-imageboxmark { background: #4a90e2; border: 1px solid #fff; }\n                .e-mob-rte span.e-rte-imageboxmark { background: #fff; border: 1px solid #4a90e2;\n                    border-radius: 15px; height: 20px; width: 20px; }\n                .e-mob-rte.e-mob-span span.e-rte-imageboxmark { background: #4a90e2; border: 1px solid #fff; }\n                .e-rte-content .e-content img.e-resize { z-index: 1000; }\n                .e-img-caption .e-img-inner { outline: 0; }\n                .e-img-caption a:focus-visible { outline: none; }\n                .e-img-caption .e-rte-image.e-imgright, .e-img-caption .e-rte-image.e-imgleft { float: none; margin: 0;}\n                body{box-sizing: border-box;min-height: 100px;outline: 0 solid transparent;\n                    overflow-x: auto;padding: 16px;position: relative;text-align: inherit;z-index: 2;}\n                p{margin: 0 0 10px;margin-bottom: 10px;}\n                li{margin-bottom: 10px;}\n                h1{font-size: 2.17em;font-weight: 400;line-height: 1;margin: 10px 0;}\n                h2{font-size: 1.74em;font-weight: 400;margin: 10px 0;}\n                h3{font-size: 1.31em;font-weight: 400;margin: 10px 0;}\n                h4{font-size: 16px;font-weight: 400;line-height: 1.5;margin: 0;}\n                h5{font-size: 00.8em;font-weight: 400;margin: 0;}\n                h6{font-size: 00.65em;font-weight: 400;margin: 0;}\n                blockquote{margin: 10px 0;margin-left: 0;padding-left: 5px;border-left: solid 2px #5c5c5c;}\n                pre{background-color: inherit;border: 0;border-radius: 0;color: #333;\n                    font-size: inherit;line-height: inherit;margin: 0 0 10px;overflow: visible;padding: 0;\n                    white-space: pre-wrap;word-break: inherit;word-wrap: break-word;}\n                strong, b{font-weight: 700;}\n                a{text-decoration: none;user-select: auto;}\n                a:hover{text-decoration: underline;};\n                p:last-child, pre:last-child, blockquote:last-child{margin-bottom: 0;}\n                h3+h4, h4+h5, h5+h6{margin-top: 00.6em;}\n                ul:last-child{margin-bottom: 0;}\n                table { border-collapse: collapse; empty-cells: show;}\n                table td,table th {border: 1px solid #BDBDBD; height: 20px; vertical-align: middle;}\n                table.e-alternate-border tbody tr:nth-child(2n) {background-color: #F5F5F5;}\n                table th {background-color: #E0E0E0;}\n                table.e-dashed-border td,table.e-dashed-border th { border: 1px dashed #BDBDBD} \n                table .e-cell-select {border: 1px double #4a90e2;}\n                span.e-table-box { cursor: nwse-resize; display: block; height: 10px; position: absolute; width: 10px; }\n                span.e-table-box.e-rmob {height: 14px;width: 14px;}\n                .e-row-resize, .e-column-resize { background-color: transparent; background-repeat: repeat;\n                    bottom: 0;cursor: col-resize;height: 1px;overflow: visible;position: absolute;width: 1px; }\n                .e-row-resize { cursor: row-resize; height: 1px;}\n                .e-table-rhelper { cursor: col-resize; opacity: .87;position: absolute;}\n                .e-table-rhelper.e-column-helper { width: 1px; }\n                .e-table-rhelper.e-row-helper {height: 1px;}\n                .e-reicon::before { border-bottom: 6px solid transparent; border-right: 6px solid;\n                    border-top: 6px solid transparent; content: ''; display: block; height: 0;\n                    position: absolute; right: 4px; top: 4px; width: 20px; }\n                .e-reicon::after { border-bottom: 6px solid transparent; border-left: 6px solid;\n                    border-top: 6px solid transparent; content: ''; display: block;\n                    height: 0; left: 4px; position: absolute; top: 4px; width: 20px; z-index: 3; }\n                .e-row-helper.e-reicon::after { top: 10px; transform: rotate(90deg); }\n                .e-row-helper.e-reicon::before { left: 4px; top: -20px; transform: rotate(90deg); }\n                span.e-table-box { background-color: #ffffff; border: 1px solid #BDBDBD; }\n                span.e-table-box.e-rbox-select { background-color: #BDBDBD; border: 1px solid #BDBDBD; }\n                .e-table-rhelper { background-color: #4a90e2;}\n                .e-rtl { direction: rtl; }\n            </style>\n        </head>`;\n/**\n * Content module is used to render Rich Text Editor content\n *\n * @hidden\n * @deprecated\n */\n\nclass IframeContentRender extends ContentRender {\n  /**\n   * The function is used to render Rich Text Editor iframe\n   *\n   * @hidden\n   * @deprecated\n   */\n  renderPanel() {\n    const rteObj = this.parent;\n    const rteContent = getEditValue(rteObj.value, rteObj);\n    const iFrameBodyContent = '<body spellcheck=\"false\" autocorrect=\"off\" contenteditable=\"true\">' + rteContent + '</body></html>';\n    let iFrameContent = IFRAMEHEADER + iFrameBodyContent;\n    const iframe = this.parent.createElement('iframe', {\n      id: this.parent.getID() + '_rte-view',\n      className: 'e-rte-content',\n      styles: 'display:block;',\n      attrs: {\n        'srcdoc': iFrameContent\n      }\n    });\n    this.setPanel(iframe);\n    rteObj.element.appendChild(iframe);\n    iframe.contentDocument.body.id = this.parent.getID() + '_rte-edit-view';\n    iframe.contentDocument.body.setAttribute('aria-owns', this.parent.getID());\n    iframe.contentDocument.open();\n    iFrameContent = this.setThemeColor(iFrameContent, {\n      color: '#333'\n    });\n    iframe.contentDocument.write(iFrameContent);\n    iframe.contentDocument.close();\n\n    if (rteObj.enableRtl) {\n      this.contentPanel.contentDocument.body.setAttribute('class', 'e-rtl');\n    }\n  }\n\n  setThemeColor(content, styles) {\n    const fontColor = getComputedStyle(this.parent.element, '.e-richtexteditor').getPropertyValue('color');\n    return content.replace(styles.color, fontColor);\n  }\n  /**\n   * Get the editable element of RichTextEditor\n   *\n   * @returns {Element} - specifies the element.\n   * @hidden\n   * @deprecated\n   */\n\n\n  getEditPanel() {\n    let editNode;\n\n    if (!isNullOrUndefined(this.contentPanel.contentDocument)) {\n      editNode = this.contentPanel.contentDocument.body;\n    } else {\n      editNode = this.parent.inputElement;\n    }\n\n    return editNode;\n  }\n  /**\n   * Get the document of RichTextEditor\n   *\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  getDocument() {\n    return this.getEditPanel().ownerDocument;\n  }\n\n}\n/**\n * XhtmlValidation module called when set enableXhtml as true\n */\n\n\nclass XhtmlValidation {\n  constructor(parent) {\n    this.parent = parent;\n    this.addEventListener();\n  }\n\n  addEventListener() {\n    this.parent.on(xhtmlValidation, this.enableXhtmlValidation, this);\n    this.parent.on(destroy, this.removeEventListener, this);\n  }\n\n  removeEventListener() {\n    this.parent.off(xhtmlValidation, this.enableXhtmlValidation);\n    this.parent.off(destroy, this.removeEventListener);\n  }\n\n  enableXhtmlValidation() {\n    if (this.parent.enableXhtml) {\n      if (isNullOrUndefined(this.parent.inputElement)) {\n        this.currentElement = this.parent.element;\n      } else {\n        this.currentElement = this.parent.inputElement;\n      }\n\n      this.clean(this.currentElement);\n      this.AddRootElement();\n      this.ImageTags();\n      this.removeTags();\n      this.RemoveUnsupported();\n      this.currentElement.innerHTML = this.selfEncloseValidation(this.currentElement.innerHTML, this.currentElement.innerText === \"\\n\" ? this.currentElement.innerText.length : this.currentElement.innerText.trim().length);\n      this.parent.setProperties({\n        value: this.currentElement.innerHTML\n      }, true);\n    }\n  }\n  /**\n   * @param {string} currentValue - specifies the string value.\n   * @param {number} valueLength - specifies the length of the current value.\n   * @returns {void}\n   * @deprecated\n   */\n\n\n  selfEncloseValidation(currentValue, valueLength) {\n    if (valueLength === 0 && currentValue.indexOf('table') < 0 && currentValue.indexOf('img') < 0) {\n      const arrayValue = currentValue.split('&nbsp;');\n      arrayValue[arrayValue.length - 1] = '&#8203;' + arrayValue[arrayValue.length - 1];\n      currentValue = arrayValue.join('');\n    }\n\n    currentValue = currentValue.replace(/<br>/g, '<br/>').replace(/<hr>/g, '<hr/>').replace(/ /g, ' ');\n    let valueTemp;\n    const valueDupe = [];\n    let valueOriginal = [];\n    const imgRegexp = [/<img(.*?)>/gi, /<area(.*?)>/gi, /<base(.*?)>/gi, /<col (.*?)>/gi, /<embed(.*?)>/gi, /<input(.*?)>/gi, /<link(.*?)>/gi, /<meta(.*?)>/gi, /<param(.*?)>/gi, /<source(.*?)>/gi, /<track(.*?)>/gi, /<wbr(.*?)>/gi];\n\n    for (let j = 0; j < imgRegexp.length; j++) {\n      valueTemp = imgRegexp[j].exec(currentValue);\n\n      while (valueTemp !== null) {\n        valueDupe.push(valueTemp[0].toString());\n        valueTemp = imgRegexp[j].exec(currentValue);\n      }\n\n      valueOriginal = valueDupe.slice(0);\n\n      for (let i = 0; i < valueDupe.length; i++) {\n        if (valueDupe[i].indexOf('/') === -1 || valueDupe[i].lastIndexOf('/') !== valueDupe[i].length - 2) {\n          valueDupe[i] = valueDupe[i].substr(0, valueDupe[i].length - 1) + ' /' + valueDupe[i].substr(valueDupe[i].length - 1, valueDupe[i].length);\n        }\n      }\n\n      for (let g = 0; g <= valueDupe.length - 1; g++) {\n        currentValue = currentValue.replace(valueOriginal[g], valueDupe[g]);\n      }\n    }\n\n    return currentValue;\n  }\n\n  AddRootElement() {\n    if (this.currentElement.childNodes.length === 1 && this.currentElement.firstChild.nodeName !== 'DIV' || this.currentElement.childNodes.length > 1) {\n      const parentEle = this.parent.createElement('div');\n\n      while (this.currentElement.childNodes.length > 0) {\n        parentEle.appendChild(this.currentElement.childNodes[0]);\n      }\n\n      this.currentElement.appendChild(parentEle);\n    }\n  }\n\n  clean(node) {\n    for (let n = 0; n < node.childNodes.length; n++) {\n      const child = node.childNodes[n];\n\n      if (child.nodeType === 8 || child.nodeName === 'V:IMAGE') {\n        node.removeChild(child);\n        n--;\n      } else if (child.nodeType === 1) {\n        this.clean(child);\n      }\n    }\n\n    return this.currentElement.innerHTML;\n  }\n\n  ImageTags() {\n    const imgNodes = this.currentElement.querySelectorAll('IMG');\n\n    for (let i = imgNodes.length - 1; i >= 0; i--) {\n      if (!imgNodes[i].hasAttribute('alt')) {\n        const img = imgNodes[i];\n        img.setAttribute('alt', '');\n      }\n    }\n  }\n\n  removeTags() {\n    const removeAttribute = [['br', 'ul'], ['br', 'ol'], ['table', 'span'], ['div', 'span'], ['p', 'span']];\n\n    for (let i = 0; i < removeAttribute.length; i++) {\n      this.RemoveElementNode(removeAttribute[i][0], removeAttribute[i][1]);\n    }\n  }\n\n  RemoveElementNode(rmvNode, parentNode) {\n    const parentArray = this.currentElement.querySelectorAll(parentNode);\n\n    for (let i = 0; i < parentArray.length; i++) {\n      const rmvArray = parentArray[i].querySelectorAll(rmvNode);\n\n      for (let j = rmvArray.length; j > 0; j--) {\n        detach(rmvArray[j - 1]);\n      }\n    }\n  }\n\n  RemoveUnsupported() {\n    const underlineEle = this.currentElement.querySelectorAll('u');\n\n    for (let i = underlineEle.length - 1; i >= 0; i--) {\n      const spanEle = this.parent.createElement('span');\n      spanEle.style.textDecoration = 'underline';\n      spanEle.innerHTML = underlineEle[i].innerHTML;\n      underlineEle[i].parentNode.insertBefore(spanEle, underlineEle[i]);\n      detach(underlineEle[i]);\n    }\n\n    const strongEle = this.currentElement.querySelectorAll('strong');\n\n    for (let i = strongEle.length - 1; i >= 0; i--) {\n      const boldEle = this.parent.createElement('b');\n      boldEle.innerHTML = strongEle[i].innerHTML;\n      strongEle[i].parentNode.insertBefore(boldEle, strongEle[i]);\n      detach(strongEle[i]);\n    }\n\n    const attrArray = ['language', 'role', 'target', 'contenteditable', 'cellspacing', 'cellpadding', 'border', 'valign', 'colspan'];\n\n    for (let i = 0; i <= attrArray.length; i++) {\n      this.RemoveAttributeByName(attrArray[i]);\n    }\n  }\n\n  RemoveAttributeByName(attrName) {\n    if (this.currentElement.firstChild !== null) {\n      if (this.currentElement.firstChild.nodeType !== 3) {\n        for (let i = 0; i < this.currentElement.childNodes.length; i++) {\n          const ele = this.currentElement.childNodes[i];\n\n          if (ele.nodeType !== 3 && ele.nodeName !== 'TABLE' && ele.nodeName !== 'TBODY' && ele.nodeName !== 'THEAD' && ele.nodeName !== 'TH' && ele.nodeName !== 'TR' && ele.nodeName !== 'TD') {\n            if (ele.hasAttribute(attrName)) {\n              ele.removeAttribute(attrName);\n            }\n\n            if (ele.hasChildNodes()) {\n              for (let j = 0; j < ele.childNodes.length; j++) {\n                const childEle = ele.childNodes[j];\n\n                if (childEle.nodeType !== 3 && childEle.nodeName !== 'TABLE' && childEle.nodeName !== 'TBODY' && childEle.nodeName !== 'THEAD' && childEle.nodeName !== 'TH' && childEle.nodeName !== 'TR' && childEle.nodeName !== 'TD' && childEle.hasAttribute(attrName)) {\n                  childEle.removeAttribute(attrName);\n                }\n\n                if (childEle.hasChildNodes()) {\n                  for (let k = 0; k < childEle.childNodes.length; k++) {\n                    if (childEle.childNodes[k].nodeType !== 3 && childEle.childNodes[k].nodeName !== 'TABLE' && childEle.childNodes[k].nodeName !== 'TBODY' && childEle.childNodes[k].nodeName !== 'THEAD' && childEle.childNodes[k].nodeName !== 'TH' && childEle.childNodes[k].nodeName !== 'TR' && childEle.childNodes[k].nodeName !== 'TD' && childEle.childNodes[k].hasAttribute(attrName)) {\n                      childEle.childNodes[k].removeAttribute(attrName);\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n}\n/**\n * `HtmlEditor` module is used to HTML editor\n */\n\n\nclass HtmlEditor {\n  constructor(parent, serviceLocator) {\n    this.rangeCollection = [];\n    this.parent = parent;\n    this.locator = serviceLocator;\n    this.renderFactory = this.locator.getService('rendererFactory');\n    this.xhtmlValidation = new XhtmlValidation(parent);\n    this.addEventListener();\n  }\n  /**\n   * Destroys the Markdown.\n   *\n   * @function destroy\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  destroy() {\n    this.removeEventListener();\n  }\n  /**\n   * @param {string} value - specifies the string value\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  sanitizeHelper(value) {\n    value = sanitizeHelper(value, this.parent);\n    return value;\n  }\n\n  addEventListener() {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.nodeSelectionObj = new NodeSelection();\n    this.colorPickerModule = new ColorPickerInput(this.parent, this.locator);\n    this.parent.on(initialLoad, this.instantiateRenderer, this);\n    this.parent.on(htmlToolbarClick, this.onToolbarClick, this);\n    this.parent.on(keyDown, this.onKeyDown, this);\n    this.parent.on(keyUp, this.onKeyUp, this);\n    this.parent.on(renderColorPicker, this.renderColorPicker, this);\n    this.parent.on(initialEnd, this.render, this);\n    this.parent.on(modelChanged, this.onPropertyChanged, this);\n    this.parent.on(destroy, this.destroy, this);\n    this.parent.on(selectAll$1, this.selectAll, this);\n    this.parent.on(selectRange, this.selectRange, this);\n    this.parent.on(getSelectedHtml, this.getSelectedHtml, this);\n    this.parent.on(selectionSave, this.onSelectionSave, this);\n    this.parent.on(selectionRestore, this.onSelectionRestore, this);\n    this.parent.on(readOnlyMode, this.updateReadOnly, this);\n    this.parent.on(paste, this.onPaste, this);\n  }\n\n  updateReadOnly() {\n    if (this.parent.readonly) {\n      attributes(this.parent.contentModule.getEditPanel(), {\n        contenteditable: 'false'\n      });\n      addClass([this.parent.element], CLS_RTE_READONLY);\n    } else {\n      attributes(this.parent.contentModule.getEditPanel(), {\n        contenteditable: 'true'\n      });\n      removeClass([this.parent.element], CLS_RTE_READONLY);\n    }\n  }\n\n  onSelectionSave() {\n    const currentDocument = this.contentRenderer.getDocument();\n    const range = this.nodeSelectionObj.getRange(currentDocument);\n    this.saveSelection = this.nodeSelectionObj.save(range, currentDocument);\n  }\n\n  onSelectionRestore(e) {\n    this.parent.isBlur = false;\n    this.contentRenderer.getEditPanel().focus();\n\n    if (isNullOrUndefined(e.items) || e.items) {\n      this.saveSelection.restore();\n    }\n  }\n\n  onKeyUp(e) {\n    let args = e.args;\n    const restrictKeys = [8, 9, 13, 16, 17, 18, 20, 27, 37, 38, 39, 40, 44, 45, 46, 91, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123];\n    const range = this.parent.getRange();\n    const regEx = new RegExp(String.fromCharCode(8203), 'g');\n    let pointer;\n\n    if (restrictKeys.indexOf(args.keyCode) < 0 && !args.shiftKey && !args.ctrlKey && !args.altKey) {\n      if (range.startContainer.textContent.charCodeAt(0) === 8203) {\n        pointer = range.startOffset - 1;\n        range.startContainer.textContent = range.startContainer.textContent.replace(regEx, '');\n        this.parent.formatter.editorManager.nodeSelection.setCursorPoint(this.parent.contentModule.getDocument(), range.startContainer, pointer);\n      }\n\n      if (!isNullOrUndefined(range.startContainer.previousSibling) && !isNullOrUndefined(range.startContainer.previousSibling.parentElement) && range.startContainer.parentElement === range.startContainer.previousSibling.parentElement && range.startContainer.previousSibling.textContent.charCodeAt(0) === 8203) {\n        range.startContainer.previousSibling.textContent = range.startContainer.previousSibling.textContent.replace(regEx, '');\n      }\n\n      if (range.endContainer.textContent.charCodeAt(range.endOffset) === 8203) {\n        pointer = range.startOffset;\n        range.endContainer.textContent = range.endContainer.textContent.replace(regEx, '');\n        this.parent.formatter.editorManager.nodeSelection.setCursorPoint(this.parent.contentModule.getDocument(), range.startContainer, pointer);\n      }\n    }\n  }\n\n  onKeyDown(e) {\n    let currentRange;\n    const args = e.args;\n\n    if (Browser.info.name === 'chrome') {\n      currentRange = this.parent.getRange();\n      this.backSpaceCleanup(e, currentRange);\n      this.deleteCleanup(e, currentRange);\n    }\n\n    if (args.keyCode === 9 && this.parent.enableTabKey) {\n      if (!isNullOrUndefined(args.target) && isNullOrUndefined(closest(args.target, '.e-rte-toolbar'))) {\n        const range = this.nodeSelectionObj.getRange(this.contentRenderer.getDocument());\n        const parentNode = this.nodeSelectionObj.getParentNodeCollection(range);\n\n        if (!((parentNode[0].nodeName === 'LI' || closest(parentNode[0], 'li') || closest(parentNode[0], 'table')) && range.startOffset === 0)) {\n          args.preventDefault();\n\n          if (!args.shiftKey) {\n            InsertHtml.Insert(this.contentRenderer.getDocument(), '&nbsp;&nbsp;&nbsp;&nbsp;');\n            this.rangeCollection.push(this.nodeSelectionObj.getRange(this.contentRenderer.getDocument()));\n          } else if (this.rangeCollection.length > 0 && this.rangeCollection[this.rangeCollection.length - 1].startContainer.textContent.length === 4) {\n            const textCont = this.rangeCollection[this.rangeCollection.length - 1].startContainer;\n            this.nodeSelectionObj.setSelectionText(this.contentRenderer.getDocument(), textCont, textCont, 0, textCont.textContent.length);\n            InsertHtml.Insert(this.contentRenderer.getDocument(), document.createTextNode(''));\n            this.rangeCollection.pop();\n          }\n        }\n      }\n    }\n\n    if (e.args.action === 'space' || e.args.action === 'enter' || e.args.keyCode === 13) {\n      this.spaceLink(e.args);\n\n      if (this.parent.editorMode === 'HTML' && !this.parent.readonly) {\n        this.parent.notify(enterHandler, {\n          args: e.args\n        });\n      }\n    }\n\n    if (e.args.action === 'space') {\n      const currentRange = this.parent.getRange();\n      const editorValue = currentRange.startContainer.textContent.slice(0, currentRange.startOffset);\n      const orderedList = this.isOrderedList(editorValue);\n      const unOrderedList = this.isUnOrderedList(editorValue);\n\n      if (orderedList && !unOrderedList || unOrderedList && !orderedList) {\n        const eventArgs = {\n          callBack: null,\n          event: e.args,\n          name: 'keydown-handler'\n        };\n        const actionBeginArgs = {\n          cancel: false,\n          item: {\n            command: 'Lists',\n            subCommand: orderedList ? 'OL' : 'UL'\n          },\n          name: 'actionBegin',\n          originalEvent: e.args,\n          requestType: orderedList ? 'OL' : 'UL'\n        };\n        this.parent.trigger(actionBegin, actionBeginArgs, actionBeginArgs => {\n          if (!actionBeginArgs.cancel) {\n            this.parent.formatter.editorManager.observer.notify(ON_BEGIN, eventArgs);\n            this.parent.trigger(actionComplete, {\n              editorMode: this.parent.editorMode,\n              elements: this.parent.formatter.editorManager.domNode.blockNodes(),\n              event: e.args,\n              name: actionComplete,\n              range: this.parent.getRange(),\n              requestType: orderedList ? 'OL' : 'UL'\n            });\n          }\n        });\n      }\n    }\n\n    if (Browser.info.name === 'chrome' && (!isNullOrUndefined(this.rangeElement) && !isNullOrUndefined(this.oldRangeElement) || !isNullOrUndefined(this.deleteRangeElement) && !isNullOrUndefined(this.deleteOldRangeElement)) && currentRange.startContainer.parentElement.tagName !== 'TD' && currentRange.startContainer.parentElement.tagName !== 'TH') {\n      this.rangeElement = null;\n      this.oldRangeElement = null;\n      this.deleteRangeElement = null;\n      this.deleteOldRangeElement = null;\n      args.preventDefault();\n    }\n  }\n\n  isOrderedList(editorValue) {\n    editorValue = editorValue.replace(/\\u200B/g, '');\n    const olListStartRegex = [/^[1]+[.]+$/, /^[i]+[.]+$/, /^[a]+[.]+$/];\n\n    if (!isNullOrUndefined(editorValue)) {\n      for (let i = 0; i < olListStartRegex.length; i++) {\n        if (olListStartRegex[i].test(editorValue)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  isUnOrderedList(editorValue) {\n    editorValue = editorValue.replace(/\\u200B/g, '');\n    const ulListStartRegex = [/^[*]$/, /^[-]$/];\n\n    if (!isNullOrUndefined(editorValue)) {\n      for (let i = 0; i < ulListStartRegex.length; i++) {\n        if (ulListStartRegex[i].test(editorValue)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  backSpaceCleanup(e, currentRange) {\n    let isLiElement = false;\n\n    if (e.args.code === 'Backspace' && e.args.keyCode === 8 && currentRange.startOffset === 0 && currentRange.endOffset === 0 && this.parent.getSelection().length === 0 && currentRange.startContainer.textContent.length > 0 && currentRange.startContainer.parentElement.tagName !== 'TD' && currentRange.startContainer.parentElement.tagName !== 'TH') {\n      this.rangeElement = this.getRootBlockNode(currentRange.startContainer);\n\n      if (this.rangeElement.tagName === 'OL' || this.rangeElement.tagName === 'UL') {\n        const liElement = this.getRangeLiNode(currentRange.startContainer);\n\n        if (liElement.previousElementSibling && liElement.previousElementSibling.childElementCount > 0) {\n          this.oldRangeElement = liElement.previousElementSibling.lastElementChild;\n\n          if (!isNullOrUndefined(liElement.lastElementChild)) {\n            this.rangeElement = liElement.lastElementChild;\n            isLiElement = true;\n          } else {\n            this.rangeElement = liElement;\n          }\n        }\n      } else if (this.rangeElement.tagName === 'TABLE' || !isNullOrUndefined(this.rangeElement.previousElementSibling) && this.rangeElement.previousElementSibling.tagName === 'TABLE') {\n        return;\n      } else {\n        this.oldRangeElement = this.rangeElement.previousElementSibling;\n      }\n\n      if (isNullOrUndefined(this.oldRangeElement)) {\n        return;\n      } else {\n        if (this.oldRangeElement.tagName === 'OL' || this.oldRangeElement.tagName === 'UL') {\n          this.oldRangeElement = this.oldRangeElement.lastElementChild.lastElementChild ? this.oldRangeElement.lastElementChild.lastElementChild : this.oldRangeElement.lastElementChild;\n        }\n\n        this.parent.formatter.editorManager.nodeSelection.setCursorPoint(this.parent.contentModule.getDocument(), // eslint-disable-next-line\n        this.oldRangeElement, this.oldRangeElement.childNodes.length);\n\n        if (this.oldRangeElement.querySelector('BR')) {\n          detach(this.oldRangeElement.querySelector('BR'));\n        }\n\n        if (!isNullOrUndefined(this.rangeElement) && this.oldRangeElement !== this.rangeElement) {\n          while (this.rangeElement.firstChild) {\n            this.oldRangeElement.appendChild(this.rangeElement.childNodes[0]);\n          } // eslint-disable-next-line\n\n\n          !isLiElement ? detach(this.rangeElement) : detach(this.rangeElement.parentElement);\n          this.oldRangeElement.normalize();\n        }\n      }\n    }\n  }\n\n  deleteCleanup(e, currentRange) {\n    let isLiElement = false;\n    let liElement;\n    let rootElement;\n\n    if (e.args.code === 'Delete' && e.args.keyCode === 46 && this.parent.contentModule.getText().trim().length !== 0 && this.parent.getSelection().length === 0 && currentRange.startContainer.parentElement.tagName !== 'TD' && currentRange.startContainer.parentElement.tagName !== 'TH') {\n      this.deleteRangeElement = rootElement = this.getRootBlockNode(currentRange.startContainer);\n\n      if (this.deleteRangeElement.tagName === 'OL' || this.deleteRangeElement.tagName === 'UL') {\n        liElement = this.getRangeLiNode(currentRange.startContainer);\n\n        if (liElement.nextElementSibling && liElement.nextElementSibling.childElementCount > 0 && !liElement.nextElementSibling.querySelector('BR')) {\n          if (!isNullOrUndefined(liElement.lastElementChild)) {\n            this.deleteRangeElement = liElement.lastElementChild;\n            isLiElement = true;\n          } else {\n            this.deleteRangeElement = liElement;\n          }\n        } else {\n          this.deleteRangeElement = this.getRangeElement(liElement);\n        }\n      } else if (this.deleteRangeElement.nodeType === 3 || this.deleteRangeElement.tagName === 'TABLE' || !isNullOrUndefined(this.deleteRangeElement.nextElementSibling) && this.deleteRangeElement.nextElementSibling.tagName === 'TABLE') {\n        return;\n      }\n\n      if (this.getCaretIndex(currentRange, this.deleteRangeElement) === this.deleteRangeElement.textContent.length) {\n        if (!isNullOrUndefined(liElement)) {\n          if (isLiElement || !isNullOrUndefined(liElement.nextElementSibling)) {\n            this.deleteOldRangeElement = this.getRangeElement(liElement.nextElementSibling);\n          } else {\n            this.deleteOldRangeElement = rootElement.nextElementSibling;\n          }\n        } else {\n          this.deleteOldRangeElement = this.deleteRangeElement.nextElementSibling;\n        }\n\n        if (isNullOrUndefined(this.deleteOldRangeElement)) {\n          return;\n        } else {\n          this.parent.formatter.editorManager.nodeSelection.setCursorPoint(this.parent.contentModule.getDocument(), this.deleteRangeElement, this.deleteRangeElement.childNodes.length);\n\n          if (this.deleteRangeElement.querySelector('BR')) {\n            detach(this.deleteRangeElement.querySelector('BR'));\n          }\n\n          if (!isNullOrUndefined(this.deleteRangeElement) && this.deleteOldRangeElement.tagName !== 'OL' && this.deleteOldRangeElement.tagName !== 'UL' && this.deleteOldRangeElement !== this.deleteRangeElement) {\n            while (this.deleteOldRangeElement.firstChild) {\n              this.deleteRangeElement.appendChild(this.deleteOldRangeElement.childNodes[0]);\n            }\n\n            if (!isLiElement) {\n              detach(this.deleteOldRangeElement);\n            } else {\n              detach(this.deleteOldRangeElement.parentElement);\n            }\n\n            this.deleteRangeElement.normalize();\n          } else {\n            this.deleteRangeElement = null;\n            this.deleteOldRangeElement = null;\n          }\n        }\n      } else {\n        this.deleteRangeElement = null;\n      }\n    }\n  }\n\n  getCaretIndex(currentRange, element) {\n    let position = 0;\n\n    if (this.parent.contentModule.getDocument().getSelection().rangeCount !== 0) {\n      const preCaretRange = currentRange.cloneRange();\n      preCaretRange.selectNodeContents(element);\n      preCaretRange.setEnd(currentRange.endContainer, currentRange.endOffset);\n      position = preCaretRange.toString().length;\n    }\n\n    return position;\n  }\n\n  getRangeElement(element) {\n    const rangeElement = element.lastElementChild ? element.lastElementChild.tagName === 'BR' ? element.lastElementChild.previousElementSibling ? element.lastElementChild.previousElementSibling : element : element.lastElementChild : element;\n    return rangeElement;\n  }\n\n  getRootBlockNode(rangeBlockNode) {\n    // eslint-disable-next-line\n    for (; rangeBlockNode && this.parent && this.parent.inputElement !== rangeBlockNode; rangeBlockNode = rangeBlockNode) {\n      if (rangeBlockNode.parentElement === this.parent.inputElement) {\n        break;\n      } else {\n        rangeBlockNode = rangeBlockNode.parentElement;\n      }\n    }\n\n    return rangeBlockNode;\n  }\n\n  getRangeLiNode(rangeLiNode) {\n    let node = rangeLiNode.parentElement;\n\n    while (node !== this.parent.inputElement) {\n      if (node.nodeType === 1 && node.tagName === 'LI') {\n        break;\n      }\n\n      node = node.parentElement;\n    }\n\n    return node;\n  }\n\n  onPaste(e) {\n    // eslint-disable-next-line\n    const regex = new RegExp(/([^\\S]|^)(((https?\\:\\/\\/)|(www\\.))(\\S+))/gi);\n\n    if (e.text.match(regex)) {\n      if (e.isWordPaste) {\n        return;\n      }\n\n      e.args.preventDefault();\n      const range = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.contentModule.getDocument()); // eslint-disable-next-line\n\n      const saveSelection = this.parent.formatter.editorManager.nodeSelection.save(range, this.parent.contentModule.getDocument()); // eslint-disable-next-line\n\n      const httpRegex = new RegExp(/([^\\S]|^)(((https?\\:\\/\\/)))/gi);\n      const wwwRegex = new RegExp(/([^\\S]|^)(((www\\.))(\\S+))/gi);\n      const enterSplitText = e.text.split('\\n');\n      let contentInnerElem = '';\n\n      for (let i = 0; i < enterSplitText.length; i++) {\n        if (enterSplitText[i].trim() === '') {\n          contentInnerElem += getDefaultValue(this.parent);\n        } else {\n          let contentWithSpace = '';\n          let spaceBetweenContent = true;\n          const spaceSplit = enterSplitText[i].split(' ');\n\n          for (let j = 0; j < spaceSplit.length; j++) {\n            if (spaceSplit[j].trim() === '') {\n              contentWithSpace += spaceBetweenContent ? '&nbsp;' : ' ';\n            } else {\n              spaceBetweenContent = false;\n              contentWithSpace += spaceSplit[j] + ' ';\n            }\n          }\n\n          if (i === 0) {\n            contentInnerElem += '<span>' + contentWithSpace.trim() + '</span>';\n          } else {\n            contentInnerElem += '<p>' + contentWithSpace.trim() + '</p>';\n          }\n        }\n      }\n\n      const divElement = this.parent.createElement('div');\n      divElement.setAttribute('class', 'pasteContent');\n      divElement.style.display = 'inline';\n      divElement.innerHTML = contentInnerElem.replace('&para', '&amp;para');\n      const paraElem = divElement.querySelectorAll('span, p');\n\n      for (let i = 0; i < paraElem.length; i++) {\n        const splitTextContent = paraElem[i].innerHTML.split(' ');\n        let resultSplitContent = '';\n\n        for (let j = 0; j < splitTextContent.length; j++) {\n          if (splitTextContent[j].match(httpRegex) || splitTextContent[j].match(wwwRegex)) {\n            resultSplitContent += '<a className=\"e-rte-anchor\" href=\"' + splitTextContent[j] + '\" title=\"' + splitTextContent[j] + '\"target=\"_blank\">' + splitTextContent[j] + ' </a>';\n          } else {\n            resultSplitContent += splitTextContent[j] + ' ';\n          }\n        }\n\n        paraElem[i].innerHTML = resultSplitContent.trim();\n      }\n\n      if (!isNullOrUndefined(this.parent.pasteCleanupModule)) {\n        e.callBack(divElement.innerHTML);\n      } else {\n        this.parent.formatter.editorManager.execCommand('insertHTML', null, null, null, divElement);\n      }\n    }\n  }\n\n  spaceLink(e) {\n    const range = this.nodeSelectionObj.getRange(this.contentRenderer.getDocument());\n    const selectNodeEle = this.nodeSelectionObj.getParentNodeCollection(range);\n    const text = range.startContainer.textContent.substr(0, range.endOffset);\n    const splitText = text.split(' ');\n    let urlText = splitText[splitText.length - 1];\n    const urlTextRange = range.startOffset - (text.length - splitText[splitText.length - 1].length);\n    urlText = urlText.slice(0, urlTextRange); // eslint-disable-next-line\n\n    const regex = new RegExp(/([^\\S]|^)(((https?\\:\\/\\/)|(www\\.))(\\S+))/gi);\n\n    if (selectNodeEle[0].nodeName !== 'A' && urlText.match(regex)) {\n      const selection = this.nodeSelectionObj.save(range, this.parent.contentModule.getDocument());\n      const url = urlText.indexOf('http') > -1 ? urlText : 'http://' + urlText;\n      const selectParent = this.parent.formatter.editorManager.nodeSelection.getParentNodeCollection(range);\n      const value = {\n        url: url,\n        selection: selection,\n        selectParent: selectParent,\n        text: urlText,\n        title: '',\n        target: '_blank'\n      };\n      this.parent.formatter.process(this.parent, {\n        item: {\n          'command': 'Links',\n          'subCommand': 'CreateLink'\n        }\n      }, e, value);\n    }\n  }\n\n  onToolbarClick(args) {\n    let save;\n    let selectNodeEle;\n    let selectParentEle;\n    const item = args.item;\n    const closestElement = closest(args.originalEvent.target, '.e-rte-quick-popup');\n\n    if (closestElement && !closestElement.classList.contains('e-rte-inline-popup')) {\n      if (!(item.subCommand === 'SourceCode' || item.subCommand === 'Preview' || item.subCommand === 'FontColor' || item.subCommand === 'BackgroundColor')) {\n        if (isIDevice$1() && item.command === 'Images') {\n          this.nodeSelectionObj.restore();\n        }\n\n        const range = this.nodeSelectionObj.getRange(this.parent.contentModule.getDocument());\n        save = this.nodeSelectionObj.save(range, this.parent.contentModule.getDocument());\n        selectNodeEle = this.nodeSelectionObj.getNodeCollection(range);\n        selectParentEle = this.nodeSelectionObj.getParentNodeCollection(range);\n      }\n\n      if (item.command === 'Images') {\n        this.parent.notify(imageToolbarAction, {\n          member: 'image',\n          args: args,\n          selectNode: selectNodeEle,\n          selection: save,\n          selectParent: selectParentEle\n        });\n      }\n\n      if (item.command === 'Links') {\n        this.parent.notify(linkToolbarAction, {\n          member: 'link',\n          args: args,\n          selectNode: selectNodeEle,\n          selection: save,\n          selectParent: selectParentEle\n        });\n      }\n\n      if (item.command === 'Table') {\n        this.parent.notify(tableToolbarAction, {\n          member: 'table',\n          args: args,\n          selectNode: selectNodeEle,\n          selection: save,\n          selectParent: selectParentEle\n        });\n      }\n    } else {\n      const linkDialog = document.getElementById(this.parent.getID() + '_rtelink');\n      const imageDialog = document.getElementById(this.parent.getID() + '_image');\n\n      if (!(item.subCommand === 'SourceCode' || item.subCommand === 'Preview' || item.subCommand === 'FontColor' || item.subCommand === 'BackgroundColor')) {\n        const range = this.nodeSelectionObj.getRange(this.parent.contentModule.getDocument());\n\n        if (isNullOrUndefined(linkDialog) && isNullOrUndefined(imageDialog)) {\n          save = this.nodeSelectionObj.save(range, this.parent.contentModule.getDocument());\n        }\n\n        selectNodeEle = this.nodeSelectionObj.getNodeCollection(range);\n        selectParentEle = this.nodeSelectionObj.getParentNodeCollection(range);\n      }\n\n      switch (item.subCommand) {\n        case 'Maximize':\n          this.parent.notify(enableFullScreen, {\n            args: args\n          });\n          break;\n\n        case 'Minimize':\n          this.parent.notify(disableFullScreen, {\n            args: args\n          });\n          break;\n\n        case 'CreateLink':\n          this.parent.notify(insertLink, {\n            member: 'link',\n            args: args,\n            selectNode: selectNodeEle,\n            selection: save,\n            selectParent: selectParentEle\n          });\n          break;\n\n        case 'RemoveLink':\n          this.parent.notify(unLink, {\n            member: 'link',\n            args: args,\n            selectNode: selectNodeEle,\n            selection: save,\n            selectParent: selectParentEle\n          });\n          break;\n\n        case 'Print':\n          this.parent.print();\n          break;\n\n        case 'Image':\n          this.parent.notify(insertImage, {\n            member: 'image',\n            args: args,\n            selectNode: selectNodeEle,\n            selection: save,\n            selectParent: selectParentEle\n          });\n          break;\n\n        case 'CreateTable':\n          this.parent.notify(createTable, {\n            member: 'table',\n            args: args,\n            selection: save\n          });\n          break;\n\n        case 'SourceCode':\n          this.parent.notify(sourceCode, {\n            member: 'viewSource',\n            args: args\n          });\n          break;\n\n        case 'Preview':\n          this.parent.notify(updateSource, {\n            member: 'updateSource',\n            args: args\n          });\n          break;\n\n        case 'FontColor':\n        case 'BackgroundColor':\n          break;\n\n        case 'File':\n          this.parent.notify(renderFileManager, {\n            member: 'fileManager',\n            args: args,\n            selectNode: selectNodeEle,\n            selection: save,\n            selectParent: selectParentEle\n          });\n          break;\n\n        default:\n          this.parent.formatter.process(this.parent, args, args.originalEvent, null);\n          break;\n      }\n    }\n  }\n\n  renderColorPicker(args) {\n    this.colorPickerModule.renderColorPickerInput(args);\n  }\n\n  instantiateRenderer() {\n    if (this.parent.iframeSettings.enable) {\n      this.renderFactory.addRenderer(RenderType.Content, new IframeContentRender(this.parent, this.locator));\n    } else {\n      this.renderFactory.addRenderer(RenderType.Content, new ContentRender(this.parent, this.locator));\n    }\n  }\n\n  removeEventListener() {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.off(initialEnd, this.render);\n    this.parent.off(modelChanged, this.onPropertyChanged);\n    this.parent.off(htmlToolbarClick, this.onToolbarClick);\n    this.parent.off(renderColorPicker, this.renderColorPicker);\n    this.parent.off(destroy, this.destroy);\n    this.parent.off(keyDown, this.onKeyDown);\n    this.parent.off(initialLoad, this.instantiateRenderer);\n    this.parent.off(selectAll$1, this.selectAll);\n    this.parent.off(selectRange, this.selectRange);\n    this.parent.off(getSelectedHtml, this.getSelectedHtml);\n    this.parent.off(selectionSave, this.onSelectionSave);\n    this.parent.off(selectionRestore, this.onSelectionRestore);\n    this.parent.off(readOnlyMode, this.updateReadOnly);\n    this.parent.off(paste, this.onPaste);\n  }\n\n  render() {\n    this.contentRenderer = this.renderFactory.getRenderer(RenderType.Content);\n    const editElement = this.contentRenderer.getEditPanel();\n    const option = {\n      undoRedoSteps: this.parent.undoRedoSteps,\n      undoRedoTimer: this.parent.undoRedoTimer\n    };\n\n    if (isNullOrUndefined(this.parent.formatter)) {\n      const formatterClass = new HTMLFormatter({\n        currentDocument: this.contentRenderer.getDocument(),\n        element: editElement,\n        options: option\n      });\n      this.parent.setProperties({\n        formatter: formatterClass\n      }, true);\n    } else {\n      this.parent.formatter.updateFormatter(editElement, this.contentRenderer.getDocument(), option);\n    }\n\n    if (this.parent.enableXhtml) {\n      this.parent.notify(xhtmlValidation, {});\n    }\n\n    if (this.parent.toolbarSettings.enable) {\n      this.toolbarUpdate = new HtmlToolbarStatus(this.parent);\n    }\n\n    if (this.parent.inlineMode.enable) {\n      if (!isNullOrUndefined(this.parent.fontFamily.default)) {\n        editElement.style.fontFamily = this.parent.fontFamily.default;\n      }\n\n      if (!isNullOrUndefined(this.parent.fontSize.default)) {\n        editElement.style.fontSize = this.parent.fontSize.default;\n      }\n    }\n\n    this.parent.notify(bindOnEnd, {});\n  }\n  /**\n   * Called internally if any of the property value changed.\n   *\n   * @param {RichTextEditorModel} e - specifies the editor model\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  onPropertyChanged(e) {\n    // On property code change here\n    if (!isNullOrUndefined(e.newProp.formatter)) {\n      const editElement = this.contentRenderer.getEditPanel();\n      const option = {\n        undoRedoSteps: this.parent.undoRedoSteps,\n        undoRedoTimer: this.parent.undoRedoTimer\n      };\n      this.parent.formatter.updateFormatter(editElement, this.contentRenderer.getDocument(), option);\n    }\n  }\n  /**\n   * For internal use only - Get the module name.\n   *\n   * @returns {string} - returns the string value\n   * @hidden\n   */\n\n\n  getModuleName() {\n    return 'htmlEditor';\n  }\n  /**\n   * For selecting all content in RTE\n   *\n   * @returns {void}\n   * @private\n   * @hidden\n   */\n\n\n  selectAll() {\n    const nodes = getTextNodesUnder(this.parent.contentModule.getDocument(), this.parent.contentModule.getEditPanel());\n\n    if (nodes.length > 0) {\n      this.parent.formatter.editorManager.nodeSelection.setSelectionText(this.parent.contentModule.getDocument(), nodes[0], nodes[nodes.length - 1], 0, nodes[nodes.length - 1].textContent.length);\n    }\n  }\n  /**\n   * For selecting all content in RTE\n   *\n   * @param {NotifyArgs} e - specifies the notified arguments\n   * @returns {void}\n   * @private\n   * @hidden\n   */\n\n\n  selectRange(e) {\n    this.parent.formatter.editorManager.nodeSelection.setRange(this.parent.contentModule.getDocument(), e.range);\n  }\n  /**\n   * For get a selected text in RTE\n   *\n   * @param {NotifyArgs} e - specifies the notified arguments\n   * @returns {void}\n   * @hidden\n   */\n\n\n  getSelectedHtml(e) {\n    e.callBack(this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.contentModule.getDocument()).toString());\n  }\n\n}\n/**\n * PasteCleanup module called when pasting content in RichTextEditor\n */\n\n\nclass PasteCleanup {\n  constructor(parent, serviceLocator) {\n    this.inlineNode = ['a', 'abbr', 'acronym', 'audio', 'b', 'bdi', 'bdo', 'big', 'br', 'button', 'canvas', 'cite', 'code', 'data', 'datalist', 'del', 'dfn', 'em', 'embed', 'font', 'i', 'iframe', 'img', 'input', 'ins', 'kbd', 'label', 'map', 'mark', 'meter', 'noscript', 'object', 'output', 'picture', 'progress', 'q', 'ruby', 's', 'samp', 'script', 'select', 'slot', 'small', 'span', 'strong', 'sub', 'sup', 'svg', 'template', 'textarea', 'time', 'u', 'tt', 'var', 'video', 'wbr'];\n    this.blockNode = ['div', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'address', 'blockquote', 'button', 'center', 'dd', 'dir', 'dl', 'dt', 'fieldset', 'frameset', 'hr', 'iframe', 'isindex', 'li', 'map', 'menu', 'noframes', 'noscript', 'object', 'ol', 'pre', 'td', 'tr', 'th', 'tbody', 'tfoot', 'thead', 'table', 'ul', 'header', 'article', 'nav', 'footer', 'section', 'aside', 'main', 'figure', 'figcaption'];\n    this.isNotFromHtml = false;\n    this.containsHtml = false;\n    this.parent = parent;\n    this.locator = serviceLocator;\n    this.renderFactory = this.locator.getService('rendererFactory');\n    this.i10n = serviceLocator.getService('rteLocale');\n    this.dialogRenderObj = serviceLocator.getService('dialogRenderObject');\n    this.addEventListener();\n  }\n\n  addEventListener() {\n    this.nodeSelectionObj = new NodeSelection();\n\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.on(pasteClean, this.pasteClean, this);\n    this.parent.on(destroy, this.destroy, this);\n  }\n\n  destroy() {\n    this.removeEventListener();\n  }\n\n  removeEventListener() {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.off(pasteClean, this.pasteClean);\n    this.parent.off(destroy, this.destroy);\n  }\n\n  pasteClean(e) {\n    const args = {\n      requestType: 'Paste',\n      editorMode: this.parent.editorMode,\n      event: e\n    };\n    let value = null;\n    let imageproperties;\n\n    if (e.args && !isNullOrUndefined(e.args.clipboardData)) {\n      value = e.args.clipboardData.getData('text/html');\n    }\n\n    this.parent.trigger(beforePasteCleanup, {\n      value: value\n    });\n\n    if (e.args && value !== null && this.parent.editorMode === 'HTML') {\n      if (value.length === 0) {\n        const htmlRegex = new RegExp(/<\\/[a-z][\\s\\S]*>/i);\n        value = e.args.clipboardData.getData('text/plain');\n        this.isNotFromHtml = value !== '' ? true : false;\n        value = value.replace(/</g, '&lt;');\n        value = value.replace(/>/g, '&gt;');\n        this.containsHtml = htmlRegex.test(value);\n        const file = e && e.args.clipboardData && e.args.clipboardData.items.length > 0 ? e.args.clipboardData.items[0].getAsFile() : null;\n        this.parent.notify(paste, {\n          file: file,\n          args: e.args,\n          text: value,\n          callBack: b => {\n            imageproperties = b;\n\n            if (typeof imageproperties === 'object') {\n              this.parent.formatter.editorManager.execCommand('Images', 'Image', e.args, this.imageFormatting.bind(this, args), 'pasteCleanup', imageproperties, 'pasteCleanupModule');\n            } else {\n              value = imageproperties;\n            }\n          }\n        });\n\n        if (!htmlRegex.test(value)) {\n          const divElement = this.parent.createElement('div');\n          divElement.innerHTML = this.splitBreakLine(value);\n          value = divElement.innerHTML;\n        }\n      } else if (value.length > 0) {\n        this.parent.formatter.editorManager.observer.notify(MS_WORD_CLEANUP, {\n          args: e.args,\n          text: e.text,\n          allowedStylePropertiesArray: this.parent.pasteCleanupSettings.allowedStyleProps,\n          callBack: a => {\n            value = a.trim();\n          }\n        });\n      }\n\n      this.contentRenderer = this.renderFactory.getRenderer(RenderType.Content);\n      const currentDocument = this.contentRenderer.getDocument();\n      const range = this.nodeSelectionObj.getRange(currentDocument);\n      this.saveSelection = this.nodeSelectionObj.save(range, currentDocument);\n      this.parent.trigger(afterPasteCleanup, {\n        value: value\n      }, updatedArgs => {\n        value = updatedArgs.value;\n      });\n\n      if (this.parent.pasteCleanupSettings.prompt) {\n        e.args.preventDefault();\n        const tempDivElem = this.parent.createElement('div');\n        tempDivElem.innerHTML = value;\n\n        if (tempDivElem.textContent !== '' || !isNullOrUndefined(tempDivElem.querySelector('img')) || !isNullOrUndefined(tempDivElem.querySelector('table'))) {\n          this.pasteDialog(value, args);\n        }\n      } else if (this.parent.pasteCleanupSettings.plainText) {\n        e.args.preventDefault();\n        this.plainFormatting(value, args);\n      } else if (this.parent.pasteCleanupSettings.keepFormat) {\n        e.args.preventDefault();\n        this.formatting(value, false, args);\n      } else {\n        e.args.preventDefault();\n        this.formatting(value, true, args);\n      }\n    }\n  }\n\n  splitBreakLine(value) {\n    const enterSplitText = value.split('\\n');\n    let contentInnerElem = '';\n\n    for (let i = 0; i < enterSplitText.length; i++) {\n      if (enterSplitText[i].trim() === '') {\n        contentInnerElem += getDefaultValue(this.parent);\n      } else {\n        const contentWithSpace = this.makeSpace(enterSplitText[i]);\n        contentInnerElem += '<p>' + contentWithSpace.trim() + '</p>';\n      }\n    }\n\n    return contentInnerElem;\n  }\n\n  makeSpace(enterSplitText) {\n    let contentWithSpace = '';\n    let spaceBetweenContent = true;\n    const spaceSplit = enterSplitText.split(' ');\n\n    for (let j = 0; j < spaceSplit.length; j++) {\n      if (spaceSplit[j].trim() === '') {\n        contentWithSpace += spaceBetweenContent ? '&nbsp;' : ' ';\n      } else {\n        spaceBetweenContent = false;\n        contentWithSpace += spaceSplit[j] + ' ';\n      }\n    }\n\n    return contentWithSpace;\n  }\n\n  imgUploading(elm) {\n    const allImgElm = elm.querySelectorAll('.pasteContent_Img');\n\n    if (this.parent.insertImageSettings.saveUrl && allImgElm.length > 0) {\n      const base64Src = [];\n      const imgName = [];\n      const uploadImg = [];\n\n      for (let i = 0; i < allImgElm.length; i++) {\n        if (allImgElm[i].getAttribute('src').split(',')[0].indexOf('base64') >= 0) {\n          base64Src.push(allImgElm[i].getAttribute('src'));\n          imgName.push(getUniqueID('rte_image'));\n          uploadImg.push(allImgElm[i]);\n        }\n      }\n\n      const fileList = [];\n\n      for (let i = 0; i < base64Src.length; i++) {\n        fileList.push(this.base64ToFile(base64Src[i], imgName[i]));\n      }\n\n      for (let i = 0; i < fileList.length; i++) {\n        this.uploadMethod(fileList[i], uploadImg[i]);\n      }\n\n      if (isNullOrUndefined(this.parent.insertImageSettings.path) && this.parent.insertImageSettings.saveFormat === 'Blob') {\n        this.getBlob(allImgElm);\n      }\n    } else if (this.parent.insertImageSettings.saveFormat === 'Blob') {\n      this.getBlob(allImgElm);\n    }\n\n    const allImgElmId = elm.querySelectorAll('.pasteContent_Img');\n\n    for (let i = 0; i < allImgElmId.length; i++) {\n      allImgElmId[i].classList.remove('pasteContent_Img');\n\n      if (allImgElmId[i].getAttribute('class').trim() === '') {\n        allImgElm[i].removeAttribute('class');\n      }\n    }\n  }\n\n  getBlob(allImgElm) {\n    for (let i = 0; i < allImgElm.length; i++) {\n      if (!isNullOrUndefined(allImgElm[i].getAttribute('src')) && allImgElm[i].getAttribute('src').split(',')[0].indexOf('base64') >= 0) {\n        const blopUrl = URL.createObjectURL(convertToBlob(allImgElm[i].getAttribute('src')));\n        allImgElm[i].setAttribute('src', blopUrl);\n      }\n    }\n  }\n\n  uploadMethod(fileList, imgElem) {\n    const uploadEle = document.createElement('div');\n    document.body.appendChild(uploadEle);\n    uploadEle.setAttribute('display', 'none');\n    imgElem.style.opacity = '0.5';\n    const popupEle = this.parent.createElement('div');\n    this.parent.element.appendChild(popupEle);\n    const contentEle = this.parent.createElement('input', {\n      id: this.parent.element.id + '_upload',\n      attrs: {\n        type: 'File',\n        name: 'UploadFiles'\n      }\n    });\n    const offsetY = this.parent.iframeSettings.enable ? -50 : -90;\n    const popupObj = new Popup(popupEle, {\n      relateTo: imgElem,\n      height: '85px',\n      width: '300px',\n      offsetY: offsetY,\n      content: contentEle,\n      viewPortElement: this.parent.element,\n      position: {\n        X: 'center',\n        Y: 'top'\n      },\n      enableRtl: this.parent.enableRtl,\n      zIndex: 10001,\n      // eslint-disable-next-line\n      close: event => {\n        this.parent.isBlur = false;\n        popupObj.destroy();\n        detach(popupObj.element);\n      }\n    });\n    popupObj.element.style.display = 'none';\n    addClass([popupObj.element], [CLS_POPUP_OPEN, CLS_RTE_UPLOAD_POPUP]);\n    const timeOut = fileList.size > 1000000 ? 300 : 100;\n    setTimeout(() => {\n      this.refreshPopup(imgElem, popupObj);\n    }, timeOut);\n    let rawFile;\n    let beforeUploadArgs;\n    const uploadObj = new Uploader({\n      asyncSettings: {\n        saveUrl: this.parent.insertImageSettings.saveUrl,\n        removeUrl: this.parent.insertImageSettings.removeUrl\n      },\n      cssClass: CLS_RTE_DIALOG_UPLOAD,\n      dropArea: this.parent.inputElement,\n      allowedExtensions: this.parent.insertImageSettings.allowedTypes.toString(),\n      success: e => {\n        setTimeout(() => {\n          this.popupClose(popupObj, uploadObj, imgElem, e);\n        }, 900);\n      },\n      uploading: e => {\n        if (!this.parent.isServerRendered) {\n          this.parent.trigger(imageUploading, e, imageUploadingArgs => {\n            if (imageUploadingArgs.cancel) {\n              if (!isNullOrUndefined(imgElem)) {\n                detach(imgElem);\n              }\n\n              if (!isNullOrUndefined(popupObj.element)) {\n                detach(popupObj.element);\n              }\n            } else {\n              this.parent.inputElement.contentEditable = 'false';\n            }\n          });\n        }\n      },\n      beforeUpload: args => {\n        if (this.parent.isServerRendered) {\n          beforeUploadArgs = JSON.parse(JSON.stringify(args));\n          beforeUploadArgs.filesData = rawFile;\n          args.cancel = true;\n          this.parent.trigger(imageUploading, beforeUploadArgs, beforeUploadArgs => {\n            if (beforeUploadArgs.cancel) {\n              return;\n            }\n            /* eslint-disable */\n\n\n            uploadObj.currentRequestHeader = beforeUploadArgs.currentRequest ? beforeUploadArgs.currentRequest : uploadObj.currentRequestHeader;\n            uploadObj.customFormDatas = beforeUploadArgs.customFormData && beforeUploadArgs.customFormData.length > 0 ? beforeUploadArgs.customFormData : uploadObj.customFormDatas;\n            uploadObj.uploadFiles(rawFile, null);\n            /* eslint-enable */\n          });\n        } else {\n          this.parent.trigger(beforeImageUpload, args);\n        }\n      },\n      // eslint-disable-next-line\n      failure: e => {\n        setTimeout(() => {\n          this.uploadFailure(imgElem, uploadObj, popupObj, e);\n        }, 900);\n      },\n      canceling: () => {\n        this.parent.inputElement.contentEditable = 'true';\n\n        if (imgElem.nextSibling.textContent === ' ') {\n          detach(imgElem.nextSibling);\n        }\n\n        detach(imgElem);\n        popupObj.close();\n      },\n      selected: e => {\n        e.cancel = true;\n\n        if (this.parent.isServerRendered) {\n          rawFile = e.filesData;\n        }\n      },\n      removing: () => {\n        this.parent.inputElement.contentEditable = 'true';\n\n        if (imgElem.nextSibling.textContent === ' ') {\n          detach(imgElem.nextSibling);\n        }\n\n        detach(imgElem);\n        popupObj.close();\n      }\n    });\n    uploadObj.appendTo(popupObj.element.childNodes[0]);\n    /* eslint-disable */\n\n    let fileData = [{\n      name: fileList.name,\n      rawFile: fileList,\n      size: fileList.size,\n      type: fileList.type,\n      validationMessages: {\n        minSize: \"\",\n        maxSize: \"\"\n      },\n      statusCode: '1'\n    }];\n    uploadObj.createFileList(fileData);\n    uploadObj.filesData.push(fileData[0]);\n    /* eslint-enable */\n\n    rawFile = fileData;\n    uploadObj.upload(fileData);\n    popupObj.element.getElementsByClassName('e-file-select-wrap')[0].style.display = 'none';\n    detach(popupObj.element.querySelector('.e-rte-dialog-upload .e-file-select-wrap'));\n  }\n\n  uploadFailure(imgElem, uploadObj, popupObj, e) {\n    this.parent.inputElement.contentEditable = 'true';\n    detach(imgElem);\n\n    if (popupObj) {\n      popupObj.close();\n    }\n\n    this.parent.trigger(imageUploadFailed, e);\n    uploadObj.destroy();\n  }\n\n  popupClose(popupObj, uploadObj, imgElem, e) {\n    this.parent.inputElement.contentEditable = 'true';\n    e.element = imgElem;\n    this.parent.trigger(imageUploadSuccess, e, e => {\n      if (!isNullOrUndefined(this.parent.insertImageSettings.path)) {\n        const url = this.parent.insertImageSettings.path + e.file.name;\n        imgElem.src = url;\n        imgElem.setAttribute('alt', e.file.name);\n      }\n    });\n    popupObj.close();\n    imgElem.style.opacity = '1';\n    uploadObj.destroy();\n  }\n\n  refreshPopup(imageElement, popupObj) {\n    const imgPosition = this.parent.iframeSettings.enable ? this.parent.element.offsetTop + imageElement.offsetTop : imageElement.offsetTop;\n    const rtePosition = this.parent.element.offsetTop + this.parent.element.offsetHeight;\n\n    if (imgPosition > rtePosition) {\n      popupObj.relateTo = this.parent.inputElement;\n      popupObj.offsetY = this.parent.iframeSettings.enable ? -30 : -65;\n      popupObj.element.style.display = 'block';\n    } else {\n      if (popupObj) {\n        popupObj.refreshPosition(imageElement);\n        popupObj.element.style.display = 'block';\n      }\n    }\n  }\n\n  base64ToFile(base64, filename) {\n    const baseStr = base64.split(',');\n    const typeStr = baseStr[0].match(/:(.*?);/)[1];\n    const extension = typeStr.split('/')[1];\n    const decodeStr = atob(baseStr[1]);\n    let strLen = decodeStr.length;\n    const decodeArr = new Uint8Array(strLen);\n\n    while (strLen--) {\n      decodeArr[strLen] = decodeStr.charCodeAt(strLen);\n    }\n\n    if (Browser.isIE || navigator.appVersion.indexOf('Edge') > -1) {\n      const blob = new Blob([decodeArr], {\n        type: extension\n      });\n      extend(blob, {\n        name: filename + '.' + (!isNullOrUndefined(extension) ? extension : '')\n      });\n      return blob;\n    } else {\n      return new File([decodeArr], filename + '.' + (!isNullOrUndefined(extension) ? extension : ''), {\n        type: extension\n      });\n    }\n  }\n  /**\n   * Method for image formatting when pasting\n   *\n   * @param {Object} pasteArgs - specifies the paste arguments.\n   * @param {Element []} imgElement - specifies the array elements.\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  imageFormatting(pasteArgs, imgElement) {\n    const imageElement = this.parent.createElement('span');\n    imageElement.appendChild(imgElement.elements[0]);\n    const imageValue = imageElement.innerHTML;\n    this.contentRenderer = this.renderFactory.getRenderer(RenderType.Content);\n    const currentDocument = this.contentRenderer.getDocument();\n    const range = this.nodeSelectionObj.getRange(currentDocument);\n    this.saveSelection = this.nodeSelectionObj.save(range, currentDocument);\n\n    if (this.parent.pasteCleanupSettings.prompt) {\n      this.pasteDialog(imageValue, pasteArgs);\n    } else if (this.parent.pasteCleanupSettings.plainText) {\n      this.plainFormatting(imageValue, pasteArgs);\n    } else if (this.parent.pasteCleanupSettings.keepFormat) {\n      this.formatting(imageValue, false, pasteArgs);\n    } else {\n      this.formatting(imageValue, true, pasteArgs);\n    }\n  }\n\n  radioRender() {\n    const keepRadioButton = new RadioButton({\n      label: this.i10n.getConstant('keepFormat'),\n      name: 'pasteOption',\n      checked: true\n    });\n    keepRadioButton.isStringTemplate = true;\n    const keepFormatElement = this.parent.element.querySelector('#keepFormating');\n    keepRadioButton.appendTo(keepFormatElement);\n    const cleanRadioButton = new RadioButton({\n      label: this.i10n.getConstant('cleanFormat'),\n      name: 'pasteOption'\n    });\n    cleanRadioButton.isStringTemplate = true;\n    const cleanFormatElement = this.parent.element.querySelector('#cleanFormat');\n    cleanRadioButton.appendTo(cleanFormatElement);\n    const plainTextRadioButton = new RadioButton({\n      label: this.i10n.getConstant('plainText'),\n      name: 'pasteOption'\n    });\n    plainTextRadioButton.isStringTemplate = true;\n    const plainTextElement = this.parent.element.querySelector('#plainTextFormat');\n    plainTextRadioButton.appendTo(plainTextElement);\n  }\n\n  selectFormatting(value, args, keepChecked, cleanChecked) {\n    if (keepChecked) {\n      this.formatting(value, false, args);\n    } else if (cleanChecked) {\n      this.formatting(value, true, args);\n    } else {\n      this.plainFormatting(value, args);\n    }\n  }\n\n  pasteDialog(value, args) {\n    let isHeight = false;\n    const preRTEHeight = this.parent.height;\n    const dialogModel = {\n      buttons: [{\n        click: () => {\n          if (!dialog.isDestroyed) {\n            const keepChecked = this.parent.element.querySelector('#keepFormating').checked;\n            const cleanChecked = this.parent.element.querySelector('#cleanFormat').checked;\n            dialog.hide();\n            this.parent.height = isHeight ? preRTEHeight : this.parent.height;\n            isHeight = false;\n            const argument = dialog;\n            this.dialogRenderObj.close(argument);\n            dialog.destroy();\n            this.selectFormatting(value, args, keepChecked, cleanChecked);\n          }\n        },\n        buttonModel: {\n          isPrimary: true,\n          cssClass: 'e-flat ' + CLS_RTE_PASTE_OK,\n          content: this.i10n.getConstant('pasteDialogOk')\n        }\n      }, {\n        click: () => {\n          if (!dialog.isDestroyed) {\n            dialog.hide();\n            this.parent.height = isHeight ? preRTEHeight : this.parent.height;\n            isHeight = false;\n            const args = dialog;\n            this.dialogRenderObj.close(args);\n            dialog.destroy();\n          }\n        },\n        buttonModel: {\n          cssClass: 'e-flat ' + CLS_RTE_PASTE_CANCEL,\n          content: this.i10n.getConstant('pasteDialogCancel')\n        }\n      }],\n      header: this.i10n.getConstant('pasteFormat'),\n      content: this.i10n.getConstant('pasteFormatContent') + '<br/><div><div style=\"padding-top:24px;\">' + '<input type=\"radio\" class=\"' + CLS_RTE_PASTE_KEEP_FORMAT + '\" id=\"keepFormating\"/>' + '</div><div style=\"padding-top:20px;\"><input type=\"radio\" class=\"' + CLS_RTE_PASTE_REMOVE_FORMAT + '\" id=\"cleanFormat\"/></div>' + '<div style=\"padding-top:20px;\"><input type=\"radio\" class=\"' + CLS_RTE_PASTE_PLAIN_FORMAT + '\" id=\"plainTextFormat\"/></div></div>',\n      target: this.parent.element,\n      width: '300px',\n      height: '265px',\n      cssClass: CLS_RTE_DIALOG_MIN_HEIGHT,\n      isModal: true,\n      visible: false\n    };\n    const dialog = this.dialogRenderObj.render(dialogModel);\n    let rteDialogWrapper = this.parent.element.querySelector('#' + this.parent.getID() + '_pasteCleanupDialog');\n\n    if (rteDialogWrapper !== null && rteDialogWrapper.innerHTML !== '') {\n      this.destroyDialog(rteDialogWrapper);\n    }\n\n    if (rteDialogWrapper === null) {\n      rteDialogWrapper = this.parent.createElement('div', {\n        id: this.parent.getID() + '_pasteCleanupDialog'\n      });\n      this.parent.element.appendChild(rteDialogWrapper);\n    }\n\n    dialog.appendTo(rteDialogWrapper);\n    this.radioRender();\n    /* eslint-disable */\n\n    if (this.parent.element.offsetHeight < parseInt(dialog.height.split('px')[0], null)) {\n      this.parent.height = parseInt(dialog.height.split('px')[0], null) + 40;\n      /* eslint-enable */\n\n      isHeight = true;\n    }\n\n    dialog.show();\n  }\n\n  destroyDialog(rteDialogWrapper) {\n    const rteDialogContainer = this.parent.element.querySelector('.e-dlg-container');\n    detach(rteDialogContainer);\n    const rteDialogWrapperChildLength = rteDialogWrapper.children.length;\n\n    for (let i = 0; i < rteDialogWrapperChildLength; i++) {\n      detach(rteDialogWrapper.children[0]);\n    }\n  }\n\n  formatting(value, clean, args) {\n    let clipBoardElem = this.parent.createElement('div', {\n      className: 'pasteContent',\n      styles: 'display:inline;'\n    });\n\n    if (this.isNotFromHtml && this.containsHtml) {\n      value = this.splitBreakLine(value);\n    }\n\n    clipBoardElem.innerHTML = value;\n\n    if (this.parent.pasteCleanupSettings.deniedTags !== null) {\n      clipBoardElem = this.deniedTags(clipBoardElem);\n    }\n\n    if (clean) {\n      clipBoardElem = this.deniedAttributes(clipBoardElem, clean);\n    } else if (this.parent.pasteCleanupSettings.deniedAttrs !== null) {\n      clipBoardElem = this.deniedAttributes(clipBoardElem, clean);\n    }\n\n    if (this.parent.pasteCleanupSettings.allowedStyleProps !== null) {\n      clipBoardElem = this.allowedStyle(clipBoardElem);\n    }\n\n    this.saveSelection.restore();\n    clipBoardElem.innerHTML = this.sanitizeHelper(clipBoardElem.innerHTML);\n    const allImg = clipBoardElem.querySelectorAll('img');\n\n    for (let i = 0; i < allImg.length; i++) {\n      allImg[i].classList.add('pasteContent_Img');\n\n      if (this.parent.insertImageSettings.width !== 'auto') {\n        allImg[i].setAttribute('width', this.parent.insertImageSettings.width);\n      }\n\n      if (this.parent.insertImageSettings.minWidth !== '0' && this.parent.insertImageSettings.minWidth !== 0) {\n        allImg[i].style.minWidth = this.parent.insertImageSettings.minWidth.toString();\n      }\n\n      if (this.parent.insertImageSettings.maxWidth !== null) {\n        allImg[i].style.maxWidth = this.parent.getInsertImgMaxWidth().toString();\n      }\n\n      if (this.parent.insertImageSettings.height !== 'auto') {\n        allImg[i].setAttribute('height', this.parent.insertImageSettings.height);\n      }\n\n      if (this.parent.insertImageSettings.minHeight !== '0' && this.parent.insertImageSettings.minHeight !== 0) {\n        allImg[i].style.minHeight = this.parent.insertImageSettings.minHeight.toString();\n      }\n\n      if (this.parent.insertImageSettings.maxHeight !== null) {\n        allImg[i].style.maxHeight = this.parent.insertImageSettings.maxHeight.toString();\n      }\n    }\n\n    this.addTempClass(clipBoardElem);\n\n    if (clipBoardElem.textContent !== '' || !isNullOrUndefined(clipBoardElem.querySelector('img')) || !isNullOrUndefined(clipBoardElem.querySelector('table'))) {\n      this.parent.formatter.editorManager.execCommand('inserthtml', 'pasteCleanup', args, returnArgs => {\n        extend(args, {\n          elements: returnArgs.elements,\n          imageElements: returnArgs.imgElem\n        }, true);\n        this.parent.formatter.onSuccess(this.parent, args);\n      }, clipBoardElem);\n      this.removeTempClass();\n      this.parent.notify(toolbarRefresh, {});\n      this.imgUploading(this.parent.inputElement);\n\n      if (this.parent.iframeSettings.enable) {\n        this.parent.updateValue();\n      }\n    }\n  }\n\n  addTempClass(clipBoardElem) {\n    const allChild = clipBoardElem.children;\n\n    for (let i = 0; i < allChild.length; i++) {\n      allChild[i].classList.add('pasteContent_RTE');\n    }\n  }\n\n  removeTempClass() {\n    const classElm = this.parent.inputElement.querySelectorAll('.pasteContent_RTE');\n\n    for (let i = 0; i < classElm.length; i++) {\n      classElm[i].classList.remove('pasteContent_RTE');\n\n      if (classElm[i].getAttribute('class') === '') {\n        classElm[i].removeAttribute('class');\n      }\n    }\n  }\n\n  sanitizeHelper(value) {\n    value = sanitizeHelper(value, this.parent);\n    return value;\n  } //Plain Formatting\n\n\n  plainFormatting(value, args) {\n    const clipBoardElem = this.parent.createElement('div', {\n      className: 'pasteContent',\n      styles: 'display:inline;'\n    });\n    clipBoardElem.innerHTML = value;\n    this.detachInlineElements(clipBoardElem);\n    this.getTextContent(clipBoardElem);\n\n    if (clipBoardElem.textContent.trim() !== '') {\n      if (!isNullOrUndefined(clipBoardElem.firstElementChild) && clipBoardElem.firstElementChild.tagName !== 'BR') {\n        const firstElm = clipBoardElem.firstElementChild;\n\n        if (!isNullOrUndefined(clipBoardElem.firstElementChild)) {\n          const spanElm = this.parent.createElement('span');\n\n          for (let i = 0, j = 0; i < firstElm.childNodes.length; i++, j++) {\n            if (firstElm.childNodes[i].nodeName === '#text') {\n              spanElm.appendChild(firstElm.childNodes[i]);\n              clipBoardElem.insertBefore(spanElm, clipBoardElem.firstElementChild);\n              i--;\n            } else if (firstElm.childNodes[i].nodeName !== '#text' && j === 0) {\n              for (let k = 0; k < firstElm.childNodes[i].childNodes.length; k++) {\n                spanElm.appendChild(firstElm.childNodes[i].childNodes[k]);\n                clipBoardElem.insertBefore(spanElm, clipBoardElem.firstElementChild);\n                k--;\n              }\n\n              i--;\n            } else {\n              break;\n            }\n          }\n\n          if (!firstElm.hasChildNodes()) {\n            detach(firstElm);\n          }\n        }\n      }\n\n      this.removeEmptyElements(clipBoardElem);\n      this.saveSelection.restore();\n      clipBoardElem.innerHTML = this.sanitizeHelper(clipBoardElem.innerHTML);\n      this.addTempClass(clipBoardElem);\n      this.parent.formatter.editorManager.execCommand('inserthtml', 'pasteCleanup', args, returnArgs => {\n        extend(args, {\n          elements: returnArgs.elements,\n          imageElements: returnArgs.imgElem\n        }, true);\n        this.parent.formatter.onSuccess(this.parent, args);\n      }, clipBoardElem);\n      this.removeTempClass();\n    } else {\n      this.saveSelection.restore();\n      extend(args, {\n        elements: []\n      }, true);\n      this.parent.formatter.onSuccess(this.parent, args);\n    }\n  }\n\n  getTextContent(clipBoardElem) {\n    for (let i = 0; i < this.blockNode.length; i++) {\n      const inElem = clipBoardElem.querySelectorAll(this.blockNode[i]);\n\n      for (let j = 0; j < inElem.length; j++) {\n        let parElem;\n\n        for (let k = 0, l = 0, preNode; k < inElem[j].childNodes.length; k++, l++) {\n          if (inElem[j].childNodes[k].nodeName === 'DIV' || inElem[j].childNodes[k].nodeName === 'P' || inElem[j].childNodes[k].nodeName === '#text' && inElem[j].childNodes[k].nodeValue.replace(/\\u00a0/g, '&nbsp;') !== '&nbsp;' && inElem[j].childNodes[k].textContent.trim() === '') {\n            parElem = inElem[j].childNodes[k].parentElement;\n            inElem[j].childNodes[k].parentElement.parentElement.insertBefore(inElem[j].childNodes[k], inElem[j].childNodes[k].parentElement);\n            k--;\n          } else {\n            parElem = inElem[j].childNodes[k].parentElement;\n\n            if (preNode === 'text') {\n              const previousElem = parElem.previousElementSibling;\n              previousElem.appendChild(inElem[j].childNodes[k]);\n            } else {\n              const divElement = this.parent.createElement('div', {\n                id: 'newDiv'\n              });\n              divElement.appendChild(inElem[j].childNodes[k]);\n              parElem.parentElement.insertBefore(divElement, parElem);\n            }\n\n            k--;\n            preNode = 'text';\n          }\n        }\n\n        if (!isNullOrUndefined(parElem)) {\n          detach(parElem);\n        }\n      }\n    }\n\n    const allElems = clipBoardElem.querySelectorAll('*');\n\n    for (let i = 0; i < allElems.length; i++) {\n      const allAtr = allElems[i].attributes;\n\n      for (let j = 0; j < allAtr.length; j++) {\n        allElems[i].removeAttribute(allAtr[j].name);\n        j--;\n      }\n    }\n  }\n\n  detachInlineElements(clipBoardElem) {\n    for (let i = 0; i < this.inlineNode.length; i++) {\n      const inElem = clipBoardElem.querySelectorAll(this.inlineNode[i]);\n\n      for (let j = 0; j < inElem.length; j++) {\n        let parElem;\n\n        for (let k = 0; k < inElem[j].childNodes.length; k++) {\n          parElem = inElem[j].childNodes[k].parentElement;\n          inElem[j].childNodes[k].parentElement.parentElement.insertBefore(inElem[j].childNodes[k], inElem[j].childNodes[k].parentElement);\n          k--;\n        }\n\n        if (!isNullOrUndefined(parElem)) {\n          detach(parElem);\n        }\n      }\n    }\n  }\n\n  findDetachEmptyElem(element) {\n    let removableElement;\n\n    if (!isNullOrUndefined(element.parentElement)) {\n      if (element.parentElement.textContent.trim() === '' && element.parentElement.getAttribute('class') !== 'pasteContent') {\n        removableElement = this.findDetachEmptyElem(element.parentElement);\n      } else {\n        removableElement = element;\n      }\n    } else {\n      removableElement = null;\n    }\n\n    return removableElement;\n  }\n\n  removeEmptyElements(element) {\n    const emptyElements = element.querySelectorAll(':empty');\n\n    for (let i = 0; i < emptyElements.length; i++) {\n      if (emptyElements[i].tagName !== 'BR') {\n        const detachableElement = this.findDetachEmptyElem(emptyElements[i]);\n\n        if (!isNullOrUndefined(detachableElement)) {\n          detach(detachableElement);\n        }\n      }\n    }\n  } //GroupingTags\n\n\n  tagGrouping(deniedTags) {\n    const groupingTags = [...deniedTags];\n    const keys = Object.keys(pasteCleanupGroupingTags);\n    const values = keys.map(key => {\n      return pasteCleanupGroupingTags[key];\n    });\n    const addTags = [];\n\n    for (let i = 0; i < groupingTags.length; i++) {\n      //The value split using '[' because to retrieve the tag name from the user given format which may contain tag with attributes\n      if (groupingTags[i].split('[').length > 1) {\n        groupingTags[i] = groupingTags[i].split('[')[0].trim();\n      }\n\n      if (keys.indexOf(groupingTags[i]) > -1) {\n        for (let j = 0; j < values[keys.indexOf(groupingTags[i])].length; j++) {\n          if (groupingTags.indexOf(values[keys.indexOf(groupingTags[i])][j]) < 0 && addTags.indexOf(values[keys.indexOf(groupingTags[i])][j]) < 0) {\n            addTags.push(values[keys.indexOf(groupingTags[i])][j]);\n          }\n        }\n      }\n    }\n\n    return deniedTags = deniedTags.concat(addTags);\n  } //Filter Attributes in Denied Tags\n\n\n  attributesfilter(deniedTags) {\n    for (let i = 0; i < deniedTags.length; i++) {\n      if (deniedTags[i].split('[').length > 1) {\n        const userAttributes = deniedTags[i].split('[')[1].split(']')[0].split(',');\n        const allowedAttributeArray = [];\n        const deniedAttributeArray = [];\n\n        for (let j = 0; j < userAttributes.length; j++) {\n          // eslint-disable-next-line\n          userAttributes[j].indexOf('!') < 0 ? allowedAttributeArray.push(userAttributes[j].trim()) : deniedAttributeArray.push(userAttributes[j].split('!')[1].trim());\n        }\n\n        const allowedAttribute = allowedAttributeArray.length > 1 ? allowedAttributeArray.join('][') : allowedAttributeArray.join();\n        const deniedAttribute = deniedAttributeArray.length > 1 ? deniedAttributeArray.join('][') : deniedAttributeArray.join();\n\n        if (deniedAttribute.length > 0) {\n          const select$$1 = allowedAttribute !== '' ? deniedTags[i].split('[')[0] + '[' + allowedAttribute + ']' : deniedTags[i].split('[')[0];\n          deniedTags[i] = select$$1 + ':not([' + deniedAttribute + '])';\n        } else {\n          deniedTags[i] = deniedTags[i].split('[')[0] + '[' + allowedAttribute + ']';\n        }\n      }\n    }\n\n    return deniedTags;\n  } //Denied Tags\n\n\n  deniedTags(clipBoardElem) {\n    let deniedTags = isNullOrUndefined(this.parent.pasteCleanupSettings.deniedTags) ? [] : [...this.parent.pasteCleanupSettings.deniedTags];\n    deniedTags = this.attributesfilter(deniedTags);\n    deniedTags = this.tagGrouping(deniedTags);\n\n    for (let i = 0; i < deniedTags.length; i++) {\n      const removableElement = clipBoardElem.querySelectorAll(deniedTags[i]);\n\n      for (let j = removableElement.length - 1; j >= 0; j--) {\n        const parentElem = removableElement[j].parentNode;\n\n        while (removableElement[j].firstChild) {\n          parentElem.insertBefore(removableElement[j].firstChild, removableElement[j]);\n        }\n\n        parentElem.removeChild(removableElement[j]);\n      }\n    }\n\n    return clipBoardElem;\n  } //Denied Attributes\n\n\n  deniedAttributes(clipBoardElem, clean) {\n    const deniedAttrs = isNullOrUndefined(this.parent.pasteCleanupSettings.deniedAttrs) ? [] : [...this.parent.pasteCleanupSettings.deniedAttrs];\n\n    if (clean) {\n      deniedAttrs.push('style');\n    }\n\n    for (let i = 0; i < deniedAttrs.length; i++) {\n      const removableAttrElement = clipBoardElem.querySelectorAll('[' + deniedAttrs[i] + ']');\n\n      for (let j = 0; j < removableAttrElement.length; j++) {\n        removableAttrElement[j].removeAttribute(deniedAttrs[i]);\n      }\n    }\n\n    return clipBoardElem;\n  } //Allowed Style Properties\n\n\n  allowedStyle(clipBoardElem) {\n    const allowedStyleProps = isNullOrUndefined(this.parent.pasteCleanupSettings.allowedStyleProps) ? [] : [...this.parent.pasteCleanupSettings.allowedStyleProps];\n    allowedStyleProps.push('list-style-type', 'list-style');\n    const styleElement = clipBoardElem.querySelectorAll('[style]');\n\n    for (let i = 0; i < styleElement.length; i++) {\n      let allowedStyleValue = '';\n      const allowedStyleValueArray = [];\n      const styleValue = styleElement[i].getAttribute('style').split(';');\n\n      for (let k = 0; k < styleValue.length; k++) {\n        if (allowedStyleProps.indexOf(styleValue[k].split(':')[0].trim()) >= 0) {\n          allowedStyleValueArray.push(styleValue[k]);\n        }\n      }\n\n      styleElement[i].removeAttribute('style');\n      allowedStyleValue = allowedStyleValueArray.join(';').trim() === '' ? allowedStyleValueArray.join(';') : allowedStyleValueArray.join(';') + ';';\n\n      if (allowedStyleValue) {\n        styleElement[i].setAttribute('style', allowedStyleValue);\n      }\n    }\n\n    return clipBoardElem;\n  }\n  /**\n   * For internal use only - Get the module name.\n   *\n   * @returns {void}\n   * @hidden\n   */\n\n\n  getModuleName() {\n    return 'pasteCleanup';\n  }\n\n}\n/**\n * `Resize` module is used to resize the editor\n */\n\n\nclass Resize {\n  constructor(parent) {\n    this.parent = parent;\n    this.addEventListener();\n  }\n\n  addEventListener() {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.on(initialEnd, this.renderResizable, this);\n    this.parent.on(destroy, this.destroy, this);\n  }\n\n  renderResizable() {\n    this.resizer = this.parent.createElement('div', {\n      id: this.parent.getID() + '-resizable',\n      className: 'e-icons' + ' ' + CLS_RTE_RES_HANDLE + ' ' + CLS_RTE_RES_EAST\n    });\n    this.parent.element.classList.add(CLS_RTE_RES_CNT);\n    this.parent.element.appendChild(this.resizer);\n    this.touchStartEvent = Browser.info.name === 'msie' ? 'pointerdown' : 'touchstart';\n    EventHandler.add(this.resizer, 'mousedown', this.resizeStart, this);\n    EventHandler.add(this.resizer, this.touchStartEvent, this.resizeStart, this);\n  }\n\n  resizeStart(e) {\n    if (e.cancelable) {\n      e.preventDefault();\n    }\n\n    this.wireResizeEvents();\n    this.parent.notify(resizeInitialized, {});\n    const args = {\n      event: e,\n      requestType: 'editor'\n    };\n    this.parent.trigger(resizeStart, args, resizeStartArgs => {\n      if (resizeStartArgs.cancel) {\n        this.unwireResizeEvents();\n      }\n    });\n  }\n\n  performResize(e) {\n    const args = {\n      event: e,\n      requestType: 'editor'\n    };\n    this.parent.trigger(onResize, args, resizingArgs => {\n      if (resizingArgs.cancel) {\n        this.unwireResizeEvents();\n      }\n    });\n    const boundRect = this.parent.element.getBoundingClientRect();\n\n    if (this.isMouseEvent(e)) {\n      this.parent.element.style.height = e.clientY - boundRect.top + 'px';\n      this.parent.element.style.width = e.clientX - boundRect.left + 'px';\n    } else {\n      const eventType = Browser.info.name !== 'msie' ? e.touches[0] : e;\n      this.parent.element.style.height = eventType.clientY - boundRect.top + 'px';\n      this.parent.element.style.width = eventType.clientX - boundRect.left + 'px';\n    }\n\n    if (!this.parent.toolbarSettings.enable) {\n      this.parent.setContentHeight('', false);\n    }\n\n    this.parent.refreshUI();\n  }\n\n  stopResize(e) {\n    this.parent.refreshUI();\n    this.unwireResizeEvents();\n    const args = {\n      event: e,\n      requestType: 'editor'\n    };\n    this.parent.trigger(resizeStop, args);\n  }\n\n  getEventType(e) {\n    return e.indexOf('mouse') > -1 ? 'mouse' : 'touch';\n  }\n\n  isMouseEvent(e) {\n    let isMouse = false;\n\n    if (this.getEventType(e.type) === 'mouse' || !isNullOrUndefined(e.pointerType) && this.getEventType(e.pointerType) === 'mouse') {\n      isMouse = true;\n    }\n\n    return isMouse;\n  }\n\n  wireResizeEvents() {\n    EventHandler.add(document, 'mousemove', this.performResize, this);\n    EventHandler.add(document, 'mouseup', this.stopResize, this);\n    this.touchMoveEvent = Browser.info.name === 'msie' ? 'pointermove' : 'touchmove';\n    this.touchEndEvent = Browser.info.name === 'msie' ? 'pointerup' : 'touchend';\n    EventHandler.add(document, this.touchMoveEvent, this.performResize, this);\n    EventHandler.add(document, this.touchEndEvent, this.stopResize, this);\n  }\n\n  unwireResizeEvents() {\n    EventHandler.remove(document, 'mousemove', this.performResize);\n    EventHandler.remove(document, 'mouseup', this.stopResize);\n    EventHandler.remove(document, this.touchMoveEvent, this.performResize);\n    EventHandler.remove(document, this.touchEndEvent, this.stopResize);\n  }\n\n  destroy() {\n    this.removeEventListener();\n  }\n\n  removeEventListener() {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.off(initialEnd, this.renderResizable);\n    this.parent.element.classList.remove(CLS_RTE_RES_CNT);\n    EventHandler.remove(this.resizer, 'mousedown', this.resizeStart);\n    EventHandler.remove(this.resizer, this.touchStartEvent, this.resizeStart);\n\n    if (this.resizer) {\n      detach(this.resizer);\n    }\n\n    this.parent.off(destroy, this.destroy);\n  }\n  /**\n   * For internal use only - Get the module name.\n   *\n   * @returns {void}\n   * @hidden\n   */\n\n\n  getModuleName() {\n    return 'resize';\n  }\n\n}\n/**\n * `FileManager` module is used to display the directories and images inside the editor.\n */\n\n\nclass FileManager$1 {\n  constructor(parent, locator) {\n    FileManager.Inject(ContextMenu, DetailsView, NavigationPane, Toolbar$1);\n    this.parent = parent;\n    this.i10n = locator.getService('rteLocale');\n    this.dialogRenderObj = locator.getService('dialogRenderObject');\n    this.rendererFactory = locator.getService('rendererFactory');\n    this.addEventListener();\n  }\n\n  initialize() {\n    this.parent.fileManagerModule = this;\n    this.contentModule = this.rendererFactory.getRenderer(RenderType.Content);\n  }\n\n  render(e) {\n    let dlgInsert;\n\n    if (e.selectNode && e.selectNode[0].nodeName === 'IMG') {\n      dlgInsert = this.parent.localeObj.getConstant('dialogUpdate');\n    } else {\n      dlgInsert = this.i10n.getConstant('dialogInsert');\n    }\n\n    const dlgHeader = this.parent.localeObj.getConstant('fileDialogHeader');\n    const dlgCancel = this.i10n.getConstant('dialogCancel');\n    this.dlgButtons = [{\n      click: this.insertImageUrl.bind(this),\n      buttonModel: {\n        content: dlgInsert,\n        cssClass: 'e-flat e-insertImage',\n        isPrimary: true\n      }\n    }, {\n      // eslint-disable-next-line\n      click: e => {\n        this.cancelDialog();\n      },\n      buttonModel: {\n        cssClass: 'e-flat e-cancel',\n        content: dlgCancel\n      }\n    }];\n    this.dlgButtons[0].buttonModel.disabled = true;\n    this.selectObj = {\n      selection: e.selection,\n      args: e.args,\n      selectParent: e.selectParent\n    };\n    const dlgTarget = this.parent.createElement('div', {\n      className: 'e-rte-file-manager-dialog',\n      id: this.parent.getID() + '_file-manager-dialog',\n      attrs: {\n        'aria-owns': this.parent.getID()\n      }\n    });\n    document.body.appendChild(dlgTarget);\n    this.fileWrap = this.parent.createElement('div', {\n      id: this.parent.getID() + '_rte-file-manager',\n      className: 'e-img-file-wrap'\n    });\n    dlgTarget.appendChild(this.fileWrap);\n    dlgTarget.appendChild(this.getInputUrlElement());\n    const dialogModel = {\n      visible: false,\n      isModal: true,\n      header: dlgHeader,\n      target: document.body,\n      locale: this.parent.locale,\n      enableRtl: this.parent.enableRtl,\n      cssClass: CLS_RTE_ELEMENTS,\n      animationSettings: {\n        effect: 'None'\n      },\n      showCloseIcon: true,\n      closeOnEscape: true,\n      width: '720px',\n      height: 'auto',\n      position: {\n        X: 'center',\n        Y: 'center'\n      },\n      buttons: this.dlgButtons,\n      created: this.renderFileManager.bind(this),\n      close: e => {\n        this.parent.isBlur = false;\n\n        if (e && e.event.returnValue) {\n          this.selectObj.selection.restore();\n        }\n\n        this.destroyComponents();\n        this.dialogRenderObj.close(e);\n      }\n    };\n    this.dialogObj = this.dialogRenderObj.render(dialogModel);\n    this.dialogObj.createElement = this.parent.createElement;\n    this.dialogObj.appendTo(dlgTarget);\n    this.dialogObj.show(Browser.isDevice ? true : false);\n  }\n\n  renderFileManager() {\n    // eslint-disable-next-line\n    const proxy = this;\n    this.fileObj = new FileManager({\n      allowMultiSelection: false,\n      locale: this.parent.locale,\n      enableRtl: this.parent.enableRtl,\n      path: this.parent.fileManagerSettings.path,\n      view: this.parent.fileManagerSettings.view,\n      enablePersistence: this.parent.enablePersistence,\n      cssClass: this.parent.fileManagerSettings.cssClass,\n      sortOrder: this.parent.fileManagerSettings.sortOrder,\n      ajaxSettings: this.parent.fileManagerSettings.ajaxSettings,\n      showThumbnail: this.parent.fileManagerSettings.showThumbnail,\n      rootAliasName: this.parent.fileManagerSettings.rootAliasName,\n      uploadSettings: this.parent.fileManagerSettings.uploadSettings,\n      searchSettings: this.parent.fileManagerSettings.searchSettings,\n      toolbarSettings: this.parent.fileManagerSettings.toolbarSettings,\n      showHiddenItems: this.parent.fileManagerSettings.showHiddenItems,\n      allowDragAndDrop: this.parent.fileManagerSettings.allowDragAndDrop,\n      showFileExtension: this.parent.fileManagerSettings.showFileExtension,\n      detailsViewSettings: this.parent.fileManagerSettings.detailsViewSettings,\n      contextMenuSettings: this.parent.fileManagerSettings.contextMenuSettings,\n      navigationPaneSettings: this.parent.fileManagerSettings.navigationPaneSettings,\n      fileSelect: e => {\n        const selectedFile = e.fileDetails;\n\n        if (selectedFile.isFile && proxy.parent.insertImageSettings.allowedTypes.indexOf(selectedFile.type) > -1) {\n          proxy.inputUrl.value = proxy.parent.fileManagerSettings.ajaxSettings.getImageUrl + '?path=' + (selectedFile.filterPath && selectedFile.filterPath.replace(/\\\\/g, '/')) + selectedFile.name;\n          this.dlgButtons[0].buttonModel.disabled = false;\n        } else {\n          proxy.inputUrl.value = '';\n          this.dlgButtons[0].buttonModel.disabled = true;\n        }\n\n        this.dialogObj.buttons = this.dlgButtons;\n      },\n      created: () => {\n        this.inputUrl.removeAttribute('disabled');\n      },\n      success: () => {\n        this.fileObj.refreshLayout();\n      }\n    });\n\n    if (Browser.isDevice) {\n      this.fileObj.height = '85%';\n    }\n\n    this.fileObj.appendTo(this.fileWrap);\n    EventHandler.add(this.parent.element.ownerDocument, 'mousedown', this.onDocumentClick, this);\n  }\n\n  getInputUrlElement() {\n    const imgUrl = this.parent.createElement('div', {\n      className: 'imgUrl'\n    });\n    const urlLabel = this.parent.createElement('div', {\n      className: 'e-rte-label'\n    });\n    urlLabel.innerHTML = '<label for=\"rteSample_img_url\">' + this.i10n.getConstant('linkWebUrl') + '</label>';\n    imgUrl.appendChild(urlLabel);\n    const placeUrl = this.i10n.getConstant('imageUrl');\n    this.inputUrl = this.parent.createElement('input', {\n      className: 'e-input e-img-url',\n      attrs: {\n        placeholder: placeUrl,\n        spellcheck: 'false',\n        disabled: 'true'\n      }\n    });\n    imgUrl.appendChild(this.inputUrl);\n    return imgUrl;\n  } // eslint-disable-next-line\n\n\n  insertImageUrl(e) {\n    const url = this.inputUrl.value;\n\n    if (this.parent.formatter.getUndoRedoStack().length === 0) {\n      this.parent.formatter.saveData();\n    }\n\n    if (url !== '') {\n      if (this.parent.editorMode === 'HTML' && isNullOrUndefined(closest(this.selectObj.selection.range.startContainer.parentNode, '#' + this.contentModule.getPanel().id))) {\n        this.contentModule.getEditPanel().focus();\n        const range = this.parent.formatter.editorManager.nodeSelection.getRange(this.contentModule.getDocument());\n        this.selectObj.selection = this.parent.formatter.editorManager.nodeSelection.save(range, this.contentModule.getDocument());\n        this.selectObj.selectParent = this.parent.formatter.editorManager.nodeSelection.getParentNodeCollection(range);\n      }\n\n      const regex = /[\\w-]+.(jpg|png|jpeg|gif)/g;\n      const matchUrl = !isNullOrUndefined(url.match(regex)) && this.parent.editorMode === 'HTML' ? url.match(regex)[0] : '';\n      const value = {\n        cssClass: this.parent.insertImageSettings.display === 'inline' ? CLS_IMGINLINE : CLS_IMGBREAK,\n        url: url,\n        selection: this.selectObj.selection,\n        altText: matchUrl,\n        selectParent: this.selectObj.selectParent,\n        width: {\n          width: this.parent.insertImageSettings.width,\n          minWidth: this.parent.insertImageSettings.minWidth,\n          maxWidth: this.parent.getInsertImgMaxWidth()\n        },\n        height: {\n          height: this.parent.insertImageSettings.height,\n          minHeight: this.parent.insertImageSettings.minHeight,\n          maxHeight: this.parent.insertImageSettings.maxHeight\n        }\n      };\n      this.parent.formatter.process(this.parent, this.selectObj.args, this.selectObj.args.originalEvent, value);\n      this.dialogObj.hide({\n        returnValue: false\n      });\n    }\n  }\n\n  cancelDialog() {\n    this.parent.isBlur = false;\n    this.dialogObj.hide({\n      returnValue: true\n    });\n  }\n\n  onDocumentClick(e) {\n    const target = e.target;\n    const prevEle = target.nodeName !== '#document' && !isNullOrUndefined(target.previousElementSibling) && target.previousElementSibling;\n\n    if (!isNullOrUndefined(this.dialogObj) && !closest(target, '#' + this.parent.getID() + '_file-manager-dialog') && !closest(target, '#' + this.parent.getID() + '_rte-file-manager_tb_sortby-popup') && !closest(target, '#' + this.parent.getID() + '_rte-file-manager_tb_view-popup') && !closest(target, '#' + this.parent.getID() + '_rte-file-manager_contextmenu') && !(!isNullOrUndefined(closest(target, '.e-contextmenu-wrapper')) && closest(target, '.e-contextmenu-wrapper').querySelector('#' + this.parent.getID() + '_rte-file-manager_contextmenu')) && !isNullOrUndefined(prevEle) && !prevEle.classList.contains('e-rte-file-manager-dialog') && !isNullOrUndefined(prevEle) && prevEle.id !== this.parent.getID() + '_rte-file-manager_contextmenu') {\n      this.dialogObj.hide({\n        returnValue: true\n      });\n      this.parent.isBlur = true;\n      dispatchEvent(this.parent.element, 'focusout');\n    } else {\n      this.parent.isRTE = true;\n    }\n  }\n\n  addEventListener() {\n    this.parent.on(initialEnd, this.initialize, this);\n    this.parent.on(renderFileManager, this.render, this);\n    this.parent.on(destroy, this.destroy, this);\n  }\n\n  removeEventListener() {\n    EventHandler.remove(this.parent.element.ownerDocument, 'mousedown', this.onDocumentClick);\n    this.parent.off(initialEnd, this.initialize);\n    this.parent.off(renderFileManager, this.render);\n    this.parent.off(destroy, this.destroy);\n  }\n\n  destroyComponents() {\n    if (this.fileObj) {\n      this.fileObj.destroy();\n      this.fileObj = null;\n    }\n\n    if (this.dialogObj) {\n      this.dialogObj.destroy();\n      detach(this.dialogObj.element);\n      this.dialogObj = null;\n    }\n  }\n\n  destroy() {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.destroyComponents();\n    this.removeEventListener();\n  }\n  /**\n   * For internal use only - Get the module name.\n   *\n   * @returns {string} - returns the string value\n   * @hidden\n   */\n\n\n  getModuleName() {\n    return 'fileManager';\n  }\n\n}\n/**\n * `FullScreen` module is used to maximize and minimize screen\n */\n\n\nclass FullScreen {\n  constructor(parent) {\n    this.parent = parent;\n    this.addEventListener();\n  }\n  /**\n   * showFullScreen method\n   *\n   * @param {MouseEvent} event - specifies the mouse event\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  showFullScreen(event) {\n    if (this.parent.toolbarSettings.enable === true && this.parent.editorMode !== 'Markdown' && !isNullOrUndefined(this.parent.quickToolbarModule)) {\n      this.parent.quickToolbarModule.hideQuickToolbars();\n    }\n\n    this.scrollableParent = getScrollableParent(this.parent.element);\n\n    if (!this.parent.element.classList.contains(CLS_FULL_SCREEN)) {\n      const evenArgs = {\n        cancel: false,\n        requestType: 'Maximize',\n        targetItem: 'Maximize',\n        args: event\n      };\n      this.parent.trigger(actionBegin, evenArgs, beginEventArgs => {\n        if (!beginEventArgs.cancel) {\n          if (this.parent.toolbarSettings.enableFloating && !this.parent.inlineMode.enable && this.parent.toolbarSettings.enable) {\n            this.parent.getToolbarElement().style.width = '100%';\n            this.parent.getToolbarElement().style.top = '0px';\n          }\n\n          this.parent.element.classList.add(CLS_FULL_SCREEN);\n          this.toggleParentOverflow(true);\n          this.parent.setContentHeight();\n\n          if (this.parent.toolbarModule) {\n            if (!this.parent.getBaseToolbarObject().toolbarObj.items[0].properties) {\n              this.parent.getBaseToolbarObject().toolbarObj.removeItems(0);\n            }\n\n            if (Browser.isDevice) {\n              this.parent.toolbarModule.removeFixedTBarClass();\n            }\n\n            this.parent.toolbarModule.updateItem({\n              targetItem: 'Maximize',\n              updateItem: 'Minimize',\n              baseToolbar: this.parent.getBaseToolbarObject()\n            });\n          }\n\n          this.parent.trigger(actionComplete, {\n            requestType: 'Maximize',\n            targetItem: 'Maximize',\n            args: event\n          });\n        }\n      });\n    }\n  }\n  /**\n   * hideFullScreen method\n   *\n   * @param {MouseEvent} event - specifies the mouse event\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  hideFullScreen(event) {\n    if (this.parent.toolbarSettings.enable === true && this.parent.editorMode !== 'Markdown' && !isNullOrUndefined(this.parent.quickToolbarModule)) {\n      this.parent.quickToolbarModule.hideQuickToolbars();\n    }\n\n    if (this.parent.element.classList.contains(CLS_FULL_SCREEN)) {\n      const evenArgs = {\n        cancel: false,\n        requestType: 'Minimize',\n        targetItem: 'Minimize',\n        args: event\n      };\n      this.parent.trigger(actionBegin, evenArgs, beginEventArgs => {\n        if (!beginEventArgs.cancel) {\n          this.parent.element.classList.remove(CLS_FULL_SCREEN);\n          const elem = document.querySelectorAll('.e-rte-overflow');\n\n          for (let i = 0; i < elem.length; i++) {\n            removeClass([elem[i]], ['e-rte-overflow']);\n          }\n\n          this.parent.setContentHeight();\n\n          if (this.parent.toolbarModule) {\n            if (!this.parent.getBaseToolbarObject().toolbarObj.items[0].properties) {\n              this.parent.getBaseToolbarObject().toolbarObj.removeItems(0);\n            }\n\n            this.parent.toolbarModule.updateItem({\n              targetItem: 'Minimize',\n              updateItem: 'Maximize',\n              baseToolbar: this.parent.getBaseToolbarObject()\n            });\n\n            if (Browser.isDevice && this.parent.inlineMode.enable) {\n              this.parent.toolbarModule.addFixedTBarClass();\n            }\n          }\n\n          this.parent.trigger(actionComplete, {\n            requestType: 'Minimize',\n            targetItem: 'Minimize',\n            args: event\n          });\n        }\n      });\n    }\n  } // eslint-disable-next-line\n\n\n  toggleParentOverflow(isAdd) {\n    if (isNullOrUndefined(this.scrollableParent)) {\n      return;\n    }\n\n    for (let i = 0; i < this.scrollableParent.length; i++) {\n      if (this.scrollableParent[i].nodeName === '#document') {\n        const elem = document.querySelector('body');\n        addClass([elem], ['e-rte-overflow']);\n      } else {\n        const elem = this.scrollableParent[i];\n        addClass([elem], ['e-rte-overflow']);\n      }\n    }\n  }\n\n  onKeyDown(event) {\n    const originalEvent = event.args;\n\n    switch (originalEvent.action) {\n      case 'full-screen':\n        this.showFullScreen(event.args);\n        originalEvent.preventDefault();\n        break;\n\n      case 'escape':\n        this.hideFullScreen(event.args);\n        originalEvent.preventDefault();\n        break;\n    }\n  }\n\n  addEventListener() {\n    this.parent.on(keyDown, this.onKeyDown, this);\n    this.parent.on(destroy, this.destroy, this);\n  }\n\n  removeEventListener() {\n    this.parent.off(keyDown, this.onKeyDown);\n    this.parent.off(destroy, this.destroy);\n  }\n  /**\n   * destroy method\n   *\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  destroy() {\n    if (this.parent.element.classList.contains(CLS_FULL_SCREEN)) {\n      this.toggleParentOverflow(false);\n    }\n\n    const elem = document.querySelectorAll('.e-rte-overflow');\n\n    for (let i = 0; i < elem.length; i++) {\n      removeClass([elem[i]], ['e-rte-overflow']);\n    }\n\n    this.removeEventListener();\n  }\n\n}\n/**\n * @param {string} htmlAttributes - specifies the string value\n * @param {IRichTextEditor} rte - specifies the rte value\n * @param {boolean} isFrame - specifies the boolean value\n * @param {boolean} initial - specifies the boolean value\n * @returns {void}\n * @hidden\n */\n\n\nfunction setAttributes(htmlAttributes, rte, isFrame, initial) {\n  let target;\n\n  if (isFrame) {\n    const iFrame = rte.contentModule.getDocument();\n    target = iFrame.querySelector('body');\n  } else {\n    target = rte.element;\n  }\n\n  if (Object.keys(htmlAttributes).length) {\n    for (const htmlAttr of Object.keys(htmlAttributes)) {\n      if (htmlAttr === 'class') {\n        target.classList.add(htmlAttributes[htmlAttr]);\n      } else if (htmlAttr === 'disabled' && htmlAttributes[htmlAttr] === 'disabled') {\n        rte.enabled = false;\n        rte.setEnable();\n      } else if (htmlAttr === 'readonly' && htmlAttributes[htmlAttr] === 'readonly') {\n        rte.readonly = true;\n        rte.setReadOnly(initial);\n      } else if (htmlAttr === 'style') {\n        target.setAttribute('style', htmlAttributes[htmlAttr]);\n      } else if (htmlAttr === 'tabindex') {\n        rte.inputElement.setAttribute('tabindex', htmlAttributes[htmlAttr]);\n      } else if (htmlAttr === 'placeholder') {\n        rte.placeholder = htmlAttributes[htmlAttr];\n        rte.setPlaceHolder();\n      } else {\n        const validateAttr = ['name', 'required'];\n\n        if (validateAttr.indexOf(htmlAttr) > -1) {\n          rte.valueContainer.setAttribute(htmlAttr, htmlAttributes[htmlAttr]);\n        } else {\n          target.setAttribute(htmlAttr, htmlAttributes[htmlAttr]);\n        }\n      }\n    }\n  }\n}\n/**\n * Action export\n */\n\n/**\n * Formatter\n */\n\n/**\n * Content module is used to render Rich Text Editor content\n *\n * @hidden\n * @deprecated\n */\n\n\nclass Render {\n  /**\n   * Constructor for render module\n   *\n   * @param {IRichTextEditor} parent - specifies the parent\n   * @param {ServiceLocator} locator - specifies the locator.\n   * @returns {void}\n   */\n  constructor(parent, locator) {\n    this.parent = parent;\n    this.locator = locator;\n    this.renderer = this.locator.getService('rendererFactory');\n    this.addEventListener();\n  }\n  /**\n   * To initialize Rich Text Editor header, content and footer rendering\n   *\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  render() {\n    // eslint-disable-next-line\n    const rteObj = this.parent;\n    this.contentRenderer = this.renderer.getRenderer(RenderType.Content);\n    this.contentRenderer.renderPanel();\n  }\n  /**\n   * Refresh the entire RichTextEditor.\n   *\n   * @param {NotifyArgs} e - specifies the arguments.\n   * @returns {void}\n   */\n\n\n  refresh(e = {\n    requestType: 'refresh'\n  }) {\n    this.parent.notify(`${e.requestType}-begin`, e);\n  }\n  /**\n   * Destroy the entire RichTextEditor.\n   *\n   * @returns {void}\n   */\n\n\n  destroy() {\n    this.removeEventListener();\n  }\n\n  addEventListener() {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.on(modelChanged, this.refresh, this);\n    this.parent.on(keyUp, this.keyUp, this);\n  }\n\n  removeEventListener() {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.off(modelChanged, this.refresh);\n    this.parent.off(keyUp, this.keyUp);\n  }\n\n  keyUp(e) {\n    if (this.parent.editorMode === 'HTML') {\n      switch (e.args.which) {\n        case 46:\n        case 8:\n          // eslint-disable-next-line\n          const childNodes = this.parent.contentModule.getEditPanel().childNodes;\n\n          if (childNodes.length === 0 || childNodes.length === 1 && childNodes[0].childNodes.length === 0 && (childNodes[0].tagName === 'BR' || (childNodes[0].tagName === 'P' || childNodes[0].tagName === 'DIV') && childNodes[0].textContent === '')) {\n            const node = this.parent.contentModule.getEditPanel();\n\n            if (this.parent.enterKey === 'DIV') {\n              node.innerHTML = '<div><br/></div>';\n            } else if (this.parent.enterKey === 'BR') {\n              node.innerHTML = '<br/>';\n            } else {\n              node.innerHTML = '<p><br/></p>';\n            }\n\n            this.parent.formatter.editorManager.nodeSelection.setCursorPoint(this.parent.contentModule.getDocument(), node.childNodes[0], 0);\n          }\n\n          break;\n      }\n    }\n  }\n\n}\n/**\n * `Link` module is used to handle undo actions.\n */\n\n\nclass Link {\n  constructor(parent, serviceLocator) {\n    this.parent = parent;\n    this.rteID = parent.element.id;\n    this.i10n = serviceLocator.getService('rteLocale');\n    this.addEventListener();\n    this.serviceLocator = serviceLocator;\n    this.rendererFactory = serviceLocator.getService('rendererFactory');\n    this.dialogRenderObj = serviceLocator.getService('dialogRenderObject');\n  }\n\n  addEventListener() {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.on(insertLink, this.linkDialog, this);\n    this.parent.on(showLinkDialog, this.showDialog, this);\n    this.parent.on(closeLinkDialog, this.closeDialog, this);\n    this.parent.on(keyDown, this.onKeyDown, this);\n    this.parent.on(insertCompleted, this.showLinkQuickToolbar, this);\n    this.parent.on(clearDialogObj, this.clearDialogObj, this);\n    this.parent.on(linkToolbarAction, this.onToolbarAction, this);\n    this.parent.on(iframeMouseDown, this.onIframeMouseDown, this);\n    this.parent.on(unLink, this.removeLink, this);\n    this.parent.on(editLink, this.editLink, this);\n    this.parent.on(openLink, this.openLink, this);\n    this.parent.on(editAreaClick, this.editAreaClickHandler, this);\n    this.parent.on(destroy, this.destroy, this);\n  }\n\n  onToolbarAction(args) {\n    const item = args.args.item;\n\n    switch (item.subCommand) {\n      case 'OpenLink':\n        this.parent.notify(openLink, args);\n        break;\n\n      case 'EditLink':\n        this.parent.notify(editLink, args);\n        break;\n\n      case 'RemoveLink':\n        this.parent.notify(unLink, args);\n        break;\n    }\n  }\n\n  removeEventListener() {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.off(insertLink, this.linkDialog);\n    this.parent.off(showLinkDialog, this.showDialog);\n    this.parent.off(closeLinkDialog, this.closeDialog);\n    this.parent.off(keyDown, this.onKeyDown);\n    this.parent.off(insertCompleted, this.showLinkQuickToolbar);\n    this.parent.off(clearDialogObj, this.clearDialogObj);\n    this.parent.off(linkToolbarAction, this.onToolbarAction);\n    this.parent.off(unLink, this.removeLink);\n    this.parent.off(iframeMouseDown, this.onIframeMouseDown);\n    this.parent.off(editLink, this.editLink);\n    this.parent.off(openLink, this.openLink);\n    this.parent.off(editAreaClick, this.editAreaClickHandler);\n    this.parent.off(destroy, this.destroy);\n  }\n\n  onIframeMouseDown() {\n    if (this.dialogObj) {\n      this.dialogObj.hide({\n        returnValue: true\n      });\n    }\n  }\n\n  showLinkQuickToolbar(e) {\n    if (!isNullOrUndefined(e.args) && e.args.action !== 'enter' && e.args.action !== 'space') {\n      let pageX;\n      let pageY;\n\n      if (e.type !== 'Links' || isNullOrUndefined(this.parent.quickToolbarModule) || isNullOrUndefined(this.parent.quickToolbarModule.linkQTBar)) {\n        return;\n      }\n\n      this.quickToolObj = this.parent.quickToolbarModule;\n      const parentTop = this.parent.element.getBoundingClientRect().top;\n      const parentLeft = this.parent.element.getBoundingClientRect().left;\n      const range = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.contentModule.getDocument());\n      let target;\n      [].forEach.call(e.elements, (element, index) => {\n        if (index === 0) {\n          target = element.nodeName === '#text' ? element.parentNode : element;\n        }\n      });\n\n      if (e.isNotify) {\n        const tbElement = this.parent.toolbarModule.getToolbarElement();\n        const linkTop = target.getBoundingClientRect().top;\n        const linkLeft = target.getBoundingClientRect().left;\n        const linkPos = linkTop - parentTop;\n        const tbHeight = tbElement ? tbElement.offsetHeight + this.parent.toolbarModule.getExpandTBarPopHeight() : 0;\n        pageX = this.parent.iframeSettings.enable ? parentLeft + linkLeft : target.getBoundingClientRect().left;\n        pageY = window.pageYOffset + (this.parent.iframeSettings.enable ? parentTop + tbHeight + linkTop : parentTop + linkPos);\n      } else {\n        let args;\n        args = e.args.touches ? e.args.changedTouches[0] : args = e.args;\n        pageX = this.parent.iframeSettings.enable ? window.pageXOffset + parentLeft + args.clientX : args.pageX;\n        pageY = this.parent.iframeSettings.enable ? window.pageYOffset + parentTop + args.clientY : args.pageY;\n      }\n\n      if (this.quickToolObj.linkQTBar) {\n        this.quickToolObj.linkQTBar.showPopup(pageX, pageY, range.endContainer);\n      }\n    }\n  }\n\n  hideLinkQuickToolbar() {\n    if (this.quickToolObj && this.quickToolObj.linkQTBar && document.body.contains(this.quickToolObj.linkQTBar.element)) {\n      this.quickToolObj.linkQTBar.hidePopup();\n    }\n  }\n\n  editAreaClickHandler(e) {\n    if (this.parent.readonly) {\n      this.hideLinkQuickToolbar();\n      return;\n    }\n\n    const args = e.args;\n    const showOnRightClick = this.parent.quickToolbarSettings.showOnRightClick;\n\n    if (args.which === 2 || showOnRightClick && args.which === 1 || !showOnRightClick && args.which === 3) {\n      return;\n    }\n\n    if (this.parent.editorMode === 'HTML' && this.parent.quickToolbarModule && this.parent.quickToolbarModule.linkQTBar) {\n      this.quickToolObj = this.parent.quickToolbarModule;\n      let target = args.target;\n      target = this.getAnchorNode(target);\n      this.contentModule = this.rendererFactory.getRenderer(RenderType.Content);\n      const isPopupOpen = this.quickToolObj.linkQTBar.element.classList.contains('e-rte-pop');\n\n      if (target.nodeName === 'A' && target.childNodes.length > 0 && target.childNodes[0].nodeName !== 'IMG' && e.args.target.nodeName !== 'IMG' && !isNullOrUndefined(closest(this.parent.getRange().startContainer.parentElement, 'A')) && !isNullOrUndefined(closest(this.parent.getRange().endContainer.parentElement, 'A'))) {\n        if (isPopupOpen) {\n          return;\n        }\n\n        this.showLinkQuickToolbar({\n          args: args,\n          isNotify: false,\n          type: 'Links',\n          elements: [args.target]\n        });\n      } else {\n        this.hideLinkQuickToolbar();\n      }\n    }\n  }\n\n  onKeyDown(event) {\n    const originalEvent = event.args;\n\n    switch (originalEvent.action) {\n      case 'escape':\n        if (!isNullOrUndefined(this.dialogObj)) {\n          this.dialogObj.close();\n        }\n\n        break;\n\n      case 'insert-link':\n        this.openDialog(true, event);\n        originalEvent.preventDefault();\n        break;\n    }\n  }\n\n  openDialog(isInternal, event) {\n    if (!isInternal) {\n      this.parent.contentModule.getEditPanel().focus();\n    }\n\n    if (this.parent.editorMode === 'HTML') {\n      const range = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.contentModule.getDocument());\n      const save = this.parent.formatter.editorManager.nodeSelection.save(range, this.parent.contentModule.getDocument());\n      const selectNodeEle = this.parent.formatter.editorManager.nodeSelection.getNodeCollection(range);\n      const selectParentEle = this.parent.formatter.editorManager.nodeSelection.getParentNodeCollection(range);\n      const eventArgs = {\n        args: event ? event.args : {\n          item: {\n            command: 'Links',\n            subCommand: 'CreateLink'\n          },\n          originalEvent: undefined\n        },\n        selectNode: selectNodeEle,\n        selection: save,\n        selectParent: selectParentEle\n      };\n      this.linkDialog(eventArgs);\n    } else {\n      const textArea = this.parent.contentModule.getEditPanel();\n      this.parent.formatter.editorManager.markdownSelection.save(textArea.selectionStart, textArea.selectionEnd);\n      this.linkDialog({\n        args: {\n          item: {\n            command: 'Links',\n            subCommand: 'Link'\n          },\n          originalEvent: event && event.args\n        },\n        member: 'link',\n        text: this.parent.formatter.editorManager.markdownSelection.getSelectedText(this.parent.contentModule.getEditPanel()),\n        module: 'Markdown',\n        name: 'insertLink'\n      });\n    }\n  }\n\n  showDialog() {\n    this.openDialog(false);\n  }\n\n  closeDialog() {\n    if (this.dialogObj) {\n      this.dialogObj.hide({\n        returnValue: true\n      });\n    }\n  }\n\n  clearDialogObj() {\n    if (this.dialogObj) {\n      this.dialogObj.destroy();\n      detach(this.dialogObj.element);\n      this.dialogObj = null;\n    }\n  }\n\n  linkDialog(e, inputDetails) {\n    if (this.dialogObj) {\n      this.dialogObj.hide({\n        returnValue: true\n      });\n      return;\n    }\n\n    if (this.parent.editorMode === 'HTML' && e.selectParent.length > 0 && !isNullOrUndefined(e.selectParent[0].classList) && e.selectParent[0].classList.contains('e-rte-anchor') && isNullOrUndefined(inputDetails)) {\n      this.editLink(e);\n      return;\n    }\n\n    const linkWebAddress = this.i10n.getConstant('linkWebUrl');\n    const linkDisplayText = this.i10n.getConstant('linkText');\n    const linkTooltip = this.i10n.getConstant('linkTooltipLabel');\n    const urlPlace = this.i10n.getConstant('linkurl');\n    const textPlace = this.i10n.getConstant('textPlaceholder');\n    const title = this.i10n.getConstant('linkTitle');\n    const linkDialogEle = this.parent.createElement('div', {\n      className: 'e-rte-link-dialog',\n      id: this.rteID + '_rtelink'\n    });\n    this.parent.element.appendChild(linkDialogEle);\n    const linkContent = this.parent.createElement('div', {\n      className: 'e-rte-linkcontent',\n      id: this.rteID + '_linkContent'\n    });\n    const htmlTextbox = this.parent.editorMode === 'HTML' ? '<label>' + linkTooltip + '</label></div><div class=\"e-rte-field\">' + '<input type=\"text\" data-role =\"none\" spellcheck=\"false\" placeholder = \"' + title + '\" class=\"e-input e-rte-linkTitle\"></div>' + '<div class=\"e-rte-label\"></div>' + '<div class=\"e-rte-field\">' + '<input type=\"checkbox\" class=\"e-rte-linkTarget\"  data-role =\"none\"></div>' : '';\n    const content = '<div class=\"e-rte-label\"><label>' + linkWebAddress + '</label></div>' + '<div class=\"e-rte-field\">' + '<input type=\"text\" data-role =\"none\" spellcheck=\"false\" placeholder=\"' + urlPlace + '\" class=\"e-input e-rte-linkurl\"/></div>' + '<div class=\"e-rte-label\">' + '<label>' + linkDisplayText + '</label></div><div class=\"e-rte-field\"> ' + '<input type=\"text\" data-role =\"none\" spellcheck=\"false\" class=\"e-input e-rte-linkText\" placeholder=\"' + textPlace + '\">' + '</div><div class=\"e-rte-label\">' + htmlTextbox;\n    const contentElem = parseHtml(content);\n    linkContent.appendChild(contentElem);\n    const linkTarget = linkContent.querySelector('.e-rte-linkTarget');\n    const linkUrl = linkContent.querySelector('.e-rte-linkurl');\n    const linkText = linkContent.querySelector('.e-rte-linkText');\n    const linkTitle = linkContent.querySelector('.e-rte-linkTitle');\n    const linkOpenLabel = this.i10n.getConstant('linkOpenInNewWindow');\n    this.checkBoxObj = new CheckBox({\n      label: linkOpenLabel,\n      checked: true,\n      enableRtl: this.parent.enableRtl\n    });\n    this.checkBoxObj.isStringTemplate = true;\n    this.checkBoxObj.createElement = this.parent.createElement;\n    this.checkBoxObj.appendTo(linkTarget);\n    const selectText = this.parent.editorMode === 'HTML' ? e.selection.getRange(this.parent.contentModule.getDocument()).toString() : e.text;\n    const linkInsert = this.i10n.getConstant('dialogInsert');\n    const linkCancel = this.i10n.getConstant('dialogCancel');\n    const selection = e.selection;\n    const selectObj = {\n      selfLink: this,\n      selection: e.selection,\n      selectParent: e.selectParent,\n      args: e.args\n    };\n    const dialogModel = {\n      header: this.i10n.getConstant('linkHeader'),\n      content: linkContent,\n      cssClass: CLS_RTE_ELEMENTS,\n      enableRtl: this.parent.enableRtl,\n      locale: this.parent.locale,\n      showCloseIcon: true,\n      closeOnEscape: true,\n      width: Browser.isDevice ? '290px' : '310px',\n      height: 'inherit',\n      isModal: Browser.isDevice,\n      buttons: [{\n        click: this.insertlink.bind(selectObj),\n        buttonModel: {\n          content: linkInsert,\n          cssClass: 'e-flat e-insertLink',\n          isPrimary: true\n        }\n      }, {\n        click: this.cancelDialog.bind(selectObj),\n        buttonModel: {\n          cssClass: 'e-flat',\n          content: linkCancel\n        }\n      }],\n      target: Browser.isDevice ? document.body : this.parent.element,\n      animationSettings: {\n        effect: 'None'\n      },\n      close: event => {\n        this.parent.isBlur = false;\n\n        if (event && event.event.returnValue) {\n          if (this.parent.editorMode === 'HTML') {\n            selection.restore();\n          } else {\n            this.parent.formatter.editorManager.markdownSelection.restore(this.parent.contentModule.getEditPanel());\n          }\n        }\n\n        this.dialogObj.destroy();\n        detach(this.dialogObj.element);\n        const args = this.dialogObj;\n        this.dialogRenderObj.close(args);\n        this.dialogObj = null;\n      }\n    }; // eslint-disable-next-line\n\n    this.dialogObj = this.dialogRenderObj.render(dialogModel);\n    this.dialogObj.createElement = this.parent.createElement;\n    this.dialogObj.appendTo(linkDialogEle);\n    linkDialogEle.style.maxHeight = 'inherit';\n\n    if (isNullOrUndefined(this.dialogObj)) {\n      return;\n    }\n\n    if (!isNullOrUndefined(inputDetails)) {\n      linkUrl.value = inputDetails.url;\n      linkText.value = inputDetails.text;\n      linkTitle.value = inputDetails.title; // eslint-disable-next-line\n\n      inputDetails.target ? this.checkBoxObj.checked = true : this.checkBoxObj.checked = false;\n      this.dialogObj.header = inputDetails.header;\n      this.dialogObj.element.querySelector('.e-insertLink').textContent = inputDetails.btnText;\n    }\n\n    this.checkUrl(false);\n\n    if (this.parent.editorMode === 'HTML' && isNullOrUndefined(inputDetails) && (!isNullOrUndefined(selectText) && selectText !== '' && e.selection.range.startOffset === 0 || e.selection.range.startOffset !== e.selection.range.endOffset) || e.module === 'Markdown') {\n      linkText.value = selectText;\n    }\n\n    EventHandler.add(this.parent.element.ownerDocument, 'mousedown', this.onDocumentClick, this);\n\n    if (this.quickToolObj) {\n      this.hideLinkQuickToolbar();\n\n      if (this.quickToolObj.inlineQTBar && document.body.contains(this.quickToolObj.inlineQTBar.element)) {\n        this.quickToolObj.inlineQTBar.hidePopup();\n      }\n    }\n  } // eslint-disable-next-line\n\n\n  insertlink(e) {\n    const linkEle = this.selfLink.dialogObj.element;\n    let linkUrl = linkEle.querySelector('.e-rte-linkurl').value;\n    let linkText = linkEle.querySelector('.e-rte-linkText').value;\n    let linkTitle;\n\n    if (this.selfLink.parent.editorMode === 'HTML') {\n      linkTitle = linkEle.querySelector('.e-rte-linkTitle').value;\n    }\n\n    const target = this.selfLink.checkBoxObj.checked ? '_blank' : null;\n\n    if (linkUrl === '') {\n      this.selfLink.checkUrl(true);\n      return;\n    }\n\n    if (!this.selfLink.isUrl(linkUrl)) {\n      linkText = linkText === '' ? linkUrl : linkText;\n\n      if (!this.selfLink.parent.enableAutoUrl) {\n        linkUrl = linkUrl.indexOf('http') > -1 ? linkUrl : 'http://' + linkUrl;\n      } else {\n        // eslint-disable-next-line\n        linkUrl = linkUrl;\n      }\n    } else {\n      this.selfLink.checkUrl(false);\n    }\n\n    const proxy = this.selfLink;\n\n    if (proxy.parent.editorMode === 'HTML' && isNullOrUndefined(closest(this.selection.range.startContainer.parentNode, '[id=' // eslint-disable-next-line\n    + \"'\" + proxy.parent.contentModule.getPanel().id + \"'\" + ']'))) {\n      proxy.parent.contentModule.getEditPanel().focus();\n\n      if (Browser.isIE && proxy.parent.iframeSettings.enable) {\n        this.selection.restore();\n      }\n\n      const range = proxy.parent.formatter.editorManager.nodeSelection.getRange(proxy.parent.contentModule.getDocument());\n      this.selection = proxy.parent.formatter.editorManager.nodeSelection.save(range, proxy.parent.contentModule.getDocument());\n      this.selectParent = proxy.parent.formatter.editorManager.nodeSelection.getParentNodeCollection(range);\n    }\n\n    const value = {\n      url: linkUrl,\n      text: linkText,\n      title: linkTitle,\n      target: target,\n      selection: this.selection,\n      selectParent: this.selectParent\n    };\n\n    if (document.body.contains(proxy.dialogObj.element)) {\n      this.selfLink.dialogObj.hide({\n        returnValue: false\n      });\n    }\n\n    if (isIDevice$1() && proxy.parent.iframeSettings.enable) {\n      select('iframe', proxy.parent.element).contentWindow.focus();\n    }\n\n    if (proxy.parent.editorMode === 'HTML') {\n      this.selection.restore();\n    }\n\n    if (proxy.parent.formatter.getUndoRedoStack().length === 0) {\n      proxy.parent.formatter.saveData();\n    }\n\n    let argsValue;\n\n    if (!isNullOrUndefined(this.args) && this.args.code === 'KeyK') {\n      const originalEvent = this.args;\n      extend(this.args, {\n        item: {\n          command: 'Links',\n          subCommand: 'CreateLink'\n        },\n        originalEvent: originalEvent\n      }, true);\n      const argsVal = {\n        item: {\n          command: 'Links',\n          subCommand: 'CreateLink'\n        },\n        originalEvent: originalEvent\n      };\n      argsValue = argsVal;\n    } else {\n      argsValue = this.args;\n    }\n\n    this.selfLink.parent.formatter.process(this.selfLink.parent, argsValue, !isNullOrUndefined(this.args) && this.args.originalEvent, value);\n    this.selfLink.parent.contentModule.getEditPanel().focus();\n  }\n\n  isUrl(url) {\n    // eslint-disable-next-line\n    const regexp = /(ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?/gi;\n    return regexp.test(url);\n  }\n\n  checkUrl(e) {\n    const linkEle = this.dialogObj.element;\n    const linkUrl = linkEle.querySelector('.e-rte-linkurl');\n\n    if (e) {\n      addClass([linkUrl], 'e-error');\n      linkUrl.setSelectionRange(0, linkUrl.value.length);\n      linkUrl.focus();\n    } else {\n      removeClass([linkUrl], 'e-error');\n    }\n  }\n\n  removeLink(e) {\n    if (this.parent.formatter.getUndoRedoStack().length === 0) {\n      this.parent.formatter.saveData();\n    }\n\n    this.parent.formatter.process(this.parent, e.args, e.args, {\n      selectNode: e.selectNode,\n      selectParent: e.selectParent,\n      selection: e.selection,\n      subCommand: e.args.item.subCommand\n    });\n\n    if (isIDevice$1() && this.parent.iframeSettings.enable) {\n      select('iframe', this.parent.element).contentWindow.focus();\n    } else {\n      this.parent.contentModule.getEditPanel().focus();\n    }\n\n    this.hideLinkQuickToolbar();\n  }\n\n  openLink(e) {\n    const selectParentEle = this.getAnchorNode(e.selectParent[0]);\n\n    if (selectParentEle.classList.contains('e-rte-anchor') || selectParentEle.tagName === 'A') {\n      this.parent.formatter.process(this.parent, e.args, e.args, {\n        url: selectParentEle.href,\n        target: selectParentEle.target === '' ? '_self' : '_blank',\n        selectNode: e.selectNode,\n        subCommand: e.args.item.subCommand\n      });\n    }\n  }\n\n  getAnchorNode(element) {\n    const selectParent = closest(element, 'a');\n    return selectParent ? selectParent : element;\n  }\n\n  editLink(e) {\n    const selectedNode = this.getAnchorNode(e.selectNode[0]);\n    let selectParentEle = this.getAnchorNode(e.selectParent[0]);\n    selectParentEle = selectedNode.nodeName === 'A' ? selectedNode : selectParentEle;\n\n    if (selectParentEle.classList.contains('e-rte-anchor') || selectParentEle.tagName === 'A') {\n      const linkUpdate = this.i10n.getConstant('dialogUpdate');\n      const inputDetails = {\n        url: selectParentEle.getAttribute('href'),\n        text: selectParentEle.innerText,\n        title: selectParentEle.title,\n        target: selectParentEle.target,\n        header: this.i10n.getConstant('editLink'),\n        btnText: linkUpdate\n      };\n      this.linkDialog(e, inputDetails);\n    }\n  } // eslint-disable-next-line\n\n\n  cancelDialog(e) {\n    this.selfLink.parent.isBlur = false;\n    this.selfLink.dialogObj.hide({\n      returnValue: true\n    });\n\n    if (isIDevice$1()) {\n      this.selection.restore();\n    } else {\n      this.selfLink.parent.contentModule.getEditPanel().focus();\n    }\n  }\n\n  onDocumentClick(e) {\n    const target = e.target;\n\n    if (!isNullOrUndefined(this.dialogObj) && ( // eslint-disable-next-line\n    !closest(target, '[id=' + \"'\" + this.dialogObj.element.id + \"'\" + ']') && this.parent.toolbarSettings.enable && this.parent.getToolbarElement() && !this.parent.getToolbarElement().contains(e.target) || (this.parent.getToolbarElement() && this.parent.getToolbarElement().contains(e.target) || this.parent.inlineMode.enable && !closest(target, '#' + this.dialogObj.element.id)) && !closest(target, '#' + this.parent.getID() + '_toolbar_CreateLink') && !target.querySelector('#' + this.parent.getID() + '_toolbar_CreateLink'))) {\n      this.dialogObj.hide({\n        returnValue: true\n      });\n      EventHandler.remove(this.parent.element.ownerDocument, 'mousedown', this.onDocumentClick);\n      this.parent.isBlur = true;\n      dispatchEvent(this.parent.element, 'focusout');\n    }\n  }\n  /**\n   * Destroys the ToolBar.\n   *\n   * @function destroy\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  destroy() {\n    this.removeEventListener();\n  }\n  /**\n   * For internal use only - Get the module name.\n   *\n   * @returns {void}\n   */\n\n\n  getModuleName() {\n    return 'link';\n  }\n\n}\n/**\n * `Image` module is used to handle image actions.\n */\n\n\nclass Image {\n  constructor(parent, serviceLocator) {\n    this.isImgUploaded = false;\n    this.isAllowedTypes = true;\n    this.pageX = null;\n    this.pageY = null;\n    this.deletedImg = [];\n    this.parent = parent;\n    this.rteID = parent.element.id;\n    this.i10n = serviceLocator.getService('rteLocale');\n    this.rendererFactory = serviceLocator.getService('rendererFactory');\n    this.dialogRenderObj = serviceLocator.getService('dialogRenderObject');\n    this.addEventListener();\n  }\n\n  addEventListener() {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.on(keyDown, this.onKeyDown, this);\n    this.parent.on(keyUp, this.onKeyUp, this);\n    this.parent.on(insertImage, this.insertImage, this);\n    this.parent.on(showImageDialog, this.showDialog, this);\n    this.parent.on(closeImageDialog, this.closeDialog, this);\n    this.parent.on(windowResize, this.onWindowResize, this);\n    this.parent.on(insertCompleted, this.showImageQuickToolbar, this);\n    this.parent.on(clearDialogObj, this.clearDialogObj, this);\n    this.parent.on(imageToolbarAction, this.onToolbarAction, this);\n    this.parent.on(imageCaption, this.caption, this);\n    this.parent.on(imageDelete, this.deleteImg, this);\n    this.parent.on(imageLink, this.insertImgLink, this);\n    this.parent.on(imageAlt, this.insertAltText, this);\n    this.parent.on(editAreaClick, this.editAreaClickHandler, this);\n    this.parent.on(iframeMouseDown, this.onIframeMouseDown, this);\n    this.parent.on(imageSize, this.imageSize, this);\n    this.parent.on(dropDownSelect, this.alignmentSelect, this);\n    this.parent.on(initialEnd, this.afterRender, this);\n    this.parent.on(dynamicModule, this.afterRender, this);\n    this.parent.on(paste, this.imagePaste, this);\n    this.parent.on(destroy, this.removeEventListener, this);\n  }\n\n  removeEventListener() {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.off(keyDown, this.onKeyDown);\n    this.parent.off(keyUp, this.onKeyUp);\n    this.parent.off(windowResize, this.onWindowResize);\n    this.parent.off(insertImage, this.insertImage);\n    this.parent.off(showImageDialog, this.showDialog);\n    this.parent.off(closeImageDialog, this.closeDialog);\n    this.parent.off(insertCompleted, this.showImageQuickToolbar);\n    this.parent.off(clearDialogObj, this.clearDialogObj);\n    this.parent.off(imageCaption, this.caption);\n    this.parent.off(imageToolbarAction, this.onToolbarAction);\n    this.parent.off(imageDelete, this.deleteImg);\n    this.parent.off(imageLink, this.insertImgLink);\n    this.parent.off(imageAlt, this.insertAltText);\n    this.parent.off(editAreaClick, this.editAreaClickHandler);\n    this.parent.off(iframeMouseDown, this.onIframeMouseDown);\n    this.parent.off(imageSize, this.imageSize);\n    this.parent.off(dropDownSelect, this.alignmentSelect);\n    this.parent.off(initialEnd, this.afterRender);\n    this.parent.off(dynamicModule, this.afterRender);\n    this.parent.off(paste, this.imagePaste);\n    this.parent.off(destroy, this.removeEventListener);\n    const dropElement = this.parent.iframeSettings.enable ? this.parent.inputElement.ownerDocument : this.parent.inputElement;\n    dropElement.removeEventListener('drop', this.dragDrop.bind(this), true);\n    dropElement.removeEventListener('dragstart', this.dragStart.bind(this), true);\n    dropElement.removeEventListener('dragenter', this.dragEnter.bind(this), true);\n    dropElement.removeEventListener('dragover', this.dragOver.bind(this), true);\n\n    if (!isNullOrUndefined(this.contentModule)) {\n      EventHandler.remove(this.contentModule.getEditPanel(), Browser.touchEndEvent, this.imageClick);\n      this.parent.formatter.editorManager.observer.off(checkUndo, this.undoStack);\n\n      if (this.parent.insertImageSettings.resize) {\n        EventHandler.remove(this.parent.contentModule.getEditPanel(), Browser.touchStartEvent, this.resizeStart);\n        EventHandler.remove(this.parent.element.ownerDocument, 'mousedown', this.onDocumentClick);\n        EventHandler.remove(this.contentModule.getEditPanel(), 'cut', this.onCutHandler);\n      }\n    }\n  }\n\n  onIframeMouseDown() {\n    if (this.dialogObj) {\n      this.dialogObj.hide({\n        returnValue: true\n      });\n    }\n  }\n\n  afterRender() {\n    this.contentModule = this.rendererFactory.getRenderer(RenderType.Content);\n    EventHandler.add(this.contentModule.getEditPanel(), Browser.touchEndEvent, this.imageClick, this);\n\n    if (this.parent.insertImageSettings.resize) {\n      EventHandler.add(this.parent.contentModule.getEditPanel(), Browser.touchStartEvent, this.resizeStart, this);\n      EventHandler.add(this.parent.element.ownerDocument, 'mousedown', this.onDocumentClick, this);\n      EventHandler.add(this.contentModule.getEditPanel(), 'cut', this.onCutHandler, this);\n    }\n\n    const dropElement = this.parent.iframeSettings.enable ? this.parent.inputElement.ownerDocument : this.parent.inputElement;\n    dropElement.addEventListener('drop', this.dragDrop.bind(this), true);\n    dropElement.addEventListener('dragstart', this.dragStart.bind(this), true);\n    dropElement.addEventListener('dragenter', this.dragOver.bind(this), true);\n    dropElement.addEventListener('dragover', this.dragOver.bind(this), true);\n  }\n\n  undoStack(args) {\n    if (args.subCommand.toLowerCase() === 'undo' || args.subCommand.toLowerCase() === 'redo') {\n      for (let i = 0; i < this.parent.formatter.getUndoRedoStack().length; i++) {\n        const temp = this.parent.createElement('div');\n        const contentElem = parseHtml(this.parent.formatter.getUndoRedoStack()[i].text);\n        temp.appendChild(contentElem);\n        const img = temp.querySelectorAll('img');\n\n        if (temp.querySelector('.e-img-resize') && img.length > 0) {\n          for (let j = 0; j < img.length; j++) {\n            img[j].style.outline = '';\n          }\n\n          detach(temp.querySelector('.e-img-resize'));\n          this.parent.formatter.getUndoRedoStack()[i].text = temp.innerHTML;\n        }\n      }\n    }\n  }\n\n  resizeEnd(e) {\n    this.resizeBtnInit();\n    this.imgEle.parentElement.style.cursor = 'auto';\n\n    if (Browser.isDevice) {\n      removeClass([e.target.parentElement], 'e-mob-span');\n    }\n\n    const args = {\n      event: e,\n      requestType: 'images'\n    };\n    this.parent.trigger(resizeStop, args);\n    /* eslint-disable */\n\n    let pageX = this.getPointX(e);\n    let pageY = this.parent.iframeSettings.enable ? window.pageYOffset + this.parent.element.getBoundingClientRect().top + e.clientY : e.pageY;\n    /* eslint-enable */\n\n    this.parent.formatter.editorManager.observer.on(checkUndo, this.undoStack, this);\n    this.parent.formatter.saveData();\n  }\n\n  resizeStart(e, ele) {\n    if (this.parent.readonly) {\n      return;\n    }\n\n    const target = ele ? ele : e.target;\n    this.prevSelectedImgEle = this.imgEle;\n\n    if (target.tagName === 'IMG') {\n      this.parent.preventDefaultResize(e);\n      const img = target;\n\n      if (this.imgResizeDiv && this.contentModule.getEditPanel().contains(this.imgResizeDiv)) {\n        detach(this.imgResizeDiv);\n      }\n\n      this.imageResize(img);\n    }\n\n    if (target.classList.contains('e-rte-imageboxmark')) {\n      if (this.parent.formatter.getUndoRedoStack().length === 0) {\n        this.parent.formatter.saveData();\n      }\n\n      this.pageX = this.getPointX(e);\n      this.pageY = this.getPointY(e);\n      e.preventDefault();\n      e.stopImmediatePropagation();\n      this.resizeBtnInit();\n\n      if (this.quickToolObj) {\n        this.quickToolObj.imageQTBar.hidePopup();\n      }\n\n      if (target.classList.contains('e-rte-topLeft')) {\n        this.resizeBtnStat.topLeft = true;\n      }\n\n      if (target.classList.contains('e-rte-topRight')) {\n        this.resizeBtnStat.topRight = true;\n      }\n\n      if (target.classList.contains('e-rte-botLeft')) {\n        this.resizeBtnStat.botLeft = true;\n      }\n\n      if (target.classList.contains('e-rte-botRight')) {\n        this.resizeBtnStat.botRight = true;\n      }\n\n      if (Browser.isDevice && this.contentModule.getEditPanel().contains(this.imgResizeDiv) && !this.imgResizeDiv.classList.contains('e-mob-span')) {\n        addClass([this.imgResizeDiv], 'e-mob-span');\n      } else {\n        const args = {\n          event: e,\n          requestType: 'images'\n        };\n        this.parent.trigger(resizeStart, args, resizeStartArgs => {\n          if (resizeStartArgs.cancel) {\n            this.cancelResizeAction();\n          }\n        });\n      }\n\n      EventHandler.add(this.contentModule.getDocument(), Browser.touchEndEvent, this.resizeEnd, this);\n    }\n  }\n\n  imageClick(e) {\n    if (Browser.isDevice) {\n      if (e.target.tagName === 'IMG' && e.target.parentElement.tagName === 'A' || e.target.tagName === 'IMG') {\n        this.contentModule.getEditPanel().setAttribute('contenteditable', 'false');\n        e.target.focus();\n      } else {\n        if (!this.parent.readonly) {\n          this.contentModule.getEditPanel().setAttribute('contenteditable', 'true');\n        }\n      }\n    }\n\n    if (e.target.tagName === 'IMG' && e.target.parentElement.tagName === 'A') {\n      e.preventDefault();\n    }\n  }\n\n  onCutHandler() {\n    if (this.imgResizeDiv && this.contentModule.getEditPanel().contains(this.imgResizeDiv)) {\n      this.cancelResizeAction();\n    }\n  }\n\n  imageResize(e) {\n    this.resizeBtnInit();\n    this.imgEle = e;\n    addClass([this.imgEle], 'e-resize');\n    this.imgResizeDiv = this.parent.createElement('span', {\n      className: 'e-img-resize',\n      id: this.rteID + '_imgResize'\n    });\n    this.imgResizeDiv.appendChild(this.parent.createElement('span', {\n      className: 'e-rte-imageboxmark e-rte-topLeft',\n      styles: 'cursor: nwse-resize'\n    }));\n    this.imgResizeDiv.appendChild(this.parent.createElement('span', {\n      className: 'e-rte-imageboxmark e-rte-topRight',\n      styles: 'cursor: nesw-resize'\n    }));\n    this.imgResizeDiv.appendChild(this.parent.createElement('span', {\n      className: 'e-rte-imageboxmark e-rte-botLeft',\n      styles: 'cursor: nesw-resize'\n    }));\n    this.imgResizeDiv.appendChild(this.parent.createElement('span', {\n      className: 'e-rte-imageboxmark e-rte-botRight',\n      styles: 'cursor: nwse-resize'\n    }));\n\n    if (Browser.isDevice) {\n      addClass([this.imgResizeDiv], 'e-mob-rte');\n    }\n\n    e.style.outline = '2px solid #4a90e2';\n    this.imgResizePos(e, this.imgResizeDiv);\n    this.resizeImgDupPos(e);\n    this.contentModule.getEditPanel().appendChild(this.imgResizeDiv);\n    EventHandler.add(this.contentModule.getDocument(), Browser.touchMoveEvent, this.resizing, this);\n  }\n\n  getPointX(e) {\n    if (e.touches && e.touches.length) {\n      return e.touches[0].pageX;\n    } else {\n      return e.pageX;\n    }\n  }\n\n  getPointY(e) {\n    if (e.touches && e.touches.length) {\n      return e.touches[0].pageY;\n    } else {\n      return e.pageY;\n    }\n  }\n\n  imgResizePos(e, imgResizeDiv) {\n    const pos = this.calcPos(e);\n    const top = pos.top;\n    const left = pos.left;\n    const imgWid = e.width;\n    const imgHgt = e.height;\n    const borWid = Browser.isDevice ? 4 * parseInt(e.style.outline.slice(-3), 10) + 2 : 2 * parseInt(e.style.outline.slice(-3), 10) + 2; //span border width + image outline width\n\n    const devWid = Browser.isDevice ? 0 : 2; // span border width\n\n    imgResizeDiv.querySelector('.e-rte-botLeft').style.left = left - borWid + 'px';\n    imgResizeDiv.querySelector('.e-rte-botLeft').style.top = imgHgt - borWid + top + 'px';\n    imgResizeDiv.querySelector('.e-rte-botRight').style.left = imgWid - (borWid - devWid) + left + 'px';\n    imgResizeDiv.querySelector('.e-rte-botRight').style.top = imgHgt - borWid + top + 'px';\n    imgResizeDiv.querySelector('.e-rte-topRight').style.left = imgWid - (borWid - devWid) + left + 'px';\n    imgResizeDiv.querySelector('.e-rte-topRight').style.top = top - borWid + 'px';\n    imgResizeDiv.querySelector('.e-rte-topLeft').style.left = left - borWid + 'px';\n    imgResizeDiv.querySelector('.e-rte-topLeft').style.top = top - borWid + 'px';\n  }\n\n  calcPos(elem) {\n    const ignoreOffset = ['TD', 'TH', 'TABLE', 'A'];\n    let parentOffset = {\n      top: 0,\n      left: 0\n    };\n    const doc = elem.ownerDocument;\n    let offsetParent = (elem.offsetParent && (elem.offsetParent.classList.contains('e-img-caption') || ignoreOffset.indexOf(elem.offsetParent.tagName) > -1) ? closest(elem, '#' + this.parent.getID() + '_rte-edit-view') : elem.offsetParent) || doc.documentElement;\n\n    while (offsetParent && (offsetParent === doc.body || offsetParent === doc.documentElement) && offsetParent.style.position === 'static') {\n      offsetParent = offsetParent.parentNode;\n    }\n\n    if (offsetParent && offsetParent !== elem && offsetParent.nodeType === 1) {\n      // eslint-disable-next-line\n      parentOffset = offsetParent.getBoundingClientRect();\n    }\n\n    return {\n      top: elem.offsetTop,\n      left: elem.offsetLeft\n    };\n  }\n\n  setAspectRatio(img, expectedX, expectedY) {\n    if (isNullOrUndefined(img.width)) {\n      return;\n    }\n\n    const width = img.style.width !== '' ? img.style.width.match(/^\\d+(\\.\\d*)?%$/g) ? parseFloat(img.style.width) : parseInt(img.style.width, 10) : img.width;\n    const height = img.style.height !== '' ? parseInt(img.style.height, 10) : img.height;\n\n    if (width > height) {\n      img.style.minWidth = '20px';\n\n      if (this.parent.insertImageSettings.resizeByPercent) {\n        if (parseInt('' + img.getBoundingClientRect().width + '', 10) !== 0 && parseInt('' + width + '', 10) !== 0) {\n          const percentageValue = this.pixToPerc(width / height * expectedY, img.previousElementSibling || img.parentElement);\n          img.style.width = Math.min(Math.round(percentageValue / img.getBoundingClientRect().width * expectedX * 100) / 100, 100) + '%';\n        } else {\n          img.style.width = this.pixToPerc(width / height * expectedY, img.previousElementSibling || img.parentElement) + '%';\n        }\n\n        img.style.height = null;\n        img.removeAttribute('height');\n      } else if (img.style.width === '' && img.style.height !== '') {\n        img.style.height = expectedY + 'px';\n      } else if (img.style.width !== '' && img.style.height === '') {\n        let currentWidth = width / height * expectedY + width / height < this.parent.inputElement.getBoundingClientRect().right - 32 ? width / height * expectedY + width / height : this.parent.inputElement.getBoundingClientRect().right - 32;\n        img.style.width = currentWidth.toString() + 'px';\n      } else if (img.style.width !== '') {\n        let currentWidth = width / height * expectedY < this.parent.inputElement.getBoundingClientRect().right - 32 ? width / height * expectedY : this.parent.inputElement.getBoundingClientRect().right - 32;\n        img.style.width = currentWidth + 'px';\n        img.style.height = expectedY + 'px';\n      } else {\n        img.setAttribute('width', (width / height * expectedY + width / height).toString());\n      }\n    } else if (height > width) {\n      if (this.parent.insertImageSettings.resizeByPercent) {\n        if (parseInt('' + img.getBoundingClientRect().width + '', 10) !== 0 && parseInt('' + width + '', 10) !== 0) {\n          img.style.width = Math.min(Math.round(width / img.getBoundingClientRect().width * expectedX * 100) / 100, 100) + '%';\n        } else {\n          img.style.width = this.pixToPerc(expectedX / height * expectedY, img.previousElementSibling || img.parentElement) + '%';\n        }\n\n        img.style.height = null;\n        img.removeAttribute('height');\n      } else if (img.style.width !== '') {\n        img.style.width = expectedX + 'px';\n        img.style.height = height / width * expectedX + 'px';\n      } else {\n        img.setAttribute('width', expectedX.toString());\n      }\n    } else {\n      if (this.parent.insertImageSettings.resizeByPercent) {\n        img.style.width = this.pixToPerc(expectedX, img.previousElementSibling || img.parentElement) + '%';\n        img.style.height = null;\n        img.removeAttribute('height');\n      } else if (img.style.width !== '') {\n        img.style.width = expectedX + 'px';\n        img.style.height = expectedX + 'px';\n      } else {\n        img.setAttribute('width', expectedX.toString());\n        img.setAttribute('height', expectedX.toString());\n      }\n    }\n  }\n\n  pixToPerc(expected, parentEle) {\n    return expected / parseFloat(getComputedStyle(parentEle).width) * 100;\n  }\n\n  imgDupMouseMove(width, height, e) {\n    const args = {\n      event: e,\n      requestType: 'images'\n    };\n    this.parent.trigger(onResize, args, resizingArgs => {\n      if (resizingArgs.cancel) {\n        this.cancelResizeAction();\n      } else {\n        if (parseInt(this.parent.insertImageSettings.minWidth, 10) >= parseInt(width, 10) || parseInt(this.parent.getInsertImgMaxWidth(), 10) <= parseInt(width, 10) && isNullOrUndefined(this.imgEle.style.width)) {\n          return;\n        }\n\n        if (!this.parent.insertImageSettings.resizeByPercent && (parseInt(this.parent.insertImageSettings.minHeight, 10) >= parseInt(height, 10) || parseInt(this.parent.insertImageSettings.maxHeight, 10) <= parseInt(height, 10))) {\n          return;\n        }\n\n        this.imgEle.parentElement.style.cursor = 'pointer';\n        this.setAspectRatio(this.imgEle, parseInt(width, 10), parseInt(height, 10));\n        this.resizeImgDupPos(this.imgEle);\n        this.imgResizePos(this.imgEle, this.imgResizeDiv);\n        this.parent.setContentHeight('', false);\n      }\n    });\n  }\n\n  resizing(e) {\n    if (this.imgEle.offsetWidth >= this.parent.getInsertImgMaxWidth()) {\n      this.imgEle.style.maxHeight = this.imgEle.offsetHeight + 'px';\n    }\n\n    const pageX = this.getPointX(e);\n    const pageY = this.getPointY(e);\n    const mouseX = this.resizeBtnStat.botLeft || this.resizeBtnStat.topLeft ? -(pageX - this.pageX) : pageX - this.pageX;\n    const mouseY = this.resizeBtnStat.topLeft || this.resizeBtnStat.topRight ? -(pageY - this.pageY) : pageY - this.pageY;\n    const width = parseInt(this.imgDupPos.width, 10) + mouseX;\n    const height = parseInt(this.imgDupPos.height, 10) + mouseY;\n    this.pageX = pageX;\n    this.pageY = pageY;\n\n    if (this.resizeBtnStat.botRight) {\n      this.imgDupMouseMove(width + 'px', height + 'px', e);\n    } else if (this.resizeBtnStat.botLeft) {\n      this.imgDupMouseMove(width + 'px', height + 'px', e);\n    } else if (this.resizeBtnStat.topRight) {\n      this.imgDupMouseMove(width + 'px', height + 'px', e);\n    } else if (this.resizeBtnStat.topLeft) {\n      this.imgDupMouseMove(width + 'px', height + 'px', e);\n    }\n  }\n\n  cancelResizeAction() {\n    EventHandler.remove(this.contentModule.getDocument(), Browser.touchMoveEvent, this.resizing);\n    EventHandler.remove(this.contentModule.getDocument(), Browser.touchEndEvent, this.resizeEnd);\n\n    if (this.imgEle && this.imgResizeDiv && this.contentModule.getEditPanel().contains(this.imgResizeDiv)) {\n      detach(this.imgResizeDiv);\n      this.imgEle.style.outline = '';\n      this.imgResizeDiv = null;\n      this.pageX = null;\n      this.pageY = null;\n    }\n  }\n\n  resizeImgDupPos(e) {\n    this.imgDupPos = {\n      width: e.style.width !== '' ? this.imgEle.style.width : e.width + 'px',\n      height: e.style.height !== '' ? this.imgEle.style.height : e.height + 'px'\n    };\n  }\n\n  resizeBtnInit() {\n    return this.resizeBtnStat = {\n      botLeft: false,\n      botRight: false,\n      topRight: false,\n      topLeft: false\n    };\n  }\n\n  onToolbarAction(args) {\n    if (isIDevice$1()) {\n      this.parent.notify(selectionRestore, {});\n    }\n\n    const item = args.args.item;\n\n    switch (item.subCommand) {\n      case 'Replace':\n        if (this.parent.fileManagerSettings.enable) {\n          this.parent.notify(renderFileManager, args);\n        } else {\n          this.parent.notify(insertImage, args);\n        }\n\n        break;\n\n      case 'Caption':\n        this.parent.notify(imageCaption, args);\n        break;\n\n      case 'InsertLink':\n        this.parent.notify(imageLink, args);\n        break;\n\n      case 'AltText':\n        this.parent.notify(imageAlt, args);\n        break;\n\n      case 'Remove':\n        this.parent.notify(imageDelete, args);\n        break;\n\n      case 'Dimension':\n        this.parent.notify(imageSize, args);\n        break;\n\n      case 'OpenImageLink':\n        this.openImgLink(args);\n        break;\n\n      case 'EditImageLink':\n        this.editImgLink(args);\n        break;\n\n      case 'RemoveImageLink':\n        this.removeImgLink(args);\n        break;\n    }\n  }\n\n  openImgLink(e) {\n    const target = e.selectParent[0].parentNode.target === '' ? '_self' : '_blank';\n    this.parent.formatter.process(this.parent, e.args, e.args, {\n      url: e.selectParent[0].parentNode.href,\n      target: target,\n      selectNode: e.selectNode,\n      subCommand: e.args.item.subCommand\n    });\n  }\n\n  editImgLink(e) {\n    const selectParentEle = e.selectParent[0].parentNode;\n    const linkUpdate = this.i10n.getConstant('dialogUpdate');\n    const inputDetails = {\n      url: selectParentEle.href,\n      target: selectParentEle.target,\n      header: 'Edit Link',\n      btnText: linkUpdate\n    };\n    this.insertImgLink(e, inputDetails);\n  }\n\n  removeImgLink(e) {\n    if (Browser.isIE) {\n      this.contentModule.getEditPanel().focus();\n    }\n\n    e.selection.restore();\n    const isCapLink = this.contentModule.getEditPanel().contains(this.captionEle) && select('a', this.captionEle) ? true : false;\n    const selectParent = isCapLink ? [this.captionEle] : [e.selectNode[0].parentElement];\n    this.parent.formatter.process(this.parent, e.args, e.args, {\n      insertElement: e.selectNode[0],\n      selectParent: selectParent,\n      selection: e.selection,\n      subCommand: e.args.item.subCommand\n    });\n\n    if (this.quickToolObj && document.body.contains(this.quickToolObj.imageQTBar.element)) {\n      this.quickToolObj.imageQTBar.hidePopup();\n\n      if (!isNullOrUndefined(e.selectParent)) {\n        removeClass([e.selectParent[0]], 'e-img-focus');\n      }\n    }\n\n    if (isCapLink) {\n      select('.e-img-inner', this.captionEle).focus();\n    }\n  }\n\n  onKeyDown(event) {\n    const originalEvent = event.args;\n    let range;\n    let save;\n    let selectNodeEle;\n    let selectParentEle;\n    this.deletedImg = [];\n    let isCursor;\n    const keyCodeValues = [27, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 44, 45, 9, 16, 17, 18, 19, 20, 33, 34, 35, 36, 37, 38, 39, 40, 91, 92, 93, 144, 145, 182, 183];\n\n    if (this.parent.editorMode === 'HTML') {\n      range = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.contentModule.getDocument());\n      isCursor = range.startContainer === range.endContainer && range.startOffset === range.endOffset;\n    }\n\n    if (!isCursor && this.parent.editorMode === 'HTML' && keyCodeValues.indexOf(originalEvent.which) < 0) {\n      const nodes = this.parent.formatter.editorManager.nodeSelection.getNodeCollection(range);\n\n      for (let i = 0; i < nodes.length; i++) {\n        if (nodes[i].nodeName === 'IMG') {\n          this.deletedImg.push(nodes[i]);\n        }\n      }\n    }\n\n    if (this.parent.editorMode === 'HTML' && (originalEvent.which === 8 && originalEvent.code === 'Backspace' || originalEvent.which === 46 && originalEvent.code === 'Delete')) {\n      const isCursor = range.startContainer === range.endContainer && range.startOffset === range.endOffset;\n\n      if (originalEvent.which === 8 && originalEvent.code === 'Backspace' && isCursor) {\n        this.checkImageBack(range);\n      } else if (originalEvent.which === 46 && originalEvent.code === 'Delete' && isCursor) {\n        this.checkImageDel(range);\n      }\n    }\n\n    if (!isNullOrUndefined(this.parent.formatter.editorManager.nodeSelection) && originalEvent.code !== 'KeyK') {\n      range = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.contentModule.getDocument());\n      save = this.parent.formatter.editorManager.nodeSelection.save(range, this.parent.contentModule.getDocument());\n      selectNodeEle = this.parent.formatter.editorManager.nodeSelection.getNodeCollection(range);\n      selectParentEle = this.parent.formatter.editorManager.nodeSelection.getParentNodeCollection(range);\n\n      if (!originalEvent.ctrlKey && originalEvent.key && (originalEvent.key.length === 1 || originalEvent.action === 'enter') && selectParentEle[0].tagName === 'IMG' && selectParentEle[0].parentElement) {\n        const prev = selectParentEle[0].parentElement.childNodes[0];\n\n        if (this.contentModule.getEditPanel().querySelector('.e-img-resize')) {\n          this.removeResizeEle();\n        }\n\n        this.parent.formatter.editorManager.nodeSelection.setSelectionText(this.contentModule.getDocument(), prev, prev, prev.textContent.length, prev.textContent.length);\n        removeClass([selectParentEle[0]], 'e-img-focus');\n        this.quickToolObj.imageQTBar.hidePopup();\n      }\n    }\n\n    if (originalEvent.ctrlKey && (originalEvent.keyCode === 89 || originalEvent.keyCode === 90)) {\n      this.undoStack({\n        subCommand: originalEvent.keyCode === 90 ? 'undo' : 'redo'\n      });\n    }\n\n    if (originalEvent.keyCode === 8 || originalEvent.keyCode === 46) {\n      if (selectNodeEle && selectNodeEle[0].nodeName === 'IMG' && selectNodeEle.length < 1) {\n        originalEvent.preventDefault();\n        const event = {\n          selectNode: selectNodeEle,\n          selection: save,\n          selectParent: selectParentEle,\n          args: {\n            item: {\n              command: 'Images',\n              subCommand: 'Remove'\n            },\n            originalEvent: originalEvent\n          }\n        };\n        this.deleteImg(event, originalEvent.keyCode);\n      }\n\n      if (this.parent.contentModule.getEditPanel().querySelector('.e-img-resize')) {\n        this.removeResizeEle();\n      }\n    }\n\n    if (originalEvent.code === 'Backspace') {\n      originalEvent.action = 'backspace';\n    }\n\n    switch (originalEvent.action) {\n      case 'escape':\n        if (!isNullOrUndefined(this.dialogObj)) {\n          this.dialogObj.close();\n        }\n\n        break;\n\n      case 'backspace':\n      case 'delete':\n        for (let i = 0; i < this.deletedImg.length; i++) {\n          const src = this.deletedImg[i].src;\n          this.imageRemovePost(src);\n        }\n\n        if (range.startContainer.nodeType === 3) {\n          if (originalEvent.code === 'Backspace') {\n            if (range.startContainer.previousElementSibling && range.startOffset === 0 && range.startContainer.previousElementSibling.classList.contains(CLS_CAPTION) && range.startContainer.previousElementSibling.classList.contains(CLS_CAPINLINE)) {\n              detach(range.startContainer.previousElementSibling);\n            }\n          } else {\n            if (range.startContainer.nextElementSibling && range.endContainer.textContent.length === range.endOffset && range.startContainer.nextElementSibling.classList.contains(CLS_CAPTION) && range.startContainer.nextElementSibling.classList.contains(CLS_CAPINLINE)) {\n              detach(range.startContainer.nextElementSibling);\n            }\n          }\n        } else if (range.startContainer.nodeType === 1 && range.startContainer.querySelector('.' + CLS_CAPTION + '.' + CLS_CAPINLINE)) {\n          detach(range.startContainer.querySelector('.' + CLS_CAPTION + '.' + CLS_CAPINLINE));\n        }\n\n        break;\n\n      case 'insert-image':\n        this.openDialog(true, originalEvent, save, selectNodeEle, selectParentEle);\n        originalEvent.preventDefault();\n        break;\n    }\n  }\n\n  openDialog(isInternal, event, selection, ele, parentEle) {\n    let range;\n    let save;\n    let selectNodeEle;\n    let selectParentEle;\n\n    if (!isInternal && !isNullOrUndefined(this.parent.formatter.editorManager.nodeSelection)) {\n      range = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.contentModule.getDocument());\n      save = this.parent.formatter.editorManager.nodeSelection.save(range, this.parent.contentModule.getDocument());\n      selectNodeEle = this.parent.formatter.editorManager.nodeSelection.getNodeCollection(range);\n      selectParentEle = this.parent.formatter.editorManager.nodeSelection.getParentNodeCollection(range);\n    } else {\n      save = selection;\n      selectNodeEle = ele;\n      selectParentEle = parentEle;\n    }\n\n    if (this.parent.editorMode === 'HTML') {\n      this.insertImage({\n        args: {\n          item: {\n            command: 'Images',\n            subCommand: 'Image'\n          },\n          originalEvent: event\n        },\n        selectNode: selectNodeEle,\n        selection: save,\n        selectParent: selectParentEle\n      });\n    } else {\n      this.insertImage({\n        args: {\n          item: {\n            command: 'Images',\n            subCommand: 'Image'\n          },\n          originalEvent: event\n        },\n        member: 'image',\n        text: this.parent.formatter.editorManager.markdownSelection.getSelectedText(this.parent.contentModule.getEditPanel()),\n        module: 'Markdown',\n        name: 'insertImage'\n      });\n    }\n  }\n\n  showDialog() {\n    this.openDialog(false);\n  }\n\n  closeDialog() {\n    if (this.dialogObj) {\n      this.dialogObj.hide({\n        returnValue: true\n      });\n    }\n  } // eslint-disable-next-line\n\n\n  onKeyUp(event) {\n    if (!isNullOrUndefined(this.deletedImg) && this.deletedImg.length > 0) {\n      for (let i = 0; i < this.deletedImg.length; i++) {\n        const args = {\n          element: this.deletedImg[i],\n          src: this.deletedImg[i].getAttribute('src')\n        };\n        this.parent.trigger(afterImageDelete, args);\n      }\n    }\n  }\n\n  checkImageBack(range) {\n    if (range.startContainer.nodeName === '#text' && range.startOffset === 0 && !isNullOrUndefined(range.startContainer.previousSibling) && range.startContainer.previousSibling.nodeName === 'IMG') {\n      this.deletedImg.push(range.startContainer.previousSibling);\n    } else if (range.startContainer.nodeName !== '#text' && !isNullOrUndefined(range.startContainer.childNodes[range.startOffset - 1]) && range.startContainer.childNodes[range.startOffset - 1].nodeName === 'IMG') {\n      this.deletedImg.push(range.startContainer.childNodes[range.startOffset - 1]);\n    }\n  }\n\n  checkImageDel(range) {\n    if (range.startContainer.nodeName === '#text' && range.startOffset === range.startContainer.textContent.length && !isNullOrUndefined(range.startContainer.nextSibling) && range.startContainer.nextSibling.nodeName === 'IMG') {\n      this.deletedImg.push(range.startContainer.nextSibling);\n    } else if (range.startContainer.nodeName !== '#text' && !isNullOrUndefined(range.startContainer.childNodes[range.startOffset]) && range.startContainer.childNodes[range.startOffset].nodeName === 'IMG') {\n      this.deletedImg.push(range.startContainer.childNodes[range.startOffset]);\n    }\n  }\n\n  alignmentSelect(e) {\n    const item = e.item;\n\n    if (!document.body.contains(document.body.querySelector('.e-rte-quick-toolbar')) || item.command !== 'Images') {\n      return;\n    }\n\n    const range = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.contentModule.getDocument());\n    let selectNodeEle = this.parent.formatter.editorManager.nodeSelection.getNodeCollection(range);\n    selectNodeEle = selectNodeEle[0].nodeName === 'IMG' ? selectNodeEle : [this.imgEle];\n    const args = {\n      args: e,\n      selectNode: selectNodeEle\n    };\n\n    if (this.parent.formatter.getUndoRedoStack().length === 0) {\n      this.parent.formatter.saveData();\n    }\n\n    switch (item.subCommand) {\n      case 'JustifyLeft':\n        this.alignImage(args, 'JustifyLeft');\n        break;\n\n      case 'JustifyCenter':\n        this.alignImage(args, 'JustifyCenter');\n        break;\n\n      case 'JustifyRight':\n        this.alignImage(args, 'JustifyRight');\n        break;\n\n      case 'Inline':\n        this.inline(args);\n        break;\n\n      case 'Break':\n        this.break(args);\n        break;\n    }\n\n    if (this.quickToolObj && document.body.contains(this.quickToolObj.imageQTBar.element)) {\n      this.quickToolObj.imageQTBar.hidePopup();\n      removeClass([selectNodeEle[0]], 'e-img-focus');\n    }\n\n    this.cancelResizeAction();\n  }\n\n  imageWithLinkQTBarItemUpdate() {\n    let separator;\n    const items = this.quickToolObj.imageQTBar.toolbarElement.querySelectorAll('.e-toolbar-item');\n\n    for (let i = 0; i < items.length; i++) {\n      if (items[i].getAttribute('title') === this.i10n.getConstant('openLink') || items[i].getAttribute('title') === this.i10n.getConstant('editLink') || items[i].getAttribute('title') === this.i10n.getConstant('removeLink')) {\n        addClass([items[i]], 'e-link-groups');\n        items[i].style.display = 'none';\n      } else if (items[i].getAttribute('title') === 'Insert Link') {\n        items[i].style.display = '';\n      } else if (items[i].classList.contains('e-rte-horizontal-separator')) {\n        // eslint-disable-next-line\n        separator = items[i];\n        detach(items[i]);\n      }\n    }\n\n    const newItems = this.quickToolObj.imageQTBar.toolbarElement.querySelectorAll('.e-toolbar-item:not(.e-link-groups)');\n    this.quickToolObj.imageQTBar.addQTBarItem(['-'], Math.round(newItems.length / 2));\n  }\n\n  showImageQuickToolbar(e) {\n    if (e.type !== 'Images' || isNullOrUndefined(this.parent.quickToolbarModule) || isNullOrUndefined(this.parent.quickToolbarModule.imageQTBar) || isNullOrUndefined(e.args)) {\n      return;\n    }\n\n    this.quickToolObj = this.parent.quickToolbarModule;\n    const args = e.args;\n    let target = e.elements;\n    [].forEach.call(e.elements, (element, index) => {\n      if (index === 0) {\n        target = element;\n      }\n    });\n\n    if (target && !closest(target, 'a')) {\n      this.imageWithLinkQTBarItemUpdate();\n    }\n\n    if (target.nodeName === 'IMG') {\n      addClass([target], ['e-img-focus']);\n    }\n\n    const pageY = this.parent.iframeSettings.enable ? window.pageYOffset + this.parent.element.getBoundingClientRect().top + args.clientY : args.pageY;\n\n    if (this.parent.quickToolbarModule.imageQTBar) {\n      if (e.isNotify) {\n        setTimeout(() => {\n          this.quickToolObj.imageQTBar.showPopup(args.pageX, pageY, target);\n        }, 400);\n      } else {\n        this.quickToolObj.imageQTBar.showPopup(args.pageX, pageY, target);\n      }\n    }\n  }\n\n  hideImageQuickToolbar() {\n    if (!isNullOrUndefined(this.contentModule.getEditPanel().querySelector('.e-img-focus'))) {\n      removeClass([this.contentModule.getEditPanel().querySelector('.e-img-focus')], 'e-img-focus');\n\n      if (this.quickToolObj && this.quickToolObj.imageQTBar && document.body.contains(this.quickToolObj.imageQTBar.element)) {\n        this.quickToolObj.imageQTBar.hidePopup();\n      }\n    }\n  }\n\n  editAreaClickHandler(e) {\n    if (this.parent.readonly) {\n      this.hideImageQuickToolbar();\n      return;\n    }\n\n    const args = e.args;\n    const showOnRightClick = this.parent.quickToolbarSettings.showOnRightClick;\n\n    if (args.which === 2 || showOnRightClick && args.which === 1 || !showOnRightClick && args.which === 3) {\n      if (showOnRightClick && args.which === 1 && !isNullOrUndefined(args.target) && args.target.tagName === 'IMG') {\n        this.parent.formatter.editorManager.nodeSelection.Clear(this.contentModule.getDocument());\n        this.parent.formatter.editorManager.nodeSelection.setSelectionContents(this.contentModule.getDocument(), args.target);\n      }\n\n      return;\n    }\n\n    if (this.parent.editorMode === 'HTML' && this.parent.quickToolbarModule && this.parent.quickToolbarModule.imageQTBar) {\n      this.quickToolObj = this.parent.quickToolbarModule;\n      const target = args.target;\n      this.contentModule = this.rendererFactory.getRenderer(RenderType.Content);\n      const isPopupOpen = this.quickToolObj.imageQTBar.element.classList.contains('e-rte-pop');\n\n      if (target.nodeName === 'IMG' && this.parent.quickToolbarModule) {\n        if (isPopupOpen) {\n          return;\n        }\n\n        this.parent.formatter.editorManager.nodeSelection.Clear(this.contentModule.getDocument());\n        this.parent.formatter.editorManager.nodeSelection.setSelectionContents(this.contentModule.getDocument(), target);\n\n        if (isIDevice$1()) {\n          this.parent.notify(selectionSave, e);\n        }\n\n        addClass([target], 'e-img-focus');\n        const items = this.quickToolObj.imageQTBar.toolbarElement.querySelectorAll('.e-toolbar-item');\n        let separator;\n\n        if (closest(target, 'a')) {\n          for (let i = 0; i < items.length; i++) {\n            if (items[i].getAttribute('title') === this.i10n.getConstant('openLink') || items[i].getAttribute('title') === this.i10n.getConstant('editLink') || items[i].getAttribute('title') === this.i10n.getConstant('removeLink')) {\n              items[i].style.display = '';\n              removeClass([items[i]], 'e-link-groups');\n            } else if (items[i].getAttribute('title') === 'Insert Link') {\n              items[i].style.display = 'none';\n            } else if (items[i].classList.contains('e-rte-horizontal-separator')) {\n              // eslint-disable-next-line\n              separator = items[i];\n              detach(items[i]);\n            }\n          }\n\n          const newItems = this.quickToolObj.imageQTBar.toolbarElement.querySelectorAll('.e-toolbar-item:not(.e-link-groups)');\n          this.quickToolObj.imageQTBar.addQTBarItem(['-'], Math.round(newItems.length / 2));\n        } else if (!closest(target, 'a')) {\n          this.imageWithLinkQTBarItemUpdate();\n        }\n\n        this.showImageQuickToolbar({\n          args: args,\n          type: 'Images',\n          elements: [args.target]\n        });\n      } else {\n        this.hideImageQuickToolbar();\n      }\n    }\n  }\n\n  insertImgLink(e, inputDetails) {\n    if (e.selectNode[0].nodeName !== 'IMG') {\n      return;\n    }\n\n    this.imagDialog(e);\n\n    if (!isNullOrUndefined(this.dialogObj)) {\n      const linkWrap = this.parent.createElement('div', {\n        className: 'e-img-linkwrap'\n      });\n      const linkUrl = this.i10n.getConstant('linkurl');\n      const content = '<div class=\"e-rte-field\">' + '<input type=\"text\" data-role =\"none\" class=\"e-input e-img-link\" spellcheck=\"false\" placeholder=\"' + linkUrl + '\"/></div>' + '<div class=\"e-rte-label\"></div>' + '<div class=\"e-rte-field\">' + '<input type=\"checkbox\" class=\"e-rte-linkTarget\"  data-role =\"none\"></div>';\n      const contentElem = parseHtml(content);\n      linkWrap.appendChild(contentElem);\n      const linkTarget = linkWrap.querySelector('.e-rte-linkTarget');\n      const inputLink = linkWrap.querySelector('.e-img-link');\n      const linkOpenLabel = this.i10n.getConstant('linkOpenInNewWindow');\n      this.checkBoxObj = new CheckBox({\n        label: linkOpenLabel,\n        checked: true,\n        enableRtl: this.parent.enableRtl,\n        change: e => {\n          if (e.checked) {\n            target = '_blank';\n          } else {\n            target = null;\n          }\n        }\n      });\n      this.checkBoxObj.isStringTemplate = true;\n      this.checkBoxObj.createElement = this.parent.createElement;\n      this.checkBoxObj.appendTo(linkTarget);\n      let target = this.checkBoxObj.checked ? '_blank' : null;\n      const linkUpdate = this.i10n.getConstant('dialogUpdate');\n      const linkargs = {\n        args: e.args,\n        selfImage: this,\n        selection: e.selection,\n        selectNode: e.selectNode,\n        selectParent: e.selectParent,\n        link: inputLink,\n        target: target\n      };\n      this.dialogObj.setProperties({\n        height: 'inherit',\n        width: '290px',\n        header: this.parent.localeObj.getConstant('imageInsertLinkHeader'),\n        content: linkWrap,\n        position: {\n          X: 'center',\n          Y: 'center'\n        },\n        buttons: [{\n          // eslint-disable-next-line\n          click: e => {\n            this.insertlink(linkargs);\n          },\n          buttonModel: {\n            content: linkUpdate,\n            cssClass: 'e-flat e-update-link',\n            isPrimary: true\n          }\n        }]\n      });\n\n      if (!isNullOrUndefined(inputDetails)) {\n        inputLink.value = inputDetails.url; // eslint-disable-next-line\n\n        inputDetails.target ? this.checkBoxObj.checked = true : this.checkBoxObj.checked = false;\n        this.dialogObj.header = inputDetails.header;\n      }\n\n      this.dialogObj.element.style.maxHeight = 'inherit';\n      this.dialogObj.content.querySelector('input').focus();\n    }\n  }\n\n  insertAltText(e) {\n    if (e.selectNode[0].nodeName !== 'IMG') {\n      return;\n    }\n\n    this.imagDialog(e);\n    const altText = this.i10n.getConstant('altText');\n\n    if (!isNullOrUndefined(this.dialogObj)) {\n      const altWrap = this.parent.createElement('div', {\n        className: 'e-img-altwrap'\n      });\n      const altHeader = this.i10n.getConstant('alternateHeader');\n      const linkUpdate = this.i10n.getConstant('dialogUpdate');\n      const getAlt = e.selectNode[0].getAttribute('alt') === null ? '' : e.selectNode[0].getAttribute('alt');\n      const content = '<div class=\"e-rte-field\">' + '<input type=\"text\" spellcheck=\"false\" value=\"' + getAlt + '\" class=\"e-input e-img-alt\" placeholder=\"' + altText + '\"/>' + '</div>';\n      const contentElem = parseHtml(content);\n      altWrap.appendChild(contentElem);\n      const inputAlt = altWrap.querySelector('.e-img-alt');\n      const altArgs = {\n        args: e.args,\n        selfImage: this,\n        selection: e.selection,\n        selectNode: e.selectNode,\n        alt: inputAlt\n      };\n      this.dialogObj.setProperties({\n        height: 'inherit',\n        width: '290px',\n        header: altHeader,\n        content: altWrap,\n        position: {\n          X: 'center',\n          Y: 'center'\n        },\n        buttons: [{\n          // eslint-disable-next-line\n          click: e => {\n            this.insertAlt(altArgs);\n          },\n          buttonModel: {\n            content: linkUpdate,\n            cssClass: 'e-flat e-update-alt',\n            isPrimary: true\n          }\n        }]\n      });\n      this.dialogObj.element.style.maxHeight = 'inherit';\n      this.dialogObj.content.querySelector('input').focus();\n    }\n  }\n\n  insertAlt(e) {\n    if (!isNullOrUndefined(e.alt)) {\n      e.selection.restore();\n\n      if (this.parent.formatter.getUndoRedoStack().length === 0) {\n        this.parent.formatter.saveData();\n      }\n\n      const altText = e.alt.value;\n      this.parent.formatter.process(this.parent, e.args, e.args, {\n        altText: altText,\n        selectNode: e.selectNode,\n        subCommand: e.args.item.subCommand\n      });\n      this.dialogObj.hide({\n        returnValue: false\n      });\n    }\n  }\n\n  insertlink(e) {\n    if (e.selectNode[0].nodeName !== 'IMG') {\n      return;\n    }\n\n    let url = e.link.value;\n\n    if (url === '') {\n      addClass([e.link], 'e-error');\n      e.link.setSelectionRange(0, url.length);\n      e.link.focus();\n      return;\n    }\n\n    if (!this.isUrl(url)) {\n      url = 'http://' + url;\n    } else {\n      removeClass([e.link], 'e-error');\n    }\n\n    const proxy = e.selfImage;\n\n    if (proxy.parent.editorMode === 'HTML') {\n      e.selection.restore();\n    }\n\n    if (proxy.parent.formatter.getUndoRedoStack().length === 0) {\n      proxy.parent.formatter.saveData();\n    }\n\n    if (e.selectNode[0].parentElement.nodeName === 'A') {\n      proxy.parent.formatter.process(proxy.parent, e.args, e.args, {\n        url: url,\n        target: proxy.checkBoxObj.checked ? '_blank' : null,\n        selectNode: e.selectNode,\n        subCommand: e.args.item.subCommand\n      });\n      proxy.dialogObj.hide({\n        returnValue: true\n      });\n      return;\n    }\n\n    proxy.parent.formatter.process(proxy.parent, e.args, e.args, {\n      url: url,\n      target: proxy.checkBoxObj.checked ? '_blank' : null,\n      selectNode: e.selectNode,\n      subCommand: e.args.item.subCommand,\n      selection: e.selection\n    });\n    const captionEle = closest(e.selectNode[0], '.e-img-caption');\n\n    if (captionEle) {\n      select('.e-img-inner', captionEle).focus();\n    }\n\n    if (captionEle) {\n      select('.e-img-inner', captionEle).focus();\n    }\n\n    proxy.dialogObj.hide({\n      returnValue: false\n    });\n  }\n\n  isUrl(url) {\n    // eslint-disable-next-line\n    const regexp = /(ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?/gi;\n    return regexp.test(url);\n  }\n\n  deleteImg(e, keyCode) {\n    if (e.selectNode[0].nodeName !== 'IMG') {\n      return;\n    }\n\n    const args = {\n      element: e.selectNode[0],\n      src: e.selectNode[0].getAttribute('src')\n    };\n\n    if (this.parent.formatter.getUndoRedoStack().length === 0) {\n      this.parent.formatter.saveData();\n    }\n\n    e.selection.restore();\n\n    if (this.contentModule.getEditPanel().querySelector('.e-img-resize')) {\n      this.removeResizeEle();\n    }\n\n    this.parent.formatter.process(this.parent, e.args, e.args, {\n      selectNode: e.selectNode,\n      captionClass: CLS_CAPTION,\n      subCommand: e.args.item.subCommand\n    });\n    this.imageRemovePost(args.src);\n\n    if (this.quickToolObj && document.body.contains(this.quickToolObj.imageQTBar.element)) {\n      this.quickToolObj.imageQTBar.hidePopup();\n    }\n\n    this.cancelResizeAction();\n\n    if (isNullOrUndefined(keyCode)) {\n      this.parent.trigger(afterImageDelete, args);\n    }\n  }\n\n  imageRemovePost(src) {\n    const proxy = this;\n    let absoluteUrl = '';\n\n    if (isNullOrUndefined(this.parent.insertImageSettings.removeUrl) || this.parent.insertImageSettings.removeUrl === '') {\n      return;\n    }\n\n    if (src.indexOf('http://') > -1 || src.indexOf('https://') > -1) {\n      absoluteUrl = src;\n    } else {\n      absoluteUrl = new URL(src, document.baseURI).href;\n    }\n\n    this.removingImgName = absoluteUrl.replace(/^.*[\\\\\\/]/, '');\n    const xhr = new XMLHttpRequest();\n    xhr.addEventListener(\"readystatechange\", function () {\n      if (this.readyState == 4 && this.status == 200) {\n        proxy.triggerPost(this.response);\n      }\n    });\n    xhr.open('GET', absoluteUrl);\n    xhr.responseType = 'blob';\n    xhr.send();\n  }\n\n  triggerPost(response) {\n    const removeUrl = this.parent.insertImageSettings.removeUrl;\n\n    if (isNullOrUndefined(removeUrl) || removeUrl === '') {\n      return;\n    }\n\n    const file = new File([response], this.removingImgName);\n    const ajax = new Ajax(removeUrl, 'POST', true, null);\n    const formData = new FormData();\n    formData.append('UploadFiles', file);\n    ajax.send(formData);\n  }\n\n  caption(e) {\n    const selectNode = e.selectNode[0];\n\n    if (selectNode.nodeName !== 'IMG') {\n      return;\n    }\n\n    e.selection.restore();\n\n    if (this.parent.formatter.getUndoRedoStack().length === 0) {\n      this.parent.formatter.saveData();\n    }\n\n    this.cancelResizeAction();\n    addClass([selectNode], 'e-rte-image');\n    const subCommand = e.args.item ? e.args.item.subCommand : 'Caption';\n\n    if (!isNullOrUndefined(closest(selectNode, '.' + CLS_CAPTION))) {\n      detach(closest(selectNode, '.' + CLS_CAPTION));\n\n      if (Browser.isIE) {\n        this.contentModule.getEditPanel().focus();\n        e.selection.restore();\n      }\n\n      if (selectNode.parentElement.tagName === 'A') {\n        this.parent.formatter.process(this.parent, e.args, e.args, {\n          insertElement: selectNode.parentElement,\n          selectNode: e.selectNode,\n          subCommand: subCommand\n        });\n      } else {\n        this.parent.formatter.process(this.parent, e.args, e.args, {\n          insertElement: selectNode,\n          selectNode: e.selectNode,\n          subCommand: subCommand\n        });\n      }\n    } else {\n      this.captionEle = this.parent.createElement('span', {\n        className: CLS_CAPTION + ' ' + CLS_RTE_CAPTION,\n        attrs: {\n          contenteditable: 'false',\n          draggable: 'false',\n          style: 'width:' + this.parent.insertImageSettings.width\n        }\n      });\n      const imgWrap = this.parent.createElement('span', {\n        className: 'e-img-wrap'\n      });\n      const imgInner = this.parent.createElement('span', {\n        className: 'e-img-inner',\n        attrs: {\n          contenteditable: 'true'\n        }\n      });\n      const parent = e.selectNode[0].parentElement;\n\n      if (parent.tagName === 'A') {\n        parent.setAttribute('contenteditable', 'true');\n      }\n\n      imgWrap.appendChild(parent.tagName === 'A' ? parent : e.selectNode[0]);\n      imgWrap.appendChild(imgInner);\n      const imgCaption = this.i10n.getConstant('imageCaption');\n      imgInner.innerHTML = imgCaption;\n      this.captionEle.appendChild(imgWrap);\n\n      if (selectNode.classList.contains(CLS_IMGINLINE)) {\n        addClass([this.captionEle], CLS_CAPINLINE);\n      }\n\n      if (selectNode.classList.contains(CLS_IMGBREAK)) {\n        addClass([this.captionEle], CLS_IMGBREAK);\n      }\n\n      if (selectNode.classList.contains(CLS_IMGLEFT)) {\n        addClass([this.captionEle], CLS_IMGLEFT);\n      }\n\n      if (selectNode.classList.contains(CLS_IMGRIGHT)) {\n        addClass([this.captionEle], CLS_IMGRIGHT);\n      }\n\n      if (selectNode.classList.contains(CLS_IMGCENTER)) {\n        addClass([this.captionEle], CLS_IMGCENTER);\n      }\n\n      this.parent.formatter.process(this.parent, e.args, e.args, {\n        insertElement: this.captionEle,\n        selectNode: e.selectNode,\n        subCommand: subCommand\n      });\n      this.parent.formatter.editorManager.nodeSelection.setSelectionText(this.contentModule.getDocument(), imgInner.childNodes[0], imgInner.childNodes[0], 0, imgInner.childNodes[0].textContent.length);\n    }\n\n    if (this.quickToolObj && document.body.contains(this.quickToolObj.imageQTBar.element)) {\n      this.quickToolObj.imageQTBar.hidePopup();\n      removeClass([selectNode], 'e-img-focus');\n    }\n  }\n\n  imageSize(e) {\n    if (e.selectNode[0].nodeName !== 'IMG') {\n      return;\n    }\n\n    this.imagDialog(e);\n\n    if (!isNullOrUndefined(this.dialogObj)) {\n      const imgSizeHeader = this.i10n.getConstant('imageSizeHeader');\n      const linkUpdate = this.i10n.getConstant('dialogUpdate');\n      const dialogContent = this.imgsizeInput(e);\n      const selectObj = {\n        args: e.args,\n        selfImage: this,\n        selection: e.selection,\n        selectNode: e.selectNode\n      };\n      this.dialogObj.setProperties({\n        height: 'inherit',\n        width: '290px',\n        header: imgSizeHeader,\n        content: dialogContent,\n        position: {\n          X: 'center',\n          Y: 'center'\n        },\n        buttons: [{\n          // eslint-disable-next-line\n          click: e => {\n            this.insertSize(selectObj);\n          },\n          buttonModel: {\n            content: linkUpdate,\n            cssClass: 'e-flat e-update-size',\n            isPrimary: true\n          }\n        }]\n      });\n      this.dialogObj.element.style.maxHeight = 'inherit';\n      this.dialogObj.content.querySelector('input').focus();\n    }\n  }\n\n  break(e) {\n    if (e.selectNode[0].nodeName !== 'IMG') {\n      return;\n    }\n\n    const subCommand = e.args.item ? e.args.item.subCommand : 'Break';\n    this.parent.formatter.process(this.parent, e.args, e.args, {\n      selectNode: e.selectNode,\n      subCommand: subCommand\n    });\n  }\n\n  inline(e) {\n    if (e.selectNode[0].nodeName !== 'IMG') {\n      return;\n    }\n\n    const subCommand = e.args.item ? e.args.item.subCommand : 'Inline';\n    this.parent.formatter.process(this.parent, e.args, e.args, {\n      selectNode: e.selectNode,\n      subCommand: subCommand\n    });\n  }\n\n  alignImage(e, type) {\n    const subCommand = e.args.item ? e.args.item.subCommand : type;\n    this.parent.formatter.process(this.parent, e.args, e.args, {\n      selectNode: e.selectNode,\n      subCommand: subCommand\n    });\n  }\n\n  clearDialogObj() {\n    if (this.dialogObj) {\n      this.dialogObj.destroy();\n      detach(this.dialogObj.element);\n      this.dialogObj = null;\n    }\n  }\n\n  imagDialog(e) {\n    if (this.dialogObj) {\n      this.dialogObj.hide({\n        returnValue: true\n      });\n      return;\n    }\n\n    const imgDialog = this.parent.createElement('div', {\n      className: 'e-rte-img-dialog',\n      id: this.rteID + '_image'\n    });\n    this.parent.element.appendChild(imgDialog);\n    const imgInsert = this.i10n.getConstant('dialogInsert');\n    const imglinkCancel = this.i10n.getConstant('dialogCancel');\n    const imgHeader = this.i10n.getConstant('imageHeader');\n    const selection = e.selection;\n    const selectObj = {\n      selfImage: this,\n      selection: e.selection,\n      args: e.args,\n      selectParent: e.selectParent\n    };\n    const dialogModel = {\n      header: imgHeader,\n      cssClass: CLS_RTE_ELEMENTS,\n      enableRtl: this.parent.enableRtl,\n      locale: this.parent.locale,\n      showCloseIcon: true,\n      closeOnEscape: true,\n      width: Browser.isDevice ? '290px' : '340px',\n      height: 'inherit',\n      position: {\n        X: 'center',\n        Y: Browser.isDevice ? 'center' : 'top'\n      },\n      isModal: Browser.isDevice,\n      buttons: [{\n        click: this.insertImageUrl.bind(selectObj),\n        buttonModel: {\n          content: imgInsert,\n          cssClass: 'e-flat e-insertImage',\n          isPrimary: true,\n          disabled: true\n        }\n      }, {\n        click: e => {\n          this.cancelDialog(e);\n        },\n        buttonModel: {\n          cssClass: 'e-flat e-cancel',\n          content: imglinkCancel\n        }\n      }],\n      target: Browser.isDevice ? document.body : this.parent.element,\n      animationSettings: {\n        effect: 'None'\n      },\n      close: event => {\n        if (this.isImgUploaded) {\n          this.uploadObj.removing();\n        }\n\n        this.parent.isBlur = false;\n\n        if (event && event.event.returnValue) {\n          if (this.parent.editorMode === 'HTML') {\n            selection.restore();\n          } else {\n            this.parent.formatter.editorManager.markdownSelection.restore(this.parent.contentModule.getEditPanel());\n          }\n        }\n\n        this.dialogObj.destroy();\n        detach(this.dialogObj.element);\n        this.dialogRenderObj.close(event);\n        this.dialogObj = null;\n      }\n    };\n    const dialogContent = this.parent.createElement('div', {\n      className: 'e-img-content'\n    });\n\n    if (!isNullOrUndefined(this.parent.insertImageSettings.path) && this.parent.editorMode === 'Markdown' || this.parent.editorMode === 'HTML') {\n      dialogContent.appendChild(this.imgUpload(e));\n    }\n\n    const linkHeader = this.parent.createElement('div', {\n      className: 'e-linkheader'\n    });\n    const linkHeaderText = this.i10n.getConstant('imageLinkHeader');\n\n    if (this.parent.editorMode === 'HTML') {\n      linkHeader.innerHTML = linkHeaderText;\n    } else {\n      linkHeader.innerHTML = this.i10n.getConstant('mdimageLink');\n    }\n\n    dialogContent.appendChild(linkHeader);\n    dialogContent.appendChild(this.imageUrlPopup(e));\n\n    if (e.selectNode && e.selectNode[0].nodeName === 'IMG') {\n      dialogModel.header = this.parent.localeObj.getConstant('editImageHeader');\n      dialogModel.content = dialogContent;\n    } else {\n      dialogModel.content = dialogContent;\n    }\n\n    this.dialogObj = this.dialogRenderObj.render(dialogModel);\n    this.dialogObj.createElement = this.parent.createElement;\n    this.dialogObj.appendTo(imgDialog);\n\n    if (isNullOrUndefined(this.dialogObj)) {\n      return;\n    }\n\n    if (e.selectNode && e.selectNode[0].nodeName === 'IMG' && e.name === 'insertImage') {\n      this.dialogObj.element.querySelector('.e-insertImage').textContent = this.parent.localeObj.getConstant('dialogUpdate');\n    }\n\n    imgDialog.style.maxHeight = 'inherit';\n\n    if (this.quickToolObj) {\n      if (this.quickToolObj.imageQTBar && document.body.contains(this.quickToolObj.imageQTBar.element)) {\n        this.quickToolObj.imageQTBar.hidePopup();\n\n        if (!isNullOrUndefined(e.selectParent)) {\n          removeClass([e.selectParent[0]], 'e-img-focus');\n        }\n      }\n\n      if (this.quickToolObj.inlineQTBar && document.body.contains(this.quickToolObj.inlineQTBar.element)) {\n        this.quickToolObj.inlineQTBar.hidePopup();\n      }\n    }\n  } // eslint-disable-next-line\n\n\n  cancelDialog(e) {\n    this.parent.isBlur = false;\n    this.dialogObj.hide({\n      returnValue: true\n    });\n\n    if (this.isImgUploaded) {\n      this.uploadObj.removing();\n    }\n  }\n\n  onDocumentClick(e) {\n    const target = e.target;\n\n    if (target.nodeName === 'IMG') {\n      this.imgEle = target;\n    }\n\n    if (!isNullOrUndefined(this.dialogObj) && ( // eslint-disable-next-line\n    !closest(target, '[id=' + \"'\" + this.dialogObj.element.id + \"'\" + ']') && this.parent.toolbarSettings.enable && this.parent.getToolbarElement() && !this.parent.getToolbarElement().contains(e.target) || this.parent.getToolbarElement() && this.parent.getToolbarElement().contains(e.target) && !closest(target, '#' + this.parent.getID() + '_toolbar_Image') && !target.querySelector('#' + this.parent.getID() + '_toolbar_Image'))) {\n      /* eslint-disable */\n      if (e.offsetX > e.target.clientWidth || e.offsetY > e.target.clientHeight) {} else {\n        this.dialogObj.hide({\n          returnValue: true\n        });\n        this.parent.isBlur = true;\n        dispatchEvent(this.parent.element, 'focusout');\n      }\n      /* eslint-enable */\n\n    }\n\n    if (e.target.tagName !== 'IMG' && this.imgResizeDiv && !(this.quickToolObj && this.quickToolObj.imageQTBar && this.quickToolObj.imageQTBar.element.contains(e.target)) && this.contentModule.getEditPanel().contains(this.imgResizeDiv)) {\n      this.cancelResizeAction();\n    }\n\n    if (this.contentModule.getEditPanel().querySelector('.e-img-resize')) {\n      if (target.tagName !== 'IMG') {\n        this.removeResizeEle();\n      }\n\n      if (target.tagName !== 'IMG' && !isNullOrUndefined(this.imgEle)) {\n        this.imgEle.style.outline = '';\n      } else if (!isNullOrUndefined(this.prevSelectedImgEle) && this.prevSelectedImgEle !== target) {\n        this.prevSelectedImgEle.style.outline = '';\n      }\n    }\n  }\n\n  removeResizeEle() {\n    EventHandler.remove(this.contentModule.getDocument(), Browser.touchMoveEvent, this.resizing);\n    EventHandler.remove(this.contentModule.getDocument(), Browser.touchEndEvent, this.resizeEnd);\n    detach(this.contentModule.getEditPanel().querySelector('.e-img-resize'));\n  }\n\n  onWindowResize() {\n    if (!isNullOrUndefined(this.contentModule) && !isNullOrUndefined(this.contentModule.getEditPanel().querySelector('.e-img-resize'))) {\n      this.cancelResizeAction();\n    }\n  } // eslint-disable-next-line\n\n\n  imageUrlPopup(e) {\n    const imgUrl = this.parent.createElement('div', {\n      className: 'imgUrl'\n    });\n    const placeUrl = this.i10n.getConstant('imageUrl');\n    this.inputUrl = this.parent.createElement('input', {\n      className: 'e-input e-img-url',\n      attrs: {\n        placeholder: placeUrl,\n        spellcheck: 'false'\n      }\n    });\n    this.inputUrl.addEventListener('input', () => {\n      if (!isNullOrUndefined(this.inputUrl)) {\n        if (this.inputUrl.value.length === 0) {\n          this.dialogObj.getButtons(0).element.disabled = true;\n        } else {\n          this.dialogObj.getButtons(0).element.removeAttribute('disabled');\n        }\n      }\n    });\n    imgUrl.appendChild(this.inputUrl);\n    return imgUrl;\n  } // eslint-disable-next-line\n\n\n  insertImageUrl(e) {\n    const proxy = this.selfImage;\n    proxy.isImgUploaded = false;\n    const url = proxy.inputUrl.value;\n\n    if (proxy.parent.formatter.getUndoRedoStack().length === 0) {\n      proxy.parent.formatter.saveData();\n    }\n\n    if (!isNullOrUndefined(proxy.uploadUrl) && proxy.uploadUrl.url !== '') {\n      proxy.uploadUrl.cssClass = proxy.parent.insertImageSettings.display === 'inline' ? CLS_IMGINLINE : CLS_IMGBREAK;\n      proxy.dialogObj.hide({\n        returnValue: false\n      });\n      proxy.parent.formatter.process(proxy.parent, this.args, this.args.originalEvent, proxy.uploadUrl);\n      proxy.uploadUrl.url = '';\n\n      if (proxy.contentModule.getEditPanel().querySelector('.e-img-resize')) {\n        proxy.imgEle.style.outline = '';\n        proxy.removeResizeEle();\n      }\n    } else if (url !== '') {\n      if (proxy.parent.editorMode === 'HTML' && isNullOrUndefined(closest( // eslint-disable-next-line\n      this.selection.range.startContainer.parentNode, '[id=' + \"'\" + proxy.contentModule.getPanel().id + \"'\" + ']'))) {\n        proxy.contentModule.getEditPanel().focus();\n        const range = proxy.parent.formatter.editorManager.nodeSelection.getRange(proxy.contentModule.getDocument());\n        this.selection = proxy.parent.formatter.editorManager.nodeSelection.save(range, proxy.contentModule.getDocument());\n        this.selectParent = proxy.parent.formatter.editorManager.nodeSelection.getParentNodeCollection(range);\n      }\n\n      const regex = /[\\w-]+.(jpg|png|jpeg|gif)/g;\n      const matchUrl = !isNullOrUndefined(url.match(regex)) && proxy.parent.editorMode === 'HTML' ? url.match(regex)[0] : '';\n      const value = {\n        cssClass: proxy.parent.insertImageSettings.display === 'inline' ? CLS_IMGINLINE : CLS_IMGBREAK,\n        url: url,\n        selection: this.selection,\n        altText: matchUrl,\n        selectParent: this.selectParent,\n        width: {\n          width: proxy.parent.insertImageSettings.width,\n          minWidth: proxy.parent.insertImageSettings.minWidth,\n          maxWidth: proxy.parent.getInsertImgMaxWidth()\n        },\n        height: {\n          height: proxy.parent.insertImageSettings.height,\n          minHeight: proxy.parent.insertImageSettings.minHeight,\n          maxHeight: proxy.parent.insertImageSettings.maxHeight\n        }\n      };\n      proxy.parent.formatter.process(proxy.parent, this.args, this.args.originalEvent, value);\n      proxy.dialogObj.hide({\n        returnValue: false\n      });\n    }\n  }\n\n  imgsizeInput(e) {\n    const selectNode = e.selectNode[0];\n    const imgHeight = this.i10n.getConstant('imageHeight');\n    const imgWidth = this.i10n.getConstant('imageWidth');\n    const imgSizeWrap = this.parent.createElement('div', {\n      className: 'e-img-sizewrap'\n    });\n    const widthVal = isNullOrUndefined(this.changedWidthValue) && (selectNode.style.width.toString() === 'auto' || selectNode.style.width !== '') ? selectNode.style.width : !isNullOrUndefined(this.changedWidthValue) ? this.changedWidthValue : parseInt(selectNode.getClientRects()[0].width.toString(), 10).toString();\n    const heightVal = isNullOrUndefined(this.changedHeightValue) && (selectNode.style.height.toString() === 'auto' || selectNode.style.height !== '') ? selectNode.style.height : !isNullOrUndefined(this.changedHeightValue) ? this.changedHeightValue : parseInt(selectNode.getClientRects()[0].height.toString(), 10).toString();\n    this.changedWidthValue = null;\n    this.changedHeightValue = null;\n    const content = '<div class=\"e-rte-label\"><label>' + imgWidth + '</label></div><div class=\"e-rte-field\"><input type=\"text\" id=\"imgwidth\" class=\"e-img-width\" value=' + widthVal + ' /></div>' + '<div class=\"e-rte-label\">' + '<label>' + imgHeight + '</label></div><div class=\"e-rte-field\"> ' + '<input type=\"text\" id=\"imgheight\" class=\"e-img-height\" value=' + heightVal + ' /></div>';\n    const contentElem = parseHtml(content);\n    imgSizeWrap.appendChild(contentElem);\n    const widthNum = new TextBox({\n      value: formatUnit(widthVal),\n      enableRtl: this.parent.enableRtl,\n      input: e => {\n        this.inputWidthValue = formatUnit(this.inputValue(e.value));\n      }\n    });\n    widthNum.createElement = this.parent.createElement;\n    widthNum.appendTo(imgSizeWrap.querySelector('#imgwidth'));\n    const heightNum = new TextBox({\n      value: formatUnit(heightVal),\n      enableRtl: this.parent.enableRtl,\n      input: e => {\n        this.inputHeightValue = formatUnit(this.inputValue(e.value));\n      }\n    });\n    heightNum.createElement = this.parent.createElement;\n    heightNum.appendTo(imgSizeWrap.querySelector('#imgheight'));\n    return imgSizeWrap;\n  }\n\n  inputValue(value) {\n    if (value === 'auto' || value.indexOf('%') !== -1 || value.indexOf('px') !== -1 || value.match(/(\\d+)/)) {\n      return value;\n    } else {\n      return 'auto';\n    }\n  }\n\n  insertSize(e) {\n    e.selection.restore();\n    const proxy = e.selfImage;\n\n    if (proxy.parent.formatter.getUndoRedoStack().length === 0) {\n      proxy.parent.formatter.saveData();\n    }\n\n    const dialogEle = proxy.dialogObj.element;\n    this.changedWidthValue = this.inputWidthValue;\n    this.changedHeightValue = this.inputHeightValue;\n    const width = dialogEle.querySelector('.e-img-width').value;\n    const height = dialogEle.parentElement.querySelector('.e-img-height').value;\n    proxy.parent.formatter.process(this.parent, e.args, e.args, {\n      width: width,\n      height: height,\n      selectNode: e.selectNode,\n      subCommand: e.args.item.subCommand\n    });\n\n    if (this.imgResizeDiv) {\n      proxy.imgResizePos(e.selectNode[0], this.imgResizeDiv);\n    }\n\n    proxy.dialogObj.hide({\n      returnValue: true\n    });\n  }\n\n  insertImage(e) {\n    this.imagDialog(e);\n\n    if (!isNullOrUndefined(this.dialogObj)) {\n      this.dialogObj.element.style.maxHeight = 'inherit';\n      const dialogContent = this.dialogObj.element.querySelector('.e-img-content');\n\n      if (!isNullOrUndefined(this.parent.insertImageSettings.path) && this.parent.editorMode === 'Markdown' || this.parent.editorMode === 'HTML') {\n        document.getElementById(this.rteID + '_insertImage').focus();\n      } else {\n        dialogContent.querySelector('.e-img-url').focus();\n      }\n    }\n  }\n\n  imgUpload(e) {\n    let save;\n    let selectParent; // eslint-disable-next-line\n\n    const proxy = this;\n    const iframe = proxy.parent.iframeSettings.enable;\n\n    if (proxy.parent.editorMode === 'HTML' && (!iframe && isNullOrUndefined(closest(e.selection.range.startContainer.parentNode, '[id=' // eslint-disable-next-line\n    + \"'\" + this.parent.contentModule.getPanel().id + \"'\" + ']')) || iframe && !hasClass(e.selection.range.startContainer.parentNode.ownerDocument.querySelector('body'), 'e-lib'))) {\n      this.contentModule.getEditPanel().focus();\n      const range = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.contentModule.getDocument());\n      save = this.parent.formatter.editorManager.nodeSelection.save(range, this.parent.contentModule.getDocument());\n      selectParent = this.parent.formatter.editorManager.nodeSelection.getParentNodeCollection(range);\n    } else {\n      save = e.selection;\n      selectParent = e.selectParent;\n    }\n\n    const uploadParentEle = this.parent.createElement('div', {\n      className: 'e-img-uploadwrap e-droparea'\n    });\n    const deviceImgUpMsg = this.i10n.getConstant('imageDeviceUploadMessage');\n    const imgUpMsg = this.i10n.getConstant('imageUploadMessage');\n    const span = this.parent.createElement('span', {\n      className: 'e-droptext'\n    });\n    const spanMsg = this.parent.createElement('span', {\n      className: 'e-rte-upload-text',\n      innerHTML: Browser.isDevice ? deviceImgUpMsg : imgUpMsg\n    });\n    span.appendChild(spanMsg);\n    const btnEle = this.parent.createElement('button', {\n      className: 'e-browsebtn',\n      id: this.rteID + '_insertImage',\n      attrs: {\n        autofocus: 'true',\n        type: 'button'\n      }\n    });\n    span.appendChild(btnEle);\n    uploadParentEle.appendChild(span);\n    const browserMsg = this.i10n.getConstant('browse');\n    const button = new Button({\n      content: browserMsg,\n      enableRtl: this.parent.enableRtl\n    });\n    button.isStringTemplate = true;\n    button.createElement = this.parent.createElement;\n    button.appendTo(btnEle);\n    const btnClick = Browser.isDevice ? span : btnEle;\n    EventHandler.add(btnClick, 'click', this.fileSelect, this);\n    const uploadEle = this.parent.createElement('input', {\n      id: this.rteID + '_upload',\n      attrs: {\n        type: 'File',\n        name: 'UploadFiles'\n      }\n    });\n    uploadParentEle.appendChild(uploadEle);\n    let altText;\n    let rawFile;\n    let selectArgs;\n    let filesData;\n    let beforeUploadArgs;\n    this.uploadObj = new Uploader({\n      asyncSettings: {\n        saveUrl: this.parent.insertImageSettings.saveUrl,\n        removeUrl: this.parent.insertImageSettings.removeUrl\n      },\n      dropArea: span,\n      multiple: false,\n      enableRtl: this.parent.enableRtl,\n      allowedExtensions: this.parent.insertImageSettings.allowedTypes.toString(),\n      selected: e => {\n        proxy.isImgUploaded = true;\n        selectArgs = e;\n        filesData = e.filesData;\n\n        if (this.parent.isServerRendered) {\n          selectArgs = JSON.parse(JSON.stringify(e));\n          e.cancel = true;\n          rawFile = e.filesData;\n          selectArgs.filesData = rawFile;\n        }\n\n        this.parent.trigger(imageSelected, selectArgs, selectArgs => {\n          if (!selectArgs.cancel) {\n            this.checkExtension(selectArgs.filesData[0]);\n            altText = selectArgs.filesData[0].name;\n\n            if (this.parent.editorMode === 'HTML' && isNullOrUndefined(this.parent.insertImageSettings.path)) {\n              const reader = new FileReader(); // eslint-disable-next-line\n\n              reader.addEventListener('load', e => {\n                const url = this.parent.insertImageSettings.saveFormat === 'Base64' ? reader.result : URL.createObjectURL(convertToBlob(reader.result));\n                proxy.uploadUrl = {\n                  url: url,\n                  selection: save,\n                  altText: altText,\n                  selectParent: selectParent,\n                  width: {\n                    width: proxy.parent.insertImageSettings.width,\n                    minWidth: proxy.parent.insertImageSettings.minWidth,\n                    maxWidth: proxy.parent.getInsertImgMaxWidth()\n                  },\n                  height: {\n                    height: proxy.parent.insertImageSettings.height,\n                    minHeight: proxy.parent.insertImageSettings.minHeight,\n                    maxHeight: proxy.parent.insertImageSettings.maxHeight\n                  }\n                };\n                proxy.inputUrl.setAttribute('disabled', 'true');\n\n                if (isNullOrUndefined(proxy.parent.insertImageSettings.saveUrl) && this.isAllowedTypes && !isNullOrUndefined(this.dialogObj)) {\n                  this.dialogObj.getButtons(0).element.removeAttribute('disabled');\n                }\n              });\n              reader.readAsDataURL(selectArgs.filesData[0].rawFile);\n            }\n\n            if (this.parent.isServerRendered) {\n              /* eslint-disable */\n              this.uploadObj._internalRenderSelect(selectArgs, rawFile);\n              /* eslint-enable */\n\n            }\n          }\n        });\n      },\n      beforeUpload: args => {\n        if (this.parent.isServerRendered) {\n          beforeUploadArgs = JSON.parse(JSON.stringify(args));\n          beforeUploadArgs.filesData = filesData;\n          args.cancel = true;\n          this.parent.trigger(imageUploading, beforeUploadArgs, beforeUploadArgs => {\n            if (beforeUploadArgs.cancel) {\n              return;\n            }\n            /* eslint-disable */\n\n\n            this.uploadObj.currentRequestHeader = beforeUploadArgs.currentRequest ? beforeUploadArgs.currentRequest : this.uploadObj.currentRequestHeader;\n            this.uploadObj.customFormDatas = beforeUploadArgs.customFormData && beforeUploadArgs.customFormData.length > 0 ? beforeUploadArgs.customFormData : this.uploadObj.customFormDatas;\n            this.uploadObj.uploadFiles(rawFile, null);\n            /* eslint-enable */\n          });\n        } else {\n          this.parent.trigger(beforeImageUpload, args);\n        }\n      },\n      uploading: e => {\n        if (!this.parent.isServerRendered) {\n          this.parent.trigger(imageUploading, e);\n        }\n      },\n      success: e => {\n        this.parent.trigger(imageUploadSuccess, e, e => {\n          if (!isNullOrUndefined(this.parent.insertImageSettings.path)) {\n            const url = this.parent.insertImageSettings.path + e.file.name; // eslint-disable-next-line\n\n            proxy.uploadUrl = {\n              url: url,\n              selection: save,\n              altText: altText,\n              selectParent: selectParent,\n              width: {\n                width: proxy.parent.insertImageSettings.width,\n                minWidth: proxy.parent.insertImageSettings.minWidth,\n                maxWidth: proxy.parent.getInsertImgMaxWidth()\n              },\n              height: {\n                height: proxy.parent.insertImageSettings.height,\n                minHeight: proxy.parent.insertImageSettings.minHeight,\n                maxHeight: proxy.parent.insertImageSettings.maxHeight\n              }\n            };\n            proxy.inputUrl.setAttribute('disabled', 'true');\n          }\n\n          if (e.operation === 'upload' && !isNullOrUndefined(this.dialogObj)) {\n            this.dialogObj.getButtons(0).element.removeAttribute('disabled');\n          }\n        });\n      },\n      failure: e => {\n        this.parent.trigger(imageUploadFailed, e);\n      },\n      removing: () => {\n        // eslint-disable-next-line\n        this.parent.trigger(imageRemoving, e, e => {\n          proxy.isImgUploaded = false;\n          this.dialogObj.getButtons(0).element.disabled = true;\n          proxy.inputUrl.removeAttribute('disabled');\n\n          if (proxy.uploadUrl) {\n            proxy.uploadUrl.url = '';\n          }\n        });\n      }\n    });\n    this.uploadObj.isStringTemplate = true;\n    this.uploadObj.createElement = this.parent.createElement;\n    this.uploadObj.appendTo(uploadEle);\n    return uploadParentEle;\n  }\n\n  checkExtension(e) {\n    if (this.uploadObj.allowedExtensions) {\n      if (this.uploadObj.allowedExtensions.toLocaleLowerCase().indexOf(('.' + e.type).toLocaleLowerCase()) === -1) {\n        this.dialogObj.getButtons(0).element.setAttribute('disabled', 'disabled');\n        this.isAllowedTypes = false;\n      } else {\n        this.isAllowedTypes = true;\n      }\n    }\n  }\n\n  fileSelect() {\n    this.dialogObj.element.getElementsByClassName('e-file-select-wrap')[0].querySelector('button').click();\n    return false;\n  }\n\n  dragStart(e) {\n    if (e.target.nodeName === 'IMG') {\n      this.parent.trigger(actionBegin, e, actionBeginArgs => {\n        if (actionBeginArgs.cancel) {\n          e.preventDefault();\n        } else {\n          e.dataTransfer.effectAllowed = 'copyMove';\n          e.target.classList.add(CLS_RTE_DRAG_IMAGE);\n        }\n      });\n    } else {\n      return true;\n    }\n  }\n\n  dragEnter(e) {\n    e.dataTransfer.dropEffect = 'copy';\n    e.preventDefault();\n  }\n\n  dragOver(e) {\n    if (Browser.info.name === 'edge' && e.dataTransfer.items[0].type.split('/')[0].indexOf('image') > -1 || Browser.isIE && e.dataTransfer.types[0] === 'Files') {\n      e.preventDefault();\n    } else {\n      return true;\n    }\n  }\n  /**\n   * Used to set range When drop an image\n   *\n   * @param {ImageDropEventArgs} args - specifies the image arguments.\n   * @returns {void}\n   */\n\n\n  dragDrop(args) {\n    this.parent.trigger(beforeImageDrop, args, e => {\n      const imgElement = this.parent.inputElement.ownerDocument.querySelector('.' + CLS_RTE_DRAG_IMAGE);\n      const isImgOrFileDrop = imgElement && imgElement.tagName === 'IMG' || e.dataTransfer.files.length > 0;\n\n      if (!e.cancel && isImgOrFileDrop) {\n        this.parent.trigger(actionBegin, e, actionBeginArgs => {\n          if (actionBeginArgs.cancel) {\n            e.preventDefault();\n          } else {\n            if (closest(e.target, '#' + this.parent.getID() + '_toolbar') || this.parent.inputElement.contentEditable === 'false') {\n              e.preventDefault();\n              return;\n            }\n\n            if (this.parent.element.querySelector('.' + CLS_IMG_RESIZE)) {\n              detach(this.imgResizeDiv);\n            }\n\n            e.preventDefault();\n            let range;\n\n            if (this.contentModule.getDocument().caretRangeFromPoint) {\n              //For chrome\n              range = this.contentModule.getDocument().caretRangeFromPoint(e.clientX, e.clientY);\n            } else if (e.rangeParent) {\n              //For mozilla firefox\n              range = this.contentModule.getDocument().createRange();\n              range.setStart(e.rangeParent, e.rangeOffset);\n            } else {\n              range = this.getDropRange(e.clientX, e.clientY); //For internet explorer\n            }\n\n            this.parent.notify(selectRange, {\n              range: range\n            });\n            const uploadArea = this.parent.element.querySelector('.' + CLS_DROPAREA);\n\n            if (uploadArea) {\n              return;\n            }\n\n            this.insertDragImage(e);\n          }\n        });\n      } else {\n        if (isImgOrFileDrop) {\n          e.preventDefault();\n        }\n      }\n    });\n  }\n  /**\n   * Used to calculate range on internet explorer\n   *\n   * @param {number} x - specifies the x range.\n   * @param {number} y - specifies the y range.\n   * @returns {void}\n   */\n\n\n  getDropRange(x, y) {\n    const startRange = this.contentModule.getDocument().createRange();\n    this.parent.formatter.editorManager.nodeSelection.setRange(this.contentModule.getDocument(), startRange);\n    const elem = this.contentModule.getDocument().elementFromPoint(x, y);\n    const startNode = elem.childNodes.length > 0 ? elem.childNodes[0] : elem;\n    let startCharIndexCharacter = 0;\n\n    if (this.parent.inputElement.firstChild.innerHTML === '<br>') {\n      startRange.setStart(startNode, startCharIndexCharacter);\n      startRange.setEnd(startNode, startCharIndexCharacter);\n    } else {\n      let rangeRect;\n\n      do {\n        startCharIndexCharacter++;\n        startRange.setStart(startNode, startCharIndexCharacter);\n        startRange.setEnd(startNode, startCharIndexCharacter + 1);\n        rangeRect = startRange.getBoundingClientRect();\n      } while (rangeRect.left < x && startCharIndexCharacter < startNode.length - 1);\n    }\n\n    return startRange;\n  }\n\n  insertDragImage(e) {\n    e.preventDefault();\n    const activePopupElement = this.parent.element.querySelector('' + CLS_POPUP_OPEN);\n    this.parent.notify(drop, {\n      args: e\n    });\n\n    if (activePopupElement) {\n      activePopupElement.classList.add(CLS_HIDE);\n    }\n\n    if (e.dataTransfer.files.length > 0) {\n      //For external image drag and drop\n      if (e.dataTransfer.files.length > 1) {\n        return;\n      }\n\n      const imgFiles = e.dataTransfer.files;\n      const fileName = imgFiles[0].name;\n      const imgType = fileName.substring(fileName.lastIndexOf('.'));\n      const allowedTypes = this.parent.insertImageSettings.allowedTypes;\n\n      for (let i = 0; i < allowedTypes.length; i++) {\n        if (imgType.toLocaleLowerCase() === allowedTypes[i].toLowerCase()) {\n          if (this.parent.insertImageSettings.saveUrl) {\n            this.onSelect(e);\n          } else {\n            const args = {\n              args: e,\n              text: '',\n              file: imgFiles[0]\n            };\n            e.preventDefault();\n            this.imagePaste(args);\n          }\n        }\n      }\n    } else {\n      //For internal image drag and drop\n      const range = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.contentModule.getDocument());\n      const imgElement = this.parent.inputElement.ownerDocument.querySelector('.' + CLS_RTE_DRAG_IMAGE);\n\n      if (imgElement && imgElement.tagName === 'IMG') {\n        if (imgElement.nextElementSibling) {\n          if (imgElement.nextElementSibling.classList.contains(CLS_IMG_INNER)) {\n            range.insertNode(imgElement.parentElement.parentElement);\n          } else {\n            range.insertNode(imgElement);\n          }\n        } else {\n          range.insertNode(imgElement);\n        }\n\n        imgElement.classList.remove(CLS_RTE_DRAG_IMAGE);\n        const imgArgs = {\n          elements: [imgElement]\n        };\n        imgElement.addEventListener('load', () => {\n          this.parent.trigger(actionComplete, imgArgs);\n        });\n        this.parent.formatter.editorManager.nodeSelection.Clear(this.contentModule.getDocument());\n        const args = e;\n        this.resizeStart(args, imgElement);\n        this.hideImageQuickToolbar();\n      }\n    }\n  }\n\n  onSelect(args) {\n    // eslint-disable-next-line\n    const proxy = this;\n    const range = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.contentModule.getDocument());\n    const parentElement = this.parent.createElement('ul', {\n      className: CLS_UPLOAD_FILES\n    });\n    this.parent.element.appendChild(parentElement);\n    const validFiles = {\n      name: '',\n      size: 0,\n      status: '',\n      statusCode: '',\n      type: '',\n      rawFile: args.dataTransfer.files[0],\n      validationMessages: {}\n    };\n    const imageTag = this.parent.createElement('IMG');\n    imageTag.style.opacity = '0.5';\n    imageTag.classList.add(CLS_RTE_IMAGE);\n    imageTag.classList.add(CLS_IMGINLINE);\n    imageTag.classList.add(CLS_RESIZE);\n    const file = validFiles.rawFile;\n    const reader = new FileReader();\n    reader.addEventListener('load', () => {\n      const url = URL.createObjectURL(convertToBlob(reader.result));\n      imageTag.src = proxy.parent.insertImageSettings.saveFormat === 'Blob' ? url : reader.result;\n    });\n\n    if (file) {\n      reader.readAsDataURL(file);\n    }\n\n    range.insertNode(imageTag);\n    this.uploadMethod(args, imageTag);\n    const e = {\n      elements: [imageTag]\n    };\n    imageTag.addEventListener('load', () => {\n      this.parent.trigger(actionComplete, e);\n    });\n    detach(parentElement);\n  }\n  /**\n   * Rendering uploader and popup for drag and drop\n   *\n   * @param {DragEvent} dragEvent - specifies the event.\n   * @param {HTMLImageElement} imageElement - specifies the element.\n   * @returns {void}\n   */\n\n\n  uploadMethod(dragEvent, imageElement) {\n    let isUploading = false; // eslint-disable-next-line\n\n    const proxy = this;\n    const popupEle = this.parent.createElement('div');\n    this.parent.element.appendChild(popupEle);\n    const uploadEle = this.parent.createElement('input', {\n      id: this.rteID + '_upload',\n      attrs: {\n        type: 'File',\n        name: 'UploadFiles'\n      }\n    });\n    const offsetY = this.parent.iframeSettings.enable ? -50 : -90;\n    this.popupObj = new Popup(popupEle, {\n      relateTo: imageElement,\n      height: '85px',\n      width: '300px',\n      offsetY: offsetY,\n      content: uploadEle,\n      viewPortElement: this.parent.element,\n      position: {\n        X: 'center',\n        Y: 'top'\n      },\n      enableRtl: this.parent.enableRtl,\n      zIndex: 10001,\n      // eslint-disable-next-line\n      close: event => {\n        this.parent.isBlur = false;\n        this.popupObj.destroy();\n        detach(this.popupObj.element);\n        this.popupObj = null;\n\n        if (!this.parent.inlineMode.enable) {\n          this.parent.toolbarModule.baseToolbar.toolbarObj.disable(false);\n        }\n      }\n    });\n    this.popupObj.element.style.display = 'none';\n    addClass([this.popupObj.element], CLS_POPUP_OPEN);\n    addClass([this.popupObj.element], CLS_RTE_UPLOAD_POPUP);\n    const range = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.contentModule.getDocument());\n    const timeOut = dragEvent.dataTransfer.files[0].size > 1000000 ? 300 : 100;\n    setTimeout(() => {\n      proxy.refreshPopup(imageElement);\n    }, timeOut);\n    let rawFile;\n    let beforeUploadArgs;\n    this.uploadObj = new Uploader({\n      asyncSettings: {\n        saveUrl: this.parent.insertImageSettings.saveUrl,\n        removeUrl: this.parent.insertImageSettings.removeUrl\n      },\n      cssClass: CLS_RTE_DIALOG_UPLOAD,\n      dropArea: this.parent.element,\n      allowedExtensions: this.parent.insertImageSettings.allowedTypes.toString(),\n      removing: () => {\n        this.parent.inputElement.contentEditable = 'true';\n        isUploading = false;\n        detach(imageElement);\n        this.popupObj.close();\n      },\n      canceling: () => {\n        this.parent.inputElement.contentEditable = 'true';\n        isUploading = false;\n        detach(imageElement);\n        this.popupObj.close();\n        this.quickToolObj.imageQTBar.hidePopup();\n        setTimeout(() => {\n          this.uploadObj.destroy();\n        }, 900);\n      },\n      beforeUpload: args => {\n        if (this.parent.isServerRendered) {\n          beforeUploadArgs = JSON.parse(JSON.stringify(args));\n          beforeUploadArgs.filesData = rawFile;\n          isUploading = true;\n          args.cancel = true;\n          this.parent.trigger(imageUploading, beforeUploadArgs, beforeUploadArgs => {\n            if (beforeUploadArgs.cancel) {\n              return;\n            }\n\n            if (!this.parent.inlineMode.enable) {\n              this.parent.toolbarModule.baseToolbar.toolbarObj.disable(true);\n            }\n            /* eslint-disable */\n\n\n            this.uploadObj.currentRequestHeader = beforeUploadArgs.currentRequest ? beforeUploadArgs.currentRequest : this.uploadObj.currentRequestHeader;\n            this.uploadObj.customFormDatas = beforeUploadArgs.customFormData && beforeUploadArgs.customFormData.length > 0 ? beforeUploadArgs.customFormData : this.uploadObj.customFormDatas;\n            this.uploadObj.uploadFiles(rawFile, null);\n            this.parent.inputElement.contentEditable = 'false';\n            /* eslint-enable */\n          });\n        } else {\n          this.parent.trigger(beforeImageUpload, args);\n\n          if (!this.parent.inlineMode.enable) {\n            this.parent.toolbarModule.baseToolbar.toolbarObj.disable(true);\n          }\n        }\n      },\n      uploading: e => {\n        if (!this.parent.isServerRendered) {\n          isUploading = true;\n          this.parent.trigger(imageUploading, e, imageUploadingArgs => {\n            if (imageUploadingArgs.cancel) {\n              if (!isNullOrUndefined(imageElement)) {\n                detach(imageElement);\n              }\n\n              if (!isNullOrUndefined(this.popupObj.element)) {\n                detach(this.popupObj.element);\n              }\n            } else {\n              this.parent.inputElement.contentEditable = 'false';\n            }\n          });\n        }\n      },\n      selected: e => {\n        if (isUploading) {\n          e.cancel = true;\n        }\n\n        if (this.parent.isServerRendered) {\n          rawFile = e.filesData;\n        }\n      },\n      failure: e => {\n        isUploading = false;\n        this.parent.inputElement.contentEditable = 'true';\n        const args = {\n          args: dragEvent,\n          type: 'Images',\n          isNotify: undefined,\n          elements: imageElement\n        };\n        setTimeout(() => {\n          this.uploadFailure(imageElement, args, e);\n        }, 900);\n      },\n      success: e => {\n        if (e.operation === \"cancel\") {\n          return;\n        }\n\n        isUploading = false;\n        this.parent.inputElement.contentEditable = 'true';\n        const args = {\n          args: dragEvent,\n          type: 'Images',\n          isNotify: undefined,\n          elements: imageElement\n        };\n        setTimeout(() => {\n          this.uploadSuccess(imageElement, dragEvent, args, e);\n        }, 900);\n      }\n    });\n    this.uploadObj.appendTo(this.popupObj.element.childNodes[0]);\n    this.popupObj.element.querySelector('.e-rte-dialog-upload .e-file-select-wrap').style.display = 'none';\n    range.selectNodeContents(imageElement);\n    this.parent.formatter.editorManager.nodeSelection.setRange(this.contentModule.getDocument(), range);\n  }\n\n  refreshPopup(imageElement) {\n    const imgPosition = this.parent.iframeSettings.enable ? this.parent.element.offsetTop + imageElement.offsetTop : imageElement.offsetTop;\n    const rtePosition = this.parent.element.offsetTop + this.parent.element.offsetHeight;\n\n    if (imgPosition > rtePosition) {\n      this.popupObj.relateTo = this.parent.inputElement;\n      this.popupObj.offsetY = this.parent.iframeSettings.enable ? -30 : -65;\n      this.popupObj.element.style.display = 'block';\n    } else {\n      if (this.popupObj) {\n        this.popupObj.refreshPosition(imageElement);\n        this.popupObj.element.style.display = 'block';\n      }\n    }\n  }\n  /**\n   * Called when drop image upload was failed\n   *\n   * @param {HTMLElement} imgEle - specifies the image element.\n   * @param {IShowPopupArgs} args - specifies the arguments.\n   * @param {Object} e - specfies the object.\n   * @returns {void}\n   */\n\n\n  uploadFailure(imgEle, args, e) {\n    detach(imgEle);\n\n    if (this.popupObj) {\n      this.popupObj.close();\n    }\n\n    this.parent.trigger(imageUploadFailed, e);\n    this.uploadObj.destroy();\n  }\n  /**\n   * Called when drop image upload was successful\n   *\n   * @param {HTMLElement} imageElement - specifies the image element.\n   * @param {DragEvent} dragEvent - specifies the drag event.\n   * @param {IShowPopupArgs} args - specifies the arguments.\n   * @param {ImageSuccessEventArgs} e - specifies the success event.\n   * @returns {void}\n   */\n\n\n  uploadSuccess(imageElement, dragEvent, args, e) {\n    imageElement.style.opacity = '1';\n    imageElement.classList.add(CLS_IMG_FOCUS);\n    e.element = imageElement;\n    this.parent.trigger(imageUploadSuccess, e, e => {\n      if (!isNullOrUndefined(this.parent.insertImageSettings.path)) {\n        const url = this.parent.insertImageSettings.path + e.file.name;\n        imageElement.src = url;\n        imageElement.setAttribute('alt', e.file.name);\n      }\n    });\n\n    if (this.popupObj) {\n      this.popupObj.close();\n      this.uploadObj.destroy();\n    }\n\n    this.showImageQuickToolbar(args);\n    this.resizeStart(dragEvent, imageElement);\n  }\n\n  imagePaste(args) {\n    if (args.text.length === 0 && !isNullOrUndefined(args.file)) {\n      // eslint-disable-next-line\n      const proxy = this;\n      const reader = new FileReader();\n      args.args.preventDefault(); // eslint-disable-next-line\n\n      reader.addEventListener('load', e => {\n        const url = {\n          cssClass: proxy.parent.insertImageSettings.display === 'inline' ? CLS_IMGINLINE : CLS_IMGBREAK,\n          url: this.parent.insertImageSettings.saveFormat === 'Base64' || !isNullOrUndefined(args.callBack) ? reader.result : URL.createObjectURL(convertToBlob(reader.result)),\n          width: {\n            width: proxy.parent.insertImageSettings.width,\n            minWidth: proxy.parent.insertImageSettings.minWidth,\n            maxWidth: proxy.parent.getInsertImgMaxWidth()\n          },\n          height: {\n            height: proxy.parent.insertImageSettings.height,\n            minHeight: proxy.parent.insertImageSettings.minHeight,\n            maxHeight: proxy.parent.insertImageSettings.maxHeight\n          }\n        };\n\n        if (!isNullOrUndefined(args.callBack)) {\n          args.callBack(url);\n          return;\n        } else {\n          proxy.parent.formatter.process(proxy.parent, {\n            item: {\n              command: 'Images',\n              subCommand: 'Image'\n            }\n          }, args.args, url);\n          this.showPopupToolBar(args, url);\n        }\n      });\n      reader.readAsDataURL(args.file);\n    }\n  }\n\n  showPopupToolBar(e, url) {\n    const imageSrc = 'img[src=\"' + url.url + '\"]';\n    const imageElement = this.parent.inputElement.querySelector(imageSrc);\n    this.parent.quickToolbarModule.createQTBar('Image', 'MultiRow', this.parent.quickToolbarSettings.image, RenderType.ImageToolbar);\n    const args = {\n      args: e.args,\n      type: 'Images',\n      isNotify: undefined,\n      elements: imageElement\n    };\n\n    if (imageElement) {\n      setTimeout(() => {\n        this.showImageQuickToolbar(args);\n        this.resizeStart(e.args, imageElement);\n      }, 0);\n    }\n  }\n  /* eslint-disable */\n\n  /**\n   * Destroys the ToolBar.\n   *\n   * @method destroy\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n  /* eslint-enable */\n\n\n  destroy() {\n    this.prevSelectedImgEle = undefined;\n    this.removeEventListener();\n  }\n  /**\n   * For internal use only - Get the module name.\n   *\n   * @returns {void}\n   */\n\n\n  getModuleName() {\n    return 'image';\n  }\n\n}\n/**\n * Content module is used to render Rich Text Editor content\n *\n * @hidden\n * @deprecated\n */\n\n\nclass ViewSource {\n  /**\n   * Constructor for view source module\n   *\n   * @param {IRichTextEditor} parent - specifies the parent element.\n   * @param {ServiceLocator} locator - specifies the locator.\n   * @returns {void}\n   */\n  constructor(parent, locator) {\n    this.parent = parent;\n    const serviceLocator = locator;\n    this.rendererFactory = serviceLocator.getService('rendererFactory');\n    this.addEventListener();\n  }\n\n  addEventListener() {\n    this.parent.on(sourceCode, this.sourceCode, this);\n    this.parent.on(initialEnd, this.onInitialEnd, this);\n    this.parent.on(updateSource, this.updateSourceCode, this);\n    this.parent.on(destroy, this.destroy, this);\n  }\n\n  onInitialEnd() {\n    this.parent.formatter.editorManager.observer.on(KEY_DOWN_HANDLER, this.onKeyDown, this);\n  }\n\n  removeEventListener() {\n    this.unWireEvent();\n    this.parent.off(sourceCode, this.sourceCode);\n    this.parent.off(updateSource, this.updateSourceCode);\n    this.parent.off(initialEnd, this.onInitialEnd);\n    this.parent.off(destroy, this.destroy);\n    this.parent.formatter.editorManager.observer.off(KEY_DOWN_HANDLER, this.onKeyDown);\n  }\n\n  getSourceCode() {\n    return this.parent.createElement('textarea', {\n      className: 'e-rte-srctextarea'\n    });\n  }\n\n  wireEvent(element) {\n    this.keyboardModule = new KeyboardEvents$1(element, {\n      keyAction: this.previewKeyDown.bind(this),\n      keyConfigs: this.parent.formatter.keyConfig,\n      eventName: 'keydown'\n    });\n    EventHandler.add(this.previewElement, 'mousedown', this.mouseDownHandler, this);\n  }\n\n  unWireEvent() {\n    if (this.keyboardModule) {\n      this.keyboardModule.destroy();\n    }\n\n    if (this.previewElement) {\n      EventHandler.remove(this.previewElement, 'mousedown', this.mouseDownHandler);\n    }\n  }\n\n  wireBaseKeyDown() {\n    this.parent.keyboardModule = new KeyboardEvents$1(this.contentModule.getEditPanel(), {\n      keyAction: this.parent.keyDown.bind(this.parent),\n      keyConfigs: this.parent.formatter.keyConfig,\n      eventName: 'keydown'\n    });\n  }\n\n  unWireBaseKeyDown() {\n    this.parent.keyboardModule.destroy();\n  }\n\n  mouseDownHandler(e) {\n    this.parent.notify(sourceCodeMouseDown, {\n      args: e\n    });\n  }\n\n  previewKeyDown(event) {\n    switch (event.action) {\n      case 'html-source':\n        this.updateSourceCode(event);\n        event.preventDefault();\n        break;\n\n      case 'toolbar-focus':\n        if (this.parent.toolbarSettings.enable) {\n          const selector = '.e-toolbar-item[aria-disabled=\"false\"][title] [tabindex]';\n          this.parent.toolbarModule.baseToolbar.toolbarObj.element.querySelector(selector).focus();\n        }\n\n        break;\n    }\n  }\n\n  onKeyDown(e) {\n    switch (e.event.action) {\n      case 'html-source':\n        e.event.preventDefault();\n        this.sourceCode(e);\n        e.callBack({\n          requestType: 'SourceCode',\n          editorMode: 'HTML',\n          event: e.event\n        });\n        break;\n    }\n  }\n  /**\n   * sourceCode method\n   *\n   * @param {ClickEventArgs} args - specifies the click event.\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  sourceCode(args) {\n    this.parent.isBlur = false;\n    this.parent.trigger(actionBegin, {\n      requestType: 'SourceCode',\n      targetItem: 'SourceCode',\n      args: args\n    });\n    const tbItems = selectAll('.' + CLS_TB_ITEM, this.parent.element);\n    this.contentModule = this.rendererFactory.getRenderer(RenderType.Content);\n    this.parent.notify(updateToolbarItem, {\n      targetItem: 'SourceCode',\n      updateItem: 'Preview',\n      baseToolbar: this.parent.getBaseToolbarObject()\n    });\n\n    if (isNullOrUndefined(this.previewElement)) {\n      this.previewElement = this.getSourceCode();\n    }\n\n    this.parent.updateValueData();\n\n    if (this.parent.iframeSettings.enable) {\n      let rteContent;\n\n      if (isNullOrUndefined(this.parent.element.querySelector('#' + this.parent.element.id + '_source-view'))) {\n        rteContent = this.parent.createElement('div', {\n          className: 'e-source-content',\n          id: this.parent.element.id + '_source-view'\n        });\n      } else {\n        rteContent = this.parent.element.querySelector('#' + this.parent.element.id + '_source-view');\n      }\n\n      rteContent.appendChild(this.previewElement);\n      this.parent.element.appendChild(rteContent);\n      rteContent.style.height = this.contentModule.getPanel().style.height;\n      rteContent.style.marginTop = this.contentModule.getPanel().style.marginTop;\n      this.getPanel().value = this.getTextAreaValue();\n      this.contentModule.getPanel().style.display = 'none';\n      rteContent.style.display = 'block';\n      this.getPanel().style.display = 'block';\n    } else {\n      this.contentModule.getPanel().appendChild(this.previewElement);\n      this.getPanel().value = this.getTextAreaValue();\n      this.contentModule.getEditPanel().style.display = 'none';\n      this.previewElement.style.display = 'block';\n    }\n\n    this.parent.isBlur = false;\n    this.parent.disableToolbarItem(this.parent.toolbarSettings.items);\n    this.parent.enableToolbarItem('SourceCode');\n\n    if (this.parent.getToolbar()) {\n      removeClass([this.parent.getToolbar()], [CLS_EXPAND_OPEN]);\n    }\n\n    removeClass(tbItems, [CLS_ACTIVE]);\n    this.parent.setContentHeight('sourceCode', true);\n    this.wireEvent(this.previewElement);\n    this.unWireBaseKeyDown();\n    this.previewElement.focus();\n    this.parent.updateValue();\n\n    if (!isNullOrUndefined(this.parent.placeholder) && !this.parent.iframeSettings.enable) {\n      const placeHolderWrapper = this.parent.element.querySelector('.rte-placeholder.e-rte-placeholder');\n      placeHolderWrapper.style.display = 'none';\n    }\n\n    this.parent.trigger(actionComplete, {\n      requestType: 'SourceCode',\n      targetItem: 'SourceCode',\n      args: args\n    });\n    this.parent.invokeChangeEvent();\n  }\n  /**\n   * updateSourceCode method\n   *\n   * @param {ClickEventArgs} args - specifies the click event.\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  updateSourceCode(args) {\n    this.parent.isBlur = false;\n    this.parent.trigger(actionBegin, {\n      requestType: 'Preview',\n      targetItem: 'Preview',\n      args: args\n    });\n    const editHTML = this.getPanel();\n    this.parent.notify(updateToolbarItem, {\n      targetItem: 'Preview',\n      updateItem: 'SourceCode',\n      baseToolbar: this.parent.getBaseToolbarObject()\n    });\n    const serializeValue = this.parent.serializeValue(editHTML.value);\n    let value;\n\n    if (serializeValue === null || serializeValue === '') {\n      if (this.parent.enterKey === 'DIV') {\n        value = '<div><br/></div>';\n      } else if (this.parent.enterKey === 'BR') {\n        value = '<br/>';\n      } else {\n        value = '<p><br/></p>';\n      }\n    } else {\n      value = serializeValue;\n    }\n\n    if (this.parent.iframeSettings.enable) {\n      editHTML.parentElement.style.display = 'none';\n      editHTML.style.display = 'none';\n      this.contentModule.getPanel().style.display = 'block';\n      this.contentModule.getEditPanel().innerHTML = value;\n    } else {\n      editHTML.style.display = 'none';\n      this.contentModule.getEditPanel().style.display = 'block';\n      this.contentModule.getEditPanel().innerHTML = value;\n    }\n\n    this.parent.isBlur = false;\n    this.parent.enableToolbarItem(this.parent.toolbarSettings.items);\n\n    if (this.parent.getToolbar()) {\n      removeClass([this.parent.getToolbar()], [CLS_EXPAND_OPEN]);\n    }\n\n    this.parent.setContentHeight('preview', true);\n    this.unWireEvent();\n    this.wireBaseKeyDown();\n    this.contentModule.getEditPanel().focus();\n    this.parent.updateValue();\n\n    if (!isNullOrUndefined(this.parent.placeholder) && this.contentModule.getEditPanel().innerText.length === 0) {\n      const placeHolderWrapper = this.parent.element.querySelector('.rte-placeholder.e-rte-placeholder');\n      placeHolderWrapper.style.display = 'block';\n    }\n\n    this.parent.trigger(actionComplete, {\n      requestType: 'Preview',\n      targetItem: 'Preview',\n      args: args\n    });\n    this.parent.formatter.enableUndo(this.parent);\n    this.parent.invokeChangeEvent();\n  }\n\n  getTextAreaValue() {\n    return this.contentModule.getEditPanel().innerHTML === '<p><br></p>' || this.contentModule.getEditPanel().innerHTML === '<div><br></div>' || this.contentModule.getEditPanel().innerHTML === '<br>' || this.contentModule.getEditPanel().childNodes.length === 1 && this.contentModule.getEditPanel().childNodes[0].tagName === 'P' && this.contentModule.getEditPanel().innerHTML.length === 7 || this.contentModule.getEditPanel().childNodes[0].tagName === 'DIV' && this.contentModule.getEditPanel().innerHTML.length === 11 ? '' : this.parent.value;\n  }\n  /**\n   * getPanel method\n   *\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  getPanel() {\n    return this.parent.element && this.parent.element.querySelector('.e-rte-srctextarea');\n  }\n  /**\n   * getViewPanel method\n   *\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  getViewPanel() {\n    return this.parent.iframeSettings.enable && this.getPanel() ? this.getPanel().parentElement : this.getPanel();\n  }\n  /**\n   * Destroy the entire RichTextEditor.\n   *\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  destroy() {\n    this.removeEventListener();\n  }\n\n}\n/**\n * `Table` module is used to handle table actions.\n */\n\n\nclass Table {\n  constructor(parent, serviceLocator) {\n    this.ensureInsideTableList = true;\n    this.pageX = null;\n    this.pageY = null;\n    this.moveEle = null;\n    this.parent = parent;\n    this.rteID = parent.element.id;\n    this.l10n = serviceLocator.getService('rteLocale');\n    this.rendererFactory = serviceLocator.getService('rendererFactory');\n    this.dialogRenderObj = serviceLocator.getService('dialogRenderObject');\n    this.addEventListener();\n  }\n\n  addEventListener() {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.on(createTable, this.renderDlgContent, this);\n    this.parent.on(initialEnd, this.afterRender, this);\n    this.parent.on(dynamicModule, this.afterRender, this);\n    this.parent.on(showTableDialog, this.showDialog, this);\n    this.parent.on(closeTableDialog, this.closeDialog, this);\n    this.parent.on(docClick, this.docClick, this);\n    this.parent.on(editAreaClick, this.editAreaClickHandler, this);\n    this.parent.on(clearDialogObj, this.clearDialogObj, this);\n    this.parent.on(tableToolbarAction, this.onToolbarAction, this);\n    this.parent.on(dropDownSelect, this.dropdownSelect, this);\n    this.parent.on(keyDown, this.keyDown, this);\n    this.parent.on(mouseUp, this.selectionTable, this);\n    this.parent.on(destroy, this.destroy, this);\n  }\n\n  removeEventListener() {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.off(createTable, this.renderDlgContent);\n    this.parent.off(initialEnd, this.afterRender);\n    this.parent.off(dynamicModule, this.afterRender);\n    this.parent.off(docClick, this.docClick);\n    this.parent.off(showTableDialog, this.showDialog);\n    this.parent.off(closeTableDialog, this.closeDialog);\n    this.parent.off(editAreaClick, this.editAreaClickHandler);\n    this.parent.off(clearDialogObj, this.clearDialogObj);\n    this.parent.off(tableToolbarAction, this.onToolbarAction);\n    this.parent.off(dropDownSelect, this.dropdownSelect);\n    this.parent.off(mouseDown, this.cellSelect);\n    this.parent.off(tableColorPickerChanged, this.setBGColor);\n    this.parent.off(keyDown, this.keyDown);\n    this.parent.off(mouseUp, this.selectionTable);\n    this.parent.off(destroy, this.destroy);\n  }\n\n  selectionTable(e) {\n    const target = e.args.target;\n\n    if (Browser.info.name === 'mozilla' && !isNullOrUndefined(closest(target, 'table')) && closest(target, 'table').tagName === 'TABLE') {\n      this.parent.contentModule.getEditPanel().setAttribute('contenteditable', 'true');\n    }\n  }\n\n  afterRender() {\n    if (isNullOrUndefined(this.contentModule)) {\n      this.contentModule = this.rendererFactory.getRenderer(RenderType.Content);\n      this.parent.on(tableColorPickerChanged, this.setBGColor, this);\n      this.parent.on(mouseDown, this.cellSelect, this);\n\n      if (this.parent.tableSettings.resize) {\n        EventHandler.add(this.parent.contentModule.getEditPanel(), Browser.touchStartEvent, this.resizeStart, this);\n      }\n\n      if (!Browser.isDevice && this.parent.tableSettings.resize) {\n        EventHandler.add(this.contentModule.getEditPanel(), 'mouseover', this.resizeHelper, this);\n      }\n    }\n  }\n\n  dropdownSelect(e) {\n    const item = e.item;\n\n    if (!document.body.contains(document.body.querySelector('.e-rte-quick-toolbar')) || item.command !== 'Table') {\n      return;\n    }\n\n    const range = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.contentModule.getDocument());\n    const args = {\n      args: e,\n      selection: this.parent.formatter.editorManager.nodeSelection.save(range, this.contentModule.getDocument()),\n      selectParent: this.parent.formatter.editorManager.nodeSelection.getParentNodeCollection(range)\n    };\n\n    switch (item.subCommand) {\n      case 'InsertRowBefore':\n      case 'InsertRowAfter':\n        this.addRow(args.selection, e);\n        break;\n\n      case 'InsertColumnLeft':\n      case 'InsertColumnRight':\n        this.addColumn(args.selection, e);\n        break;\n\n      case 'DeleteColumn':\n      case 'DeleteRow':\n        this.removeRowColumn(args.selection, e);\n        break;\n\n      case 'AlignTop':\n      case 'AlignMiddle':\n      case 'AlignBottom':\n        this.verticalAlign(args, e);\n        break;\n\n      case 'Dashed':\n      case 'Alternate':\n      case 'Custom':\n        this.tableStyles(args, item.subCommand);\n        break;\n\n      case 'Merge':\n      case 'VerticalSplit':\n      case 'HorizontalSplit':\n        this.UpdateCells(args.selection, e);\n        break;\n    }\n  }\n\n  UpdateCells(selectCell, e) {\n    this.parent.formatter.process(this.parent, e, e, {\n      selection: selectCell,\n      subCommand: e.item.subCommand\n    });\n    this.hideTableQuickToolbar();\n  }\n\n  keyDown(e) {\n    const event = e.args; // eslint-disable-next-line\n\n    const proxy = this;\n\n    switch (event.action) {\n      case 'escape':\n        break;\n\n      case 'insert-table':\n        this.openDialog(true, e);\n        event.preventDefault();\n        break;\n    }\n\n    if (!isNullOrUndefined(this.parent.formatter.editorManager.nodeSelection) && this.contentModule && event.code !== 'KeyK') {\n      const range = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.contentModule.getDocument());\n      const selection = this.parent.formatter.editorManager.nodeSelection.save(range, this.contentModule.getDocument());\n      let ele = this.parent.formatter.editorManager.nodeSelection.getParentNodeCollection(range)[0];\n      ele = ele && ele.tagName !== 'TD' && ele.tagName !== 'TH' ? ele.parentElement : ele;\n\n      if (event.keyCode === 8 || event.keyCode === 46 || event.ctrlKey && event.keyCode === 88) {\n        if (ele && ele.tagName === 'TBODY') {\n          event.preventDefault();\n          proxy.removeTable(selection, event, true);\n        } else if (ele && ele.querySelectorAll('table').length > 0) {\n          this.removeResizeElement();\n        }\n      }\n\n      if (ele && ele.tagName !== 'TD' && ele.tagName !== 'TH') {\n        const closestTd = closest(ele, 'td');\n        ele = !isNullOrUndefined(closestTd) && this.parent.inputElement.contains(closestTd) ? closestTd : ele;\n      }\n\n      if (ele && (ele.tagName === 'TD' || ele.tagName === 'TH')) {\n        switch (event.keyCode) {\n          case 9:\n          case 37:\n          case 39:\n            proxy.tabSelection(event, selection, ele);\n            break;\n\n          case 40:\n          case 38:\n            proxy.tableArrowNavigation(event, selection, ele);\n            break;\n        }\n      }\n    }\n  }\n\n  openDialog(isInternal, e) {\n    if (!isInternal) {\n      this.parent.contentModule.getEditPanel().focus();\n    }\n\n    if (this.parent.editorMode === 'HTML') {\n      const docElement = this.parent.contentModule.getDocument();\n      const range = this.parent.formatter.editorManager.nodeSelection.getRange(docElement);\n      const selection = this.parent.formatter.editorManager.nodeSelection.save(range, docElement);\n      const args = {\n        originalEvent: e ? e.args : {\n          action: 'insert-table'\n        },\n        item: {\n          command: 'Table',\n          subCommand: 'CreateTable'\n        }\n      };\n      this.insertTableDialog({\n        self: this,\n        args: args,\n        selection: selection\n      });\n    }\n  }\n\n  showDialog() {\n    this.openDialog(false);\n  }\n\n  closeDialog() {\n    if (this.editdlgObj) {\n      this.editdlgObj.hide({\n        returnValue: true\n      });\n    }\n  }\n\n  onToolbarAction(args) {\n    const item = args.args.item;\n\n    switch (item.subCommand) {\n      case 'TableHeader':\n        this.tableHeader(args.selection, args.args);\n        break;\n\n      case 'TableRemove':\n        this.removeTable(args.selection, args.args);\n        break;\n\n      case 'TableEditProperties':\n        this.editTable(args);\n        break;\n    }\n  }\n\n  verticalAlign(args, e) {\n    const tdEle = closest(args.selectParent[0], 'td') || closest(args.selectParent[0], 'th');\n\n    if (tdEle) {\n      this.parent.formatter.process(this.parent, e, e, {\n        tableCell: tdEle,\n        subCommand: e.item.subCommand\n      });\n    }\n  }\n\n  tableStyles(args, command) {\n    const table = closest(args.selectParent[0], 'table');\n\n    if (command === 'Dashed') {\n      /* eslint-disable */\n      this.parent.element.classList.contains(CLS_TB_DASH_BOR) ? this.parent.element.classList.remove(CLS_TB_DASH_BOR) : this.parent.element.classList.add(CLS_TB_DASH_BOR);\n      table.classList.contains(CLS_TB_DASH_BOR) ? table.classList.remove(CLS_TB_DASH_BOR) : table.classList.add(CLS_TB_DASH_BOR);\n    }\n\n    if (command === 'Alternate') {\n      this.parent.element.classList.contains(CLS_TB_ALT_BOR) ? this.parent.element.classList.remove(CLS_TB_ALT_BOR) : this.parent.element.classList.add(CLS_TB_ALT_BOR);\n      table.classList.contains(CLS_TB_ALT_BOR) ? table.classList.remove(CLS_TB_ALT_BOR) : table.classList.add(CLS_TB_ALT_BOR);\n      /* eslint-enable */\n    }\n\n    if (args.args && args.args.item.cssClass) {\n      const classList = args.args.item.cssClass.split(' ');\n\n      for (let i = 0; i < classList.length; i++) {\n        if (table.classList.contains(classList[i])) {\n          table.classList.remove(classList[i]);\n        } else {\n          table.classList.add(classList[i]);\n        }\n      }\n    }\n\n    this.parent.formatter.saveData();\n    this.parent.formatter.editorManager.nodeSelection.restore();\n  }\n\n  insideList(range) {\n    const blockNodes = this.parent.formatter.editorManager.domNode.blockNodes();\n    const nodes = [];\n\n    for (let i = 0; i < blockNodes.length; i++) {\n      if (blockNodes[i].parentNode.tagName === 'LI') {\n        nodes.push(blockNodes[i].parentNode);\n      } else if (blockNodes[i].tagName === 'LI' && blockNodes[i].childNodes[0].tagName !== 'P' && blockNodes[i].childNodes[0].tagName !== 'OL' && blockNodes[i].childNodes[0].tagName !== 'UL') {\n        nodes.push(blockNodes[i]);\n      }\n    }\n\n    if (nodes.length > 1 || nodes.length && range.startOffset === 0 && range.endOffset === 0) {\n      this.ensureInsideTableList = true;\n      return true;\n    } else {\n      this.ensureInsideTableList = false;\n      return false;\n    }\n  }\n\n  tabSelection(event, selection, ele) {\n    const insideList = this.insideList(selection.range);\n\n    if ((event.keyCode === 37 || event.keyCode === 39) && selection.range.startContainer.nodeType === 3 || insideList) {\n      return;\n    }\n\n    event.preventDefault();\n    ele.classList.remove(CLS_TABLE_SEL);\n\n    if (!event.shiftKey && event.keyCode !== 37) {\n      let nextElement = !isNullOrUndefined(ele.nextSibling) ? ele.nextSibling : !isNullOrUndefined(closest(ele, 'tr').nextSibling) ? closest(ele, 'tr').nextSibling.childNodes[0] : !isNullOrUndefined(closest(ele, 'table').nextSibling) ? closest(ele, 'table').nextSibling.nodeName.toLowerCase() === 'td' ? closest(ele, 'table').nextSibling : ele : ele;\n\n      if (ele === nextElement && ele.nodeName === 'TH') {\n        nextElement = closest(ele, 'table').rows[1].cells[0];\n      }\n\n      if (event.keyCode === 39 && ele === nextElement) {\n        nextElement = closest(ele, 'table').nextSibling;\n      }\n\n      if (nextElement) {\n        // eslint-disable-next-line\n        nextElement.textContent.trim() !== '' && closest(nextElement, 'td') ? selection.setSelectionNode(this.contentModule.getDocument(), nextElement) : selection.setSelectionText(this.contentModule.getDocument(), nextElement, nextElement, 0, 0);\n      }\n\n      if (ele === nextElement && event.keyCode !== 39 && nextElement) {\n        ele.classList.add(CLS_TABLE_SEL);\n        this.addRow(selection, event, true);\n        ele.classList.remove(CLS_TABLE_SEL);\n        nextElement = nextElement.parentElement.nextSibling.firstChild; // eslint-disable-next-line\n\n        nextElement.textContent.trim() !== '' && closest(nextElement, 'td') ? selection.setSelectionNode(this.contentModule.getDocument(), nextElement) : selection.setSelectionText(this.contentModule.getDocument(), nextElement, nextElement, 0, 0);\n      }\n    } else {\n      let prevElement = !isNullOrUndefined(ele.previousSibling) ? ele.previousSibling : !isNullOrUndefined(closest(ele, 'tr').previousSibling) ? closest(ele, 'tr').previousSibling.childNodes[closest(ele, 'tr').previousSibling.childNodes.length - 1] : !isNullOrUndefined(closest(ele, 'table').previousSibling) ? closest(ele, 'table').previousSibling.nodeName.toLowerCase() === 'td' ? closest(ele, 'table').previousSibling : ele : ele;\n\n      if (ele === prevElement && ele.cellIndex === 0 && closest(ele, 'table').tHead) {\n        const clsTble = closest(ele, 'table');\n        prevElement = clsTble.rows[0].cells[clsTble.rows[0].cells.length - 1];\n      }\n\n      if (event.keyCode === 37 && ele === prevElement) {\n        prevElement = closest(ele, 'table').previousSibling;\n      }\n\n      if (prevElement) {\n        // eslint-disable-next-line\n        prevElement.textContent.trim() !== '' && closest(prevElement, 'td') ? selection.setSelectionNode(this.contentModule.getDocument(), prevElement) : selection.setSelectionText(this.contentModule.getDocument(), prevElement, prevElement, 0, 0);\n      }\n    }\n  }\n\n  tableArrowNavigation(event, selection, ele) {\n    const selText = selection.range.startContainer;\n\n    if (event.keyCode === 40 && selText.nodeType === 3 && (selText.nextSibling && selText.nextSibling.nodeName === 'BR' || selText.parentNode && selText.parentNode.nodeName !== 'TD') || event.keyCode === 38 && selText.nodeType === 3 && (selText.previousSibling && selText.previousSibling.nodeName === 'BR' || selText.parentNode && selText.parentNode.nodeName !== 'TD')) {\n      return;\n    }\n\n    event.preventDefault();\n    ele.classList.remove(CLS_TABLE_SEL);\n\n    if (event.keyCode === 40) {\n      ele = !isNullOrUndefined(closest(ele, 'tr').nextElementSibling) ? closest(ele, 'tr').nextElementSibling.children[ele.cellIndex] : closest(ele, 'table').tHead && ele.nodeName === 'TH' ? closest(ele, 'table').rows[1].cells[ele.cellIndex] : !isNullOrUndefined(closest(ele, 'table').nextSibling) ? closest(ele, 'table').nextSibling : ele;\n    } else {\n      ele = !isNullOrUndefined(closest(ele, 'tr').previousElementSibling) ? closest(ele, 'tr').previousElementSibling.children[ele.cellIndex] : closest(ele, 'table').tHead && ele.nodeName !== 'TH' ? closest(ele, 'table').tHead.rows[0].cells[ele.cellIndex] : !isNullOrUndefined(closest(ele, 'table').previousSibling) ? closest(ele, 'table').previousSibling : ele;\n    }\n\n    if (ele) {\n      selection.setSelectionText(this.contentModule.getDocument(), ele, ele, 0, 0);\n    }\n  }\n\n  setBGColor(args) {\n    const range = this.parent.formatter.editorManager.nodeSelection.getRange(this.contentModule.getDocument()); // eslint-disable-next-line\n\n    const selection = this.parent.formatter.editorManager.nodeSelection.save(range, this.contentModule.getDocument()); // eslint-disable-next-line\n\n    const selectedCells = this.curTable.querySelectorAll('.e-cell-select');\n\n    for (let i = 0; i < selectedCells.length; i++) {\n      selectedCells[i].style.backgroundColor = args.item.value;\n    }\n\n    this.parent.formatter.saveData();\n  }\n\n  hideTableQuickToolbar() {\n    if (this.quickToolObj && this.quickToolObj.tableQTBar && document.body.contains(this.quickToolObj.tableQTBar.element)) {\n      this.quickToolObj.tableQTBar.hidePopup();\n    }\n  }\n\n  tableHeader(selection, e) {\n    this.parent.formatter.process(this.parent, e, e.originalEvent, {\n      selection: selection,\n      subCommand: e.item.subCommand\n    });\n  }\n\n  editAreaClickHandler(e) {\n    if (this.parent.readonly || !isNullOrUndefined(closest(e.args.target, '.e-img-caption'))) {\n      return;\n    }\n\n    const args = e.args;\n    const showOnRightClick = this.parent.quickToolbarSettings.showOnRightClick;\n\n    if (args.which === 2 || showOnRightClick && args.which === 1 || !showOnRightClick && args.which === 3) {\n      return;\n    }\n\n    if (this.parent.editorMode === 'HTML' && this.parent.quickToolbarModule && this.parent.quickToolbarModule.tableQTBar) {\n      this.quickToolObj = this.parent.quickToolbarModule;\n      const target = args.target;\n      this.contentModule = this.rendererFactory.getRenderer(RenderType.Content);\n      const isPopupOpen = this.quickToolObj.tableQTBar.element.classList.contains('e-rte-pop');\n\n      if (isPopupOpen) {\n        return;\n      }\n\n      const range = this.parent.formatter.editorManager.nodeSelection.getRange(this.contentModule.getDocument());\n      const closestTable = closest(target, 'table');\n      const startNode = this.parent.getRange().startContainer.parentElement;\n      const endNode = this.parent.getRange().endContainer.parentElement;\n\n      if (target && target.nodeName !== 'A' && target.nodeName !== 'IMG' && startNode === endNode && (target.nodeName === 'TD' || target.nodeName === 'TH' || target.nodeName === 'TABLE' || closestTable && this.parent.contentModule.getEditPanel().contains(closestTable)) && !(range.startContainer.nodeType === 3 && !range.collapsed)) {\n        const range = this.parent.formatter.editorManager.nodeSelection.getRange(this.contentModule.getDocument());\n        this.parent.formatter.editorManager.nodeSelection.save(range, this.contentModule.getDocument());\n        this.parent.formatter.editorManager.nodeSelection.Clear(this.contentModule.getDocument());\n        const pageY = this.parent.iframeSettings.enable ? window.pageYOffset + this.parent.element.getBoundingClientRect().top + args.clientY : args.pageY;\n        this.quickToolObj.tableQTBar.showPopup(args.pageX, pageY, target);\n        this.parent.formatter.editorManager.nodeSelection.restore();\n      } else {\n        this.hideTableQuickToolbar();\n      }\n    }\n  }\n\n  tableCellSelect(e) {\n    const target = e.target;\n    const row = Array.prototype.slice.call(target.parentElement.parentElement.children).indexOf(target.parentElement);\n    const col = Array.prototype.slice.call(target.parentElement.children).indexOf(target);\n    const list = this.dlgDiv.querySelectorAll('.e-rte-tablecell');\n    Array.prototype.forEach.call(list, item => {\n      const parentIndex = Array.prototype.slice.call(item.parentElement.parentElement.children).indexOf(item.parentElement);\n      const cellIndex = Array.prototype.slice.call(item.parentElement.children).indexOf(item);\n      removeClass([item], 'e-active');\n\n      if (parentIndex <= row && cellIndex <= col) {\n        addClass([item], 'e-active');\n      }\n    });\n    this.tblHeader.innerHTML = col + 1 + 'x' + (row + 1);\n  } // eslint-disable-next-line\n\n\n  tableMouseUp(e) {\n    EventHandler.remove(this.curTable, 'mousemove', this.tableMove);\n  } // eslint-disable-next-line\n\n\n  tableCellLeave(e) {\n    removeClass(this.dlgDiv.querySelectorAll('.e-rte-tablecell'), 'e-active');\n    addClass([this.dlgDiv.querySelector('.e-rte-tablecell')], 'e-active');\n    this.tblHeader.innerHTML = 1 + 'x' + 1;\n  }\n\n  tableCellClick(e) {\n    const target = e.target;\n    const row = Array.prototype.slice.call(target.parentElement.parentElement.children).indexOf(target.parentElement) + 1;\n    const col = Array.prototype.slice.call(target.parentElement.children).indexOf(target) + 1;\n    this.self.tableInsert(row, col, e, this);\n  }\n\n  tableInsert(row, col, e, selectionObj) {\n    const proxy = selectionObj.self ? selectionObj.self : this;\n    const startContainer = selectionObj.selection.range.startContainer;\n\n    if (startContainer.nodeName === 'P' && startContainer.textContent.trim() === '' && !(startContainer.childNodes.length > 0)) {\n      startContainer.innerHTML = '<br />';\n    }\n\n    const parentNode = startContainer.parentNode;\n\n    if (proxy.parent.editorMode === 'HTML' && (proxy.parent.iframeSettings.enable && !hasClass(parentNode.ownerDocument.querySelector('body'), 'e-lib') || // eslint-disable-next-line\n    !proxy.parent.iframeSettings.enable && isNullOrUndefined(closest(parentNode, '[id=' + \"'\" + proxy.contentModule.getPanel().id + \"'\" + ']')))) {\n      proxy.contentModule.getEditPanel().focus();\n      const range = proxy.parent.formatter.editorManager.nodeSelection.getRange(proxy.contentModule.getDocument());\n      selectionObj.selection = proxy.parent.formatter.editorManager.nodeSelection.save(range, proxy.contentModule.getDocument());\n    }\n\n    const value = {\n      rows: row,\n      columns: col,\n      width: {\n        minWidth: proxy.parent.tableSettings.minWidth,\n        maxWidth: proxy.parent.tableSettings.maxWidth,\n        width: proxy.parent.tableSettings.width\n      },\n      selection: selectionObj.selection\n    };\n\n    if (proxy.popupObj) {\n      proxy.popupObj.hide();\n    }\n\n    if (proxy.editdlgObj) {\n      proxy.editdlgObj.hide();\n    }\n\n    proxy.parent.formatter.process(proxy.parent, selectionObj.args, selectionObj.args.originalEvent, value);\n    proxy.contentModule.getEditPanel().focus();\n    proxy.parent.on(mouseDown, proxy.cellSelect, proxy);\n  }\n\n  cellSelect(e) {\n    let target = e.args.target;\n    const tdNode = closest(target, 'td,th');\n    target = target.nodeName !== 'TD' && tdNode && this.parent.contentModule.getEditPanel().contains(tdNode) ? tdNode : target;\n    removeClass(this.contentModule.getEditPanel().querySelectorAll('table td, table th'), CLS_TABLE_SEL);\n\n    if (target && (target.tagName === 'TD' || target.tagName === 'TH')) {\n      addClass([target], CLS_TABLE_SEL);\n      this.activeCell = target;\n      this.curTable = this.curTable ? this.curTable : closest(target, 'table');\n      EventHandler.add(this.curTable, 'mousemove', this.tableMove, this);\n      EventHandler.add(this.curTable, 'mouseup', this.tableMouseUp, this);\n      this.removeResizeElement();\n\n      if (this.helper && this.contentModule.getEditPanel().contains(this.helper)) {\n        detach(this.helper);\n      }\n    }\n\n    if (Browser.info.name === 'mozilla' && !isNullOrUndefined(closest(target, 'table')) && closest(target, 'table').tagName === 'TABLE') {\n      this.parent.contentModule.getEditPanel().setAttribute('contenteditable', 'false');\n    }\n  }\n\n  tableMove(event) {\n    this.parent.formatter.editorManager.observer.notify('TABLE_MOVE', {\n      event: event,\n      selectNode: [this.activeCell]\n    });\n  }\n\n  resizeHelper(e) {\n    if (this.parent.readonly) {\n      return;\n    }\n\n    const target = e.target || e.targetTouches[0].target;\n    const closestTable = closest(target, 'table');\n\n    if (!isNullOrUndefined(this.curTable) && !isNullOrUndefined(closestTable) && closestTable !== this.curTable) {\n      this.removeResizeElement();\n      this.removeHelper(e);\n      this.cancelResizeAction();\n    }\n\n    if (target.nodeName === 'TABLE' || target.nodeName === 'TD' || target.nodeName === 'TH') {\n      this.curTable = closestTable && this.parent.contentModule.getEditPanel().contains(closestTable) && (target.nodeName === 'TD' || target.nodeName === 'TH') ? closestTable : target;\n      this.removeResizeElement();\n      this.tableResizeEleCreation(this.curTable, e);\n    }\n  }\n\n  tableResizeEleCreation(table, e) {\n    this.parent.preventDefaultResize(e);\n    const columns = Array.prototype.slice.call(table.rows[this.calMaxCol(table)].cells, 1);\n    const rows = [];\n\n    for (let i = 0; i < table.rows.length; i++) {\n      rows.push(Array.prototype.slice.call(table.rows[i].cells, 0, 1)[0]);\n    }\n\n    const height = parseInt(getComputedStyle(table).height, 10);\n    const width = parseInt(getComputedStyle(table).width, 10);\n    const pos = this.calcPos(table);\n\n    for (let i = 0; columns.length > i; i++) {\n      const colReEle = this.parent.createElement('span', {\n        attrs: {\n          'data-col': (i + 1).toString(),\n          'unselectable': 'on',\n          'contenteditable': 'false'\n        }\n      });\n      colReEle.classList.add(CLS_RTE_TABLE_RESIZE, CLS_TB_COL_RES);\n      colReEle.style.cssText = 'height: ' + height + 'px; width: 4px; top: ' + pos.top + 'px; left:' + (pos.left + this.calcPos(columns[i]).left) + 'px;';\n      this.contentModule.getEditPanel().appendChild(colReEle);\n    }\n\n    for (let i = 0; rows.length > i; i++) {\n      const rowReEle = this.parent.createElement('span', {\n        attrs: {\n          'data-row': i.toString(),\n          'unselectable': 'on',\n          'contenteditable': 'false'\n        }\n      });\n      rowReEle.classList.add(CLS_RTE_TABLE_RESIZE, CLS_TB_ROW_RES);\n      const rowPosLeft = !isNullOrUndefined(table.getAttribute('cellspacing')) || table.getAttribute('cellspacing') !== '' ? 0 : this.calcPos(rows[i]).left;\n      rowReEle.style.cssText = 'width: ' + width + 'px; height: 4px; top: ' + (this.calcPos(rows[i]).top + pos.top + rows[i].offsetHeight - 2) + 'px; left:' + (rowPosLeft + pos.left) + 'px;';\n      this.contentModule.getEditPanel().appendChild(rowReEle);\n    }\n\n    const tableReBox = this.parent.createElement('span', {\n      className: CLS_TB_BOX_RES,\n      attrs: {\n        'data-col': columns.length.toString(),\n        'unselectable': 'on',\n        'contenteditable': 'false'\n      }\n    });\n    tableReBox.style.cssText = 'top: ' + (pos.top + height - 4) + 'px; left:' + (pos.left + width - 4) + 'px;';\n\n    if (Browser.isDevice) {\n      tableReBox.classList.add('e-rmob');\n    }\n\n    this.contentModule.getEditPanel().appendChild(tableReBox);\n  }\n\n  removeResizeElement() {\n    const item = this.parent.contentModule.getEditPanel().querySelectorAll('.e-column-resize, .e-row-resize, .e-table-box');\n\n    if (item.length > 0) {\n      for (let i = 0; i < item.length; i++) {\n        detach(item[i]);\n      }\n    }\n  }\n\n  calcPos(elem) {\n    let parentOffset = {\n      top: 0,\n      left: 0\n    }; // eslint-disable-next-line\n\n    const offset = elem.getBoundingClientRect();\n    const doc = elem.ownerDocument;\n    let offsetParent = elem.offsetParent || doc.documentElement;\n\n    while (offsetParent && (offsetParent === doc.body || offsetParent === doc.documentElement) && offsetParent.style.position === 'static') {\n      offsetParent = offsetParent.parentNode;\n    }\n\n    if (offsetParent.nodeName === 'TD' && elem.nodeName === 'TABLE') {\n      offsetParent = closest(offsetParent, '.e-rte-content');\n    }\n\n    if (offsetParent && offsetParent !== elem && offsetParent.nodeType === 1) {\n      // eslint-disable-next-line\n      parentOffset = offsetParent.getBoundingClientRect();\n    }\n\n    return {\n      top: elem.offsetTop,\n      left: elem.offsetLeft\n    };\n  }\n\n  getPointX(e) {\n    if (e.touches && e.touches.length) {\n      return e.touches[0].pageX;\n    } else {\n      return e.pageX;\n    }\n  }\n\n  getPointY(e) {\n    if (e.touches && e.touches.length) {\n      return e.touches[0].pageY;\n    } else {\n      return e.pageY;\n    }\n  }\n\n  resizeStart(e) {\n    if (this.parent.readonly) {\n      return;\n    }\n\n    if (Browser.isDevice) {\n      this.resizeHelper(e);\n    }\n\n    const target = e.target;\n\n    if (target.classList.contains(CLS_TB_COL_RES) || target.classList.contains(CLS_TB_ROW_RES) || target.classList.contains(CLS_TB_BOX_RES)) {\n      e.preventDefault();\n      this.parent.preventDefaultResize(e);\n      removeClass(this.curTable.querySelectorAll('td,th'), CLS_TABLE_SEL);\n      this.parent.formatter.editorManager.nodeSelection.Clear(this.contentModule.getDocument());\n      this.pageX = this.getPointX(e);\n      this.pageY = this.getPointY(e);\n      this.resizeBtnInit();\n      this.hideTableQuickToolbar();\n\n      if (target.classList.contains(CLS_TB_COL_RES)) {\n        this.resizeBtnStat.column = true;\n        this.columnEle = this.curTable.rows[this.calMaxCol(this.curTable)].cells[parseInt(target.getAttribute('data-col'), 10)];\n        this.colIndex = this.columnEle.cellIndex;\n        this.moveEle = e.target;\n        this.appendHelper();\n      }\n\n      if (target.classList.contains(CLS_TB_ROW_RES)) {\n        this.rowEle = this.curTable.rows[parseInt(target.getAttribute('data-row'), 10)];\n        this.resizeBtnStat.row = true;\n        this.appendHelper();\n      }\n\n      if (target.classList.contains(CLS_TB_BOX_RES)) {\n        this.resizeBtnStat.tableBox = true;\n      }\n\n      if (Browser.isDevice && this.helper && !this.helper.classList.contains('e-reicon')) {\n        this.helper.classList.add('e-reicon');\n        EventHandler.add(document, Browser.touchStartEvent, this.removeHelper, this);\n        EventHandler.add(this.helper, Browser.touchStartEvent, this.resizeStart, this);\n      } else {\n        const args = {\n          event: e,\n          requestType: 'Table'\n        };\n        this.parent.trigger(resizeStart, args, resizeStartArgs => {\n          if (resizeStartArgs.cancel) {\n            this.cancelResizeAction();\n          }\n        });\n      }\n\n      EventHandler.add(this.contentModule.getDocument(), Browser.touchMoveEvent, this.resizing, this);\n      EventHandler.add(this.contentModule.getDocument(), Browser.touchEndEvent, this.resizeEnd, this);\n    }\n  }\n\n  removeHelper(e) {\n    const cls = e.target.classList;\n\n    if (!cls.contains('e-reicon') && this.helper) {\n      EventHandler.remove(document, Browser.touchStartEvent, this.removeHelper);\n      EventHandler.remove(this.helper, Browser.touchStartEvent, this.resizeStart);\n\n      if (this.helper && this.contentModule.getEditPanel().contains(this.helper)) {\n        detach(this.helper);\n      }\n\n      this.pageX = null;\n      this.helper = null;\n    }\n  }\n\n  appendHelper() {\n    this.helper = this.parent.createElement('div', {\n      className: 'e-table-rhelper'\n    });\n\n    if (Browser.isDevice) {\n      this.helper.classList.add('e-reicon');\n    }\n\n    this.contentModule.getEditPanel().appendChild(this.helper);\n    this.setHelperHeight();\n  }\n\n  setHelperHeight() {\n    const pos = this.calcPos(this.curTable);\n\n    if (this.resizeBtnStat.column) {\n      this.helper.classList.add('e-column-helper');\n      this.helper.style.cssText = 'height: ' + getComputedStyle(this.curTable).height + '; top: ' + pos.top + 'px; left:' + (pos.left + this.calcPos(this.columnEle).left - 1) + 'px;';\n    } else {\n      this.helper.classList.add('e-row-helper');\n      this.helper.style.cssText = 'width: ' + getComputedStyle(this.curTable).width + '; top: ' + (this.calcPos(this.rowEle).top + pos.top + this.rowEle.offsetHeight) + 'px; left:' + (this.calcPos(this.rowEle).left + pos.left) + 'px;';\n    }\n  }\n\n  updateHelper() {\n    const pos = this.calcPos(this.curTable);\n\n    if (this.resizeBtnStat.column) {\n      const left = pos.left + this.calcPos(this.columnEle).left - 1;\n      this.helper.style.left = left + 'px';\n    } else {\n      const top = this.calcPos(this.rowEle).top + pos.top + this.rowEle.offsetHeight;\n      this.helper.style.top = top + 'px';\n    }\n  }\n\n  calMaxCol(element) {\n    let max = 0;\n    let maxRowIndex;\n\n    for (let i = 0; i < element.rows.length; i++) {\n      if (max < element.rows[i].cells.length) {\n        maxRowIndex = i;\n        max = element.rows[i].cells.length;\n      }\n    }\n\n    return maxRowIndex;\n  }\n\n  resizing(e) {\n    const pageX = this.getPointX(e);\n    const pageY = this.getPointY(e);\n    const mouseX = this.parent.enableRtl ? -(pageX - this.pageX) : pageX - this.pageX;\n    const mouseY = this.parent.enableRtl ? -(pageY - this.pageY) : pageY - this.pageY;\n    this.pageX = pageX;\n    this.pageY = pageY;\n    const args = {\n      event: e,\n      requestType: 'table'\n    };\n    this.parent.trigger(onResize, args, resizingArgs => {\n      if (resizingArgs.cancel) {\n        this.cancelResizeAction();\n      } else {\n        const tableReBox = this.contentModule.getEditPanel().querySelector('.e-table-box');\n        const tableWidth = parseInt(getComputedStyle(this.curTable).width, 10);\n        const tableHeight = parseInt(getComputedStyle(this.curTable).height, 10);\n        const paddingSize = +getComputedStyle(this.contentModule.getEditPanel()).paddingRight.match(/\\d/g).join('');\n        const rteWidth = this.contentModule.getEditPanel().offsetWidth - paddingSize * 2;\n\n        if (this.resizeBtnStat.column) {\n          const cellColl = this.curTable.rows[this.calMaxCol(this.curTable)].cells;\n          const width = parseFloat(this.columnEle.offsetWidth.toString());\n          const actualwid = width - mouseX;\n          const totalwid = parseFloat(this.columnEle.offsetWidth.toString()) + parseFloat(cellColl[this.colIndex - 1].offsetWidth.toString());\n\n          for (let i = 0; i < this.curTable.rows.length; i++) {\n            if (totalwid - actualwid > 20 && actualwid > 20) {\n              const leftColumnWidth = totalwid - actualwid;\n              const rightColWidth = actualwid;\n\n              if (!isNullOrUndefined(this.curTable.rows[i].cells[this.colIndex - 1])) {\n                this.curTable.rows[i].cells[this.colIndex - 1].style.width = this.convertPixelToPercentage(leftColumnWidth, tableWidth) + '%';\n              }\n\n              if (!isNullOrUndefined(this.curTable.rows[i].cells[this.colIndex])) {\n                this.curTable.rows[i].cells[this.colIndex].style.width = this.convertPixelToPercentage(rightColWidth, tableWidth) + '%';\n              }\n            }\n          }\n\n          this.updateHelper();\n        } else if (this.resizeBtnStat.row) {\n          this.parent.preventDefaultResize(e);\n          const height = parseFloat(this.rowEle.clientHeight.toString()) + mouseY;\n\n          if (height > 20) {\n            this.rowEle.style.height = height + 'px';\n          }\n\n          this.curTable.style.height = '';\n\n          if (!isNullOrUndefined(tableReBox)) {\n            tableReBox.style.cssText = 'top: ' + (this.calcPos(this.curTable).top + tableHeight - 4) + 'px; left:' + (this.calcPos(this.curTable).left + tableWidth - 4) + 'px;';\n          }\n\n          this.updateHelper();\n        } else if (this.resizeBtnStat.tableBox) {\n          if (!Browser.isDevice) {\n            EventHandler.remove(this.contentModule.getEditPanel(), 'mouseover', this.resizeHelper);\n          }\n\n          const widthType = this.curTable.style.width.indexOf('%') > -1;\n          this.curTable.style.width = widthType ? this.convertPixelToPercentage(tableWidth + mouseX, rteWidth) + '%' : tableWidth + mouseX + 'px';\n          this.curTable.style.height = tableHeight + mouseY + 'px';\n          tableReBox.classList.add('e-rbox-select');\n          tableReBox.style.cssText = 'top: ' + (this.calcPos(this.curTable).top + tableHeight - 4) + 'px; left:' + (this.calcPos(this.curTable).left + tableWidth - 4) + 'px;';\n        }\n      }\n    });\n  }\n\n  convertPixelToPercentage(value, offsetValue) {\n    return value / offsetValue * 100;\n  }\n\n  cancelResizeAction() {\n    EventHandler.remove(this.contentModule.getDocument(), Browser.touchMoveEvent, this.resizing);\n    EventHandler.remove(this.contentModule.getDocument(), Browser.touchEndEvent, this.resizeEnd);\n    this.removeResizeElement();\n  }\n\n  resizeEnd(e) {\n    this.resizeBtnInit();\n    EventHandler.remove(this.contentModule.getDocument(), Browser.touchMoveEvent, this.resizing);\n    EventHandler.remove(this.contentModule.getDocument(), Browser.touchEndEvent, this.resizeEnd);\n\n    if (this.contentModule.getEditPanel().querySelector('.e-table-box') && this.contentModule.getEditPanel().contains(this.contentModule.getEditPanel().querySelector('.e-table-box'))) {\n      if (!Browser.isDevice) {\n        EventHandler.add(this.contentModule.getEditPanel(), 'mouseover', this.resizeHelper, this);\n      }\n\n      this.removeResizeElement();\n\n      if (this.helper && this.contentModule.getEditPanel().contains(this.helper)) {\n        detach(this.helper);\n        this.helper = null;\n      }\n\n      this.pageX = null;\n      this.pageY = null;\n      this.moveEle = null;\n    }\n\n    const args = {\n      event: e,\n      requestType: 'table'\n    };\n    this.parent.trigger(resizeStop, args);\n    this.parent.formatter.saveData();\n  }\n\n  resizeBtnInit() {\n    return this.resizeBtnStat = {\n      column: false,\n      row: false,\n      tableBox: false\n    };\n  }\n\n  addRow(selectCell, e, tabkey) {\n    let cmd;\n\n    if (tabkey) {\n      cmd = {\n        item: {\n          command: 'Table',\n          subCommand: 'InsertRowAfter'\n        }\n      };\n    }\n\n    const value = {\n      selection: selectCell,\n      subCommand: tabkey ? cmd.item.subCommand : e.item.subCommand\n    };\n    this.parent.formatter.process(this.parent, tabkey ? cmd : e, e, value);\n  }\n\n  addColumn(selectCell, e) {\n    this.parent.formatter.process(this.parent, e, e, {\n      selection: selectCell,\n      width: this.parent.tableSettings.width,\n      subCommand: e.item.subCommand\n    });\n  }\n\n  removeRowColumn(selectCell, e) {\n    this.parent.formatter.process(this.parent, e, e, {\n      selection: selectCell,\n      subCommand: e.item.subCommand\n    });\n    this.hideTableQuickToolbar();\n  }\n\n  removeTable(selection, args, delKey) {\n    let cmd;\n\n    if (delKey) {\n      cmd = {\n        item: {\n          command: 'Table',\n          subCommand: 'TableRemove'\n        }\n      };\n    }\n\n    const value = {\n      selection: selection,\n      subCommand: delKey ? cmd.item.subCommand : args.item.subCommand\n    };\n    this.parent.formatter.process(this.parent, delKey ? cmd : args, args.originalEvent, value);\n    this.contentModule.getEditPanel().focus();\n    this.removeResizeElement();\n    this.hideTableQuickToolbar();\n  }\n\n  renderDlgContent(args) {\n    if (Browser.isDevice || this.parent.inlineMode.enable) {\n      this.insertTableDialog(args);\n      return;\n    }\n\n    if (this.popupObj) {\n      this.popupObj.hide();\n      return;\n    }\n\n    this.hideTableQuickToolbar();\n    const header = '1X1';\n    const insertbtn = this.l10n.getConstant('inserttablebtn');\n    this.dlgDiv = this.parent.createElement('div', {\n      className: 'e-rte-table-popup',\n      id: this.rteID + '_table'\n    });\n    this.tblHeader = this.parent.createElement('div', {\n      className: 'e-rte-popup-header'\n    });\n    this.tblHeader.innerHTML = header;\n    this.dlgDiv.appendChild(this.tblHeader);\n    const tableDiv = this.parent.createElement('div', {\n      className: 'e-rte-table-span'\n    });\n    this.drawTable(tableDiv, args);\n    this.dlgDiv.appendChild(tableDiv);\n    this.dlgDiv.appendChild(this.parent.createElement('span', {\n      className: 'e-span-border'\n    }));\n    const btnEle = this.parent.createElement('button', {\n      className: 'e-insert-table-btn',\n      id: this.rteID + '_insertTable',\n      attrs: {\n        type: 'button',\n        tabindex: '0'\n      }\n    });\n\n    if (!isNullOrUndefined(this.parent.getToolbarElement().querySelector('.e-expended-nav'))) {\n      this.parent.getToolbarElement().querySelector('.e-expended-nav').setAttribute('tabindex', '1');\n    }\n\n    this.dlgDiv.appendChild(btnEle);\n    const button = new Button({\n      iconCss: 'e-icons e-create-table',\n      content: insertbtn,\n      cssClass: 'e-flat',\n      enableRtl: this.parent.enableRtl,\n      locale: this.parent.locale\n    });\n    button.isStringTemplate = true;\n    button.appendTo(btnEle);\n    EventHandler.add(btnEle, 'click', this.insertTableDialog, {\n      self: this,\n      args: args.args,\n      selection: args.selection\n    });\n    this.parent.getToolbar().appendChild(this.dlgDiv);\n    let target = args.args.originalEvent.target;\n    target = target.classList.contains('e-toolbar-item') ? target.firstChild : target.parentElement;\n    this.popupObj = new Popup(this.dlgDiv, {\n      targetType: 'relative',\n      relateTo: target,\n      collision: {\n        X: 'fit',\n        Y: 'none'\n      },\n      offsetY: 8,\n      viewPortElement: this.parent.element,\n      position: {\n        X: 'left',\n        Y: 'bottom'\n      },\n      enableRtl: this.parent.enableRtl,\n      zIndex: 10001,\n      // eslint-disable-next-line\n      close: event => {\n        this.parent.isBlur = false;\n        this.popupObj.destroy();\n        detach(this.popupObj.element);\n        this.popupObj = null;\n      }\n    });\n    addClass([this.popupObj.element], 'e-popup-open');\n    this.popupObj.refreshPosition(target);\n  }\n\n  docClick(e) {\n    const target = e.args.target; // eslint-disable-next-line\n\n    if (target && target.classList && (this.popupObj && !closest(target, '[id=' + \"'\" + this.popupObj.element.id + \"'\" + ']') || this.editdlgObj && !closest(target, '#' + this.editdlgObj.element.id)) && !target.classList.contains('e-create-table') && target.offsetParent && !target.offsetParent.classList.contains('e-rte-backgroundcolor-dropdown')) {\n      if (this.popupObj) {\n        this.popupObj.hide();\n      }\n\n      if (this.editdlgObj) {\n        this.editdlgObj.hide();\n      }\n\n      this.parent.isBlur = true;\n      dispatchEvent(this.parent.element, 'focusout');\n    }\n\n    const closestEle = closest(target, 'td');\n    const isExist = closestEle && this.parent.contentModule.getEditPanel().contains(closestEle) ? true : false;\n\n    if (target && target.tagName !== 'TD' && target.tagName !== 'TH' && !isExist && closest(target, '.e-rte-quick-popup') === null && target.offsetParent && !target.offsetParent.classList.contains('e-quick-dropdown') && !target.offsetParent.classList.contains('e-rte-backgroundcolor-dropdown') && !closest(target, '.e-rte-dropdown-popup') && !closest(target, '.e-rte-elements')) {\n      removeClass(this.parent.element.querySelectorAll('table td'), CLS_TABLE_SEL);\n\n      if (!Browser.isIE) {\n        this.hideTableQuickToolbar();\n      }\n    }\n\n    if (target && target.classList && !target.classList.contains(CLS_TB_COL_RES) && !target.classList.contains(CLS_TB_ROW_RES) && !target.classList.contains(CLS_TB_BOX_RES)) {\n      this.removeResizeElement();\n    }\n  }\n\n  drawTable(tableDiv, args) {\n    let rowDiv;\n    let tableCell;\n\n    for (let row = 0; row < 3; row++) {\n      rowDiv = this.parent.createElement('div', {\n        className: 'e-rte-table-row',\n        attrs: {\n          'data-column': '' + row\n        }\n      });\n\n      for (let col = 0; col < 10; col++) {\n        const display = row > 2 ? 'none' : 'inline-block';\n        tableCell = this.parent.createElement('div', {\n          className: 'e-rte-tablecell e-default',\n          attrs: {\n            'data-cell': '' + col\n          }\n        });\n        rowDiv.appendChild(tableCell);\n        tableCell.style.display = display;\n\n        if (col === 0 && row === 0) {\n          addClass([tableCell], 'e-active');\n        }\n\n        EventHandler.add(tableCell, 'mousemove', this.tableCellSelect, this);\n        EventHandler.add(rowDiv, 'mouseleave', this.tableCellLeave, this);\n        EventHandler.add(tableCell, 'mouseup', this.tableCellClick, {\n          self: this,\n          args: args.args,\n          selection: args.selection\n        });\n      }\n\n      tableDiv.appendChild(rowDiv);\n    }\n  }\n\n  editTable(args) {\n    this.createDialog(args);\n    const editContent = this.tableDlgContent(args);\n    const update = this.l10n.getConstant('dialogUpdate');\n    const cancel = this.l10n.getConstant('dialogCancel');\n    const editHeader = this.l10n.getConstant('tableEditHeader');\n    this.editdlgObj.setProperties({\n      height: 'initial',\n      width: '290px',\n      content: editContent,\n      header: editHeader,\n      buttons: [{\n        click: this.applyProperties.bind(this, args),\n        buttonModel: {\n          content: update,\n          cssClass: 'e-flat e-size-update',\n          isPrimary: true\n        }\n      }, {\n        click: e => {\n          this.cancelDialog(e);\n        },\n        buttonModel: {\n          cssClass: 'e-flat e-cancel',\n          content: cancel\n        }\n      }]\n    });\n    this.editdlgObj.element.style.maxHeight = 'none';\n    this.editdlgObj.content.querySelector('input').focus();\n    this.hideTableQuickToolbar();\n  }\n\n  insertTableDialog(args) {\n    const proxy = this.self ? this.self : this;\n\n    if (proxy.popupObj) {\n      proxy.popupObj.hide();\n    }\n\n    proxy.createDialog(args);\n    const dlgContent = proxy.tableCellDlgContent();\n    const insert = proxy.l10n.getConstant('dialogInsert');\n    const cancel = proxy.l10n.getConstant('dialogCancel');\n\n    if (isNullOrUndefined(proxy.editdlgObj)) {\n      return;\n    }\n\n    proxy.editdlgObj.setProperties({\n      height: 'initial',\n      width: '290px',\n      content: dlgContent,\n      buttons: [{\n        click: proxy.customTable.bind(this, args),\n        buttonModel: {\n          content: insert,\n          cssClass: 'e-flat e-insert-table',\n          isPrimary: true\n        }\n      }, {\n        click: e => {\n          proxy.cancelDialog(e);\n        },\n        buttonModel: {\n          cssClass: 'e-flat e-cancel',\n          content: cancel\n        }\n      }]\n    });\n    proxy.editdlgObj.element.style.maxHeight = 'none';\n    proxy.editdlgObj.content.querySelector('input').focus();\n  }\n\n  tableCellDlgContent() {\n    const tableColumn = this.l10n.getConstant('columns');\n    const tableRow = this.l10n.getConstant('rows');\n    const tableWrap = this.parent.createElement('div', {\n      className: 'e-cell-wrap'\n    });\n    const content = '<div class=\"e-rte-field\"><input type=\"text\" ' + ' data-role =\"none\" id=\"tableColumn\" class=\"e-table-column\"/></div>' + '<div class=\"e-rte-field\"><input type=\"text\" data-role =\"none\" id=\"tableRow\" class=\"e-table-row\" /></div>';\n    const contentElem = parseHtml(content);\n    tableWrap.appendChild(contentElem);\n    this.columnTextBox = new NumericTextBox({\n      format: 'n0',\n      min: 1,\n      value: 3,\n      placeholder: tableColumn,\n      floatLabelType: 'Auto',\n      max: 50,\n      enableRtl: this.parent.enableRtl,\n      locale: this.parent.locale\n    });\n    this.columnTextBox.isStringTemplate = true;\n    this.columnTextBox.appendTo(tableWrap.querySelector('#tableColumn'));\n    this.rowTextBox = new NumericTextBox({\n      format: 'n0',\n      min: 1,\n      value: 3,\n      placeholder: tableRow,\n      floatLabelType: 'Auto',\n      max: 50,\n      enableRtl: this.parent.enableRtl,\n      locale: this.parent.locale\n    });\n    this.rowTextBox.isStringTemplate = true;\n    this.rowTextBox.appendTo(tableWrap.querySelector('#tableRow'));\n    return tableWrap;\n  }\n\n  clearDialogObj() {\n    if (this.editdlgObj) {\n      this.editdlgObj.destroy();\n      detach(this.editdlgObj.element);\n      this.editdlgObj = null;\n    }\n  } // eslint-disable-next-line\n\n\n  createDialog(args) {\n    if (this.editdlgObj) {\n      this.editdlgObj.hide({\n        returnValue: true\n      });\n      return;\n    }\n\n    const tableDialog = this.parent.createElement('div', {\n      className: 'e-rte-edit-table',\n      id: this.rteID + '_tabledialog'\n    });\n    this.parent.element.appendChild(tableDialog);\n    const insert = this.l10n.getConstant('dialogInsert');\n    const cancel = this.l10n.getConstant('dialogCancel');\n    const header = this.l10n.getConstant('tabledialogHeader');\n    const dialogModel = {\n      header: header,\n      cssClass: CLS_RTE_ELEMENTS,\n      enableRtl: this.parent.enableRtl,\n      locale: this.parent.locale,\n      showCloseIcon: true,\n      closeOnEscape: true,\n      width: Browser.isDevice ? '290px' : '340px',\n      height: 'initial',\n      position: {\n        X: 'center',\n        Y: Browser.isDevice ? 'center' : 'top'\n      },\n      isModal: Browser.isDevice,\n      buttons: [{\n        buttonModel: {\n          content: insert,\n          cssClass: 'e-flat e-insert-table',\n          isPrimary: true\n        }\n      }, {\n        click: e => {\n          this.cancelDialog(e);\n        },\n        buttonModel: {\n          cssClass: 'e-flat e-cancel',\n          content: cancel\n        }\n      }],\n      target: Browser.isDevice ? document.body : this.parent.element,\n      animationSettings: {\n        effect: 'None'\n      },\n      close: event => {\n        this.parent.isBlur = false;\n        this.editdlgObj.destroy();\n        detach(this.editdlgObj.element);\n        this.dialogRenderObj.close(event);\n        this.editdlgObj = null;\n      }\n    };\n    this.editdlgObj = this.dialogRenderObj.render(dialogModel);\n    this.editdlgObj.appendTo(tableDialog);\n\n    if (this.quickToolObj && this.quickToolObj.inlineQTBar && document.body.contains(this.quickToolObj.inlineQTBar.element)) {\n      this.quickToolObj.inlineQTBar.hidePopup();\n    }\n  }\n\n  customTable(args, e) {\n    const proxy = this.self ? this.self : this;\n\n    if (proxy.rowTextBox.value && proxy.columnTextBox.value) {\n      const argument = Browser.isDevice || !isNullOrUndefined(args.args) && !isNullOrUndefined(args.args.originalEvent) && args.args.originalEvent.action === 'insert-table' || proxy.parent.inlineMode.enable ? args : this;\n      proxy.tableInsert(proxy.rowTextBox.value, proxy.columnTextBox.value, e, argument);\n    }\n  } // eslint-disable-next-line\n\n\n  cancelDialog(e) {\n    this.parent.isBlur = false;\n    this.editdlgObj.hide({\n      returnValue: true\n    });\n  } // eslint-disable-next-line\n\n\n  applyProperties(args, e) {\n    const dialogEle = this.editdlgObj.element;\n    const table = closest(args.selectNode[0], 'table');\n    table.style.width = dialogEle.querySelector('.e-table-width').value + 'px';\n\n    if (dialogEle.querySelector('.e-cell-padding').value !== '') {\n      const tdElm = table.querySelectorAll('td');\n\n      for (let i = 0; i < tdElm.length; i++) {\n        let padVal = '';\n\n        if (tdElm[i].style.padding === '') {\n          padVal = tdElm[i].getAttribute('style') + ' padding:' + dialogEle.querySelector('.e-cell-padding').value + 'px;';\n        } else {\n          tdElm[i].style.padding = dialogEle.querySelector('.e-cell-padding').value + 'px';\n          padVal = tdElm[i].getAttribute('style');\n        }\n\n        tdElm[i].setAttribute('style', padVal);\n      }\n    }\n\n    table.cellSpacing = dialogEle.querySelector('.e-cell-spacing').value;\n\n    if (!isNullOrUndefined(table.cellSpacing) || table.cellSpacing !== '0') {\n      addClass([table], CLS_TABLE_BORDER);\n    } else {\n      removeClass([table], CLS_TABLE_BORDER);\n    }\n\n    this.parent.formatter.saveData();\n    this.editdlgObj.hide({\n      returnValue: true\n    });\n  }\n\n  tableDlgContent(e) {\n    const selectNode = e.selectParent[0];\n    const tableWidth = this.l10n.getConstant('tableWidth');\n    const cellPadding = this.l10n.getConstant('cellpadding');\n    const cellSpacing = this.l10n.getConstant('cellspacing');\n    const tableWrap = this.parent.createElement('div', {\n      className: 'e-table-sizewrap'\n    });\n    const widthVal = closest(selectNode, 'table').getClientRects()[0].width;\n    const padVal = closest(selectNode, 'td').style.padding;\n    const brdSpcVal = closest(selectNode, 'table').getAttribute('cellspacing');\n    const content = '<div class=\"e-rte-field\"><input type=\"text\" data-role =\"none\" id=\"tableWidth\" class=\"e-table-width\" ' + ' /></div>' + '<div class=\"e-rte-field\"><input type=\"text\" data-role =\"none\" id=\"cellPadding\" class=\"e-cell-padding\" />' + ' </div><div class=\"e-rte-field\"><input type=\"text\" data-role =\"none\" id=\"cellSpacing\" class=\"e-cell-spacing\" /></div>';\n    const contentElem = parseHtml(content);\n    tableWrap.appendChild(contentElem);\n    const widthNum = new NumericTextBox({\n      format: 'n0',\n      min: 0,\n      value: widthVal,\n      placeholder: tableWidth,\n      floatLabelType: 'Auto',\n      enableRtl: this.parent.enableRtl,\n      locale: this.parent.locale\n    });\n    widthNum.isStringTemplate = true;\n    widthNum.appendTo(tableWrap.querySelector('#tableWidth'));\n    const padding = new NumericTextBox({\n      format: 'n0',\n      min: 0,\n      // eslint-disable-next-line\n      value: padVal !== '' ? parseInt(padVal, null) : 0,\n      placeholder: cellPadding,\n      floatLabelType: 'Auto',\n      enableRtl: this.parent.enableRtl,\n      locale: this.parent.locale\n    });\n    padding.isStringTemplate = true;\n    padding.appendTo(tableWrap.querySelector('#cellPadding'));\n    const spacing = new NumericTextBox({\n      format: 'n0',\n      min: 0,\n      // eslint-disable-next-line\n      value: brdSpcVal !== '' && !isNullOrUndefined(brdSpcVal) ? parseInt(brdSpcVal, null) : 0,\n      placeholder: cellSpacing,\n      floatLabelType: 'Auto',\n      enableRtl: this.parent.enableRtl,\n      locale: this.parent.locale\n    });\n    spacing.isStringTemplate = true;\n    spacing.appendTo(tableWrap.querySelector('#cellSpacing'));\n    return tableWrap;\n  }\n  /**\n   * Destroys the ToolBar.\n   *\n   * @function destroy\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  destroy() {\n    this.removeEventListener();\n  }\n  /**\n   * For internal use only - Get the module name.\n   *\n   * @returns {void}\n   */\n\n\n  getModuleName() {\n    return 'table';\n  }\n\n}\n/**\n * Dialog Renderer\n */\n\n\nclass DialogRenderer {\n  constructor(parent) {\n    this.parent = parent;\n  }\n  /**\n   * dialog render method\n   *\n   * @param {DialogModel} e - specifies the dialog model.\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  render(e) {\n    let dlgObj;\n    e.beforeOpen = this.beforeOpen.bind(this);\n    e.open = this.open.bind(this);\n\n    if (isNullOrUndefined(e.close)) {\n      e.close = this.close.bind(this);\n    }\n\n    e.beforeClose = this.beforeClose.bind(this); // eslint-disable-next-line\n\n    dlgObj = new Dialog(e);\n    dlgObj.isStringTemplate = true;\n    return dlgObj;\n  }\n\n  beforeOpen(args) {\n    this.parent.trigger(beforeDialogOpen, args, this.beforeOpenCallback.bind(this, args));\n  }\n\n  beforeOpenCallback(args) {\n    if (args.cancel) {\n      this.parent.notify(clearDialogObj, null);\n    }\n  }\n\n  open(args) {\n    this.parent.trigger(dialogOpen, args);\n  }\n\n  beforeClose(args) {\n    this.parent.trigger(beforeDialogClose, args, closeArgs => {\n      if (!closeArgs.cancel) {\n        if (closeArgs.container.classList.contains('e-popup-close')) {\n          closeArgs.cancel = true;\n        }\n      }\n    });\n  }\n  /**\n   * dialog close method\n   *\n   * @param {Object} args - specifies the arguments.\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  close(args) {\n    this.parent.trigger(dialogClose, args);\n  }\n\n}\n/**\n * Renderer\n */\n\n/**\n * @hidden\n * @deprecated\n */\n\n\nconst executeGroup = {\n  'bold': {\n    command: 'Style',\n    subCommand: 'Bold',\n    value: 'strong'\n  },\n  'italic': {\n    command: 'Style',\n    subCommand: 'Italic',\n    value: 'em'\n  },\n  'underline': {\n    command: 'Style',\n    subCommand: 'Underline',\n    value: 'span'\n  },\n  'strikeThrough': {\n    command: 'Style',\n    subCommand: 'StrikeThrough',\n    value: 'span'\n  },\n  'insertCode': {\n    command: 'Formats',\n    subCommand: 'Pre',\n    value: 'pre'\n  },\n  'superscript': {\n    command: 'Effects',\n    subCommand: 'SuperScript',\n    value: 'sup'\n  },\n  'subscript': {\n    command: 'Effects',\n    subCommand: 'SubScript',\n    value: 'sub'\n  },\n  'uppercase': {\n    command: 'Casing',\n    subCommand: 'UpperCase'\n  },\n  'lowercase': {\n    command: 'Casing',\n    subCommand: 'LowerCase'\n  },\n  'fontColor': {\n    command: 'font',\n    subCommand: 'fontcolor',\n    value: '#ff0000'\n  },\n  'fontName': {\n    command: 'font',\n    subCommand: 'fontname',\n    value: 'Segoe UI'\n  },\n  'fontSize': {\n    command: 'font',\n    subCommand: 'fontsize',\n    value: '10pt'\n  },\n  'backColor': {\n    command: 'font',\n    subCommand: 'backgroundcolor',\n    value: '#ffff00'\n  },\n  'justifyCenter': {\n    command: 'Alignments',\n    subCommand: 'JustifyCenter'\n  },\n  'justifyFull': {\n    command: 'Alignments',\n    subCommand: 'JustifyFull'\n  },\n  'justifyLeft': {\n    command: 'Alignments',\n    subCommand: 'JustifyLeft'\n  },\n  'justifyRight': {\n    command: 'Alignments',\n    subCommand: 'JustifyRight'\n  },\n  'undo': {\n    command: 'Actions',\n    subCommand: 'Undo'\n  },\n  'redo': {\n    command: 'Actions',\n    subCommand: 'Redo'\n  },\n  'createLink': {\n    command: 'Links',\n    subCommand: 'createLink'\n  },\n  'editLink': {\n    command: 'Links',\n    subCommand: 'createLink'\n  },\n  'createImage': {\n    command: 'Images',\n    subCommand: 'Images'\n  },\n  'formatBlock': {\n    command: 'Formats',\n    value: 'P'\n  },\n  'heading': {\n    command: 'Formats',\n    value: 'H1'\n  },\n  'indent': {\n    command: 'Indents',\n    subCommand: 'Indent'\n  },\n  'outdent': {\n    command: 'Indents',\n    subCommand: 'Outdent'\n  },\n  'insertHTML': {\n    command: 'InsertHTML',\n    subCommand: 'InsertHTML',\n    value: ''\n  },\n  'insertText': {\n    command: 'InsertText',\n    subCommand: 'InsertText',\n    value: ''\n  },\n  'insertHorizontalRule': {\n    command: 'InsertHTML',\n    subCommand: 'InsertHTML',\n    value: '<hr/>'\n  },\n  'insertImage': {\n    command: 'Images',\n    subCommand: 'Image'\n  },\n  'editImage': {\n    command: 'Images',\n    subCommand: 'Image'\n  },\n  'insertTable': {\n    command: 'Table',\n    subCommand: 'CreateTable'\n  },\n  'insertBrOnReturn': {\n    command: 'InsertHTML',\n    subCommand: 'InsertHTML',\n    value: '<br/>'\n  },\n  'insertOrderedList': {\n    command: 'Lists',\n    value: 'OL'\n  },\n  'insertUnorderedList': {\n    command: 'Lists',\n    value: 'UL'\n  },\n  'insertParagraph': {\n    command: 'Formats',\n    value: 'P'\n  },\n  'removeFormat': {\n    command: 'Clear',\n    subCommand: 'ClearFormat'\n  }\n};\n\nvar __decorate$2 = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/**\n * Configures the toolbar settings of the RichTextEditor.\n */\n\n\nclass ToolbarSettings$1 extends ChildProperty {}\n\n__decorate$2([Property(true)], ToolbarSettings$1.prototype, \"enable\", void 0);\n\n__decorate$2([Property(true)], ToolbarSettings$1.prototype, \"enableFloating\", void 0);\n\n__decorate$2([Property(ToolbarType.Expand)], ToolbarSettings$1.prototype, \"type\", void 0);\n\n__decorate$2([Property(predefinedItems)], ToolbarSettings$1.prototype, \"items\", void 0);\n\n__decorate$2([Property({})], ToolbarSettings$1.prototype, \"itemConfigs\", void 0);\n/**\n * Configures the image settings of the RichTextEditor.\n */\n\n\nclass ImageSettings extends ChildProperty {}\n\n__decorate$2([Property(['.jpeg', '.jpg', '.png'])], ImageSettings.prototype, \"allowedTypes\", void 0);\n\n__decorate$2([Property('inline')], ImageSettings.prototype, \"display\", void 0);\n\n__decorate$2([Property('Blob')], ImageSettings.prototype, \"saveFormat\", void 0);\n\n__decorate$2([Property('auto')], ImageSettings.prototype, \"width\", void 0);\n\n__decorate$2([Property('auto')], ImageSettings.prototype, \"height\", void 0);\n\n__decorate$2([Property(null)], ImageSettings.prototype, \"saveUrl\", void 0);\n\n__decorate$2([Property(null)], ImageSettings.prototype, \"path\", void 0);\n\n__decorate$2([Property(true)], ImageSettings.prototype, \"resize\", void 0);\n\n__decorate$2([Property(null)], ImageSettings.prototype, \"removeUrl\", void 0);\n\n__decorate$2([Property(0)], ImageSettings.prototype, \"minWidth\", void 0);\n\n__decorate$2([Property(null)], ImageSettings.prototype, \"maxWidth\", void 0);\n\n__decorate$2([Property(0)], ImageSettings.prototype, \"minHeight\", void 0);\n\n__decorate$2([Property(null)], ImageSettings.prototype, \"maxHeight\", void 0);\n\n__decorate$2([Property(false)], ImageSettings.prototype, \"resizeByPercent\", void 0);\n/**\n * Configures the file manager settings of the RichTextEditor.\n */\n\n\nclass FileManagerSettings extends ChildProperty {}\n\n__decorate$2([Complex({\n  getImageUrl: null,\n  url: null,\n  uploadUrl: null\n}, AjaxSettings)], FileManagerSettings.prototype, \"ajaxSettings\", void 0);\n\n__decorate$2([Property(false)], FileManagerSettings.prototype, \"allowDragAndDrop\", void 0);\n\n__decorate$2([Complex({\n  visible: true,\n  file: ['Open', '|', 'Cut', 'Copy', '|', 'Delete', 'Rename', '|', 'Details'],\n  folder: ['Open', '|', 'Cut', 'Copy', 'Paste', '|', 'Delete', 'Rename', '|', 'Details'],\n  layout: ['SortBy', 'View', 'Refresh', '|', 'Paste', '|', 'NewFolder', 'Upload', '|', 'Details', '|', 'SelectAll']\n}, ContextMenuSettings)], FileManagerSettings.prototype, \"contextMenuSettings\", void 0);\n\n__decorate$2([Property('')], FileManagerSettings.prototype, \"cssClass\", void 0);\n\n__decorate$2([Complex({}, DetailsViewSettings)], FileManagerSettings.prototype, \"detailsViewSettings\", void 0);\n\n__decorate$2([Property(false)], FileManagerSettings.prototype, \"enable\", void 0);\n\n__decorate$2([Complex({\n  maxWidth: '650px',\n  minWidth: '240px',\n  visible: true\n}, NavigationPaneSettings)], FileManagerSettings.prototype, \"navigationPaneSettings\", void 0);\n\n__decorate$2([Property('/')], FileManagerSettings.prototype, \"path\", void 0);\n\n__decorate$2([Property(null)], FileManagerSettings.prototype, \"rootAliasName\", void 0);\n\n__decorate$2([Complex({}, SearchSettings)], FileManagerSettings.prototype, \"searchSettings\", void 0);\n\n__decorate$2([Property(true)], FileManagerSettings.prototype, \"showFileExtension\", void 0);\n\n__decorate$2([Property(false)], FileManagerSettings.prototype, \"showHiddenItems\", void 0);\n\n__decorate$2([Property(true)], FileManagerSettings.prototype, \"showThumbnail\", void 0);\n\n__decorate$2([Property('Ascending')], FileManagerSettings.prototype, \"sortOrder\", void 0);\n\n__decorate$2([Complex({\n  visible: true,\n  items: ['NewFolder', 'Upload', 'Cut', 'Copy', 'Paste', 'Delete', 'Download', 'Rename', 'SortBy', 'Refresh', 'Selection', 'View', 'Details']\n}, ToolbarSettings)], FileManagerSettings.prototype, \"toolbarSettings\", void 0);\n\n__decorate$2([Complex({\n  autoUpload: true,\n  minFileSize: 0,\n  maxFileSize: 30000000,\n  allowedExtensions: '',\n  autoClose: false\n}, UploadSettings)], FileManagerSettings.prototype, \"uploadSettings\", void 0);\n\n__decorate$2([Property('LargeIcons')], FileManagerSettings.prototype, \"view\", void 0);\n\nclass TableSettings extends ChildProperty {}\n\n__decorate$2([Property('100%')], TableSettings.prototype, \"width\", void 0);\n\n__decorate$2([Property(TableStyleItems)], TableSettings.prototype, \"styles\", void 0);\n\n__decorate$2([Property(true)], TableSettings.prototype, \"resize\", void 0);\n\n__decorate$2([Property(0)], TableSettings.prototype, \"minWidth\", void 0);\n\n__decorate$2([Property(null)], TableSettings.prototype, \"maxWidth\", void 0);\n/**\n * Configures the quick toolbar settings of the RichTextEditor.\n */\n\n\nclass QuickToolbarSettings extends ChildProperty {}\n\n__decorate$2([Property(true)], QuickToolbarSettings.prototype, \"enable\", void 0);\n\n__decorate$2([Property(false)], QuickToolbarSettings.prototype, \"showOnRightClick\", void 0);\n\n__decorate$2([Property('hide')], QuickToolbarSettings.prototype, \"actionOnScroll\", void 0);\n\n__decorate$2([Property(['Open', 'Edit', 'UnLink'])], QuickToolbarSettings.prototype, \"link\", void 0);\n\n__decorate$2([Property(['Replace', 'Align', 'Caption', 'Remove', '-', 'InsertLink', 'OpenImageLink', 'EditImageLink', 'RemoveImageLink', 'Display', 'AltText', 'Dimension'])], QuickToolbarSettings.prototype, \"image\", void 0);\n\n__decorate$2([Property(['Cut', 'Copy', 'Paste'])], QuickToolbarSettings.prototype, \"text\", void 0);\n\n__decorate$2([Property(['TableHeader', 'TableRows', 'TableColumns', 'BackgroundColor', '-', 'TableRemove', 'Alignments', 'TableCellVerticalAlign', 'Styles'])], QuickToolbarSettings.prototype, \"table\", void 0);\n/**\n * Configures the Paste Cleanup settings of the RichTextEditor.\n */\n\n\nclass PasteCleanupSettings extends ChildProperty {}\n\n__decorate$2([Property(false)], PasteCleanupSettings.prototype, \"prompt\", void 0);\n\n__decorate$2([Property(null)], PasteCleanupSettings.prototype, \"deniedAttrs\", void 0);\n\n__decorate$2([Property(['background', 'background-color', 'border', 'border-bottom', 'border-left', 'border-radius', 'border-right', 'border-style', 'border-top', 'border-width', 'clear', 'color', 'cursor', 'direction', 'display', 'float', 'font', 'font-family', 'font-size', 'font-weight', 'font-style', 'height', 'left', 'line-height', 'margin', 'margin-top', 'margin-left', 'margin-right', 'margin-bottom', 'max-height', 'max-width', 'min-height', 'min-width', 'overflow', 'overflow-x', 'overflow-y', 'padding', 'padding-bottom', 'padding-left', 'padding-right', 'padding-top', 'position', 'right', 'table-layout', 'text-align', 'text-decoration', 'text-indent', 'top', 'vertical-align', 'visibility', 'white-space', 'width'])], PasteCleanupSettings.prototype, \"allowedStyleProps\", void 0);\n\n__decorate$2([Property(null)], PasteCleanupSettings.prototype, \"deniedTags\", void 0);\n\n__decorate$2([Property(true)], PasteCleanupSettings.prototype, \"keepFormat\", void 0);\n\n__decorate$2([Property(false)], PasteCleanupSettings.prototype, \"plainText\", void 0);\n/**\n * Configures the font family settings of the RichTextEditor.\n */\n\n\nclass FontFamily extends ChildProperty {}\n\n__decorate$2([Property(null)], FontFamily.prototype, \"default\", void 0);\n\n__decorate$2([Property('65px')], FontFamily.prototype, \"width\", void 0);\n\n__decorate$2([Property(fontFamily)], FontFamily.prototype, \"items\", void 0);\n/**\n * Configures the font size settings of the RichTextEditor.\n */\n\n\nclass FontSize extends ChildProperty {}\n\n__decorate$2([Property(null)], FontSize.prototype, \"default\", void 0);\n\n__decorate$2([Property('35px')], FontSize.prototype, \"width\", void 0);\n\n__decorate$2([Property(fontSize)], FontSize.prototype, \"items\", void 0);\n/**\n * Configures the format settings of the RichTextEditor.\n */\n\n\nclass Format extends ChildProperty {}\n\n__decorate$2([Property(null)], Format.prototype, \"default\", void 0);\n\n__decorate$2([Property('65px')], Format.prototype, \"width\", void 0);\n\n__decorate$2([Property(formatItems)], Format.prototype, \"types\", void 0);\n/**\n * Configures the font Color settings of the RichTextEditor.\n */\n\n\nclass FontColor extends ChildProperty {}\n\n__decorate$2([Property('#ff0000')], FontColor.prototype, \"default\", void 0);\n\n__decorate$2([Property('Palette')], FontColor.prototype, \"mode\", void 0);\n\n__decorate$2([Property(10)], FontColor.prototype, \"columns\", void 0);\n\n__decorate$2([Property(fontColor)], FontColor.prototype, \"colorCode\", void 0);\n\n__decorate$2([Property(false)], FontColor.prototype, \"modeSwitcher\", void 0);\n/**\n * Configures the background Color settings of the RichTextEditor.\n */\n\n\nclass BackgroundColor extends ChildProperty {}\n\n__decorate$2([Property('#ffff00')], BackgroundColor.prototype, \"default\", void 0);\n\n__decorate$2([Property('Palette')], BackgroundColor.prototype, \"mode\", void 0);\n\n__decorate$2([Property(10)], BackgroundColor.prototype, \"columns\", void 0);\n\n__decorate$2([Property(backgroundColor)], BackgroundColor.prototype, \"colorCode\", void 0);\n\n__decorate$2([Property(false)], BackgroundColor.prototype, \"modeSwitcher\", void 0);\n/**\n * Configures the numberFormatList settings of the RichTextEditor.\n */\n\n\nclass NumberFormatList extends ChildProperty {}\n\n__decorate$2([Property(numberFormatList)], NumberFormatList.prototype, \"types\", void 0);\n/**\n * Configures the bulletFormatList settings of the RichTextEditor.\n */\n\n\nclass BulletFormatList extends ChildProperty {}\n\n__decorate$2([Property(bulletFormatList)], BulletFormatList.prototype, \"types\", void 0);\n\nvar __decorate$3 = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/**\n * Objects used for configuring the iframe resources properties.\n */\n\n\nclass Resources extends ChildProperty {}\n\n__decorate$3([Property([])], Resources.prototype, \"styles\", void 0);\n\n__decorate$3([Property([])], Resources.prototype, \"scripts\", void 0);\n/**\n * Configures the iframe settings of the RTE.\n */\n\n\nclass IFrameSettings extends ChildProperty {}\n\n__decorate$3([Property(false)], IFrameSettings.prototype, \"enable\", void 0);\n\n__decorate$3([Property(null)], IFrameSettings.prototype, \"attributes\", void 0);\n\n__decorate$3([Complex({}, Resources)], IFrameSettings.prototype, \"resources\", void 0);\n\nvar __decorate$4 = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/**\n * Configures the inlineMode property of the RTE.\n */\n\n\nclass InlineMode extends ChildProperty {}\n\n__decorate$4([Property(false)], InlineMode.prototype, \"enable\", void 0);\n\n__decorate$4([Property(true)], InlineMode.prototype, \"onSelection\", void 0);\n/**\n * `EnterKey` module is used to handle enter key press actions.\n */\n\n\nclass EnterKeyAction {\n  constructor(parent) {\n    this.parent = parent;\n    this.addEventListener();\n  }\n\n  addEventListener() {\n    this.parent.on(enterHandler, this.enterHandler, this);\n    this.parent.on(destroy, this.destroy, this);\n  }\n\n  destroy() {\n    this.removeEventListener();\n  }\n\n  removeEventListener() {\n    this.parent.off(enterHandler, this.enterHandler);\n    this.parent.off(destroy, this.destroy);\n  }\n\n  getRangeNode() {\n    this.range = this.parent.getRange();\n    this.startNode = this.range.startContainer.nodeName === '#text' ? this.range.startContainer.parentElement : this.range.startContainer;\n    this.endNode = this.range.endContainer.nodeName === '#text' ? this.range.endContainer.parentElement : this.range.endContainer;\n  }\n\n  enterHandler(e) {\n    this.getRangeNode();\n    let isTableEnter = true;\n\n    if (!isNullOrUndefined(this.startNode.closest('TABLE')) && !isNullOrUndefined(this.endNode.closest('TABLE'))) {\n      isTableEnter = false;\n      let curElement = this.startNode;\n      let blockElement = curElement;\n\n      while (!this.parent.formatter.editorManager.domNode.isBlockNode(curElement)) {\n        blockElement = curElement;\n        curElement = curElement.parentElement;\n      }\n\n      isTableEnter = blockElement.tagName === 'TD' ? false : true;\n    }\n\n    if (e.args.which === 13 && e.args.code === 'Enter') {\n      if (isNullOrUndefined(this.startNode.closest('LI')) && isNullOrUndefined(this.endNode.closest('LI')) && isTableEnter && isNullOrUndefined(this.startNode.closest('PRE')) && isNullOrUndefined(this.endNode.closest('PRE'))) {\n        const shiftKey = e.args.shiftKey;\n        const actionBeginArgs = {\n          cancel: false,\n          name: actionBegin,\n          requestType: shiftKey ? 'ShiftEnterAction' : 'EnterAction',\n          originalEvent: e.args\n        };\n        this.parent.trigger(actionBegin, actionBeginArgs, actionBeginArgs => {\n          if (!actionBeginArgs.cancel) {\n            if (!(this.range.startOffset === this.range.endOffset && this.range.startContainer === this.range.endContainer)) {\n              this.range.deleteContents();\n\n              if (this.range.startContainer.nodeName === '#text' && this.range.startContainer.textContent.length === 0 && this.range.startContainer.parentElement !== this.parent.inputElement) {\n                if (this.parent.enterKey === 'BR') {\n                  this.range.startContainer.parentElement.innerHTML = '&#8203;';\n                } else {\n                  this.range.startContainer.parentElement.innerHTML = '<br>';\n                }\n              } else if (this.range.startContainer === this.parent.inputElement && this.range.startContainer.innerHTML === '') {\n                this.range.startContainer.innerHTML = '<br>';\n                const focusElem = this.range.startContainer.childNodes[this.range.startOffset];\n                this.parent.formatter.editorManager.nodeSelection.setCursorPoint(this.parent.contentModule.getDocument(), focusElem, 0);\n              } else if (this.parent.inputElement === this.range.startContainer) {\n                const focusElem = this.range.startContainer.childNodes[this.range.startOffset];\n\n                if (focusElem.nodeName === '#text' && focusElem.textContent.length === 0) {\n                  this.parent.formatter.editorManager.nodeSelection.setCursorPoint(this.parent.contentModule.getDocument(), focusElem, focusElem.previousSibling.textContent.length);\n                } else {\n                  this.parent.formatter.editorManager.nodeSelection.setCursorPoint(this.parent.contentModule.getDocument(), focusElem, focusElem.textContent.length >= 0 ? 0 : 1);\n\n                  if (focusElem.previousSibling.textContent.length === 0) {\n                    detach(focusElem.previousSibling);\n                  } else if (focusElem.textContent.length === 0) {\n                    let currentFocusElem = focusElem.previousSibling.lastChild;\n\n                    while (currentFocusElem.nodeName !== '#text') {\n                      currentFocusElem = currentFocusElem.lastChild;\n                    }\n\n                    this.parent.formatter.editorManager.nodeSelection.setCursorPoint(this.parent.contentModule.getDocument(), currentFocusElem, currentFocusElem.textContent.length);\n                    detach(focusElem);\n                  } else if (this.parent.enterKey !== 'BR' && focusElem.previousSibling.textContent.length !== 0 && focusElem.textContent.length !== 0) {\n                    e.args.preventDefault();\n                    return;\n                  }\n                }\n\n                this.getRangeNode();\n              }\n            }\n\n            if (this.range.startContainer === this.range.endContainer && this.range.startOffset === this.range.endOffset && this.range.startContainer === this.parent.inputElement) {\n              this.parent.formatter.editorManager.nodeSelection.setCursorPoint(this.parent.contentModule.getDocument(), this.range.startContainer.childNodes[this.range.startOffset], 0);\n              this.getRangeNode();\n            }\n\n            if (this.parent.enterKey === 'P' && !shiftKey || this.parent.enterKey === 'DIV' && !shiftKey || this.parent.shiftEnterKey === 'P' && shiftKey || this.parent.shiftEnterKey === 'DIV' && shiftKey) {\n              let nearBlockNode;\n\n              if (isTableEnter && this.parent.formatter.editorManager.domNode.isBlockNode(this.startNode)) {\n                nearBlockNode = this.startNode;\n              } else {\n                nearBlockNode = this.parent.formatter.editorManager.domNode.blockParentNode(this.startNode);\n              }\n\n              let isImageNode = false;\n              let isFocusedFirst = false;\n\n              if (this.range.startOffset != 0 && this.range.endOffset != 0 && this.range.startContainer === this.range.endContainer && !(!isNullOrUndefined(nearBlockNode.childNodes[0]) && nearBlockNode.childNodes[0].nodeName === 'IMG')) {\n                let startNodeText = this.range.startContainer.textContent;\n                let splitFirstText = startNodeText.substring(0, this.range.startOffset);\n\n                if (splitFirstText.charCodeAt(this.range.startOffset - 1) != 160 && splitFirstText.trim().length === 0) {\n                  isFocusedFirst = true;\n                }\n              } else if (this.range.startOffset === 0 && this.range.endOffset === 0) {\n                isFocusedFirst = true;\n              }\n\n              if ((this.range.startOffset === 0 && this.range.endOffset === 0 || isFocusedFirst) && !(!isNullOrUndefined(this.range.startContainer.previousSibling) && (this.range.startContainer.previousSibling.nodeName === 'IMG' || this.range.startContainer.previousSibling.nodeName === 'BR'))) {\n                let isNearBlockLengthZero;\n                let newElem;\n\n                if (this.range.startContainer.nodeName === 'IMG') {\n                  newElem = this.createInsertElement(shiftKey);\n                  isImageNode = true;\n                  isNearBlockLengthZero = false;\n                } else {\n                  if (nearBlockNode.textContent.trim().length !== 0) {\n                    newElem = this.parent.formatter.editorManager.nodeCutter.SplitNode(this.range, nearBlockNode, false).cloneNode(true);\n                    isNearBlockLengthZero = false;\n                  } else {\n                    newElem = this.parent.formatter.editorManager.nodeCutter.SplitNode(this.range, nearBlockNode, true).cloneNode(true);\n                    isNearBlockLengthZero = true;\n                  }\n                }\n\n                const insertElem = this.createInsertElement(shiftKey);\n\n                while (newElem.firstChild) {\n                  insertElem.appendChild(newElem.firstChild);\n                }\n\n                nearBlockNode.parentElement.insertBefore(insertElem, nearBlockNode);\n\n                if (!isNearBlockLengthZero) {\n                  let currentFocusElem = insertElem;\n                  let finalFocusElem;\n\n                  while (!isNullOrUndefined(currentFocusElem) && currentFocusElem.nodeName !== '#text') {\n                    finalFocusElem = currentFocusElem;\n                    currentFocusElem = currentFocusElem.lastChild;\n                  }\n\n                  finalFocusElem.innerHTML = '<br>';\n\n                  if (!isImageNode) {\n                    detach(nearBlockNode);\n                  }\n                }\n\n                this.parent.formatter.editorManager.nodeSelection.setCursorPoint(this.parent.contentModule.getDocument(), insertElem.nextElementSibling, 0);\n              } else if (nearBlockNode.textContent.length === 0 && !(!isNullOrUndefined(nearBlockNode.childNodes[0]) && nearBlockNode.childNodes[0].nodeName === 'IMG')) {\n                if (!isNullOrUndefined(nearBlockNode.children[0]) && nearBlockNode.children[0].tagName !== 'BR') {\n                  const newElem = this.parent.formatter.editorManager.nodeCutter.SplitNode(this.range, nearBlockNode, false).cloneNode(true);\n                  this.parent.formatter.editorManager.domNode.insertAfter(newElem, nearBlockNode);\n                  this.parent.formatter.editorManager.nodeSelection.setCursorPoint(this.parent.contentModule.getDocument(), newElem, newElem.textContent.length >= 0 ? 0 : 1);\n                } else {\n                  const insertElem = this.createInsertElement(shiftKey);\n                  insertElem.innerHTML = '<br>';\n                  this.parent.formatter.editorManager.domNode.insertAfter(insertElem, nearBlockNode);\n                  this.parent.formatter.editorManager.nodeSelection.setCursorPoint(this.parent.contentModule.getDocument(), insertElem, 0);\n                }\n              } else {\n                const newElem = this.parent.formatter.editorManager.nodeCutter.SplitNode(this.range, nearBlockNode, true);\n\n                if (!isNullOrUndefined(newElem.childNodes[0]) && newElem.childNodes[0].nodeName === '#text' && newElem.childNodes[0].textContent.length === 0) {\n                  detach(newElem.childNodes[0]);\n                }\n\n                if (newElem.textContent.trim().length === 0) {\n                  const brElm = this.parent.createElement('br');\n\n                  if (this.startNode.nodeName === 'A') {\n                    let startParentElem = this.startNode.parentElement;\n                    this.startNode.parentElement.insertBefore(brElm, this.startNode);\n                    detach(this.startNode);\n                    this.startNode = startParentElem;\n                  } else {\n                    this.startNode.appendChild(brElm);\n                  }\n\n                  if (newElem.childNodes[0].textContent === '\\n') {\n                    detach(newElem.childNodes[0]);\n                  }\n\n                  this.parent.formatter.editorManager.nodeSelection.setCursorPoint(this.parent.contentModule.getDocument(), this.startNode, 0);\n                }\n\n                if ((this.parent.enterKey === 'P' || this.parent.enterKey === 'DIV') && !shiftKey || (this.parent.shiftEnterKey === 'DIV' || this.parent.shiftEnterKey === 'P') && shiftKey) {\n                  const insertElm = this.createInsertElement(shiftKey);\n\n                  while (newElem.firstChild) {\n                    insertElm.appendChild(newElem.firstChild);\n                  }\n\n                  this.parent.formatter.editorManager.domNode.insertAfter(insertElm, newElem);\n                  detach(newElem);\n                  this.parent.formatter.editorManager.nodeSelection.setCursorPoint(this.parent.contentModule.getDocument(), this.parent.formatter.editorManager.domNode.isBlockNode(this.startNode) ? insertElm : this.startNode, 0);\n                }\n              }\n\n              e.args.preventDefault();\n            }\n\n            if (this.parent.enterKey === 'BR' && !shiftKey || this.parent.shiftEnterKey === 'BR' && shiftKey) {\n              let currentParent;\n\n              if (!this.parent.formatter.editorManager.domNode.isBlockNode(this.startNode)) {\n                let currentNode = this.startNode;\n                let previousNode = currentNode;\n\n                while (!this.parent.formatter.editorManager.domNode.isBlockNode(currentNode)) {\n                  previousNode = currentNode;\n                  currentNode = currentNode.parentElement;\n                }\n\n                currentParent = currentNode === this.parent.inputElement ? previousNode : currentNode;\n              } else {\n                currentParent = this.startNode;\n              }\n\n              let currentParentLastChild = currentParent.lastChild;\n\n              while (!isNullOrUndefined(currentParentLastChild) && !(currentParentLastChild.nodeName === '#text')) {\n                currentParentLastChild = currentParentLastChild.lastChild;\n              }\n\n              const isLastNodeLength = this.range.startContainer === currentParentLastChild ? this.range.startContainer.textContent.length : currentParent.textContent.length;\n\n              if (currentParent !== this.parent.inputElement && this.parent.formatter.editorManager.domNode.isBlockNode(currentParent) && this.range.startOffset === this.range.endOffset && this.range.startOffset === isLastNodeLength) {\n                const outerBRElem = this.parent.createElement('br');\n                this.parent.formatter.editorManager.domNode.insertAfter(outerBRElem, currentParent);\n                this.parent.formatter.editorManager.nodeSelection.setCursorPoint(this.parent.contentModule.getDocument(), outerBRElem, 0);\n              } else if (!isNullOrUndefined(currentParent) && currentParent !== this.parent.inputElement && currentParent.nodeName !== 'BR') {\n                if (currentParent.textContent.trim().length === 0 || currentParent.textContent.trim().length === 1 && currentParent.textContent.charCodeAt(0) === 8203) {\n                  const newElem = this.parent.formatter.editorManager.nodeCutter.SplitNode(this.range, currentParent, true).cloneNode(true);\n                  this.parent.formatter.editorManager.domNode.insertAfter(newElem, currentParent);\n                  const outerBRElem = this.parent.createElement('br');\n                  newElem.parentElement.insertBefore(outerBRElem, newElem);\n                  this.parent.formatter.editorManager.nodeSelection.setCursorPoint(this.parent.contentModule.getDocument(), newElem, 0);\n                } else {\n                  let newElem;\n                  const outerBRElem = this.parent.createElement('br');\n\n                  if (this.range.startOffset === 0 && this.range.endOffset === 0 && !isNullOrUndefined(currentParent.previousSibling) && currentParent.previousSibling.nodeName === 'BR') {\n                    newElem = this.parent.formatter.editorManager.nodeCutter.SplitNode(this.range, currentParent, false).cloneNode(true);\n                    this.parent.formatter.editorManager.domNode.insertAfter(outerBRElem, currentParent);\n                    this.insertFocusContent();\n                    let currentFocusElem = outerBRElem.nextSibling;\n\n                    while (!isNullOrUndefined(currentFocusElem) && currentFocusElem.nodeName !== '#text') {\n                      currentFocusElem = currentFocusElem.lastChild;\n                    }\n\n                    this.parent.formatter.editorManager.nodeSelection.setCursorPoint(this.parent.contentModule.getDocument(), currentFocusElem, 0);\n                  } else {\n                    this.insertBRElement();\n                  }\n                }\n              } else {\n                this.insertBRElement();\n              }\n\n              e.args.preventDefault();\n            }\n\n            this.parent.trigger(actionComplete, {\n              requestType: shiftKey ? 'ShiftEnterAction' : 'EnterAction',\n              args: e.args\n            });\n          }\n        });\n      }\n    }\n  }\n\n  insertBRElement() {\n    let isEmptyBrInserted = false;\n    const brElm = this.parent.createElement('br');\n\n    if (this.startNode.nodeName === 'BR' && this.endNode.nodeName === 'BR' && this.range.startOffset === 0 && this.range.startOffset === this.range.endOffset) {\n      this.parent.formatter.editorManager.domNode.insertAfter(brElm, this.startNode);\n      isEmptyBrInserted = true;\n    } else {\n      if (this.startNode === this.parent.inputElement && !isNullOrUndefined(this.range.startContainer.previousSibling) && this.range.startContainer.previousSibling.nodeName === 'BR' && this.range.startContainer.textContent.length === 0) {\n        isEmptyBrInserted = true;\n      }\n\n      this.range.insertNode(brElm);\n    }\n\n    if (isEmptyBrInserted || !isNullOrUndefined(brElm.nextElementSibling) && brElm.nextElementSibling.tagName === 'BR' || !isNullOrUndefined(brElm.nextSibling) && brElm.nextSibling.textContent.length > 0) {\n      this.parent.formatter.editorManager.nodeSelection.setCursorPoint(this.parent.contentModule.getDocument(), !isNullOrUndefined(brElm.nextSibling) ? brElm.nextSibling : brElm, 0);\n      isEmptyBrInserted = false;\n    } else {\n      const brElm2 = this.parent.createElement('br');\n      this.range.insertNode(brElm2);\n      this.parent.formatter.editorManager.nodeSelection.setCursorPoint(this.parent.contentModule.getDocument(), brElm, 0);\n    }\n  }\n\n  insertFocusContent() {\n    if (this.range.startContainer.textContent.length === 0) {\n      if (this.range.startContainer.nodeName === '#text') {\n        this.range.startContainer.parentElement.innerHTML = '&#8203;';\n      } else {\n        this.range.startContainer.innerHTML = '&#8203;';\n      }\n    }\n  }\n\n  createInsertElement(shiftKey) {\n    let insertElem;\n\n    if (this.parent.enterKey === 'DIV' && !shiftKey || this.parent.shiftEnterKey === 'DIV' && shiftKey) {\n      insertElem = this.parent.createElement('div');\n    } else if (this.parent.enterKey === 'P' && !shiftKey || this.parent.shiftEnterKey === 'P' && shiftKey) {\n      insertElem = this.parent.createElement('p');\n    }\n\n    return insertElem;\n  }\n\n}\n\nvar __decorate$1 = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/**\n * Represents the Rich Text Editor component.\n * ```html\n * <textarea id=\"rte\"></textarea>\n * <script>\n *  var rteObj = new RichTextEditor();\n *  rteObj.appendTo(\"#rte\");\n * </script>\n * ```\n */\n\n\nlet RichTextEditor = class RichTextEditor extends Component {\n  constructor(options, element) {\n    super(options, element);\n    this.defaultResetValue = null;\n    this.isResizeInitialized = false;\n    /**\n     * @hidden\n     * @deprecated\n     */\n\n    this.isFocusOut = false;\n    /**\n     * @hidden\n     * @deprecated\n     */\n\n    this.isRTE = false;\n    /**\n     * @hidden\n     * @deprecated\n     */\n\n    this.isBlur = true;\n    this.needsID = true;\n  }\n  /**\n   * To provide the array of modules needed for component rendering\n   *\n   * @returns {ModuleDeclaration[]} - specifies the declaration.\n   * @hidden\n   * @deprecated\n   */\n\n\n  requiredModules() {\n    const modules = [];\n\n    if (this.toolbarSettings.enable) {\n      modules.push({\n        member: 'toolbar',\n        args: [this, this.serviceLocator]\n      });\n      modules.push({\n        member: 'link',\n        args: [this, this.serviceLocator]\n      });\n      modules.push({\n        member: 'table',\n        args: [this, this.serviceLocator]\n      });\n      modules.push({\n        member: 'image',\n        args: [this, this.serviceLocator]\n      });\n\n      if (this.quickToolbarSettings.enable) {\n        modules.push({\n          member: 'quickToolbar',\n          args: [this, this.serviceLocator]\n        });\n      }\n    }\n\n    if (this.showCharCount) {\n      modules.push({\n        member: 'count',\n        args: [this, this.serviceLocator]\n      });\n    }\n\n    if (this.editorMode === 'Markdown') {\n      modules.push({\n        member: 'markdownEditor',\n        args: [this, this.serviceLocator]\n      });\n    }\n\n    if (this.editorMode === 'HTML') {\n      modules.push({\n        member: 'htmlEditor',\n        args: [this, this.serviceLocator]\n      });\n      modules.push({\n        member: 'pasteCleanup',\n        args: [this, this.serviceLocator]\n      });\n    }\n\n    if (this.fileManagerSettings.enable) {\n      modules.push({\n        member: 'fileManager',\n        args: [this, this.serviceLocator]\n      });\n    }\n\n    if (this.enableResize) {\n      modules.push({\n        member: 'resize',\n        args: [this]\n      });\n    }\n\n    return modules;\n  }\n\n  updateEnable() {\n    if (this.enabled) {\n      removeClass([this.element], CLS_DISABLED);\n      this.element.setAttribute('aria-disabled', 'false');\n\n      if (!isNullOrUndefined(this.htmlAttributes.tabindex)) {\n        this.inputElement.setAttribute('tabindex', this.htmlAttributes.tabindex);\n      } else {\n        this.inputElement.setAttribute('tabindex', '0');\n      }\n    } else {\n      if (this.getToolbar()) {\n        removeClass(this.getToolbar().querySelectorAll('.' + CLS_ACTIVE), CLS_ACTIVE);\n        removeClass([this.getToolbar()], [CLS_TB_FLOAT, CLS_TB_ABS_FLOAT]);\n      }\n\n      addClass([this.element], CLS_DISABLED);\n      this.element.tabIndex = -1;\n      this.element.setAttribute('aria-disabled', 'true');\n      this.inputElement.setAttribute('tabindex', '-1');\n    }\n  }\n  /**\n   * setEnable method\n   *\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  setEnable() {\n    this.updateEnable(); // eslint-disable-next-line\n\n    this.enabled ? this.eventInitializer() : this.unWireEvents();\n  }\n  /**\n   * For internal use only - Initialize the event handler;\n   *\n   * @returns {void}\n   * @hidden\n   * @private\n   */\n\n\n  preRender() {\n    this.onBlurHandler = this.blurHandler.bind(this);\n    this.onFocusHandler = this.focusHandler.bind(this);\n    this.onResizeHandler = this.resizeHandler.bind(this);\n    this.clickPoints = {\n      clientX: 0,\n      clientY: 0\n    };\n    this.initialValue = this.value;\n    this.serviceLocator = new ServiceLocator();\n    this.initializeServices();\n    this.setContainer();\n    this.persistData();\n    setStyleAttribute(this.element, {\n      'width': formatUnit(this.width)\n    });\n    attributes(this.element, {\n      role: 'application'\n    });\n  }\n\n  persistData() {\n    if (this.enablePersistence && this.originalElement.tagName === 'TEXTAREA') {\n      this.element.id = this.originalElement.id + '_wrapper';\n      const data = window.localStorage.getItem(this.getModuleName() + this.element.id);\n\n      if (!(isNullOrUndefined(data) || data === '')) {\n        this.setProperties(JSON.parse(data), true);\n      }\n    }\n  }\n\n  setContainer() {\n    this.originalElement = this.element.cloneNode(true);\n\n    if (this.value === null || this.valueTemplate !== null) {\n      this.setValue();\n    }\n\n    if (this.element.hasAttribute('tabindex')) {\n      this.htmlAttributes = {\n        'tabindex': this.element.getAttribute('tabindex')\n      };\n      this.element.removeAttribute('tabindex');\n    }\n\n    this.element.innerHTML = '';\n    const invalidAttr = ['class', 'style', 'id', 'ejs-for'];\n    const htmlAttr = {};\n\n    for (let a = 0; a < this.element.attributes.length; a++) {\n      if (invalidAttr.indexOf(this.element.attributes[a].name) === -1 && !/^data-val/.test(this.element.attributes[a].name)) {\n        // data-val for asp.net core data annotation validation.\n        htmlAttr[this.element.attributes[a].name] = this.element.getAttribute(this.element.attributes[a].name);\n      }\n    }\n\n    extend(htmlAttr, this.htmlAttributes, htmlAttr);\n    this.setProperties({\n      htmlAttributes: htmlAttr\n    }, true);\n\n    if (!isNullOrUndefined(this.htmlAttributes.id)) {\n      this.element.id = this.htmlAttributes.id;\n    }\n\n    if (this.element.tagName === 'TEXTAREA') {\n      const rteOuterWrapper = this.createElement('div', {\n        className: this.element.getAttribute('class')\n      });\n      this.element.innerHTML = '';\n      this.element.parentElement.insertBefore(rteOuterWrapper, this.element);\n      this.valueContainer = this.element;\n      removeClass([this.valueContainer], this.element.getAttribute('class').split(' '));\n      this.element = rteOuterWrapper;\n    } else {\n      this.valueContainer = this.createElement('textarea', {\n        id: this.getID() + '-value'\n      });\n    }\n\n    this.valueContainer.name = this.getID();\n    addClass([this.valueContainer], CLS_RTE_HIDDEN);\n    this.element.appendChild(this.valueContainer);\n  }\n  /**\n   * getPersistData method\n   *\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  getPersistData() {\n    return this.addOnPersist(['value']);\n  }\n  /**\n   * Focuses the Rich Text Editor component\n   *\n   * @returns {void}\n   * @public\n   */\n\n\n  focusIn() {\n    if (this.enabled) {\n      this.inputElement.focus();\n      this.focusHandler({});\n    }\n  }\n  /**\n   * Blurs the Rich Text Editor component\n   *\n   * @returns {void}\n   * @public\n   */\n\n\n  focusOut() {\n    if (this.enabled) {\n      this.inputElement.blur();\n      this.blurHandler({});\n    }\n  }\n  /**\n   * Selects all the content in RichTextEditor\n   *\n   * @returns {void}\n   * @public\n   */\n\n\n  selectAll() {\n    this.notify(selectAll$1, {});\n  }\n  /**\n   * Selects a content range or an element\n   *\n   * @param {Range} range - Specify the range which you want to select within the content.\n   * The method used to select a particular sentence or word or entire document.\n   *\n   * @returns {void}\n   * @public\n   */\n\n\n  selectRange(range) {\n    this.notify(selectRange, {\n      range: range\n    });\n  }\n  /**\n   * Retrieves the HTML markup content from currently selected content of RichTextEditor.\n   *\n   * @returns {void}\n   * @public\n   */\n\n\n  getSelection() {\n    let str = '';\n    this.notify(getSelectedHtml, {\n      callBack: txt => {\n        str = txt;\n      }\n    });\n    return str;\n  }\n  /**\n   * Executes the commands\n   *\n   * @returns {void}\n   * @param {CommandName} commandName - Specifies the name of the command to be executed.\n   * @param {string | HTMLElement | ILinkCommandsArgs | IImageCommandsArgs} value - Specifies the value that you want to execute.\n   * @param {ExecuteCommandOption} option - specifies the command option\n   * @public\n   */\n\n\n  executeCommand(commandName, value, option) {\n    value = this.htmlPurifier(commandName, value);\n\n    if (this.editorMode === 'HTML') {\n      const range = this.getRange();\n\n      if (this.iframeSettings.enable) {\n        this.formatter.editorManager.nodeSelection.Clear(this.element.ownerDocument);\n      }\n\n      const toFocus = this.iframeSettings.enable && range.startContainer === this.inputElement ? true : !this.inputElement.contains(range.startContainer);\n\n      if (toFocus) {\n        this.focusIn();\n      }\n    }\n\n    const tool = executeGroup[commandName];\n\n    if (option && option.undo) {\n      if (option.undo && this.formatter.getUndoRedoStack().length === 0) {\n        this.formatter.saveData();\n      }\n    }\n\n    this.formatter.editorManager.execCommand(tool.command, tool.subCommand ? tool.subCommand : value ? value : tool.value, null, null, value ? value : tool.value, value ? value : tool.value);\n\n    if (option && option.undo) {\n      this.formatter.saveData();\n      this.formatter.enableUndo(this);\n    }\n\n    this.setPlaceHolder();\n    this.notify(contentChanged, {});\n  }\n\n  htmlPurifier(command, value) {\n    if (this.editorMode === 'HTML') {\n      switch (command) {\n        case 'insertHTML':\n          if (this.enableHtmlSanitizer) {\n            if (typeof value === 'string') {\n              value = this.htmlEditorModule.sanitizeHelper(value);\n            } else {\n              value = this.htmlEditorModule.sanitizeHelper(value.outerHTML);\n            }\n          }\n\n          break;\n\n        case 'insertTable':\n          if (isNullOrUndefined(value.width)) {\n            value.width = {\n              minWidth: this.tableSettings.minWidth,\n              maxWidth: this.tableSettings.maxWidth,\n              width: this.tableSettings.width\n            };\n          }\n\n          break;\n\n        case 'insertImage':\n          {\n            const temp = this.createElement('img', {\n              attrs: {\n                src: value.url\n              }\n            });\n            let imageValue = temp.outerHTML;\n\n            if (this.enableHtmlSanitizer) {\n              imageValue = this.htmlEditorModule.sanitizeHelper(temp.outerHTML);\n            }\n\n            let url = imageValue !== '' && this.createElement('div', {\n              innerHTML: imageValue\n            }).firstElementChild.getAttribute('src') || null;\n            url = !isNullOrUndefined(url) ? url : '';\n            value.url = url;\n\n            if (isNullOrUndefined(value.width)) {\n              value.width = {\n                minWidth: this.insertImageSettings.minWidth,\n                maxWidth: this.insertImageSettings.maxWidth,\n                width: this.insertImageSettings.width\n              };\n            }\n\n            if (isNullOrUndefined(value.height)) {\n              value.height = {\n                minHeight: this.insertImageSettings.minHeight,\n                maxHeight: this.insertImageSettings.maxHeight,\n                height: this.insertImageSettings.height\n              };\n            }\n\n            break;\n          }\n\n        case 'createLink':\n          {\n            const tempNode = this.createElement('a', {\n              attrs: {\n                href: value.url\n              }\n            });\n            let linkValue = tempNode.outerHTML;\n\n            if (this.enableHtmlSanitizer) {\n              linkValue = this.htmlEditorModule.sanitizeHelper(tempNode.outerHTML);\n            }\n\n            let href = linkValue !== '' && this.createElement('div', {\n              innerHTML: linkValue\n            }).firstElementChild.getAttribute('href') || null;\n            href = !isNullOrUndefined(href) ? href : '';\n            value.url = href;\n            break;\n          }\n      }\n    }\n\n    return value;\n  }\n\n  encode(value) {\n    const divNode = this.createElement('div');\n    divNode.innerText = value.trim(); // eslint-disable-next-line\n\n    return divNode.innerHTML.replace(/<br\\s*[\\/]?>/gi, '\\n');\n  }\n  /**\n   * For internal use only - To Initialize the component rendering.\n   *\n   * @returns {void}\n   * @private\n   * @deprecated\n   */\n\n\n  render() {\n    if (this.value && !this.valueTemplate) {\n      this.setProperties({\n        value: this.serializeValue(this.value)\n      }, true);\n    }\n\n    this.renderModule = new Render(this, this.serviceLocator);\n    this.sourceCodeModule = new ViewSource(this, this.serviceLocator);\n    this.notify(initialLoad, {});\n    this.trigger(load);\n    this.RTERender(); // eslint-disable-next-line\n\n    const execCommandCallBack$$1 = new ExecCommandCallBack(this);\n    this.notify(initialEnd, {});\n\n    if (this.enableXhtml) {\n      this.setProperties({\n        value: this.getXhtml()\n      }, true);\n    }\n\n    if (this.toolbarSettings.enable && this.toolbarSettings.type === 'Expand' && !isNullOrUndefined(this.getToolbar()) && this.toolbarSettings.items.indexOf('Undo') > -1 && this.toolbarSettings.items.indexOf('Redo') > -1) {\n      this.disableToolbarItem(['Undo', 'Redo']);\n    }\n\n    this.setContentHeight();\n\n    if (this.value !== null) {\n      this.valueContainer.defaultValue = this.value;\n    } // eslint-disable-next-line\n\n\n    !this.enabled ? this.unWireEvents() : this.eventInitializer();\n    this.renderComplete();\n  }\n  /**\n   * For internal use only - Initialize the event handler\n   *\n   * @returns {void}\n   * @private\n   * @deprecated\n   * @hidden\n   */\n\n\n  eventInitializer() {\n    this.wireEvents();\n  }\n  /**\n   * For internal use only - keydown the event handler;\n   *\n   * @param {KeyboardEvent} e - specifies the event.\n   * @returns {void}\n   * @private\n   * @deprecated\n   * @hidden\n   */\n\n\n  keyDown(e) {\n    this.notify(keyDown, {\n      member: 'keydown',\n      args: e\n    });\n    this.restrict(e);\n\n    if (this.editorMode === 'HTML' && (e.which === 8 && e.code === 'Backspace' || e.which === 46 && e.code === 'Delete')) {\n      const range = this.getRange();\n      const startNode = range.startContainer.nodeName === '#text' ? range.startContainer.parentElement : range.startContainer;\n\n      if (closest(startNode, 'pre') && e.which === 8 && range.startContainer.textContent.charCodeAt(range.startOffset - 1) === 8203 || e.which === 46 && range.startContainer.textContent.charCodeAt(range.startOffset) === 8203) {\n        const regEx = new RegExp(String.fromCharCode(8203), 'g');\n        const pointer = e.which === 8 ? range.startOffset - 1 : range.startOffset;\n        range.startContainer.textContent = range.startContainer.textContent.replace(regEx, '');\n        this.formatter.editorManager.nodeSelection.setCursorPoint(this.contentModule.getDocument(), range.startContainer, pointer);\n      } else if (e.code === 'Backspace' && e.which === 8 && range.startContainer.textContent.charCodeAt(0) === 8203 && range.collapsed) {\n        const parentEle = range.startContainer.parentElement;\n        let index;\n        let i;\n\n        for (i = 0; i < parentEle.childNodes.length; i++) {\n          if (parentEle.childNodes[i] === range.startContainer) {\n            index = i;\n          }\n        }\n\n        let bool = true;\n        const removeNodeArray = [];\n\n        for (i = index; i >= 0; i--) {\n          if (parentEle.childNodes[i].nodeType === 3 && parentEle.childNodes[i].textContent.charCodeAt(0) === 8203 && bool) {\n            removeNodeArray.push(i);\n          } else {\n            bool = false;\n          }\n        }\n\n        if (removeNodeArray.length > 0) {\n          for (i = removeNodeArray.length - 1; i > 0; i--) {\n            parentEle.childNodes[removeNodeArray[i]].textContent = '';\n          }\n        }\n\n        this.formatter.editorManager.nodeSelection.setCursorPoint(this.contentModule.getDocument(), range.startContainer, range.startOffset);\n      }\n    }\n\n    if (this.formatter.getUndoRedoStack().length === 0) {\n      this.formatter.saveData();\n    }\n\n    if (e.action !== 'insert-link' && (e.action && e.action !== 'paste' && e.action !== 'space' || e.which === 9 || e.code === 'Backspace' && e.which === 8)) {\n      this.formatter.process(this, null, e);\n\n      switch (e.action) {\n        case 'toolbar-focus':\n          if (this.toolbarSettings.enable) {\n            // eslint-disable-next-line\n            let selector = '.e-toolbar-item[aria-disabled=\"false\"][title] [tabindex]';\n            this.toolbarModule.baseToolbar.toolbarObj.element.querySelector(selector).focus();\n          }\n\n          break;\n\n        case 'escape':\n          this.contentModule.getEditPanel().focus();\n          break;\n      }\n    }\n\n    if (!isNullOrUndefined(this.placeholder)) {\n      if (!isNullOrUndefined(this.placeHolderWrapper) && this.inputElement.textContent.length !== 1) {\n        this.placeHolderWrapper.style.display = 'none';\n      } else {\n        this.setPlaceHolder();\n      }\n    }\n\n    this.autoResize();\n  }\n\n  keyUp(e) {\n    this.notify(keyUp, {\n      member: 'keyup',\n      args: e\n    });\n\n    if (e.code === 'KeyX' && e.which === 88 && e.keyCode === 88 && e.ctrlKey && (this.inputElement.innerHTML === '' || this.inputElement.innerHTML === '<br>')) {\n      this.inputElement.innerHTML = getEditValue(getDefaultValue(this), this);\n    }\n\n    const allowedKeys = e.which === 32 || e.which === 13 || e.which === 8 || e.which === 46;\n\n    if (e.key !== 'shift' && !e.ctrlKey && e.key && e.key.length === 1 || allowedKeys || this.editorMode === 'Markdown' && (e.key !== 'shift' && !e.ctrlKey && e.key && e.key.length === 1 || allowedKeys) && !this.inlineMode.enable) {\n      this.formatter.onKeyHandler(this, e);\n    }\n\n    if (this.inputElement && this.inputElement.textContent.length !== 0 || this.element.querySelectorAll('.e-toolbar-item.e-active').length > 0) {\n      this.notify(toolbarRefresh, {\n        args: e\n      });\n    }\n\n    if (!isNullOrUndefined(this.placeholder)) {\n      if (!(e.key === 'Enter' && e.keyCode === 13) && (this.inputElement.innerHTML === '<p><br></p>' || this.inputElement.innerHTML === '<div><br></div>' || this.inputElement.innerHTML === '<br>')) {\n        this.setPlaceHolder();\n      }\n    }\n  }\n  /**\n   * @param {string} value - specifies the value.\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  serializeValue(value) {\n    if (this.editorMode === 'HTML' && !isNullOrUndefined(value)) {\n      if (this.enableHtmlEncode) {\n        value = this.htmlEditorModule.sanitizeHelper(decode(value));\n        value = this.encode(value);\n      } else {\n        value = this.htmlEditorModule.sanitizeHelper(value);\n      }\n    }\n\n    return value;\n  }\n  /**\n   * This method will clean up the HTML against cross-site scripting attack and return the HTML as string.\n   * It's only applicable to editorMode as `HTML`.\n   *\n   * @param {string} value - Specifies the value that you want to sanitize.\n   * @returns {string} - specifies the the string value\n   */\n\n\n  sanitizeHtml(value) {\n    return this.serializeValue(value);\n  }\n  /**\n   * updateValue method\n   *\n   * @param {string} value - specifies the string value.\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  updateValue(value) {\n    if (isNullOrUndefined(value)) {\n      const inputVal = this.inputElement.innerHTML;\n      this.setProperties({\n        value: isEditableValueEmpty(inputVal) ? null : inputVal\n      });\n    } else {\n      this.setProperties({\n        value: value\n      });\n    }\n  }\n\n  triggerEditArea(e) {\n    if (!isIDevice()) {\n      this.notify(editAreaClick, {\n        member: 'editAreaClick',\n        args: e\n      });\n    } else {\n      const touch = e.touches ? e.changedTouches[0] : e;\n\n      if (this.clickPoints.clientX === touch.clientX && this.clickPoints.clientY === touch.clientY) {\n        this.notify(editAreaClick, {\n          member: 'editAreaClick',\n          args: e\n        });\n      }\n    }\n  }\n\n  notifyMouseUp(e) {\n    const touch = e.touches ? e.changedTouches[0] : e;\n    this.notify(mouseUp, {\n      member: 'mouseUp',\n      args: e,\n      touchData: {\n        prevClientX: this.clickPoints.clientX,\n        prevClientY: this.clickPoints.clientY,\n        clientX: touch.clientX,\n        clientY: touch.clientY\n      }\n    });\n\n    if (this.inputElement && (this.editorMode === 'HTML' && this.inputElement.textContent.length !== 0 || this.editorMode === 'Markdown' && this.inputElement.value.length !== 0)) {\n      this.notify(toolbarRefresh, {\n        args: e\n      });\n    }\n\n    this.triggerEditArea(e);\n  }\n\n  mouseUp(e) {\n    if (this.quickToolbarSettings.showOnRightClick && Browser.isDevice) {\n      const target = e.target;\n      const closestTable = closest(target, 'table');\n\n      if (target && target.nodeName === 'A' || target.nodeName === 'IMG' || target.nodeName === 'TD' || target.nodeName === 'TH' || target.nodeName === 'TABLE' || closestTable && this.contentModule.getEditPanel().contains(closestTable)) {\n        return;\n      }\n    }\n\n    this.notifyMouseUp(e);\n\n    if (e.detail === 3) {\n      const range = this.getRange();\n      const selection = this.formatter.editorManager.domNode.getSelection();\n\n      if (/\\s+$/.test(selection.toString())) {\n        if (!isNullOrUndefined(range.startContainer.parentElement) && (!isNullOrUndefined(range.startContainer.parentElement.nextSibling) && (range.startContainer.parentElement.nextSibling.nodeType !== 3 || /\\s+$/.test(range.startContainer.parentElement.nextSibling.textContent)) || range.startOffset === range.endOffset) || range.startContainer.parentElement.tagName.toLocaleLowerCase() === 'li') {\n          range.setStart(range.startContainer, range.startOffset);\n          range.setEnd(range.startContainer, range.startContainer.textContent.length);\n        }\n      }\n    }\n  }\n  /**\n   * @param {Function} module - specifies the module function.\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  ensureModuleInjected(module) {\n    return this.getInjectedModules().indexOf(module) >= 0;\n  }\n  /**\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  onCopy() {\n    this.contentModule.getDocument().execCommand('copy', false, null);\n  }\n  /**\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  onCut() {\n    this.contentModule.getDocument().execCommand('cut', false, null);\n  }\n  /**\n   * @param {KeyboardEvent} e - specifies the keyboard event.\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  onPaste(e) {\n    const evenArgs = {\n      originalEvent: e,\n      cancel: false,\n      requestType: 'Paste'\n    };\n    this.trigger(actionBegin, evenArgs, pasteArgs => {\n      const currentLength = this.getText().trim().length;\n      const selectionLength = this.getSelection().length;\n      const pastedContentLength = isNullOrUndefined(e) || isNullOrUndefined(e.clipboardData) ? 0 : e.clipboardData.getData('text/plain').length;\n      const totalLength = currentLength - selectionLength + pastedContentLength;\n\n      if (this.editorMode === 'Markdown') {\n        if (!(this.maxLength === -1 || totalLength <= this.maxLength)) {\n          e.preventDefault();\n        }\n\n        return;\n      }\n\n      if (!pasteArgs.cancel && this.inputElement.contentEditable === 'true' && (this.maxLength === -1 || totalLength <= this.maxLength)) {\n        if (!isNullOrUndefined(this.pasteCleanupModule)) {\n          this.notify(pasteClean, {\n            args: e\n          });\n        } else {\n          const args = {\n            requestType: 'Paste',\n            editorMode: this.editorMode,\n            event: e\n          };\n          let value = null;\n          let htmlValue = false;\n\n          if (e && !isNullOrUndefined(e.clipboardData)) {\n            value = e.clipboardData.getData('text/plain');\n            htmlValue = e.clipboardData.getData('text/html').indexOf('MsoNormal') > 0;\n          }\n\n          const file = e && e.clipboardData && e.clipboardData.items.length > 0 ? e.clipboardData.items[0].getAsFile() : null;\n\n          if (value !== null) {\n            this.notify(paste, {\n              file: file,\n              args: e,\n              text: value,\n              isWordPaste: htmlValue\n            });\n          }\n\n          setTimeout(() => {\n            this.formatter.onSuccess(this, args);\n          }, 0);\n        }\n      } else {\n        e.preventDefault();\n      }\n    });\n  }\n  /**\n   * @param {string} action - specifies the string value.\n   * @param {MouseEvent} event - specifies the event.\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  clipboardAction(action, event) {\n    switch (action.toLowerCase()) {\n      case 'cut':\n        this.onCut();\n        this.formatter.onSuccess(this, {\n          requestType: 'Cut',\n          editorMode: this.editorMode,\n          event: event\n        });\n        break;\n\n      case 'copy':\n        this.onCopy();\n        this.formatter.onSuccess(this, {\n          requestType: 'Copy',\n          editorMode: this.editorMode,\n          event: event\n        });\n        break;\n\n      case 'paste':\n        this.onPaste(event);\n        break;\n    }\n  }\n  /**\n   * Destroys the component (detaches/removes all event handlers, attributes, classes, and empties the component element).\n   *\n   * @returns {void}\n   */\n\n\n  destroy() {\n    if (this.isDestroyed || !this.isRendered) {\n      return;\n    }\n\n    if (this.element.offsetParent === null && !isNullOrUndefined(this.toolbarModule)) {\n      this.toolbarModule.destroy();\n      return;\n    }\n\n    this.notify(destroy, {});\n    this.destroyDependentModules();\n\n    if (!isNullOrUndefined(this.timeInterval)) {\n      clearInterval(this.timeInterval);\n      this.timeInterval = null;\n    }\n\n    this.unWireEvents();\n\n    if (this.originalElement.tagName === 'TEXTAREA') {\n      this.element.parentElement.insertBefore(this.valueContainer, this.element);\n      this.valueContainer.id = this.getID();\n      this.valueContainer.removeAttribute('name');\n      detach(this.element);\n\n      if (this.originalElement.innerHTML.trim() !== '') {\n        this.valueContainer.value = this.originalElement.innerHTML.trim();\n        this.setProperties({\n          value: !isNullOrUndefined(this.initialValue) ? this.initialValue : null\n        }, true);\n      } else {\n        this.valueContainer.value = this.valueContainer.defaultValue;\n      }\n\n      this.element = this.valueContainer;\n\n      for (let i = 0; i < this.originalElement.classList.length; i++) {\n        addClass([this.element], this.originalElement.classList[i]);\n      }\n\n      removeClass([this.element], CLS_RTE_HIDDEN);\n    } else {\n      if (this.originalElement.innerHTML.trim() !== '') {\n        this.element.innerHTML = this.originalElement.innerHTML.trim();\n        this.setProperties({\n          value: !isNullOrUndefined(this.initialValue) ? this.initialValue : null\n        }, true);\n      } else {\n        this.element.innerHTML = '';\n      }\n    }\n\n    if (this.placeholder && this.placeHolderWrapper) {\n      this.placeHolderWrapper = null;\n    }\n\n    if (!isNullOrUndefined(this.cssClass)) {\n      const allClassName = this.cssClass.split(' ');\n\n      for (let i = 0; i < allClassName.length; i++) {\n        if (allClassName[i].trim() !== '') {\n          removeClass([this.element], allClassName[i]);\n        }\n      }\n    }\n\n    this.removeHtmlAttributes();\n    this.removeAttributes();\n    super.destroy();\n    this.isRendered = false;\n\n    if (this.enablePersistence) {\n      window.localStorage.removeItem(this.getModuleName() + this.element.id);\n    }\n  }\n\n  removeHtmlAttributes() {\n    if (this.htmlAttributes) {\n      const keys = Object.keys(this.htmlAttributes);\n\n      for (let i = 0; i < keys.length && this.element.hasAttribute(keys[i]); i++) {\n        this.element.removeAttribute(keys[i]);\n      }\n    }\n  }\n\n  removeAttributes() {\n    if (!this.enabled) {\n      removeClass([this.element], CLS_DISABLED);\n    }\n\n    if (this.enableRtl) {\n      removeClass([this.element], CLS_RTL);\n    }\n\n    if (this.readonly) {\n      removeClass([this.element], CLS_RTE_READONLY);\n    }\n\n    if (this.element.style.width !== '' && this.originalElement.style.width === '') {\n      this.element.style.removeProperty('width');\n    }\n\n    if (this.element.style.height !== '' && this.originalElement.style.height === '') {\n      this.element.style.removeProperty('height');\n    }\n\n    this.element.removeAttribute('aria-disabled');\n    this.element.removeAttribute('role');\n    this.element.removeAttribute('tabindex');\n  }\n\n  destroyDependentModules() {\n    /* destroy dependent modules */\n    this.renderModule.destroy();\n    this.formatter.editorManager.undoRedoManager.destroy();\n    this.sourceCodeModule.destroy();\n  }\n  /**\n   * Returns the HTML or Text inside the RichTextEditor.\n   *\n   * @returns {Element} - specifies the element.\n   */\n\n\n  getContent() {\n    return this.contentModule.getPanel();\n  }\n  /**\n   * Returns the text content as string.\n   *\n   * @returns {string} - specifies the string value.\n   */\n\n\n  getText() {\n    return this.contentModule.getText();\n  }\n  /**\n   * Returns the html value of the selected content as string.\n   *\n   * @returns {string} - specifies the string value.\n   */\n\n\n  getSelectedHtml() {\n    let range;\n    const wrapperElm = this.createElement('div');\n    const selection = this.contentModule.getDocument().getSelection();\n\n    if (selection.rangeCount > 0) {\n      range = selection.getRangeAt(0);\n      const selectedHtml = range.cloneContents();\n      wrapperElm.appendChild(selectedHtml);\n    }\n\n    return wrapperElm.innerHTML;\n  }\n  /**\n   * It shows the inline quick toolbar\n   *\n   * @returns {void}\n   */\n\n\n  showInlineToolbar() {\n    if (this.inlineMode.enable) {\n      const currentRange = this.getRange();\n      const targetElm = currentRange.endContainer.nodeName === '#text' ? currentRange.endContainer.parentElement : currentRange.endContainer;\n      const x = currentRange.getClientRects()[0].left;\n      const y = currentRange.getClientRects()[0].top;\n      this.quickToolbarModule.showInlineQTBar(x, y, targetElm);\n    }\n  }\n  /**\n   * It hides the inline quick toolbar\n   *\n   * @returns {void}\n   */\n\n\n  hideInlineToolbar() {\n    this.quickToolbarModule.hideInlineQTBar();\n  }\n  /**\n   * For internal use only - Get the module name.\n   *\n   * @returns {void}\n   * @private\n   * @deprecated\n   */\n\n\n  getModuleName() {\n    return 'richtexteditor';\n  }\n  /**\n   * Called internally if any of the property value changed.\n   *\n   * @param {RichTextEditorModel} newProp - specifies the the property.\n   * @param {RichTextEditorModel} oldProp - specifies the old property.\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  onPropertyChanged(newProp, oldProp) {\n    for (const prop of Object.keys(newProp)) {\n      switch (prop) {\n        case 'enterKey':\n        case 'value':\n          {\n            let nVal;\n\n            if (prop === 'enterKey') {\n              if (this.value === null || this.value === '<div><br></div>' || this.value === '<p><br></p>' || this.value === '<br>') {\n                nVal = null;\n              } else {\n                nVal = this.value;\n              }\n            } else {\n              nVal = newProp[prop];\n            }\n\n            const val = this.editorMode === 'HTML' ? getEditValue(nVal, this) : nVal;\n\n            if (!isNullOrUndefined(nVal) && nVal !== '' || prop === 'enterKey') {\n              this.value = this.serializeValue(this.enableHtmlEncode ? this.encode(decode(val)) : val);\n            }\n\n            this.updatePanelValue();\n            this.setPlaceHolder();\n            this.notify(xhtmlValidation, {\n              module: 'XhtmlValidation',\n              newProp: newProp,\n              oldProp: oldProp\n            });\n\n            if (this.enableXhtml) {\n              this.setProperties({\n                value: this.getXhtml()\n              }, true);\n            }\n\n            if (this.showCharCount) {\n              this.countModule.refresh();\n            }\n\n            break;\n          }\n\n        case 'valueTemplate':\n          this.setValue();\n\n          if (this.showCharCount) {\n            this.countModule.refresh();\n          }\n\n          break;\n\n        case 'width':\n          this.setWidth(newProp[prop]);\n\n          if (this.toolbarSettings.enable) {\n            this.toolbarModule.refreshToolbarOverflow();\n            this.resizeHandler();\n          }\n\n          break;\n\n        case 'height':\n          this.setHeight(newProp[prop]);\n          this.setContentHeight();\n          this.autoResize();\n          break;\n\n        case 'readonly':\n          this.setReadOnly(false);\n          break;\n\n        case 'cssClass':\n          this.element.classList.remove(oldProp[prop]);\n          this.setCssClass(newProp[prop]);\n          break;\n\n        case 'enabled':\n          this.setEnable();\n          break;\n\n        case 'enableRtl':\n          this.updateRTL();\n          break;\n\n        case 'placeholder':\n          this.placeholder = newProp[prop];\n          this.setPlaceHolder();\n          break;\n\n        case 'htmlAttributes':\n          setAttributes(this.htmlAttributes, this, false, false);\n          break;\n\n        case 'iframeSettings':\n          {\n            const frameSetting = oldProp[prop];\n\n            if (frameSetting.resources) {\n              const iframe = this.contentModule.getDocument();\n              const header = iframe.querySelector('head');\n              let files;\n\n              if (frameSetting.resources.scripts) {\n                files = header.querySelectorAll('.' + CLS_SCRIPT_SHEET);\n                this.removeSheets(files);\n              }\n\n              if (frameSetting.resources.styles) {\n                files = header.querySelectorAll('.' + CLS_STYLE_SHEET);\n                this.removeSheets(files);\n              }\n            }\n\n            this.setIframeSettings();\n            break;\n          }\n\n        case 'locale':\n          super.refresh();\n          break;\n\n        case 'inlineMode':\n          this.notify(modelChanged, {\n            module: 'quickToolbar',\n            newProp: newProp,\n            oldProp: oldProp\n          });\n          this.setContentHeight();\n          break;\n\n        case 'toolbarSettings':\n          this.notify(modelChanged, {\n            module: 'toolbar',\n            newProp: newProp,\n            oldProp: oldProp\n          });\n          this.setContentHeight();\n          break;\n\n        case 'maxLength':\n          if (this.showCharCount) {\n            this.countModule.refresh();\n          }\n\n          break;\n\n        case 'showCharCount':\n          if (newProp[prop] && this.countModule) {\n            this.countModule.renderCount();\n          } else if (newProp[prop] === false && this.countModule) {\n            this.countModule.destroy();\n          }\n\n          break;\n\n        case 'enableHtmlEncode':\n          this.updateValueData();\n          this.updatePanelValue();\n          this.setPlaceHolder();\n\n          if (this.showCharCount) {\n            this.countModule.refresh();\n          }\n\n          break;\n\n        case 'undoRedoSteps':\n        case 'undoRedoTimer':\n          this.formatter.editorManager.observer.notify(MODEL_CHANGED, {\n            newProp: newProp,\n            oldProp: oldProp\n          });\n          break;\n\n        case 'enableXhtml':\n          this.notify(xhtmlValidation, {\n            module: 'XhtmlValidation',\n            newProp: newProp,\n            oldProp: oldProp\n          });\n          break;\n\n        case 'quickToolbarSettings':\n          // eslint-disable-next-line\n          newProp.quickToolbarSettings.showOnRightClick ? this.wireContextEvent() : this.unWireContextEvent();\n          this.notify(modelChanged, {\n            newProp: newProp,\n            oldProp: oldProp\n          });\n          break;\n\n        default:\n          this.notify(modelChanged, {\n            newProp: newProp,\n            oldProp: oldProp\n          });\n          break;\n      }\n    }\n  }\n  /**\n   * @hidden\n   * @returns {void}\n   * @deprecated\n   */\n\n\n  updateValueData() {\n    if (this.enableHtmlEncode) {\n      this.setProperties({\n        value: this.encode(decode(this.inputElement.innerHTML))\n      }, true);\n    } else {\n      this.setProperties({\n        value: /<[a-z][\\s\\S]*>/i.test(this.inputElement.innerHTML) ? this.inputElement.innerHTML : decode(this.inputElement.innerHTML)\n      });\n    }\n  }\n\n  removeSheets(srcList) {\n    let i;\n\n    for (i = 0; i < srcList.length; i++) {\n      detach(srcList[i]);\n    }\n  }\n\n  updatePanelValue() {\n    let value = this.value;\n    value = this.enableHtmlEncode && this.value ? decode(value) : value;\n    const getTextArea = this.element.querySelector('.e-rte-srctextarea');\n\n    if (value) {\n      if (getTextArea && getTextArea.style.display === 'block') {\n        getTextArea.value = this.value;\n      }\n\n      if (this.valueContainer) {\n        this.valueContainer.value = this.enableHtmlEncode ? this.value : value;\n      }\n\n      if (this.editorMode === 'HTML' && this.inputElement && this.inputElement.innerHTML.trim() !== value.trim()) {\n        this.inputElement.innerHTML = value;\n      } else if (this.editorMode === 'Markdown' && this.inputElement && this.inputElement.value.trim() !== value.trim()) {\n        this.inputElement.value = value;\n      }\n    } else {\n      if (getTextArea && getTextArea.style.display === 'block') {\n        getTextArea.value = '';\n      }\n\n      if (this.editorMode === 'HTML') {\n        if (this.enterKey === 'DIV') {\n          this.inputElement.innerHTML = '<div><br/></div>';\n        } else if (this.enterKey === 'BR') {\n          this.inputElement.innerHTML = '<br/>';\n        } else {\n          this.inputElement.innerHTML = '<p><br/></p>';\n\n          if (value === '' && this.formatter && this.inputElement) {\n            this.formatter.editorManager.nodeSelection.setCursorPoint(this.contentModule.getDocument(), this.inputElement.firstElementChild, this.inputElement.firstElementChild.childElementCount);\n          }\n        }\n      } else {\n        this.inputElement.value = '';\n      }\n\n      if (this.valueContainer) {\n        this.valueContainer.value = '';\n      }\n    }\n\n    if (this.showCharCount) {\n      this.countModule.refresh();\n    }\n  }\n\n  setHeight(height) {\n    if (height !== 'auto') {\n      this.element.style.height = formatUnit(height);\n    } else {\n      this.element.style.height = 'auto';\n    }\n\n    if (this.toolbarSettings.type === 'Expand' && (typeof this.height === 'string' && this.height.indexOf('px') > -1 || typeof this.height === 'number')) {\n      this.element.classList.add(CLS_RTE_FIXED_TB_EXPAND);\n    } else {\n      this.element.classList.remove(CLS_RTE_FIXED_TB_EXPAND);\n    }\n  }\n  /**\n   * setPlaceHolder method\n   *\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  setPlaceHolder() {\n    if (this.inputElement && this.placeholder && this.iframeSettings.enable !== true) {\n      if (this.editorMode !== 'Markdown') {\n        if (!this.placeHolderWrapper) {\n          this.placeHolderWrapper = this.createElement('span', {\n            className: 'rte-placeholder e-rte-placeholder'\n          });\n\n          if (this.inputElement) {\n            this.inputElement.parentElement.insertBefore(this.placeHolderWrapper, this.inputElement);\n          }\n\n          attributes(this.placeHolderWrapper, {\n            'style': 'font-size: 14px; padding: 16px; margin-left: 0px; margin-right: 0px;'\n          });\n        }\n\n        this.placeHolderWrapper.innerHTML = this.placeholder;\n\n        if (this.inputElement.textContent.length === 0 && !isNullOrUndefined(this.inputElement.firstChild) && (this.inputElement.firstChild.nodeName === 'BR' || (this.inputElement.firstChild.nodeName === 'P' || this.inputElement.firstChild.nodeName === 'DIV') && !isNullOrUndefined(this.inputElement.firstChild.firstChild) && this.inputElement.firstChild.firstChild.nodeName === 'BR')) {\n          this.placeHolderWrapper.style.display = 'block';\n        } else {\n          this.placeHolderWrapper.style.display = 'none';\n        }\n      } else {\n        this.inputElement.setAttribute('placeholder', this.placeholder);\n      }\n    }\n  }\n\n  setWidth(width) {\n    if (width !== 'auto') {\n      setStyleAttribute(this.element, {\n        'width': formatUnit(this.width)\n      });\n    } else {\n      this.element.style.width = 'auto';\n    }\n  }\n\n  setCssClass(cssClass) {\n    if (!isNullOrUndefined(cssClass)) {\n      const allClassName = cssClass.split(' ');\n\n      for (let i = 0; i < allClassName.length; i++) {\n        if (allClassName[i].trim() !== '') {\n          this.element.classList.add(allClassName[i]);\n        }\n      }\n    }\n  }\n\n  updateRTL() {\n    this.notify(rtlMode, {\n      enableRtl: this.enableRtl\n    });\n\n    if (this.enableRtl) {\n      this.element.classList.add(CLS_RTL);\n    } else {\n      this.element.classList.remove(CLS_RTL);\n    }\n  }\n\n  updateReadOnly() {\n    this.notify(readOnlyMode, {\n      editPanel: this.inputElement,\n      mode: this.readonly\n    });\n  }\n  /**\n   * setReadOnly method\n   *\n   * @param {boolean} initial - specifies the boolean value\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  setReadOnly(initial) {\n    this.updateReadOnly();\n\n    if (!initial) {\n      if (this.readonly && this.enabled) {\n        this.unbindEvents();\n      } else if (this.enabled) {\n        this.bindEvents();\n      }\n    }\n  }\n  /**\n   * By default, prints all the pages of the RichTextEditor.\n   *\n   * @returns {void}\n   */\n\n\n  print() {\n    let printWind;\n    const printArgs = {\n      element: this.inputElement,\n      requestType: 'print',\n      cancel: false\n    };\n    this.trigger(actionBegin, printArgs, printingArgs => {\n      printWind = window.open('', 'print', 'height=' + window.outerHeight + ',width=' + window.outerWidth);\n\n      if (Browser.info.name === 'msie') {\n        printWind.resizeTo(screen.availWidth, screen.availHeight);\n      }\n\n      printWind = print(this.inputElement, printWind);\n\n      if (!printingArgs.cancel) {\n        const actionArgs = {\n          requestType: 'print'\n        };\n        this.trigger(actionComplete, actionArgs);\n      }\n    });\n  }\n  /**\n   * Refresh the view of the editor.\n   *\n   * @returns {void}\n   * @public\n   */\n\n\n  refreshUI() {\n    this.renderModule.refresh();\n  }\n  /**\n   * Shows the Rich Text Editor component in full-screen mode.\n   *\n   * @returns {void}\n   */\n\n\n  showFullScreen() {\n    this.fullScreenModule.showFullScreen();\n  }\n  /**\n   * Enables the give toolbar items in the Rich Text Editor component.\n   *\n   * @returns {void}\n   * @param {string | string[]} items - Specifies the single or collection of items\n   * @param {boolean} muteToolbarUpdate enable/disables the toolbar item status in RichTextEditor.\n   * that you want to be enable in Rich Text Editor’s Toolbar.\n   *\n   * @public\n   */\n\n\n  enableToolbarItem(items, muteToolbarUpdate) {\n    this.toolbarModule.enableTBarItems(this.getBaseToolbarObject(), items, true, muteToolbarUpdate);\n  }\n  /**\n   * Disables the given toolbar items in the Rich Text Editor component.\n   *\n   * @returns {void}\n   * @param {string | string[]} items - Specifies the single or collection of items\n   * @param {boolean} muteToolbarUpdate enable/disables the toolbar item status in RichTextEditor.\n   * that you want to be disable in Rich Text Editor’s Toolbar.\n   *\n   * @public\n   */\n\n\n  disableToolbarItem(items, muteToolbarUpdate) {\n    this.toolbarModule.enableTBarItems(this.getBaseToolbarObject(), items, false, muteToolbarUpdate);\n  }\n  /**\n   * Removes the give toolbar items from the Rich Text Editor component.\n   *\n   * @returns {void}\n   * @param {string | string[]} items - Specifies the single or collection of items\n   * that you want to be remove from Rich Text Editor’s Toolbar.\n   *\n   * @public\n   */\n\n\n  removeToolbarItem(items) {\n    this.toolbarModule.removeTBarItems(items);\n  }\n  /**\n   * Get the selected range from the RichTextEditor's content.\n   *\n   * @returns {void}\n   * @public\n   * @deprecated\n   */\n\n\n  getRange() {\n    return this.formatter.editorManager.nodeSelection.getRange(this.contentModule.getDocument());\n  }\n\n  initializeServices() {\n    this.serviceLocator.register('rendererFactory', new RendererFactory());\n    this.serviceLocator.register('rteLocale', this.localeObj = new L10n(this.getModuleName(), defaultLocale, this.locale));\n    this.serviceLocator.register('dialogRenderObject', new DialogRenderer(this));\n  }\n\n  RTERender() {\n    const rendererFactory = this.serviceLocator.getService('rendererFactory');\n    this.contentModule = rendererFactory.getRenderer(RenderType.Content);\n    this.fullScreenModule = new FullScreen(this);\n    this.enterKeyModule = new EnterKeyAction(this);\n    this.renderModule.render();\n    this.inputElement = this.contentModule.getEditPanel();\n    this.setHeight(this.height);\n    setAttributes(this.htmlAttributes, this, false, true);\n\n    if (this.iframeSettings) {\n      this.setIframeSettings();\n    }\n\n    this.setCssClass(this.cssClass);\n    this.updateEnable();\n    this.setPlaceHolder();\n    this.updateRTL();\n    this.updateReadOnly();\n    this.updatePanelValue();\n\n    if (this.enableHtmlEncode && !isNullOrUndefined(this.value)) {\n      this.setProperties({\n        value: this.encode(decode(this.value))\n      });\n    }\n  }\n\n  setIframeSettings() {\n    if (this.iframeSettings.resources) {\n      const styleSrc = this.iframeSettings.resources.styles;\n      const scriptSrc = this.iframeSettings.resources.scripts;\n\n      if (this.iframeSettings.resources.scripts.length > 0) {\n        this.InjectSheet(true, scriptSrc);\n      }\n\n      if (this.iframeSettings.resources.styles.length > 0) {\n        this.InjectSheet(false, styleSrc);\n      }\n    }\n\n    if (this.iframeSettings.attributes) {\n      setAttributes(this.iframeSettings.attributes, this, true, false);\n    }\n  }\n\n  InjectSheet(scriptSheet, srcList) {\n    try {\n      if (srcList && srcList.length > 0) {\n        const iFrame = this.contentModule.getDocument();\n        const target = iFrame.querySelector('head');\n\n        for (let i = 0; i < srcList.length; i++) {\n          if (scriptSheet) {\n            const scriptEle = this.createScriptElement();\n            scriptEle.src = srcList[i];\n            target.appendChild(scriptEle);\n          } else {\n            const styleEle = this.createStyleElement();\n            styleEle.href = srcList[i];\n            target.appendChild(styleEle);\n          }\n        }\n      }\n    } catch (e) {\n      return;\n    }\n  }\n\n  createScriptElement() {\n    const scriptEle = this.createElement('script', {\n      className: CLS_SCRIPT_SHEET\n    });\n    scriptEle.type = 'text/javascript';\n    return scriptEle;\n  }\n\n  createStyleElement() {\n    const styleEle = this.createElement('link', {\n      className: CLS_STYLE_SHEET\n    });\n    styleEle.rel = 'stylesheet';\n    return styleEle;\n  }\n\n  setValue() {\n    if (this.valueTemplate) {\n      if (typeof this.valueTemplate === 'string') {\n        this.setProperties({\n          value: this.valueTemplate\n        });\n      } else {\n        const compiledTemplate = compile(this.valueTemplate)(\"\", this, 'valueTemplate');\n\n        for (let i = 0; i < compiledTemplate.length; i++) {\n          const item = compiledTemplate[i];\n          append([item], this.element);\n        }\n\n        this.setProperties({\n          value: this.element.innerHTML.trim()\n        });\n      }\n    } else {\n      // eslint-disable-next-line\n      const innerHtml = !isNullOrUndefined(this.element.innerHTML) && this.element.innerHTML.replace(/<(\\/?|\\!?)(!--!--)>/g, '').trim();\n\n      if (innerHtml !== '') {\n        if (this.element.tagName === 'TEXTAREA') {\n          this.setProperties({\n            value: decode(innerHtml)\n          });\n        } else {\n          this.setProperties({\n            value: innerHtml\n          });\n        }\n      }\n    }\n  }\n\n  updateResizeFlag() {\n    this.isResizeInitialized = true;\n  }\n  /**\n   * Image max width calculation method\n   *\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  getInsertImgMaxWidth() {\n    const maxWidth = this.insertImageSettings.maxWidth; // eslint-disable-next-line\n\n    const imgPadding = 12;\n    const imgResizeBorder = 2;\n    const editEle = this.contentModule.getEditPanel();\n    const eleStyle = window.getComputedStyle(editEle);\n    const editEleMaxWidth = editEle.offsetWidth - (imgPadding + imgResizeBorder + parseFloat(eleStyle.paddingLeft.split('px')[0]) + parseFloat(eleStyle.paddingRight.split('px')[0]) + parseFloat(eleStyle.marginLeft.split('px')[0]) + parseFloat(eleStyle.marginRight.split('px')[0]));\n    return isNullOrUndefined(maxWidth) ? editEleMaxWidth : maxWidth;\n  }\n  /**\n   * setContentHeight method\n   *\n   * @param {string} target - specifies the target value.\n   * @param {boolean} isExpand - specifies  the bollean value.\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  setContentHeight(target, isExpand) {\n    let heightValue;\n    let topValue = 0;\n    let rteHeightPercent;\n    const heightPercent = typeof this.height === 'string' && this.height.indexOf('%') > -1;\n    const cntEle = this.sourceCodeModule.getPanel() && this.sourceCodeModule.getPanel().parentElement.style.display === 'block' ? this.sourceCodeModule.getPanel().parentElement : this.contentModule.getPanel();\n    let rteHeight = this.element.offsetHeight;\n\n    if (rteHeight === 0 && this.height !== 'auto' && !this.getToolbar()) {\n      rteHeight = parseInt(this.height, 10);\n\n      if (heightPercent) {\n        rteHeightPercent = this.height;\n      }\n    }\n\n    const tbHeight = this.getToolbar() ? this.toolbarModule.getToolbarHeight() : 0;\n    const rzHandle = this.element.querySelector('.' + CLS_RTE_RES_HANDLE);\n    const rzHeight = this.enableResize ? !isNullOrUndefined(rzHandle) ? rzHandle.offsetHeight + 8 : 0 : 0;\n    const expandPopHeight = this.getToolbar() ? this.toolbarModule.getExpandTBarPopHeight() : 0;\n\n    if (this.toolbarSettings.type === ToolbarType.Expand && isExpand && target !== 'preview') {\n      heightValue = this.height === 'auto' && rzHeight === 0 ? 'auto' : rteHeight - (tbHeight + expandPopHeight + rzHeight) + 'px';\n      topValue = !this.toolbarSettings.enableFloating ? expandPopHeight : 0;\n    } else {\n      if (this.height === 'auto' && !this.element.classList.contains('e-rte-full-screen') && !this.isResizeInitialized) {\n        heightValue = 'auto';\n      } else {\n        heightValue = heightPercent && rteHeightPercent ? rteHeightPercent : rteHeight - (tbHeight + rzHeight) + 'px';\n      }\n    }\n\n    if (target !== 'windowResize') {\n      if (this.iframeSettings.enable) {\n        if (heightValue !== 'auto') {\n          setStyleAttribute(cntEle, {\n            height: heightValue,\n            marginTop: topValue + 'px'\n          });\n        }\n      } else {\n        setStyleAttribute(cntEle, {\n          height: heightValue,\n          marginTop: topValue + 'px'\n        });\n      }\n    }\n\n    if (this.iframeSettings.enable && target === 'sourceCode') {\n      const codeElement = select('.' + CLS_RTE_CONTENT, this.element);\n      setStyleAttribute(codeElement, {\n        height: heightValue,\n        marginTop: topValue + 'px'\n      });\n    }\n\n    if (this.toolbarSettings.enableFloating && this.getToolbar() && !this.inlineMode.enable) {\n      const tbWrapHeight = (isExpand ? tbHeight + expandPopHeight : tbHeight) + 'px';\n      setStyleAttribute(this.getToolbar().parentElement, {\n        height: tbWrapHeight\n      });\n    }\n\n    if (rzHeight === 0) {\n      this.autoResize();\n    }\n  }\n  /**\n   * Retrieves the HTML from RichTextEditor.\n   *\n   * @returns {void}\n   * @public\n   */\n\n\n  getHtml() {\n    return this.serializeValue(this.contentModule.getEditPanel().innerHTML);\n  }\n  /**\n   * Retrieves the Rich Text Editor's XHTML validated HTML content when `enableXhtml` property is enabled.\n   *\n   * @returns {void}\n   * @public\n   */\n\n\n  getXhtml() {\n    let currentValue = this.value;\n\n    if (!isNullOrUndefined(currentValue) && this.enableXhtml) {\n      currentValue = this.htmlEditorModule.xhtmlValidation.selfEncloseValidation(currentValue);\n    }\n\n    return currentValue;\n  }\n  /**\n   * Shows the source HTML/MD markup.\n   *\n   * @returns {void}\n   * @public\n   */\n\n\n  showSourceCode() {\n    if (this.readonly) {\n      return;\n    }\n\n    this.notify(sourceCode, {});\n  }\n  /**\n   * Returns the maximum number of characters in the Rich Text Editor.\n   *\n   * @returns {void}\n   * @public\n   */\n\n\n  getCharCount() {\n    const htmlText = this.editorMode === 'Markdown' ? this.inputElement.value.trim() : this.inputElement.textContent.trim();\n    let htmlLength;\n\n    if (this.editorMode !== 'Markdown' && htmlText.indexOf('\\u200B') !== -1) {\n      htmlLength = htmlText.replace(/\\u200B/g, '').length;\n    } else {\n      htmlLength = htmlText.length;\n    }\n\n    return htmlLength;\n  }\n  /**\n   * Show the dialog in the Rich Text Editor.\n   *\n   * @param {DialogType} type - specifies the dialog type.\n   * @returns {void}\n   * @public\n   */\n\n\n  showDialog(type) {\n    if (type === DialogType.InsertLink) {\n      this.notify(showLinkDialog, {});\n    } else if (type === DialogType.InsertImage) {\n      this.notify(showImageDialog, {});\n    } else if (type === DialogType.InsertTable) {\n      this.notify(showTableDialog, {});\n    }\n  }\n  /**\n   * Close the dialog in the Rich Text Editor.\n   *\n   * @param {DialogType} type - specifies the dialog type.\n   * @returns {void}\n   * @public\n   */\n\n\n  closeDialog(type) {\n    if (type === DialogType.InsertLink) {\n      this.notify(closeLinkDialog, {});\n    } else if (type === DialogType.InsertImage) {\n      this.notify(closeImageDialog, {});\n    } else if (type === DialogType.InsertTable) {\n      this.notify(closeTableDialog, {});\n    }\n  }\n  /**\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  getBaseToolbarObject() {\n    let tbObj;\n\n    if (this.inlineMode.enable && (!Browser.isDevice || isIDevice())) {\n      tbObj = this.quickToolbarModule && this.quickToolbarModule.getInlineBaseToolbar();\n    } else {\n      tbObj = this.toolbarModule && this.toolbarModule.getBaseToolbar();\n    }\n\n    return tbObj;\n  }\n  /**\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  getToolbar() {\n    return this.toolbarModule ? this.toolbarModule.getToolbarElement() : null;\n  }\n  /**\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  getToolbarElement() {\n    return this.toolbarModule && this.toolbarModule.getToolbarElement();\n  }\n  /**\n   * @returns {void}\n   * getID method\n   *\n   * @hidden\n   * @deprecated\n   */\n\n\n  getID() {\n    return this.originalElement.tagName === 'TEXTAREA' ? this.valueContainer.id : this.element.id;\n  }\n\n  mouseDownHandler(e) {\n    const touch = e.touches ? e.changedTouches[0] : e;\n    addClass([this.element], [CLS_FOCUS]);\n    this.preventDefaultResize(e);\n    this.notify(mouseDown, {\n      args: e\n    });\n    this.clickPoints = {\n      clientX: touch.clientX,\n      clientY: touch.clientY\n    };\n  }\n\n  preventImgResize(e) {\n    if (e.target.nodeName.toLocaleLowerCase() === 'img') {\n      e.preventDefault();\n    }\n  }\n  /**\n   * preventDefaultResize method\n   *\n   * @param {FocusEvent} e - specifies the event.\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n  // eslint-disable-next-line\n\n\n  preventDefaultResize(e) {\n    if (Browser.info.name === 'msie') {\n      this.contentModule.getEditPanel().addEventListener('mscontrolselect', this.preventImgResize);\n    } else if (Browser.info.name === 'mozilla') {\n      this.contentModule.getDocument().execCommand('enableObjectResizing', false, 'false');\n      this.contentModule.getDocument().execCommand('enableInlineTableEditing', false, 'false');\n    }\n  } // eslint-disable-next-line\n\n\n  defaultResize(e) {\n    if (Browser.info.name === 'msie') {\n      this.contentModule.getEditPanel().removeEventListener('mscontrolselect', this.preventImgResize);\n    } else if (Browser.info.name === 'mozilla') {\n      this.contentModule.getDocument().execCommand('enableObjectResizing', true, 'true');\n      this.contentModule.getDocument().execCommand('enableInlineTableEditing', true, 'true');\n    }\n  }\n\n  resizeHandler() {\n    let isExpand = false;\n\n    if (!document.body.contains(this.element)) {\n      document.defaultView.removeEventListener('resize', this.onResizeHandler, true);\n      return;\n    }\n\n    if (this.toolbarSettings.enable && !this.inlineMode.enable) {\n      this.toolbarModule.refreshToolbarOverflow();\n      isExpand = this.toolbarModule.baseToolbar.toolbarObj.element.classList.contains(CLS_EXPAND_OPEN);\n    }\n\n    this.setContentHeight('windowResize', isExpand);\n    this.notify(windowResize, null);\n  }\n\n  scrollHandler(e) {\n    this.notify(scroll, {\n      args: e\n    });\n  }\n\n  contentScrollHandler(e) {\n    this.notify(contentscroll, {\n      args: e\n    });\n  }\n\n  focusHandler(e) {\n    if (!this.isRTE || this.isFocusOut) {\n      this.isRTE = this.isFocusOut ? false : true;\n      this.isFocusOut = false;\n      addClass([this.element], [CLS_FOCUS]);\n\n      if (this.editorMode === 'HTML') {\n        this.cloneValue = this.inputElement.innerHTML === '<p><br></p>' || this.inputElement.innerHTML === '<div><br></div>' || this.inputElement.innerHTML === '<br>' ? null : this.enableHtmlEncode ? this.encode(decode(this.inputElement.innerHTML)) : this.inputElement.innerHTML;\n      } else {\n        this.cloneValue = this.inputElement.value === '' ? null : this.inputElement.value;\n      }\n\n      const active = document.activeElement;\n\n      if (active === this.element || active === this.getToolbarElement() || active === this.contentModule.getEditPanel() || this.iframeSettings.enable && active === this.contentModule.getPanel() && e.target && !e.target.classList.contains('e-img-inner') && e.target && e.target.parentElement && !e.target.parentElement.classList.contains('e-img-wrap') || closest(active, '.e-rte-toolbar') === this.getToolbarElement()) {\n        this.contentModule.getEditPanel().focus();\n\n        if (!isNullOrUndefined(this.getToolbarElement())) {\n          this.getToolbarElement().setAttribute('tabindex', '-1');\n          const items = this.getToolbarElement().querySelectorAll('[tabindex=\"0\"]');\n\n          for (let i = 0; i < items.length; i++) {\n            items[i].setAttribute('tabindex', '-1');\n          }\n        }\n      }\n\n      this.preventDefaultResize(e);\n      this.trigger('focus', {\n        event: e,\n        isInteracted: Object.keys(e).length === 0 ? false : true\n      });\n\n      if (!isNullOrUndefined(this.saveInterval) && this.saveInterval > 0 && !this.autoSaveOnIdle) {\n        this.timeInterval = setInterval(this.updateValueOnIdle.bind(this), this.saveInterval);\n      }\n\n      EventHandler.add(document, 'mousedown', this.onDocumentClick, this);\n    }\n\n    if (!isNullOrUndefined(this.getToolbarElement())) {\n      const toolbarItem = this.getToolbarElement().querySelectorAll('input,select,button,a,[tabindex]');\n\n      for (let i = 0; i < toolbarItem.length; i++) {\n        if (!toolbarItem[i].classList.contains('e-rte-dropdown-btn') && !toolbarItem[i].classList.contains('e-insert-table-btn') && (!toolbarItem[i].hasAttribute('tabindex') || toolbarItem[i].getAttribute('tabindex') !== '-1')) {\n          toolbarItem[i].setAttribute('tabindex', '-1');\n        }\n      }\n    }\n  }\n\n  getUpdatedValue() {\n    let value;\n\n    if (!isNullOrUndefined(this.tableModule)) {\n      this.tableModule.removeResizeElement();\n    }\n\n    const getTextArea = this.element.querySelector('.e-rte-srctextarea');\n\n    if (this.editorMode === 'HTML') {\n      value = this.inputElement.innerHTML === '<p><br></p>' || this.inputElement.innerHTML === '<div><br></div>' || this.inputElement.innerHTML === '<br>' ? null : this.enableHtmlEncode ? this.encode(decode(this.inputElement.innerHTML)) : this.inputElement.innerHTML;\n\n      if (getTextArea && getTextArea.style.display === 'block') {\n        value = getTextArea.value;\n      }\n    } else {\n      value = this.inputElement.value === '' ? null : this.inputElement.value;\n    }\n\n    return value;\n  }\n\n  updateValueOnIdle() {\n    if (!isNullOrUndefined(this.tableModule) && !isNullOrUndefined(this.inputElement.querySelector('.e-table-box.e-rbox-select'))) {\n      return;\n    }\n\n    this.setProperties({\n      value: this.getUpdatedValue()\n    }, true);\n    this.valueContainer.value = this.value;\n    this.invokeChangeEvent();\n  }\n\n  updateIntervalValue() {\n    clearTimeout(this.idleInterval);\n    this.idleInterval = setTimeout(this.updateValueOnIdle.bind(this), 0);\n  }\n\n  updateStatus(e) {\n    if (!isNullOrUndefined(e.html) || !isNullOrUndefined(e.markdown)) {\n      const status = this.formatter.editorManager.undoRedoManager.getUndoStatus();\n      const eventArgs = {\n        undo: status.undo,\n        redo: status.redo,\n        html: e.html,\n        markdown: e.markdown\n      };\n      this.trigger(updatedToolbarStatus, eventArgs);\n    }\n  }\n\n  onDocumentClick(e) {\n    const target = e.target;\n    const rteElement = closest(target, '.' + CLS_RTE);\n\n    if (!this.element.contains(e.target) && document !== e.target && rteElement !== this.element && !closest(target, '[aria-owns=\"' + this.getID() + '\"]')) {\n      this.isBlur = true;\n      this.isRTE = false;\n    }\n\n    this.notify(docClick, {\n      args: e\n    });\n\n    if (e.detail > 3) {\n      e.preventDefault();\n    }\n  }\n\n  blurHandler(e) {\n    let trg = e.relatedTarget;\n\n    if (trg) {\n      const rteElement = closest(trg, '.' + CLS_RTE);\n\n      if (rteElement && rteElement === this.element) {\n        this.isBlur = false;\n\n        if (trg === this.getToolbarElement()) {\n          trg.setAttribute('tabindex', '-1');\n        }\n      } else if (closest(trg, '[aria-owns=\"' + this.getID() + '\"]')) {\n        this.isBlur = false;\n      } else {\n        this.isBlur = true;\n        trg = null;\n      }\n    }\n\n    if (this.isBlur && isNullOrUndefined(trg)) {\n      removeClass([this.element], [CLS_FOCUS]);\n      this.notify(focusChange, {});\n      const value = this.getUpdatedValue();\n      this.setProperties({\n        value: value\n      });\n      this.notify(toolbarRefresh, {\n        args: e,\n        documentNode: document\n      });\n      this.invokeChangeEvent();\n      this.isFocusOut = true;\n      this.isBlur = false;\n      dispatchEvent(this.valueContainer, 'focusout');\n      this.defaultResize(e);\n      this.trigger('blur', {\n        event: e,\n        isInteracted: Object.keys(e).length === 0 ? false : true\n      });\n\n      if (!isNullOrUndefined(this.timeInterval)) {\n        clearInterval(this.timeInterval);\n        this.timeInterval = null;\n      }\n\n      EventHandler.remove(document, 'mousedown', this.onDocumentClick);\n    } else {\n      this.isRTE = true;\n    }\n  }\n  /**\n   * invokeChangeEvent method\n   *\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  contentChanged() {\n    if (this.autoSaveOnIdle) {\n      if (!isNullOrUndefined(this.saveInterval)) {\n        clearTimeout(this.timeInterval);\n        this.timeInterval = setTimeout(this.updateIntervalValue.bind(this), this.saveInterval);\n      }\n    }\n  }\n  /**\n   * invokeChangeEvent method\n   *\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  invokeChangeEvent() {\n    let currentValue;\n\n    if (this.enableXhtml) {\n      currentValue = this.getXhtml();\n    } else {\n      currentValue = this.value;\n    }\n\n    const eventArgs = {\n      value: currentValue\n    };\n\n    if (this.value !== this.cloneValue) {\n      this.trigger('change', eventArgs);\n      this.cloneValue = this.value;\n    }\n  }\n  /**\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  wireScrollElementsEvents() {\n    this.scrollParentElements = getScrollableParent(this.element);\n\n    for (const element of this.scrollParentElements) {\n      EventHandler.add(element, 'scroll', this.scrollHandler, this);\n    }\n\n    if (!this.iframeSettings.enable) {\n      EventHandler.add(this.contentModule.getPanel(), 'scroll', this.contentScrollHandler, this);\n    }\n  }\n\n  wireContextEvent() {\n    if (this.quickToolbarSettings.showOnRightClick) {\n      EventHandler.add(this.inputElement, 'contextmenu', this.contextHandler, this);\n\n      if (Browser.isDevice) {\n        this.touchModule = new Touch(this.inputElement, {\n          tapHold: this.touchHandler.bind(this),\n          tapHoldThreshold: 500\n        });\n      }\n    }\n  }\n\n  unWireContextEvent() {\n    EventHandler.remove(this.inputElement, 'contextmenu', this.contextHandler);\n\n    if (Browser.isDevice && this.touchModule) {\n      this.touchModule.destroy();\n    }\n  }\n  /**\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  unWireScrollElementsEvents() {\n    this.scrollParentElements = getScrollableParent(this.element);\n\n    for (const element of this.scrollParentElements) {\n      EventHandler.remove(element, 'scroll', this.scrollHandler);\n    }\n\n    if (!this.iframeSettings.enable) {\n      EventHandler.remove(this.contentModule.getPanel(), 'scroll', this.contentScrollHandler);\n    }\n  }\n\n  touchHandler(e) {\n    this.notifyMouseUp(e.originalEvent);\n    this.triggerEditArea(e.originalEvent);\n  }\n\n  contextHandler(e) {\n    const closestElem = closest(e.target, 'a, table, img');\n\n    if (this.inlineMode.onSelection === false || !isNullOrUndefined(closestElem) && this.inputElement.contains(closestElem) && (closestElem.tagName === 'IMG' || closestElem.tagName === 'TABLE' || closestElem.tagName === 'A')) {\n      e.preventDefault();\n    }\n  }\n\n  resetHandler() {\n    const defaultValue = this.valueContainer.defaultValue.trim();\n    this.setProperties({\n      value: defaultValue === '' ? null : defaultValue\n    });\n  }\n  /**\n   * @returns {void}\n   * @hidden\n   * @deprecated\n   */\n\n\n  autoResize() {\n    if (this.height === 'auto') {\n      if (this.editorMode === 'Markdown') {\n        setTimeout(() => {\n          this.setAutoHeight(this.inputElement);\n        }, 0);\n      } else if (this.iframeSettings.enable) {\n        const iframeElement = this.element.querySelector('#' + this.getID() + '_rte-view');\n        setTimeout(() => {\n          this.setAutoHeight(iframeElement);\n        }, 100);\n        this.inputElement.style.overflow = 'hidden';\n      }\n    } else {\n      this.inputElement.style.overflow = null;\n    }\n  }\n\n  setAutoHeight(element) {\n    if (!isNullOrUndefined(element)) {\n      element.style.height = '';\n      element.style.height = this.inputElement.scrollHeight + 'px';\n      element.style.overflow = 'hidden';\n    }\n  }\n\n  wireEvents() {\n    this.element.addEventListener('focusin', this.onFocusHandler, true);\n    this.element.addEventListener('focusout', this.onBlurHandler, true);\n    this.on(contentChanged, this.contentChanged, this);\n    this.on(resizeInitialized, this.updateResizeFlag, this);\n    this.on(updateTbItemsStatus, this.updateStatus, this);\n\n    if (this.readonly && this.enabled) {\n      return;\n    }\n\n    this.bindEvents();\n  }\n\n  restrict(e) {\n    if (this.maxLength >= 0) {\n      const element = this.editorMode === 'Markdown' ? this.contentModule.getText() : e.currentTarget.textContent.trim();\n      const array = [8, 16, 17, 37, 38, 39, 40, 46, 65];\n      let arrayKey;\n\n      for (let i = 0; i <= array.length - 1; i++) {\n        if (e.which === array[i]) {\n          if (e.ctrlKey && e.which === 65) {\n            return;\n          } else if (e.which !== 65) {\n            arrayKey = array[i];\n            return;\n          }\n        }\n      }\n\n      if (element.length >= this.maxLength && this.maxLength !== -1 && e.which !== arrayKey) {\n        e.preventDefault();\n      }\n    }\n  }\n\n  bindEvents() {\n    this.keyboardModule = new KeyboardEvents$1(this.inputElement, {\n      keyAction: this.keyDown.bind(this),\n      keyConfigs: Object.assign({}, this.formatter.keyConfig, this.keyConfig),\n      eventName: 'keydown'\n    });\n    const formElement = closest(this.valueContainer, 'form');\n\n    if (formElement) {\n      EventHandler.add(formElement, 'reset', this.resetHandler, this);\n    }\n\n    EventHandler.add(this.inputElement, 'keyup', this.keyUp, this);\n    EventHandler.add(this.inputElement, 'paste', this.onPaste, this);\n    EventHandler.add(this.inputElement, Browser.touchEndEvent, debounce(this.mouseUp, 30), this);\n    EventHandler.add(this.inputElement, Browser.touchStartEvent, this.mouseDownHandler, this);\n    this.wireContextEvent();\n    this.formatter.editorManager.observer.on(KEY_DOWN_HANDLER, this.editorKeyDown, this);\n    this.element.ownerDocument.defaultView.addEventListener('resize', this.onResizeHandler, true);\n\n    if (this.iframeSettings.enable) {\n      EventHandler.add(this.inputElement, 'focusin', this.focusHandler, this);\n      EventHandler.add(this.inputElement, 'focusout', this.blurHandler, this);\n      EventHandler.add(this.inputElement.ownerDocument, 'scroll', this.contentScrollHandler, this);\n      EventHandler.add(this.inputElement.ownerDocument, Browser.touchStartEvent, this.onIframeMouseDown, this);\n    }\n\n    this.wireScrollElementsEvents();\n  }\n\n  onIframeMouseDown(e) {\n    this.isBlur = false;\n    this.notify(iframeMouseDown, e);\n  }\n\n  editorKeyDown(e) {\n    switch (e.event.action) {\n      case 'copy':\n        this.onCopy();\n        break;\n\n      case 'cut':\n        this.onCut();\n        break;\n    }\n\n    if (e.callBack && (e.event.action === 'copy' || e.event.action === 'cut' || e.event.action === 'delete')) {\n      e.callBack({\n        requestType: e.event.action,\n        editorMode: 'HTML',\n        event: e.event\n      });\n    }\n  }\n\n  unWireEvents() {\n    this.element.removeEventListener('focusin', this.onFocusHandler, true);\n    this.element.removeEventListener('focusout', this.onBlurHandler, true);\n    this.off(contentChanged, this.contentChanged);\n    this.off(resizeInitialized, this.updateResizeFlag);\n    this.off(updateTbItemsStatus, this.updateStatus);\n\n    if (this.readonly && this.enabled) {\n      return;\n    }\n\n    this.unbindEvents();\n  }\n\n  unbindEvents() {\n    if (this.keyboardModule) {\n      this.keyboardModule.destroy();\n    }\n\n    const formElement = closest(this.valueContainer, 'form');\n\n    if (formElement) {\n      EventHandler.remove(formElement, 'reset', this.resetHandler);\n    }\n\n    EventHandler.remove(this.inputElement, 'keyup', this.keyUp);\n    EventHandler.remove(this.inputElement, 'paste', this.onPaste);\n    EventHandler.remove(this.inputElement, Browser.touchEndEvent, debounce(this.mouseUp, 30));\n    EventHandler.remove(this.inputElement, Browser.touchStartEvent, this.mouseDownHandler);\n    this.unWireContextEvent();\n\n    if (this.formatter) {\n      this.formatter.editorManager.observer.off(KEY_DOWN_HANDLER, this.editorKeyDown);\n    }\n\n    this.element.ownerDocument.defaultView.removeEventListener('resize', this.onResizeHandler, true);\n\n    if (this.iframeSettings.enable) {\n      EventHandler.remove(this.inputElement, 'focusin', this.focusHandler);\n      EventHandler.remove(this.inputElement, 'focusout', this.blurHandler);\n      EventHandler.remove(this.inputElement.ownerDocument, 'scroll', this.contentScrollHandler);\n      EventHandler.remove(this.inputElement.ownerDocument, Browser.touchStartEvent, this.onIframeMouseDown);\n    }\n\n    this.unWireScrollElementsEvents();\n  }\n\n};\n\n__decorate$1([Complex({}, ToolbarSettings$1)], RichTextEditor.prototype, \"toolbarSettings\", void 0);\n\n__decorate$1([Complex({}, QuickToolbarSettings)], RichTextEditor.prototype, \"quickToolbarSettings\", void 0);\n\n__decorate$1([Complex({}, PasteCleanupSettings)], RichTextEditor.prototype, \"pasteCleanupSettings\", void 0);\n\n__decorate$1([Complex({}, IFrameSettings)], RichTextEditor.prototype, \"iframeSettings\", void 0);\n\n__decorate$1([Complex({}, ImageSettings)], RichTextEditor.prototype, \"insertImageSettings\", void 0);\n\n__decorate$1([Complex({}, TableSettings)], RichTextEditor.prototype, \"tableSettings\", void 0);\n\n__decorate$1([Property(0)], RichTextEditor.prototype, \"floatingToolbarOffset\", void 0);\n\n__decorate$1([Complex({}, InlineMode)], RichTextEditor.prototype, \"inlineMode\", void 0);\n\n__decorate$1([Complex({}, FileManagerSettings)], RichTextEditor.prototype, \"fileManagerSettings\", void 0);\n\n__decorate$1([Property('100%')], RichTextEditor.prototype, \"width\", void 0);\n\n__decorate$1([Property(false)], RichTextEditor.prototype, \"enablePersistence\", void 0);\n\n__decorate$1([Property(false)], RichTextEditor.prototype, \"enableResize\", void 0);\n\n__decorate$1([Property({})], RichTextEditor.prototype, \"htmlAttributes\", void 0);\n\n__decorate$1([Property(null)], RichTextEditor.prototype, \"placeholder\", void 0);\n\n__decorate$1([Property(false)], RichTextEditor.prototype, \"autoSaveOnIdle\", void 0);\n\n__decorate$1([Property(false)], RichTextEditor.prototype, \"readonly\", void 0);\n\n__decorate$1([Property(true)], RichTextEditor.prototype, \"enabled\", void 0);\n\n__decorate$1([Property(true)], RichTextEditor.prototype, \"enableHtmlSanitizer\", void 0);\n\n__decorate$1([Property(false)], RichTextEditor.prototype, \"enableHtmlEncode\", void 0);\n\n__decorate$1([Property(false)], RichTextEditor.prototype, \"enableXhtml\", void 0);\n\n__decorate$1([Property('auto')], RichTextEditor.prototype, \"height\", void 0);\n\n__decorate$1([Property(null)], RichTextEditor.prototype, \"cssClass\", void 0);\n\n__decorate$1([Property(null)], RichTextEditor.prototype, \"value\", void 0);\n\n__decorate$1([Property('P')], RichTextEditor.prototype, \"enterKey\", void 0);\n\n__decorate$1([Property('BR')], RichTextEditor.prototype, \"shiftEnterKey\", void 0);\n\n__decorate$1([Property(30)], RichTextEditor.prototype, \"undoRedoSteps\", void 0);\n\n__decorate$1([Property(300)], RichTextEditor.prototype, \"undoRedoTimer\", void 0);\n\n__decorate$1([Property('HTML')], RichTextEditor.prototype, \"editorMode\", void 0);\n\n__decorate$1([Property(null)], RichTextEditor.prototype, \"keyConfig\", void 0);\n\n__decorate$1([Property(false)], RichTextEditor.prototype, \"showCharCount\", void 0);\n\n__decorate$1([Property(false)], RichTextEditor.prototype, \"enableTabKey\", void 0);\n\n__decorate$1([Property(false)], RichTextEditor.prototype, \"enableAutoUrl\", void 0);\n\n__decorate$1([Property(-1)], RichTextEditor.prototype, \"maxLength\", void 0);\n\n__decorate$1([Complex({}, Format)], RichTextEditor.prototype, \"format\", void 0);\n\n__decorate$1([Complex({}, NumberFormatList)], RichTextEditor.prototype, \"numberFormatList\", void 0);\n\n__decorate$1([Complex({}, BulletFormatList)], RichTextEditor.prototype, \"bulletFormatList\", void 0);\n\n__decorate$1([Complex({}, FontFamily)], RichTextEditor.prototype, \"fontFamily\", void 0);\n\n__decorate$1([Complex({}, FontSize)], RichTextEditor.prototype, \"fontSize\", void 0);\n\n__decorate$1([Complex({}, FontColor)], RichTextEditor.prototype, \"fontColor\", void 0);\n\n__decorate$1([Complex({}, BackgroundColor)], RichTextEditor.prototype, \"backgroundColor\", void 0);\n\n__decorate$1([Property(null)], RichTextEditor.prototype, \"valueTemplate\", void 0);\n\n__decorate$1([Property(10000)], RichTextEditor.prototype, \"saveInterval\", void 0);\n\n__decorate$1([Event()], RichTextEditor.prototype, \"actionBegin\", void 0);\n\n__decorate$1([Event()], RichTextEditor.prototype, \"actionComplete\", void 0);\n\n__decorate$1([Event()], RichTextEditor.prototype, \"beforeDialogOpen\", void 0);\n\n__decorate$1([Event()], RichTextEditor.prototype, \"dialogOpen\", void 0);\n\n__decorate$1([Event()], RichTextEditor.prototype, \"beforeDialogClose\", void 0);\n\n__decorate$1([Event()], RichTextEditor.prototype, \"dialogClose\", void 0);\n\n__decorate$1([Event()], RichTextEditor.prototype, \"beforeQuickToolbarOpen\", void 0);\n\n__decorate$1([Event()], RichTextEditor.prototype, \"quickToolbarOpen\", void 0);\n\n__decorate$1([Event()], RichTextEditor.prototype, \"quickToolbarClose\", void 0);\n\n__decorate$1([Event()], RichTextEditor.prototype, \"toolbarStatusUpdate\", void 0);\n\n__decorate$1([Event()], RichTextEditor.prototype, \"updatedToolbarStatus\", void 0);\n\n__decorate$1([Event()], RichTextEditor.prototype, \"imageSelected\", void 0);\n\n__decorate$1([Event()], RichTextEditor.prototype, \"beforeImageUpload\", void 0);\n\n__decorate$1([Event()], RichTextEditor.prototype, \"imageUploading\", void 0);\n\n__decorate$1([Event()], RichTextEditor.prototype, \"imageUploadSuccess\", void 0);\n\n__decorate$1([Event()], RichTextEditor.prototype, \"imageUploadFailed\", void 0);\n\n__decorate$1([Event()], RichTextEditor.prototype, \"imageRemoving\", void 0);\n\n__decorate$1([Event()], RichTextEditor.prototype, \"afterImageDelete\", void 0);\n\n__decorate$1([Event()], RichTextEditor.prototype, \"created\", void 0);\n\n__decorate$1([Event()], RichTextEditor.prototype, \"destroyed\", void 0);\n\n__decorate$1([Event()], RichTextEditor.prototype, \"beforeSanitizeHtml\", void 0);\n\n__decorate$1([Event()], RichTextEditor.prototype, \"blur\", void 0);\n\n__decorate$1([Event()], RichTextEditor.prototype, \"toolbarClick\", void 0);\n\n__decorate$1([Event()], RichTextEditor.prototype, \"focus\", void 0);\n\n__decorate$1([Event()], RichTextEditor.prototype, \"change\", void 0);\n\n__decorate$1([Event()], RichTextEditor.prototype, \"resizing\", void 0);\n\n__decorate$1([Event()], RichTextEditor.prototype, \"resizeStart\", void 0);\n\n__decorate$1([Event()], RichTextEditor.prototype, \"resizeStop\", void 0);\n\n__decorate$1([Event()], RichTextEditor.prototype, \"beforePasteCleanup\", void 0);\n\n__decorate$1([Event()], RichTextEditor.prototype, \"afterPasteCleanup\", void 0);\n\n__decorate$1([Event()], RichTextEditor.prototype, \"beforeImageDrop\", void 0);\n\n__decorate$1([Property(null)], RichTextEditor.prototype, \"formatter\", void 0);\n\nRichTextEditor = __decorate$1([NotifyPropertyChanges], RichTextEditor);\n/**\n * Base export\n */\n\n/**\n * Services\n */\n\n/**\n * Rich Text Editor component exported items\n */\n\n/**\n * Base export\n */\n\n/**\n * Base export\n */\n\n/**\n * Base export\n */\n\n/**\n * Base export\n */\n\n/**\n * Export all markdown plugins\n */\n\n/**\n * Base export\n */\n\n/**\n * Export the common module\n */\n\n/**\n * Rich Text Editor component exported items\n */\n\nexport { Toolbar$2 as Toolbar, KeyboardEvents$1 as KeyboardEvents, BaseToolbar, BaseQuickToolbar, QuickToolbar, Count, ColorPickerInput, MarkdownToolbarStatus, ExecCommandCallBack, ToolbarAction, MarkdownEditor, HtmlEditor, PasteCleanup, Resize, DropDownButtons, FileManager$1 as FileManager, FullScreen, setAttributes, HtmlToolbarStatus, XhtmlValidation, HTMLFormatter, Formatter, MarkdownFormatter, ContentRender, Render, ToolbarRenderer, Link, Image, ViewSource, Table, DialogRenderer, IframeContentRender, MarkdownRender, PopupRenderer, RichTextEditor, RenderType, ToolbarType, DialogType, executeGroup, created, destroyed, load, initialLoad, contentChanged, initialEnd, iframeMouseDown, destroy, toolbarClick, toolbarRefresh, refreshBegin, toolbarUpdated, bindOnEnd, renderColorPicker, htmlToolbarClick, markdownToolbarClick, destroyColorPicker, modelChanged, keyUp, keyDown, mouseUp, toolbarCreated, toolbarRenderComplete, enableFullScreen, disableFullScreen, dropDownSelect, beforeDropDownItemRender, execCommandCallBack, imageToolbarAction, linkToolbarAction, windowResize, resizeStart, onResize, resizeStop, undo, redo, insertLink, unLink, editLink, openLink, actionBegin, actionComplete, updatedToolbarStatus, actionSuccess, updateToolbarItem, insertImage, insertCompleted, imageLeft, imageRight, imageCenter, imageBreak, imageInline, imageLink, imageAlt, imageDelete, imageCaption, imageSize, sourceCode, updateSource, toolbarOpen, beforeDropDownOpen, selectionSave, selectionRestore, expandPopupClick, count, contentFocus, contentBlur, mouseDown, sourceCodeMouseDown, editAreaClick, scroll, contentscroll, colorPickerChanged, tableColorPickerChanged, focusChange, selectAll$1 as selectAll, selectRange, getSelectedHtml, renderInlineToolbar, paste, imgModule, rtlMode, createTable, docClick, tableToolbarAction, checkUndo, readOnlyMode, pasteClean, enterHandler, beforeDialogOpen, clearDialogObj, dialogOpen, beforeDialogClose, dialogClose, beforeQuickToolbarOpen, quickToolbarOpen, quickToolbarClose, popupHide, imageSelected, imageUploading, imageUploadSuccess, imageUploadFailed, imageRemoving, afterImageDelete, drop, xhtmlValidation, beforeImageUpload, resizeInitialized, renderFileManager, beforeImageDrop, dynamicModule, beforePasteCleanup, afterPasteCleanup, updateTbItemsStatus, showLinkDialog, closeLinkDialog, showImageDialog, closeImageDialog, showTableDialog, closeTableDialog, CLS_RTE, CLS_RTL, CLS_CONTENT, CLS_DISABLED, CLS_SCRIPT_SHEET, CLS_STYLE_SHEET, CLS_TOOLBAR, CLS_TB_FIXED, CLS_TB_FLOAT, CLS_TB_ABS_FLOAT, CLS_INLINE, CLS_TB_INLINE, CLS_RTE_EXPAND_TB, CLS_FULL_SCREEN, CLS_QUICK_TB, CLS_POP, CLS_TB_STATIC, CLS_QUICK_POP, CLS_QUICK_DROPDOWN, CLS_IMAGE_POP, CLS_INLINE_POP, CLS_INLINE_DROPDOWN, CLS_DROPDOWN_POPUP, CLS_DROPDOWN_ICONS, CLS_DROPDOWN_ITEMS, CLS_DROPDOWN_BTN, CLS_RTE_CONTENT, CLS_TB_ITEM, CLS_TB_EXTENDED, CLS_TB_WRAP, CLS_POPUP, CLS_SEPARATOR, CLS_MINIMIZE, CLS_MAXIMIZE, CLS_BACK, CLS_SHOW, CLS_HIDE, CLS_VISIBLE, CLS_FOCUS, CLS_RM_WHITE_SPACE, CLS_IMGRIGHT, CLS_IMGLEFT, CLS_IMGCENTER, CLS_IMGBREAK, CLS_CAPTION, CLS_RTE_CAPTION, CLS_CAPINLINE, CLS_IMGINLINE, CLS_COUNT, CLS_WARNING, CLS_ERROR, CLS_ICONS, CLS_ACTIVE, CLS_EXPAND_OPEN, CLS_RTE_ELEMENTS, CLS_TB_BTN, CLS_HR_SEPARATOR, CLS_TB_IOS_FIX, CLS_LIST_PRIMARY_CONTENT, CLS_NUMBERFORMATLIST_TB_BTN, CLS_BULLETFORMATLIST_TB_BTN, CLS_FORMATS_TB_BTN, CLS_FONT_NAME_TB_BTN, CLS_FONT_SIZE_TB_BTN, CLS_FONT_COLOR_TARGET, CLS_BACKGROUND_COLOR_TARGET, CLS_COLOR_CONTENT, CLS_FONT_COLOR_DROPDOWN, CLS_BACKGROUND_COLOR_DROPDOWN, CLS_COLOR_PALETTE, CLS_FONT_COLOR_PICKER, CLS_BACKGROUND_COLOR_PICKER, CLS_RTE_READONLY, CLS_TABLE_SEL, CLS_TB_DASH_BOR, CLS_TB_ALT_BOR, CLS_TB_COL_RES, CLS_TB_ROW_RES, CLS_TB_BOX_RES, CLS_RTE_HIDDEN, CLS_RTE_PASTE_KEEP_FORMAT, CLS_RTE_PASTE_REMOVE_FORMAT, CLS_RTE_PASTE_PLAIN_FORMAT, CLS_RTE_PASTE_OK, CLS_RTE_PASTE_CANCEL, CLS_RTE_DIALOG_MIN_HEIGHT, CLS_RTE_RES_HANDLE, CLS_RTE_RES_EAST, CLS_RTE_IMAGE, CLS_RESIZE, CLS_IMG_FOCUS, CLS_RTE_DRAG_IMAGE, CLS_RTE_UPLOAD_POPUP, CLS_POPUP_OPEN, CLS_IMG_RESIZE, CLS_DROPAREA, CLS_IMG_INNER, CLS_UPLOAD_FILES, CLS_RTE_DIALOG_UPLOAD, CLS_RTE_RES_CNT, CLS_CUSTOM_TILE, CLS_NOCOLOR_ITEM, CLS_TABLE, CLS_TABLE_BORDER, CLS_RTE_TABLE_RESIZE, CLS_RTE_FIXED_TB_EXPAND, CLS_RTE_TB_ENABLED, getIndex, hasClass, getDropDownValue, isIDevice, getFormattedFontSize, pageYOffset, getTooltipText, setToolbarStatus, getCollection, getTBarItemsIndex, updateUndoRedoStatus, dispatchEvent, parseHtml, getTextNodesUnder, toObjectLowerCase, getEditValue, updateTextNode, getDefaultValue, isEditableValueEmpty, decode, sanitizeHelper, convertToBlob, getLocaleFontFormat, updateDropDownFontFormatLocale, ServiceLocator, RendererFactory, EditorManager, IMAGE, TABLE, LINK, INSERT_ROW, INSERT_COLUMN, DELETEROW, DELETECOLUMN, REMOVETABLE, TABLEHEADER, TABLE_VERTICAL_ALIGN, TABLE_MERGE, TABLE_VERTICAL_SPLIT, TABLE_HORIZONTAL_SPLIT, TABLE_MOVE, ALIGNMENT_TYPE, INDENT_TYPE, DEFAULT_TAG, BLOCK_TAGS, IGNORE_BLOCK_TAGS, TABLE_BLOCK_TAGS, SELECTION_TYPE, INSERTHTML_TYPE, INSERT_TEXT_TYPE, CLEAR_TYPE, CLASS_IMAGE_RIGHT, CLASS_IMAGE_LEFT, CLASS_IMAGE_CENTER, CLASS_IMAGE_BREAK, CLASS_CAPTION, CLASS_RTE_CAPTION, CLASS_CAPTION_INLINE, CLASS_IMAGE_INLINE, Lists, markerClassName, DOMNode, Alignments, Indents, Formats, LinkCommand, InsertMethods, InsertTextExec, InsertHtmlExec, InsertHtml, IsFormatted, MsWordPaste, NodeCutter, ImageCommand, SelectionCommands, SelectionBasedExec, ClearFormatExec, UndoRedoManager, TableCommand, statusCollection, ToolbarStatus, NodeSelection, MarkdownParser, LISTS_COMMAND, selectionCommand, LINK_COMMAND, CLEAR_COMMAND, MD_TABLE, ClearFormat, MDLists, MDFormats, MarkdownSelection, UndoRedoCommands, MDSelectionFormats, MDLink, MDTable, markdownFormatTags, markdownSelectionTags, markdownListsTags, htmlKeyConfig, markdownKeyConfig, pasteCleanupGroupingTags, listConversionFilters, selfClosingTags, KEY_DOWN, ACTION, FORMAT_TYPE, KEY_DOWN_HANDLER, LIST_TYPE, KEY_UP_HANDLER, KEY_UP, MODEL_CHANGED_PLUGIN, MODEL_CHANGED, MS_WORD_CLEANUP_PLUGIN, MS_WORD_CLEANUP, ON_BEGIN, SPACE_ACTION }; //# sourceMappingURL=ej2-richtexteditor.es2015.js.map","map":null,"metadata":{},"sourceType":"module"}