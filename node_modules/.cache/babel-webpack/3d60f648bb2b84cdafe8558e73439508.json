{"ast":null,"code":"import { ChangeDetectionStrategy, Component, ContentChild, ElementRef, Injector, NgModule, Renderer2, ViewContainerRef, forwardRef } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ComponentBase, ComponentMixins, FormBase, Template, setValue } from '@syncfusion/ej2-angular-base';\nimport { Count, FileManager, HtmlEditor, Image, Link, MarkdownEditor, PasteCleanup, QuickToolbar, Resize, RichTextEditor, Table, Toolbar } from '@syncfusion/ej2-richtexteditor';\nimport { CommonModule } from '@angular/common';\nimport * as ɵngcc0 from '@angular/core';\nconst _c0 = [\"valueTemplate\"];\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nconst inputs = ['autoSaveOnIdle', 'backgroundColor', 'bulletFormatList', 'cssClass', 'editorMode', 'enableAutoUrl', 'enableHtmlEncode', 'enableHtmlSanitizer', 'enablePersistence', 'enableResize', 'enableRtl', 'enableTabKey', 'enableXhtml', 'enabled', 'enterKey', 'fileManagerSettings', 'floatingToolbarOffset', 'fontColor', 'fontFamily', 'fontSize', 'format', 'formatter', 'height', 'htmlAttributes', 'iframeSettings', 'inlineMode', 'insertImageSettings', 'keyConfig', 'locale', 'maxLength', 'numberFormatList', 'pasteCleanupSettings', 'placeholder', 'quickToolbarSettings', 'readonly', 'saveInterval', 'shiftEnterKey', 'showCharCount', 'tableSettings', 'toolbarSettings', 'undoRedoSteps', 'undoRedoTimer', 'value', 'valueTemplate', 'width'];\nconst outputs = ['actionBegin', 'actionComplete', 'afterImageDelete', 'afterPasteCleanup', 'beforeDialogClose', 'beforeDialogOpen', 'beforeImageDrop', 'beforeImageUpload', 'beforePasteCleanup', 'beforeQuickToolbarOpen', 'beforeSanitizeHtml', 'blur', 'change', 'created', 'destroyed', 'dialogClose', 'dialogOpen', 'focus', 'imageRemoving', 'imageSelected', 'imageUploadFailed', 'imageUploadSuccess', 'imageUploading', 'quickToolbarClose', 'quickToolbarOpen', 'resizeStart', 'resizeStop', 'resizing', 'toolbarClick', 'toolbarStatusUpdate', 'updatedToolbarStatus', 'valueChange'];\nconst twoWays = ['value'];\n/**\n * `ejs-richtexteditor` represents the Angular richtexteditor Component.\n * ```html\n * <ejs-richtexteditor></ejs-richtexteditor>\n * ```\n */\n\nlet RichTextEditorComponent = RichTextEditorComponent_1 = class RichTextEditorComponent extends RichTextEditor {\n  /**\n   * @param {?} ngEle\n   * @param {?} srenderer\n   * @param {?} viewContainerRef\n   * @param {?} injector\n   */\n  constructor(ngEle, srenderer, viewContainerRef, injector) {\n    super();\n    this.ngEle = ngEle;\n    this.srenderer = srenderer;\n    this.viewContainerRef = viewContainerRef;\n    this.injector = injector;\n    this.skipFromEvent = true;\n    this.element = this.ngEle.nativeElement;\n    this.injectedModules = this.injectedModules || [];\n\n    try {\n      let mod = this.injector.get('RichTextEditorToolbar');\n\n      if (this.injectedModules.indexOf(mod) === -1) {\n        this.injectedModules.push(mod);\n      }\n    } catch (_a) {}\n\n    try {\n      let mod = this.injector.get('RichTextEditorLink');\n\n      if (this.injectedModules.indexOf(mod) === -1) {\n        this.injectedModules.push(mod);\n      }\n    } catch (_b) {}\n\n    try {\n      let mod = this.injector.get('RichTextEditorImage');\n\n      if (this.injectedModules.indexOf(mod) === -1) {\n        this.injectedModules.push(mod);\n      }\n    } catch (_c) {}\n\n    try {\n      let mod = this.injector.get('RichTextEditorCount');\n\n      if (this.injectedModules.indexOf(mod) === -1) {\n        this.injectedModules.push(mod);\n      }\n    } catch (_d) {}\n\n    try {\n      let mod = this.injector.get('RichTextEditorQuickToolbar');\n\n      if (this.injectedModules.indexOf(mod) === -1) {\n        this.injectedModules.push(mod);\n      }\n    } catch (_e) {}\n\n    try {\n      let mod = this.injector.get('RichTextEditorHtmlEditor');\n\n      if (this.injectedModules.indexOf(mod) === -1) {\n        this.injectedModules.push(mod);\n      }\n    } catch (_f) {}\n\n    try {\n      let mod = this.injector.get('RichTextEditorMarkdownEditor');\n\n      if (this.injectedModules.indexOf(mod) === -1) {\n        this.injectedModules.push(mod);\n      }\n    } catch (_g) {}\n\n    try {\n      let mod = this.injector.get('RichTextEditorTable');\n\n      if (this.injectedModules.indexOf(mod) === -1) {\n        this.injectedModules.push(mod);\n      }\n    } catch (_h) {}\n\n    try {\n      let mod = this.injector.get('RichTextEditorPasteCleanup');\n\n      if (this.injectedModules.indexOf(mod) === -1) {\n        this.injectedModules.push(mod);\n      }\n    } catch (_j) {}\n\n    try {\n      let mod = this.injector.get('RichTextEditorResize');\n\n      if (this.injectedModules.indexOf(mod) === -1) {\n        this.injectedModules.push(mod);\n      }\n    } catch (_k) {}\n\n    try {\n      let mod = this.injector.get('RichTextEditorFileManager');\n\n      if (this.injectedModules.indexOf(mod) === -1) {\n        this.injectedModules.push(mod);\n      }\n    } catch (_l) {}\n\n    this.registerEvents(outputs);\n    this.addTwoWay.call(this, twoWays);\n    setValue('currentInstance', this, this.viewContainerRef);\n    this.formContext = new FormBase();\n    this.formCompContext = new ComponentBase();\n  }\n  /**\n   * @param {?} registerFunction\n   * @return {?}\n   */\n\n\n  registerOnChange(registerFunction) {}\n  /**\n   * @param {?} registerFunction\n   * @return {?}\n   */\n\n\n  registerOnTouched(registerFunction) {}\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  writeValue(value) {}\n  /**\n   * @param {?} disabled\n   * @return {?}\n   */\n\n\n  setDisabledState(disabled) {}\n  /**\n   * @return {?}\n   */\n\n\n  ngOnInit() {\n    this.formCompContext.ngOnInit(this);\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngAfterViewInit() {\n    this.formContext.ngAfterViewInit(this);\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnDestroy() {\n    this.formCompContext.ngOnDestroy(this);\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngAfterContentChecked() {\n    this.formCompContext.ngAfterContentChecked(this);\n  }\n\n};\n\nRichTextEditorComponent.ɵfac = function RichTextEditorComponent_Factory(t) {\n  return new (t || RichTextEditorComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector));\n};\n\nRichTextEditorComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: RichTextEditorComponent,\n  selectors: [[\"ejs-richtexteditor\"]],\n  contentQueries: function RichTextEditorComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, _c0, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.valueTemplate = _t.first);\n    }\n  },\n  inputs: {\n    autoSaveOnIdle: \"autoSaveOnIdle\",\n    backgroundColor: \"backgroundColor\",\n    bulletFormatList: \"bulletFormatList\",\n    cssClass: \"cssClass\",\n    editorMode: \"editorMode\",\n    enableAutoUrl: \"enableAutoUrl\",\n    enableHtmlEncode: \"enableHtmlEncode\",\n    enableHtmlSanitizer: \"enableHtmlSanitizer\",\n    enablePersistence: \"enablePersistence\",\n    enableResize: \"enableResize\",\n    enableRtl: \"enableRtl\",\n    enableTabKey: \"enableTabKey\",\n    enableXhtml: \"enableXhtml\",\n    enabled: \"enabled\",\n    enterKey: \"enterKey\",\n    fileManagerSettings: \"fileManagerSettings\",\n    floatingToolbarOffset: \"floatingToolbarOffset\",\n    fontColor: \"fontColor\",\n    fontFamily: \"fontFamily\",\n    fontSize: \"fontSize\",\n    format: \"format\",\n    formatter: \"formatter\",\n    height: \"height\",\n    htmlAttributes: \"htmlAttributes\",\n    iframeSettings: \"iframeSettings\",\n    inlineMode: \"inlineMode\",\n    insertImageSettings: \"insertImageSettings\",\n    keyConfig: \"keyConfig\",\n    locale: \"locale\",\n    maxLength: \"maxLength\",\n    numberFormatList: \"numberFormatList\",\n    pasteCleanupSettings: \"pasteCleanupSettings\",\n    placeholder: \"placeholder\",\n    quickToolbarSettings: \"quickToolbarSettings\",\n    readonly: \"readonly\",\n    saveInterval: \"saveInterval\",\n    shiftEnterKey: \"shiftEnterKey\",\n    showCharCount: \"showCharCount\",\n    tableSettings: \"tableSettings\",\n    toolbarSettings: \"toolbarSettings\",\n    undoRedoSteps: \"undoRedoSteps\",\n    undoRedoTimer: \"undoRedoTimer\",\n    value: \"value\",\n    valueTemplate: \"valueTemplate\",\n    width: \"width\"\n  },\n  outputs: {\n    actionBegin: \"actionBegin\",\n    actionComplete: \"actionComplete\",\n    afterImageDelete: \"afterImageDelete\",\n    afterPasteCleanup: \"afterPasteCleanup\",\n    beforeDialogClose: \"beforeDialogClose\",\n    beforeDialogOpen: \"beforeDialogOpen\",\n    beforeImageDrop: \"beforeImageDrop\",\n    beforeImageUpload: \"beforeImageUpload\",\n    beforePasteCleanup: \"beforePasteCleanup\",\n    beforeQuickToolbarOpen: \"beforeQuickToolbarOpen\",\n    beforeSanitizeHtml: \"beforeSanitizeHtml\",\n    blur: \"blur\",\n    change: \"change\",\n    created: \"created\",\n    destroyed: \"destroyed\",\n    dialogClose: \"dialogClose\",\n    dialogOpen: \"dialogOpen\",\n    focus: \"focus\",\n    imageRemoving: \"imageRemoving\",\n    imageSelected: \"imageSelected\",\n    imageUploadFailed: \"imageUploadFailed\",\n    imageUploadSuccess: \"imageUploadSuccess\",\n    imageUploading: \"imageUploading\",\n    quickToolbarClose: \"quickToolbarClose\",\n    quickToolbarOpen: \"quickToolbarOpen\",\n    resizeStart: \"resizeStart\",\n    resizeStop: \"resizeStop\",\n    resizing: \"resizing\",\n    toolbarClick: \"toolbarClick\",\n    toolbarStatusUpdate: \"toolbarStatusUpdate\",\n    updatedToolbarStatus: \"updatedToolbarStatus\",\n    valueChange: \"valueChange\"\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => RichTextEditorComponent_1),\n    multi: true\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 0,\n  vars: 0,\n  template: function RichTextEditorComponent_Template(rf, ctx) {},\n  encapsulation: 2,\n  changeDetection: 0\n});\n/**\n * @nocollapse\n */\n\nRichTextEditorComponent.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: Renderer2\n}, {\n  type: ViewContainerRef\n}, {\n  type: Injector\n}];\n\nRichTextEditorComponent.propDecorators = {\n  'valueTemplate': [{\n    type: ContentChild,\n    args: ['valueTemplate']\n  }]\n};\n\n__decorate([Template(), __metadata(\"design:type\", Object)], RichTextEditorComponent.prototype, \"valueTemplate\", void 0);\n\nRichTextEditorComponent = RichTextEditorComponent_1 = __decorate([ComponentMixins([ComponentBase, FormBase]), __metadata(\"design:paramtypes\", [ElementRef, Renderer2, ViewContainerRef, Injector])], RichTextEditorComponent);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar RichTextEditorComponent_1;\n/**\n * NgModule definition for the RichTextEditor component.\n */\n\nlet RichTextEditorModule = /*#__PURE__*/(() => {\n  class RichTextEditorModule {}\n\n  RichTextEditorModule.ɵfac = function RichTextEditorModule_Factory(t) {\n    return new (t || RichTextEditorModule)();\n  };\n\n  RichTextEditorModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: RichTextEditorModule\n  });\n  RichTextEditorModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule]]\n  });\n  /**\n   * @nocollapse\n   */\n\n  return RichTextEditorModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(RichTextEditorModule, {\n    declarations: function () {\n      return [RichTextEditorComponent];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [RichTextEditorComponent];\n    }\n  });\n})();\n\nconst ToolbarService = {\n  provide: 'RichTextEditorToolbar',\n  useValue: Toolbar\n};\nconst LinkService = {\n  provide: 'RichTextEditorLink',\n  useValue: Link\n};\nconst ImageService = {\n  provide: 'RichTextEditorImage',\n  useValue: Image\n};\nconst CountService = {\n  provide: 'RichTextEditorCount',\n  useValue: Count\n};\nconst QuickToolbarService = {\n  provide: 'RichTextEditorQuickToolbar',\n  useValue: QuickToolbar\n};\nconst HtmlEditorService = {\n  provide: 'RichTextEditorHtmlEditor',\n  useValue: HtmlEditor\n};\nconst MarkdownEditorService = {\n  provide: 'RichTextEditorMarkdownEditor',\n  useValue: MarkdownEditor\n};\nconst TableService = {\n  provide: 'RichTextEditorTable',\n  useValue: Table\n};\nconst PasteCleanupService = {\n  provide: 'RichTextEditorPasteCleanup',\n  useValue: PasteCleanup\n};\nconst ResizeService = {\n  provide: 'RichTextEditorResize',\n  useValue: Resize\n};\nconst FileManagerService = {\n  provide: 'RichTextEditorFileManager',\n  useValue: FileManager\n};\n/**\n * NgModule definition for the RichTextEditor component with providers.\n */\n\nlet RichTextEditorAllModule = /*#__PURE__*/(() => {\n  class RichTextEditorAllModule {}\n\n  RichTextEditorAllModule.ɵfac = function RichTextEditorAllModule_Factory(t) {\n    return new (t || RichTextEditorAllModule)();\n  };\n\n  RichTextEditorAllModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: RichTextEditorAllModule\n  });\n  RichTextEditorAllModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [ToolbarService, LinkService, ImageService, CountService, QuickToolbarService, HtmlEditorService, MarkdownEditorService, TableService, PasteCleanupService, ResizeService, FileManagerService],\n    imports: [[CommonModule, RichTextEditorModule], RichTextEditorModule]\n  });\n  /**\n   * @nocollapse\n   */\n\n  return RichTextEditorAllModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(RichTextEditorAllModule, {\n    imports: function () {\n      return [CommonModule, RichTextEditorModule];\n    },\n    exports: function () {\n      return [RichTextEditorModule];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { RichTextEditorComponent, RichTextEditorModule, RichTextEditorAllModule, ToolbarService, LinkService, ImageService, CountService, QuickToolbarService, HtmlEditorService, MarkdownEditorService, TableService, PasteCleanupService, ResizeService, FileManagerService, inputs as ɵa, outputs as ɵb };\nexport { Toolbar, KeyboardEvents, BaseToolbar, BaseQuickToolbar, QuickToolbar, Count, ColorPickerInput, MarkdownToolbarStatus, ExecCommandCallBack, ToolbarAction, MarkdownEditor, HtmlEditor, PasteCleanup, Resize, DropDownButtons, FileManager, FullScreen, setAttributes, HtmlToolbarStatus, XhtmlValidation, HTMLFormatter, Formatter, MarkdownFormatter, ContentRender, Render, ToolbarRenderer, Link, Image, ViewSource, Table, DialogRenderer, IframeContentRender, MarkdownRender, PopupRenderer, RichTextEditor, RenderType, ToolbarType, DialogType, executeGroup, created, destroyed, load, initialLoad, contentChanged, initialEnd, iframeMouseDown, destroy, toolbarClick, toolbarRefresh, refreshBegin, toolbarUpdated, bindOnEnd, renderColorPicker, htmlToolbarClick, markdownToolbarClick, destroyColorPicker, modelChanged, keyUp, keyDown, mouseUp, toolbarCreated, toolbarRenderComplete, enableFullScreen, disableFullScreen, dropDownSelect, beforeDropDownItemRender, execCommandCallBack, imageToolbarAction, linkToolbarAction, windowResize, resizeStart, onResize, resizeStop, undo, redo, insertLink, unLink, editLink, openLink, actionBegin, actionComplete, updatedToolbarStatus, actionSuccess, updateToolbarItem, insertImage, insertCompleted, imageLeft, imageRight, imageCenter, imageBreak, imageInline, imageLink, imageAlt, imageDelete, imageCaption, imageSize, sourceCode, updateSource, toolbarOpen, beforeDropDownOpen, selectionSave, selectionRestore, expandPopupClick, count, contentFocus, contentBlur, mouseDown, sourceCodeMouseDown, editAreaClick, scroll, contentscroll, colorPickerChanged, tableColorPickerChanged, focusChange, selectAll, selectRange, getSelectedHtml, renderInlineToolbar, paste, imgModule, rtlMode, createTable, docClick, tableToolbarAction, checkUndo, readOnlyMode, pasteClean, enterHandler, beforeDialogOpen, clearDialogObj, dialogOpen, beforeDialogClose, dialogClose, beforeQuickToolbarOpen, quickToolbarOpen, quickToolbarClose, popupHide, imageSelected, imageUploading, imageUploadSuccess, imageUploadFailed, imageRemoving, afterImageDelete, drop, xhtmlValidation, beforeImageUpload, resizeInitialized, renderFileManager, beforeImageDrop, dynamicModule, beforePasteCleanup, afterPasteCleanup, updateTbItemsStatus, showLinkDialog, closeLinkDialog, showImageDialog, closeImageDialog, showTableDialog, closeTableDialog, CLS_RTE, CLS_RTL, CLS_CONTENT, CLS_DISABLED, CLS_SCRIPT_SHEET, CLS_STYLE_SHEET, CLS_TOOLBAR, CLS_TB_FIXED, CLS_TB_FLOAT, CLS_TB_ABS_FLOAT, CLS_INLINE, CLS_TB_INLINE, CLS_RTE_EXPAND_TB, CLS_FULL_SCREEN, CLS_QUICK_TB, CLS_POP, CLS_TB_STATIC, CLS_QUICK_POP, CLS_QUICK_DROPDOWN, CLS_IMAGE_POP, CLS_INLINE_POP, CLS_INLINE_DROPDOWN, CLS_DROPDOWN_POPUP, CLS_DROPDOWN_ICONS, CLS_DROPDOWN_ITEMS, CLS_DROPDOWN_BTN, CLS_RTE_CONTENT, CLS_TB_ITEM, CLS_TB_EXTENDED, CLS_TB_WRAP, CLS_POPUP, CLS_SEPARATOR, CLS_MINIMIZE, CLS_MAXIMIZE, CLS_BACK, CLS_SHOW, CLS_HIDE, CLS_VISIBLE, CLS_FOCUS, CLS_RM_WHITE_SPACE, CLS_IMGRIGHT, CLS_IMGLEFT, CLS_IMGCENTER, CLS_IMGBREAK, CLS_CAPTION, CLS_RTE_CAPTION, CLS_CAPINLINE, CLS_IMGINLINE, CLS_COUNT, CLS_WARNING, CLS_ERROR, CLS_ICONS, CLS_ACTIVE, CLS_EXPAND_OPEN, CLS_RTE_ELEMENTS, CLS_TB_BTN, CLS_HR_SEPARATOR, CLS_TB_IOS_FIX, CLS_LIST_PRIMARY_CONTENT, CLS_NUMBERFORMATLIST_TB_BTN, CLS_BULLETFORMATLIST_TB_BTN, CLS_FORMATS_TB_BTN, CLS_FONT_NAME_TB_BTN, CLS_FONT_SIZE_TB_BTN, CLS_FONT_COLOR_TARGET, CLS_BACKGROUND_COLOR_TARGET, CLS_COLOR_CONTENT, CLS_FONT_COLOR_DROPDOWN, CLS_BACKGROUND_COLOR_DROPDOWN, CLS_COLOR_PALETTE, CLS_FONT_COLOR_PICKER, CLS_BACKGROUND_COLOR_PICKER, CLS_RTE_READONLY, CLS_TABLE_SEL, CLS_TB_DASH_BOR, CLS_TB_ALT_BOR, CLS_TB_COL_RES, CLS_TB_ROW_RES, CLS_TB_BOX_RES, CLS_RTE_HIDDEN, CLS_RTE_PASTE_KEEP_FORMAT, CLS_RTE_PASTE_REMOVE_FORMAT, CLS_RTE_PASTE_PLAIN_FORMAT, CLS_RTE_PASTE_OK, CLS_RTE_PASTE_CANCEL, CLS_RTE_DIALOG_MIN_HEIGHT, CLS_RTE_RES_HANDLE, CLS_RTE_RES_EAST, CLS_RTE_IMAGE, CLS_RESIZE, CLS_IMG_FOCUS, CLS_RTE_DRAG_IMAGE, CLS_RTE_UPLOAD_POPUP, CLS_POPUP_OPEN, CLS_IMG_RESIZE, CLS_DROPAREA, CLS_IMG_INNER, CLS_UPLOAD_FILES, CLS_RTE_DIALOG_UPLOAD, CLS_RTE_RES_CNT, CLS_CUSTOM_TILE, CLS_NOCOLOR_ITEM, CLS_TABLE, CLS_TABLE_BORDER, CLS_RTE_TABLE_RESIZE, CLS_RTE_FIXED_TB_EXPAND, CLS_RTE_TB_ENABLED, getIndex, hasClass, getDropDownValue, isIDevice, getFormattedFontSize, pageYOffset, getTooltipText, setToolbarStatus, getCollection, getTBarItemsIndex, updateUndoRedoStatus, dispatchEvent, parseHtml, getTextNodesUnder, toObjectLowerCase, getEditValue, updateTextNode, getDefaultValue, isEditableValueEmpty, decode, sanitizeHelper, convertToBlob, getLocaleFontFormat, updateDropDownFontFormatLocale, ServiceLocator, RendererFactory, EditorManager, IMAGE, TABLE, LINK, INSERT_ROW, INSERT_COLUMN, DELETEROW, DELETECOLUMN, REMOVETABLE, TABLEHEADER, TABLE_VERTICAL_ALIGN, TABLE_MERGE, TABLE_VERTICAL_SPLIT, TABLE_HORIZONTAL_SPLIT, TABLE_MOVE, ALIGNMENT_TYPE, INDENT_TYPE, DEFAULT_TAG, BLOCK_TAGS, IGNORE_BLOCK_TAGS, TABLE_BLOCK_TAGS, SELECTION_TYPE, INSERTHTML_TYPE, INSERT_TEXT_TYPE, CLEAR_TYPE, CLASS_IMAGE_RIGHT, CLASS_IMAGE_LEFT, CLASS_IMAGE_CENTER, CLASS_IMAGE_BREAK, CLASS_CAPTION, CLASS_RTE_CAPTION, CLASS_CAPTION_INLINE, CLASS_IMAGE_INLINE, Lists, markerClassName, DOMNode, Alignments, Indents, Formats, LinkCommand, InsertMethods, InsertTextExec, InsertHtmlExec, InsertHtml, IsFormatted, MsWordPaste, NodeCutter, ImageCommand, SelectionCommands, SelectionBasedExec, ClearFormatExec, UndoRedoManager, TableCommand, statusCollection, ToolbarStatus, NodeSelection, MarkdownParser, LISTS_COMMAND, selectionCommand, LINK_COMMAND, CLEAR_COMMAND, MD_TABLE, ClearFormat, MDLists, MDFormats, MarkdownSelection, UndoRedoCommands, MDSelectionFormats, MDLink, MDTable, markdownFormatTags, markdownSelectionTags, markdownListsTags, htmlKeyConfig, markdownKeyConfig, pasteCleanupGroupingTags, listConversionFilters, selfClosingTags, KEY_DOWN, ACTION, FORMAT_TYPE, KEY_DOWN_HANDLER, LIST_TYPE, KEY_UP_HANDLER, KEY_UP, MODEL_CHANGED_PLUGIN, MODEL_CHANGED, MS_WORD_CLEANUP_PLUGIN, MS_WORD_CLEANUP, ON_BEGIN, SPACE_ACTION } from '@syncfusion/ej2-richtexteditor'; //# sourceMappingURL=ej2-angular-richtexteditor.js.map","map":null,"metadata":{},"sourceType":"module"}